diff --git a/.gitignore b/.gitignore
old mode 100644
new mode 100755
diff --git a/.travis.yml b/.travis.yml
old mode 100644
new mode 100755
diff --git a/AUTHORS b/AUTHORS
old mode 100644
new mode 100755
diff --git a/CONTRIBUTING b/CONTRIBUTING
old mode 100644
new mode 100755
diff --git a/ChangeLog b/ChangeLog
old mode 100644
new mode 100755
diff --git a/Copyright b/Copyright
old mode 100644
new mode 100755
diff --git a/DOCBparser.c b/DOCBparser.c
old mode 100644
new mode 100755
diff --git a/HTMLparser.c b/HTMLparser.c
old mode 100644
new mode 100755
index 6871f224..93796cae
--- a/HTMLparser.c
+++ b/HTMLparser.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * HTMLparser.c : an HTML 4.0 non-verifying parser
  *
@@ -1994,8 +1998,35 @@ UTF8ToHtml(unsigned char* out, int *outlen,
     unsigned int c, d;
     int trailing;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);
-    if (in == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2042]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2042\n");
+      else
+        fprintf(stderr, "reached bug index 2042\n");
+    }
+    if ((!FIXREVERTER[2042] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2043]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2043\n");
+      else
+        fprintf(stderr, "reached bug index 2043\n");
+    }
+    if ((!FIXREVERTER[2043] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
 	 * initialization nothing to do
 	 */
@@ -2003,6 +2034,9 @@ UTF8ToHtml(unsigned char* out, int *outlen,
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend = in + (*inlen);
     outend = out + (*outlen);
     while (in < inend) {
@@ -2036,8 +2070,23 @@ UTF8ToHtml(unsigned char* out, int *outlen,
 
 	/* assertion: c is a single UTF-4 value */
 	if (c < 0x80) {
-	    if (out + 1 >= outend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2044]) {
+	      if ((out + 1 >= outend ) && !(0))
+	        fprintf(stderr, "triggered bug index 2044\n");
+	      else
+	        fprintf(stderr, "reached bug index 2044\n");
+	    }
+	    if ((!FIXREVERTER[2044] && (out + 1 >= outend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    *out++ = c;
 	} else {
 	    int len;
@@ -2316,10 +2365,25 @@ htmlNewDocNoDtD(const xmlChar *URI, const xmlChar *ExternalID) {
      * Allocate a new document and fill the fields.
      */
     cur = (xmlDocPtr) xmlMalloc(sizeof(xmlDoc));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2051]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2051\n");
+      else
+        fprintf(stderr, "reached bug index 2051\n");
+    }
+    if ((!FIXREVERTER[2051] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	htmlErrMemory(NULL, "HTML document creation failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlDoc));
 
     cur->type = XML_HTML_DOCUMENT_NODE;
diff --git a/HTMLtree.c b/HTMLtree.c
old mode 100644
new mode 100755
diff --git a/INSTALL.libxml2 b/INSTALL.libxml2
old mode 100644
new mode 100755
diff --git a/MAINTAINERS b/MAINTAINERS
old mode 100644
new mode 100755
diff --git a/Makefile.am b/Makefile.am
old mode 100644
new mode 100755
diff --git a/Makefile.tests b/Makefile.tests
old mode 100644
new mode 100755
diff --git a/Makefile.win b/Makefile.win
old mode 100644
new mode 100755
diff --git a/NEWS b/NEWS
old mode 100644
new mode 100755
diff --git a/README b/README
old mode 100644
new mode 100755
diff --git a/README.cvs-commits b/README.cvs-commits
old mode 100644
new mode 100755
diff --git a/README.tests b/README.tests
old mode 100644
new mode 100755
diff --git a/README.zOS b/README.zOS
old mode 100644
new mode 100755
diff --git a/SAX.c b/SAX.c
old mode 100644
new mode 100755
diff --git a/SAX2.c b/SAX2.c
old mode 100644
new mode 100755
index fee66b7f..1e53e9f6
--- a/SAX2.c
+++ b/SAX2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * SAX2.c : Default SAX2 handler to build a tree.
  *
@@ -141,8 +145,23 @@ xmlFatalErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3351]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3351\n");
+      else
+        fprintf(stderr, "reached bug index 3351\n");
+    }
+    if ((!FIXREVERTER[3351] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                     XML_ERR_FATAL, NULL, 0,
 		    (const char *) str1, (const char *) str2,
@@ -150,8 +169,23 @@ xmlFatalErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
 	ctxt->valid = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3352]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3352\n");
+	  else
+	    fprintf(stderr, "reached bug index 3352\n");
+	}
+	if ((!FIXREVERTER[3352] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -172,8 +206,23 @@ xmlWarnMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3353]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3353\n");
+      else
+        fprintf(stderr, "reached bug index 3353\n");
+    }
+    if ((!FIXREVERTER[3353] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                     XML_ERR_WARNING, NULL, 0,
 		    (const char *) str1, NULL,
@@ -197,8 +246,23 @@ xmlNsErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3354]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3354\n");
+      else
+        fprintf(stderr, "reached bug index 3354\n");
+    }
+    if ((!FIXREVERTER[3354] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,
                     XML_ERR_ERROR, NULL, 0,
 		    (const char *) str1, (const char *) str2,
@@ -221,8 +285,23 @@ xmlNsWarnMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3355]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3355\n");
+      else
+        fprintf(stderr, "reached bug index 3355\n");
+    }
+    if ((!FIXREVERTER[3355] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,
                     XML_ERR_WARNING, NULL, 0,
 		    (const char *) str1, (const char *) str2,
@@ -257,7 +336,22 @@ const xmlChar *
 xmlSAX2GetSystemId(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->input == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3356]) {
+      if ((ctx == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3356\n");
+      else
+        fprintf(stderr, "reached bug index 3356\n");
+    }
+    if ((!FIXREVERTER[3356] && (ctx == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     return((const xmlChar *) ctxt->input->filename);
 }
 
@@ -273,7 +367,22 @@ int
 xmlSAX2GetLineNumber(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->input == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3357]) {
+      if ((ctx == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3357\n");
+      else
+        fprintf(stderr, "reached bug index 3357\n");
+    }
+    if ((!FIXREVERTER[3357] && (ctx == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->input->line);
 }
 
@@ -289,7 +398,22 @@ int
 xmlSAX2GetColumnNumber(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->input == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3358]) {
+      if ((ctx == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3358\n");
+      else
+        fprintf(stderr, "reached bug index 3358\n");
+    }
+    if ((!FIXREVERTER[3358] && (ctx == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->input->col);
 }
 
@@ -305,7 +429,22 @@ int
 xmlSAX2IsStandalone(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->myDoc == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3359]) {
+      if ((ctx == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3359\n");
+      else
+        fprintf(stderr, "reached bug index 3359\n");
+    }
+    if ((!FIXREVERTER[3359] && (ctx == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->myDoc->standalone == 1);
 }
 
@@ -321,7 +460,22 @@ int
 xmlSAX2HasInternalSubset(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3360]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3360\n");
+      else
+        fprintf(stderr, "reached bug index 3360\n");
+    }
+    if ((!FIXREVERTER[3360] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->myDoc->intSubset != NULL);
 }
 
@@ -337,7 +491,22 @@ int
 xmlSAX2HasExternalSubset(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3361]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3361\n");
+      else
+        fprintf(stderr, "reached bug index 3361\n");
+    }
+    if ((!FIXREVERTER[3361] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->myDoc->extSubset != NULL);
 }
 
@@ -356,15 +525,45 @@ xmlSAX2InternalSubset(void *ctx, const xmlChar *name,
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlDtdPtr dtd;
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3362]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3362\n");
+      else
+        fprintf(stderr, "reached bug index 3362\n");
+    }
+    if ((!FIXREVERTER[3362] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2InternalSubset(%s, %s, %s)\n",
             name, ExternalID, SystemID);
 #endif
 
-    if (ctxt->myDoc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3363]) {
+      if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3363\n");
+      else
+        fprintf(stderr, "reached bug index 3363\n");
+    }
+    if ((!FIXREVERTER[3363] && (ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     dtd = xmlGetIntSubset(ctxt->myDoc);
     if (dtd != NULL) {
 	if (ctxt->html)
@@ -393,7 +592,22 @@ xmlSAX2ExternalSubset(void *ctx, const xmlChar *name,
 	       const xmlChar *ExternalID, const xmlChar *SystemID)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3364]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3364\n");
+      else
+        fprintf(stderr, "reached bug index 3364\n");
+    }
+    if ((!FIXREVERTER[3364] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2ExternalSubset(%s, %s, %s)\n",
@@ -420,9 +634,24 @@ xmlSAX2ExternalSubset(void *ctx, const xmlChar *name,
 	if ((ctxt->sax != NULL) && (ctxt->sax->resolveEntity != NULL))
 	    input = ctxt->sax->resolveEntity(ctxt->userData, ExternalID,
 	                                        SystemID);
-	if (input == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3365]) {
+	  if ((input == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3365\n");
+	  else
+	    fprintf(stderr, "reached bug index 3365\n");
+	}
+	if ((!FIXREVERTER[3365] && (input == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	xmlNewDtd(ctxt->myDoc, name, ExternalID, SystemID);
 
@@ -462,8 +691,23 @@ xmlSAX2ExternalSubset(void *ctx, const xmlChar *name,
 	    xmlSwitchEncoding(ctxt, enc);
 	}
 
-	if (input->filename == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3366]) {
+	  if ((input -> filename == (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3366\n");
+	  else
+	    fprintf(stderr, "reached bug index 3366\n");
+	}
+	if ((!FIXREVERTER[3366] && (input -> filename == (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    input->filename = (char *) xmlCanonicPath(SystemID);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	input->line = 1;
 	input->col = 1;
 	input->base = ctxt->input->cur;
@@ -523,11 +767,56 @@ xmlSAX2ResolveEntity(void *ctx, const xmlChar *publicId, const xmlChar *systemId
     xmlChar *URI;
     const char *base = NULL;
 
-    if (ctx == NULL) return(NULL);
-    if (ctxt->input != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3367]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3367\n");
+      else
+        fprintf(stderr, "reached bug index 3367\n");
+    }
+    if ((!FIXREVERTER[3367] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3368]) {
+      if ((ctxt -> input != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3368\n");
+      else
+        fprintf(stderr, "reached bug index 3368\n");
+    }
+    if ((!FIXREVERTER[3368] && (ctxt -> input != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	base = ctxt->input->filename;
-    if (base == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3369]) {
+      if ((base == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3369\n");
+      else
+        fprintf(stderr, "reached bug index 3369\n");
+    }
+    if ((!FIXREVERTER[3369] && (base == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	base = ctxt->directory;
+	#ifdef FRCOV
+	}
+	#endif
 
     URI = xmlBuildURI(systemId, (const xmlChar *) base);
 
@@ -558,7 +847,22 @@ xmlSAX2GetEntity(void *ctx, const xmlChar *name)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlEntityPtr ret = NULL;
 
-    if (ctx == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3370]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3370\n");
+      else
+        fprintf(stderr, "reached bug index 3370\n");
+    }
+    if ((!FIXREVERTER[3370] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2GetEntity(%s)\n", name);
@@ -638,7 +942,22 @@ xmlSAX2GetParameterEntity(void *ctx, const xmlChar *name)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlEntityPtr ret;
 
-    if (ctx == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3371]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3371\n");
+      else
+        fprintf(stderr, "reached bug index 3371\n");
+    }
+    if ((!FIXREVERTER[3371] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2GetParameterEntity(%s)\n", name);
@@ -667,7 +986,22 @@ xmlSAX2EntityDecl(void *ctx, const xmlChar *name, int type,
     xmlEntityPtr ent;
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3372]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3372\n");
+      else
+        fprintf(stderr, "reached bug index 3372\n");
+    }
+    if ((!FIXREVERTER[3372] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2EntityDecl(%s, %d, %s, %s, %s)\n",
@@ -684,10 +1018,40 @@ xmlSAX2EntityDecl(void *ctx, const xmlChar *name, int type,
 	    xmlChar *URI;
 	    const char *base = NULL;
 
-	    if (ctxt->input != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3373]) {
+	      if ((ctxt -> input != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3373\n");
+	      else
+	        fprintf(stderr, "reached bug index 3373\n");
+	    }
+	    if ((!FIXREVERTER[3373] && (ctxt -> input != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->input->filename;
-	    if (base == NULL)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3374]) {
+	      if ((base == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3374\n");
+	      else
+	        fprintf(stderr, "reached bug index 3374\n");
+	    }
+	    if ((!FIXREVERTER[3374] && (base == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->directory;
+		#ifdef FRCOV
+		}
+		#endif
 
 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);
 	    ent->URI = URI;
@@ -703,10 +1067,40 @@ xmlSAX2EntityDecl(void *ctx, const xmlChar *name, int type,
 	    xmlChar *URI;
 	    const char *base = NULL;
 
-	    if (ctxt->input != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3375]) {
+	      if ((ctxt -> input != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3375\n");
+	      else
+	        fprintf(stderr, "reached bug index 3375\n");
+	    }
+	    if ((!FIXREVERTER[3375] && (ctxt -> input != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->input->filename;
-	    if (base == NULL)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3376]) {
+	      if ((base == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3376\n");
+	      else
+	        fprintf(stderr, "reached bug index 3376\n");
+	    }
+	    if ((!FIXREVERTER[3376] && (base == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->directory;
+		#ifdef FRCOV
+		}
+		#endif
 
 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);
 	    ent->URI = URI;
@@ -739,8 +1133,23 @@ xmlSAX2AttributeDecl(void *ctx, const xmlChar *elem, const xmlChar *fullname,
     xmlAttributePtr attr;
     xmlChar *name = NULL, *prefix = NULL;
 
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3377]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3377\n");
+      else
+        fprintf(stderr, "reached bug index 3377\n");
+    }
+    if ((!FIXREVERTER[3377] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
@@ -805,8 +1214,23 @@ xmlSAX2ElementDecl(void *ctx, const xmlChar * name, int type,
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlElementPtr elem = NULL;
 
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3378]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3378\n");
+      else
+        fprintf(stderr, "reached bug index 3378\n");
+    }
+    if ((!FIXREVERTER[3378] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
@@ -826,8 +1250,23 @@ xmlSAX2ElementDecl(void *ctx, const xmlChar * name, int type,
         return;
     }
 #ifdef LIBXML_VALID_ENABLED
-    if (elem == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3379]) {
+      if ((elem == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3379\n");
+      else
+        fprintf(stderr, "reached bug index 3379\n");
+    }
+    if ((!FIXREVERTER[3379] && (elem == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->valid = 0;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->validate && ctxt->wellFormed &&
         ctxt->myDoc && ctxt->myDoc->intSubset)
         ctxt->valid &=
@@ -851,8 +1290,23 @@ xmlSAX2NotationDecl(void *ctx, const xmlChar *name,
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNotationPtr nota = NULL;
 
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3380]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3380\n");
+      else
+        fprintf(stderr, "reached bug index 3380\n");
+    }
+    if ((!FIXREVERTER[3380] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
@@ -877,7 +1331,22 @@ xmlSAX2NotationDecl(void *ctx, const xmlChar *name,
 	return;
     }
 #ifdef LIBXML_VALID_ENABLED
-    if (nota == NULL) ctxt->valid = 0;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3381]) {
+      if ((nota == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3381\n");
+      else
+        fprintf(stderr, "reached bug index 3381\n");
+    }
+    if ((!FIXREVERTER[3381] && (nota == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    ) ctxt->valid = 0;
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt->validate) && (ctxt->wellFormed) &&
         (ctxt->myDoc->intSubset != NULL))
 	ctxt->valid &= xmlValidateNotationDecl(&ctxt->vctxt, ctxt->myDoc,
@@ -902,7 +1371,22 @@ xmlSAX2UnparsedEntityDecl(void *ctx, const xmlChar *name,
 {
     xmlEntityPtr ent;
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3382]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3382\n");
+      else
+        fprintf(stderr, "reached bug index 3382\n");
+    }
+    if ((!FIXREVERTER[3382] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2UnparsedEntityDecl(%s, %s, %s, %s)\n",
@@ -920,10 +1404,40 @@ xmlSAX2UnparsedEntityDecl(void *ctx, const xmlChar *name,
 	    xmlChar *URI;
 	    const char *base = NULL;
 
-	    if (ctxt->input != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3383]) {
+	      if ((ctxt -> input != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3383\n");
+	      else
+	        fprintf(stderr, "reached bug index 3383\n");
+	    }
+	    if ((!FIXREVERTER[3383] && (ctxt -> input != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->input->filename;
-	    if (base == NULL)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3384]) {
+	      if ((base == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3384\n");
+	      else
+	        fprintf(stderr, "reached bug index 3384\n");
+	    }
+	    if ((!FIXREVERTER[3384] && (base == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->directory;
+		#ifdef FRCOV
+		}
+		#endif
 
 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);
 	    ent->URI = URI;
@@ -940,10 +1454,40 @@ xmlSAX2UnparsedEntityDecl(void *ctx, const xmlChar *name,
 	    xmlChar *URI;
 	    const char *base = NULL;
 
-	    if (ctxt->input != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3385]) {
+	      if ((ctxt -> input != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3385\n");
+	      else
+	        fprintf(stderr, "reached bug index 3385\n");
+	    }
+	    if ((!FIXREVERTER[3385] && (ctxt -> input != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->input->filename;
-	    if (base == NULL)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3386]) {
+	      if ((base == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3386\n");
+	      else
+	        fprintf(stderr, "reached bug index 3386\n");
+	    }
+	    if ((!FIXREVERTER[3386] && (base == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->directory;
+		#ifdef FRCOV
+		}
+		#endif
 
 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);
 	    ent->URI = URI;
@@ -985,7 +1529,22 @@ xmlSAX2StartDocument(void *ctx)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlDocPtr doc;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3387]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3387\n");
+      else
+        fprintf(stderr, "reached bug index 3387\n");
+    }
+    if ((!FIXREVERTER[3387] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
@@ -993,12 +1552,42 @@ xmlSAX2StartDocument(void *ctx)
 #endif
     if (ctxt->html) {
 #ifdef LIBXML_HTML_ENABLED
-	if (ctxt->myDoc == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3388]) {
+	  if ((ctxt -> myDoc == (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3388\n");
+	  else
+	    fprintf(stderr, "reached bug index 3388\n");
+	}
+	if ((!FIXREVERTER[3388] && (ctxt -> myDoc == (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->myDoc = htmlNewDocNoDtD(NULL, NULL);
-	if (ctxt->myDoc == NULL) {
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3389]) {
+	  if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3389\n");
+	  else
+	    fprintf(stderr, "reached bug index 3389\n");
+	}
+	if ((!FIXREVERTER[3389] && (ctxt -> myDoc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartDocument");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->myDoc->properties = XML_DOC_HTML;
 	ctxt->myDoc->parseFlags = ctxt->options;
 #else
@@ -1052,7 +1641,22 @@ xmlSAX2EndDocument(void *ctx)
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2EndDocument()\n");
 #endif
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3390]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3390\n");
+      else
+        fprintf(stderr, "reached bug index 3390\n");
+    }
+    if ((!FIXREVERTER[3390] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef LIBXML_VALID_ENABLED
     if (ctxt->validate && ctxt->wellFormed &&
         ctxt->myDoc && ctxt->myDoc->intSubset)
@@ -1129,12 +1733,27 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
 	    name = xmlStrdup(fullname);
 	}
     }
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3391]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3391\n");
+      else
+        fprintf(stderr, "reached bug index 3391\n");
+    }
+    if ((!FIXREVERTER[3391] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");
 	if (ns != NULL)
 	    xmlFree(ns);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef LIBXML_HTML_ENABLED
     if ((ctxt->html) &&
@@ -1157,8 +1776,23 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
         if (ctxt->vctxt.valid != 1) {
             ctxt->valid = 0;
         }
-        if (nval != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3392]) {
+          if ((nval != (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3392\n");
+          else
+            fprintf(stderr, "reached bug index 3392\n");
+        }
+        if ((!FIXREVERTER[3392] && (nval != (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             value = nval;
+            #ifdef FRCOV
+            }
+            #endif
 #else
         nval = NULL;
 #endif /* LIBXML_VALID_ENABLED */
@@ -1315,7 +1949,22 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
                                     "Attribute %s in %s redefined\n",
                                              name, namespace->href);
                         ctxt->wellFormed = 0;
-                        if (ctxt->recovery == 0) ctxt->disableSAX = 1;
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[3393]) {
+                          if ((ctxt -> recovery == 0  ) && !(0))
+                            fprintf(stderr, "triggered bug index 3393\n");
+                          else
+                            fprintf(stderr, "reached bug index 3393\n");
+                        }
+                        if ((!FIXREVERTER[3393] && (ctxt -> recovery == 0  ))
+                        #else
+                        if (0
+                        #endif
+                        ) ctxt->disableSAX = 1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                         if (name != NULL)
                             xmlFree(name);
                         goto error;
@@ -1339,8 +1988,23 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
 	    tmp = ret->children;
 	    while (tmp != NULL) {
 		tmp->parent = (xmlNodePtr) ret;
-		if (tmp->next == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3394]) {
+		  if ((tmp -> next == (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 3394\n");
+		  else
+		    fprintf(stderr, "reached bug index 3394\n");
+		}
+		if ((!FIXREVERTER[3394] && (tmp -> next == (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ret->last = tmp;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		tmp = tmp->next;
 	    }
 	} else if (value != NULL) {
@@ -1474,10 +2138,25 @@ process_external_subset:
 		    } else {
 			fulln = xmlStrdup(attr->name);
 		    }
-                    if (fulln == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3395]) {
+                      if ((fulln == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3395\n");
+                      else
+                        fprintf(stderr, "reached bug index 3395\n");
+                    }
+                    if ((!FIXREVERTER[3395] && (fulln == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
 
 		    /*
 		     * Check that the attribute is not declared in the
@@ -1540,10 +2219,25 @@ process_external_subset:
 			xmlChar *fulln;
 
                         fulln = xmlBuildQName(attr->name, attr->prefix, fn, 50);
-			if (fulln == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3396]) {
+			  if ((fulln == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 3396\n");
+			  else
+			    fprintf(stderr, "reached bug index 3396\n");
+			}
+			if ((!FIXREVERTER[3396] && (fulln == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");
 			    return;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 
 			/*
 			 * Check that the attribute is not declared in the
@@ -1635,12 +2329,27 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
      *        an attribute at this level.
      */
     ret = xmlNewDocNodeEatName(ctxt->myDoc, NULL, name, NULL);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3399]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3399\n");
+      else
+        fprintf(stderr, "reached bug index 3399\n");
+    }
+    if ((!FIXREVERTER[3399] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (prefix != NULL)
 	    xmlFree(prefix);
 	xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->myDoc->children == NULL) {
 #ifdef DEBUG_SAX_TREE
 	xmlGenericError(xmlGenericErrorContext, "Setting %s as root\n", name);
@@ -1710,7 +2419,21 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 	att = atts[i++];
 	value = atts[i++];
 	if (!ctxt->html) {
-	    while ((att != NULL) && (value != NULL)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3400])
+	      fprintf(stderr, "reached bug index 3400\n");
+	    while ((FIXREVERTER[3400] && (att != (void *) 0 )) || (!FIXREVERTER[3400] && (att != (void *) 0 && value != (void *) 0 ))
+	    #else
+	    while (att != (void *) 0 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(value != (void *) 0 ))
+	        fprintf(stderr, "triggered bug index 3400\n");
+	      #endif
+	    
 		if ((att[0] == 'x') && (att[1] == 'm') && (att[2] == 'l') &&
 		    (att[3] == 'n') && (att[4] == 's'))
 		    xmlSAX2AttributeInternal(ctxt, att, value, prefix);
@@ -1718,6 +2441,9 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 		att = atts[i++];
 		value = atts[i++];
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
     }
 
@@ -1757,7 +2483,21 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 		value = atts[i++];
 	    }
 	} else {
-	    while ((att != NULL) && (value != NULL)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3401])
+	      fprintf(stderr, "reached bug index 3401\n");
+	    while ((FIXREVERTER[3401] && (att != (void *) 0 )) || (!FIXREVERTER[3401] && (att != (void *) 0 && value != (void *) 0 ))
+	    #else
+	    while (att != (void *) 0 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(value != (void *) 0 ))
+	        fprintf(stderr, "triggered bug index 3401\n");
+	      #endif
+	    
 		if ((att[0] != 'x') || (att[1] != 'm') || (att[2] != 'l') ||
 		    (att[3] != 'n') || (att[4] != 's'))
 		    xmlSAX2AttributeInternal(ctxt, att, value, NULL);
@@ -1768,6 +2508,9 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 		att = atts[i++];
 		value = atts[i++];
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
     }
 
@@ -1780,10 +2523,40 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 	int chk;
 
 	chk = xmlValidateDtdFinal(&ctxt->vctxt, ctxt->myDoc);
-	if (chk <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3402]) {
+	  if ((chk <= 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3402\n");
+	  else
+	    fprintf(stderr, "reached bug index 3402\n");
+	}
+	if ((!FIXREVERTER[3402] && (chk <= 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->valid = 0;
-	if (chk < 0)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3403]) {
+	  if ((chk < 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3403\n");
+	  else
+	    fprintf(stderr, "reached bug index 3403\n");
+	}
+	if ((!FIXREVERTER[3403] && (chk < 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->wellFormed = 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->valid &= xmlValidateRoot(&ctxt->vctxt, ctxt->myDoc);
 	ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_1;
     }
@@ -1807,7 +2580,22 @@ xmlSAX2EndElement(void *ctx, const xmlChar *name ATTRIBUTE_UNUSED)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr cur;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3404]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3404\n");
+      else
+        fprintf(stderr, "reached bug index 3404\n");
+    }
+    if ((!FIXREVERTER[3404] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     cur = ctxt->node;
 #ifdef DEBUG_SAX
     if (name == NULL)
@@ -1868,10 +2656,25 @@ xmlSAX2TextNode(xmlParserCtxtPtr ctxt, const xmlChar *str, int len) {
     } else {
 	ret = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
     }
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3405]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3405\n");
+      else
+        fprintf(stderr, "reached bug index 3405\n");
+    }
+    if ((!FIXREVERTER[3405] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(ctxt, "xmlSAX2Characters");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlNode));
     /*
      * intern the formatting blanks found between tags, or the
@@ -1906,11 +2709,26 @@ skip:
     ret->name = xmlStringText;
     if (intern == NULL) {
 	ret->content = xmlStrndup(str, len);
-	if (ret->content == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3406]) {
+	  if ((ret -> content == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3406\n");
+	  else
+	    fprintf(stderr, "reached bug index 3406\n");
+	}
+	if ((!FIXREVERTER[3406] && (ret -> content == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2TextNode");
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else
 	ret->content = (xmlChar *) intern;
 
@@ -1990,8 +2808,23 @@ xmlSAX2AttributeNs(xmlParserCtxtPtr ctxt,
     /*
      * Note: if prefix == NULL, the attribute is not in the default namespace
      */
-    if (prefix != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3407]) {
+      if ((prefix != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3407\n");
+      else
+        fprintf(stderr, "reached bug index 3407\n");
+    }
+    if ((!FIXREVERTER[3407] && (prefix != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	namespace = xmlSearchNs(ctxt->myDoc, ctxt->node, prefix);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * allocate the node
@@ -2031,10 +2864,25 @@ xmlSAX2AttributeNs(xmlParserCtxtPtr ctxt,
 	                              (xmlChar *) localname, NULL);
 	else
 	    ret = xmlNewNsProp(ctxt->node, namespace, localname, NULL);
-	if (ret == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3408]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3408\n");
+	  else
+	    fprintf(stderr, "reached bug index 3408\n");
+	}
+	if ((!FIXREVERTER[3408] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, "xmlSAX2AttributeNs");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
 
     if ((ctxt->replaceEntities == 0) && (!ctxt->html)) {
@@ -2060,8 +2908,23 @@ xmlSAX2AttributeNs(xmlParserCtxtPtr ctxt,
 	    while (tmp != NULL) {
 	        tmp->doc = ret->doc;
 		tmp->parent = (xmlNodePtr) ret;
-		if (tmp->next == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3409]) {
+		  if ((tmp -> next == (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 3409\n");
+		  else
+		    fprintf(stderr, "reached bug index 3409\n");
+		}
+		if ((!FIXREVERTER[3409] && (tmp -> next == (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ret->last = tmp;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		tmp = tmp->next;
 	    }
 	}
@@ -2162,8 +3025,23 @@ xmlSAX2AttributeNs(xmlParserCtxtPtr ctxt,
 	     *
 	     * Open issue: normalization of the value.
 	     */
-	    if (dup == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3410]) {
+	      if ((dup == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3410\n");
+	      else
+	        fprintf(stderr, "reached bug index 3410\n");
+	    }
+	    if ((!FIXREVERTER[3410] && (dup == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        dup = xmlStrndup(value, valueend - value);
+	        #ifdef FRCOV
+	        }
+	        #endif
 #if defined(LIBXML_SAX1_ENABLED) || defined(LIBXML_HTML_ENABLED) || defined(LIBXML_WRITER_ENABLED) || defined(LIBXML_DOCB_ENABLED) || defined(LIBXML_LEGACY_ENABLED)
 #ifdef LIBXML_VALID_ENABLED
 	    if (xmlValidateNCName(dup, 1) != 0) {
@@ -2176,12 +3054,42 @@ xmlSAX2AttributeNs(xmlParserCtxtPtr ctxt,
 	    xmlAddID(&ctxt->vctxt, ctxt->myDoc, dup, ret);
 	} else if (xmlIsID(ctxt->myDoc, ctxt->node, ret)) {
 	    /* might be worth duplicate entry points and not copy */
-	    if (dup == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3411]) {
+	      if ((dup == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3411\n");
+	      else
+	        fprintf(stderr, "reached bug index 3411\n");
+	    }
+	    if ((!FIXREVERTER[3411] && (dup == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        dup = xmlStrndup(value, valueend - value);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    xmlAddID(&ctxt->vctxt, ctxt->myDoc, dup, ret);
 	} else if (xmlIsRef(ctxt->myDoc, ctxt->node, ret)) {
-	    if (dup == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3412]) {
+	      if ((dup == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3412\n");
+	      else
+	        fprintf(stderr, "reached bug index 3412\n");
+	    }
+	    if ((!FIXREVERTER[3412] && (dup == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        dup = xmlStrndup(value, valueend - value);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    xmlAddRef(&ctxt->vctxt, ctxt->myDoc, dup, ret);
 	}
     }
@@ -2225,7 +3133,22 @@ xmlSAX2StartElementNs(void *ctx,
     xmlChar *lname = NULL;
     int i, j;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3413]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3413\n");
+      else
+        fprintf(stderr, "reached bug index 3413\n");
+    }
+    if ((!FIXREVERTER[3413] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     parent = ctxt->node;
     /*
      * First check on validity:
@@ -2249,8 +3172,23 @@ xmlSAX2StartElementNs(void *ctx,
 	    const xmlChar *fullname;
 
 	    fullname = xmlDictQLookup(ctxt->dict, prefix, localname);
-	    if (fullname != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3414]) {
+	      if ((fullname != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3414\n");
+	      else
+	        fprintf(stderr, "reached bug index 3414\n");
+	    }
+	    if ((!FIXREVERTER[3414] && (fullname != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        localname = fullname;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	} else {
 	    lname = xmlBuildQName(localname, prefix, NULL, 0);
 	}
@@ -2273,10 +3211,25 @@ xmlSAX2StartElementNs(void *ctx,
 		ret->name = xmlStrdup(localname);
 	    else
 	        ret->name = lname;
-	    if (ret->name == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3415]) {
+	      if ((ret -> name == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3415\n");
+	      else
+	        fprintf(stderr, "reached bug index 3415\n");
+	    }
+	    if ((!FIXREVERTER[3415] && (ret -> name == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
 	    xmlRegisterNodeDefaultValue(ret);
@@ -2289,10 +3242,25 @@ xmlSAX2StartElementNs(void *ctx,
 	else
 	    ret = xmlNewDocNodeEatName(ctxt->myDoc, NULL,
 	                               (xmlChar *) lname, NULL);
-	if (ret == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3416]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3416\n");
+	  else
+	    fprintf(stderr, "reached bug index 3416\n");
+	}
+	if ((!FIXREVERTER[3416] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     if (ctxt->linenumbers) {
 	if (ctxt->input != NULL) {
@@ -2378,11 +3346,26 @@ xmlSAX2StartElementNs(void *ctx,
 	}
 	if (ret->ns == NULL) {
 	    ns = xmlNewNs(ret, NULL, prefix);
-	    if (ns == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3417]) {
+	      if ((ns == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3417\n");
+	      else
+	        fprintf(stderr, "reached bug index 3417\n");
+	    }
+	    if ((!FIXREVERTER[3417] && (ns == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 
 	        xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
             if (prefix != NULL)
                 xmlNsWarnMsg(ctxt, XML_NS_ERR_UNDEFINED_NAMESPACE,
                              "Namespace prefix %s was not found\n",
@@ -2438,10 +3421,40 @@ xmlSAX2StartElementNs(void *ctx,
 	int chk;
 
 	chk = xmlValidateDtdFinal(&ctxt->vctxt, ctxt->myDoc);
-	if (chk <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3418]) {
+	  if ((chk <= 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3418\n");
+	  else
+	    fprintf(stderr, "reached bug index 3418\n");
+	}
+	if ((!FIXREVERTER[3418] && (chk <= 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->valid = 0;
-	if (chk < 0)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3419]) {
+	  if ((chk < 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3419\n");
+	  else
+	    fprintf(stderr, "reached bug index 3419\n");
+	}
+	if ((!FIXREVERTER[3419] && (chk < 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->wellFormed = 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->valid &= xmlValidateRoot(&ctxt->vctxt, ctxt->myDoc);
 	ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_1;
     }
@@ -2468,7 +3481,22 @@ xmlSAX2EndElementNs(void *ctx,
     xmlParserNodeInfo node_info;
     xmlNodePtr cur;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3420]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3420\n");
+      else
+        fprintf(stderr, "reached bug index 3420\n");
+    }
+    if ((!FIXREVERTER[3420] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     cur = ctxt->node;
     /* Capture end position and add node */
     if ((ctxt->record_info) && (cur != NULL)) {
@@ -2504,7 +3532,22 @@ xmlSAX2Reference(void *ctx, const xmlChar *name)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr ret;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3421]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3421\n");
+      else
+        fprintf(stderr, "reached bug index 3421\n");
+    }
+    if ((!FIXREVERTER[3421] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2Reference(%s)\n", name);
@@ -2536,7 +3579,22 @@ xmlSAX2Characters(void *ctx, const xmlChar *ch, int len)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr lastChild;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3422]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3422\n");
+      else
+        fprintf(stderr, "reached bug index 3422\n");
+    }
+    if ((!FIXREVERTER[3422] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2Characters(%.30s, %d)\n", ch, len);
@@ -2547,13 +3605,28 @@ xmlSAX2Characters(void *ctx, const xmlChar *ch, int len)
      * concatenate it, else create a new node of type text.
      */
 
-    if (ctxt->node == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3423]) {
+      if ((ctxt -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3423\n");
+      else
+        fprintf(stderr, "reached bug index 3423\n");
+    }
+    if ((!FIXREVERTER[3423] && (ctxt -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_SAX_TREE
 	xmlGenericError(xmlGenericErrorContext,
 		"add chars: ctxt->node == NULL !\n");
 #endif
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     lastChild = ctxt->node->last;
 #ifdef DEBUG_SAX_TREE
     xmlGenericError(xmlGenericErrorContext,
@@ -2596,10 +3669,25 @@ xmlSAX2Characters(void *ctx, const xmlChar *ch, int len)
 	               (xmlDictOwns(ctxt->dict, lastChild->content))) {
 		lastChild->content = xmlStrdup(lastChild->content);
 	    }
-	    if (lastChild->content == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3424]) {
+	      if ((lastChild -> content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3424\n");
+	      else
+	        fprintf(stderr, "reached bug index 3424\n");
+	    }
+	    if ((!FIXREVERTER[3424] && (lastChild -> content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters: xmlStrdup returned NULL");
 		return;
  	    }
+ 	    #ifdef FRCOV
+ 	    }
+ 	    #endif
             if (((size_t)ctxt->nodelen + (size_t)len > XML_MAX_TEXT_LENGTH) &&
                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {
                 xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters: huge text node");
@@ -2617,10 +3705,25 @@ xmlSAX2Characters(void *ctx, const xmlChar *ch, int len)
 		size = ctxt->nodemem + len;
 		size *= 2;
                 newbuf = (xmlChar *) xmlRealloc(lastChild->content,size);
-		if (newbuf == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3425]) {
+		  if ((newbuf == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3425\n");
+		  else
+		    fprintf(stderr, "reached bug index 3425\n");
+		}
+		if ((!FIXREVERTER[3425] && (newbuf == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters");
 		    return;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ctxt->nodemem = size;
 		lastChild->content = newbuf;
 	    }
@@ -2684,7 +3787,22 @@ xmlSAX2ProcessingInstruction(void *ctx, const xmlChar *target,
     xmlNodePtr ret;
     xmlNodePtr parent;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3426]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3426\n");
+      else
+        fprintf(stderr, "reached bug index 3426\n");
+    }
+    if ((!FIXREVERTER[3426] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     parent = ctxt->node;
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
@@ -2692,7 +3810,22 @@ xmlSAX2ProcessingInstruction(void *ctx, const xmlChar *target,
 #endif
 
     ret = xmlNewDocPI(ctxt->myDoc, target, data);
-    if (ret == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3427]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3427\n");
+      else
+        fprintf(stderr, "reached bug index 3427\n");
+    }
+    if ((!FIXREVERTER[3427] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (ctxt->linenumbers) {
 	if (ctxt->input != NULL) {
@@ -2705,11 +3838,38 @@ xmlSAX2ProcessingInstruction(void *ctx, const xmlChar *target,
     if (ctxt->inSubset == 1) {
 	xmlAddChild((xmlNodePtr) ctxt->myDoc->intSubset, ret);
 	return;
-    } else if (ctxt->inSubset == 2) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[3428]) {
+      if ((ctxt -> inSubset == 2 ) && !(0))
+        fprintf(stderr, "triggered bug index 3428\n");
+      else
+        fprintf(stderr, "reached bug index 3428\n");
+    }
+    if ((!FIXREVERTER[3428] && (ctxt -> inSubset == 2 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlAddChild((xmlNodePtr) ctxt->myDoc->extSubset, ret);
 	return;
     }
-    if (parent == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3429]) {
+      if ((parent == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3429\n");
+      else
+        fprintf(stderr, "reached bug index 3429\n");
+    }
+    if ((!FIXREVERTER[3429] && (parent == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_SAX_TREE
 	    xmlGenericError(xmlGenericErrorContext,
 		    "Setting PI %s as root\n", target);
@@ -2717,6 +3877,9 @@ xmlSAX2ProcessingInstruction(void *ctx, const xmlChar *target,
         xmlAddChild((xmlNodePtr) ctxt->myDoc, (xmlNodePtr) ret);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (parent->type == XML_ELEMENT_NODE) {
 #ifdef DEBUG_SAX_TREE
 	xmlGenericError(xmlGenericErrorContext,
@@ -2747,13 +3910,43 @@ xmlSAX2Comment(void *ctx, const xmlChar *value)
     xmlNodePtr ret;
     xmlNodePtr parent;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3430]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3430\n");
+      else
+        fprintf(stderr, "reached bug index 3430\n");
+    }
+    if ((!FIXREVERTER[3430] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     parent = ctxt->node;
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext, "SAX.xmlSAX2Comment(%s)\n", value);
 #endif
     ret = xmlNewDocComment(ctxt->myDoc, value);
-    if (ret == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3431]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3431\n");
+      else
+        fprintf(stderr, "reached bug index 3431\n");
+    }
+    if ((!FIXREVERTER[3431] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->linenumbers) {
 	if (ctxt->input != NULL) {
 	    if (ctxt->input->line < 65535)
@@ -2766,10 +3959,25 @@ xmlSAX2Comment(void *ctx, const xmlChar *value)
     if (ctxt->inSubset == 1) {
 	xmlAddChild((xmlNodePtr) ctxt->myDoc->intSubset, ret);
 	return;
-    } else if (ctxt->inSubset == 2) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[3432]) {
+      if ((ctxt -> inSubset == 2 ) && !(0))
+        fprintf(stderr, "triggered bug index 3432\n");
+      else
+        fprintf(stderr, "reached bug index 3432\n");
+    }
+    if ((!FIXREVERTER[3432] && (ctxt -> inSubset == 2 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlAddChild((xmlNodePtr) ctxt->myDoc->extSubset, ret);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (parent == NULL) {
 #ifdef DEBUG_SAX_TREE
 	    xmlGenericError(xmlGenericErrorContext,
@@ -2808,7 +4016,22 @@ xmlSAX2CDataBlock(void *ctx, const xmlChar *value, int len)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr ret, lastChild;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3434]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3434\n");
+      else
+        fprintf(stderr, "reached bug index 3434\n");
+    }
+    if ((!FIXREVERTER[3434] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.pcdata(%.10s, %d)\n", value, len);
@@ -2867,7 +4090,22 @@ xmlSAXDefaultVersion(int version)
 int
 xmlSAXVersion(xmlSAXHandler *hdlr, int version)
 {
-    if (hdlr == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3435]) {
+      if ((hdlr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3435\n");
+      else
+        fprintf(stderr, "reached bug index 3435\n");
+    }
+    if ((!FIXREVERTER[3435] && (hdlr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (version == 2) {
 	hdlr->startElement = NULL;
 	hdlr->endElement = NULL;
@@ -2956,8 +4194,23 @@ xmlDefaultSAXHandlerInit(void)
 void
 xmlSAX2InitHtmlDefaultSAXHandler(xmlSAXHandler *hdlr)
 {
-    if ((hdlr == NULL) || (hdlr->initialized != 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3437]) {
+      if ((hdlr == (void *) 0 || hdlr -> initialized != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3437\n");
+      else
+        fprintf(stderr, "reached bug index 3437\n");
+    }
+    if ((!FIXREVERTER[3437] && (hdlr == (void *) 0 || hdlr -> initialized != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     hdlr->internalSubset = xmlSAX2InternalSubset;
     hdlr->externalSubset = NULL;
diff --git a/TODO b/TODO
old mode 100644
new mode 100755
diff --git a/TODO_SCHEMAS b/TODO_SCHEMAS
old mode 100644
new mode 100755
diff --git a/VxWorks/Makefile b/VxWorks/Makefile
old mode 100644
new mode 100755
diff --git a/VxWorks/README b/VxWorks/README
old mode 100644
new mode 100755
diff --git a/VxWorks/build.sh b/VxWorks/build.sh
old mode 100644
new mode 100755
diff --git a/acinclude.m4 b/acinclude.m4
old mode 100644
new mode 100755
diff --git a/bakefile/Bakefiles.bkgen b/bakefile/Bakefiles.bkgen
old mode 100644
new mode 100755
diff --git a/bakefile/Readme.txt b/bakefile/Readme.txt
old mode 100644
new mode 100755
diff --git a/bakefile/libxml2.bkl b/bakefile/libxml2.bkl
old mode 100644
new mode 100755
diff --git a/buf.c b/buf.c
old mode 100644
new mode 100755
index 6a8721bc..ba5be334
--- a/buf.c
+++ b/buf.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * buf.c: memory buffers for libxml2
  *
@@ -123,10 +127,25 @@ xmlBufCreate(void) {
     xmlBufPtr ret;
 
     ret = (xmlBufPtr) xmlMalloc(sizeof(xmlBuf));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1\n");
+      else
+        fprintf(stderr, "reached bug index 1\n");
+    }
+    if ((!FIXREVERTER[1] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlBufMemoryError(NULL, "creating buffer");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->compat_use = 0;
     ret->use = 0;
     ret->error = 0;
@@ -135,11 +154,26 @@ xmlBufCreate(void) {
     ret->compat_size = xmlDefaultBufferSize;
     ret->alloc = xmlBufferAllocScheme;
     ret->content = (xmlChar *) xmlMallocAtomic(ret->size * sizeof(xmlChar));
-    if (ret->content == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2]) {
+      if ((ret -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2\n");
+      else
+        fprintf(stderr, "reached bug index 2\n");
+    }
+    if ((!FIXREVERTER[2] && (ret -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlBufMemoryError(ret, "creating buffer");
 	xmlFree(ret);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->content[0] = 0;
     ret->contentIO = NULL;
     return(ret);
@@ -157,10 +191,25 @@ xmlBufCreateSize(size_t size) {
     xmlBufPtr ret;
 
     ret = (xmlBufPtr) xmlMalloc(sizeof(xmlBuf));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3\n");
+      else
+        fprintf(stderr, "reached bug index 3\n");
+    }
+    if ((!FIXREVERTER[3] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlBufMemoryError(NULL, "creating buffer");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->compat_use = 0;
     ret->use = 0;
     ret->error = 0;
@@ -170,11 +219,26 @@ xmlBufCreateSize(size_t size) {
     ret->compat_size = (int) ret->size;
     if (ret->size){
         ret->content = (xmlChar *) xmlMallocAtomic(ret->size * sizeof(xmlChar));
-        if (ret->content == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4]) {
+          if ((ret -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4\n");
+          else
+            fprintf(stderr, "reached bug index 4\n");
+        }
+        if ((!FIXREVERTER[4] && (ret -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlBufMemoryError(ret, "creating buffer");
             xmlFree(ret);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ret->content[0] = 0;
     } else
 	ret->content = NULL;
@@ -196,8 +260,23 @@ xmlChar *
 xmlBufDetach(xmlBufPtr buf) {
     xmlChar *ret;
 
-    if (buf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5\n");
+      else
+        fprintf(stderr, "reached bug index 5\n");
+    }
+    if ((!FIXREVERTER[5] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE)
         return(NULL);
     if (buf->buffer != NULL)
@@ -265,13 +344,28 @@ xmlBufCreateStatic(void *mem, size_t size) {
  */
 int
 xmlBufGetAllocationScheme(xmlBufPtr buf) {
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[8]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 8\n");
+      else
+        fprintf(stderr, "reached bug index 8\n");
+    }
+    if ((!FIXREVERTER[8] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_BUFFER
         xmlGenericError(xmlGenericErrorContext,
 		"xmlBufGetAllocationScheme: buf == NULL\n");
 #endif
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(buf->alloc);
 }
 
@@ -287,13 +381,28 @@ xmlBufGetAllocationScheme(xmlBufPtr buf) {
 int
 xmlBufSetAllocationScheme(xmlBufPtr buf,
                           xmlBufferAllocationScheme scheme) {
-    if ((buf == NULL) || (buf->error != 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[9]) {
+      if ((buf == (void *) 0 || buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 9\n");
+      else
+        fprintf(stderr, "reached bug index 9\n");
+    }
+    if ((!FIXREVERTER[9] && (buf == (void *) 0 || buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_BUFFER
         xmlGenericError(xmlGenericErrorContext,
 		"xmlBufSetAllocationScheme: buf == NULL or in error\n");
 #endif
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) ||
         (buf->alloc == XML_BUFFER_ALLOC_IO))
         return(-1);
@@ -327,13 +436,28 @@ xmlBufSetAllocationScheme(xmlBufPtr buf,
  */
 void
 xmlBufFree(xmlBufPtr buf) {
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[10]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 10\n");
+      else
+        fprintf(stderr, "reached bug index 10\n");
+    }
+    if ((!FIXREVERTER[10] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_BUFFER
         xmlGenericError(xmlGenericErrorContext,
 		"xmlBufFree: buf == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((buf->alloc == XML_BUFFER_ALLOC_IO) &&
         (buf->contentIO != NULL)) {
@@ -353,8 +477,38 @@ xmlBufFree(xmlBufPtr buf) {
  */
 void
 xmlBufEmpty(xmlBufPtr buf) {
-    if ((buf == NULL) || (buf->error != 0)) return;
-    if (buf->content == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[11]) {
+      if ((buf == (void *) 0 || buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 11\n");
+      else
+        fprintf(stderr, "reached bug index 11\n");
+    }
+    if ((!FIXREVERTER[11] && (buf == (void *) 0 || buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[12]) {
+      if ((buf -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 12\n");
+      else
+        fprintf(stderr, "reached bug index 12\n");
+    }
+    if ((!FIXREVERTER[12] && (buf -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     CHECK_COMPAT(buf)
     buf->use = 0;
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) {
@@ -386,10 +540,55 @@ xmlBufEmpty(xmlBufPtr buf) {
  */
 size_t
 xmlBufShrink(xmlBufPtr buf, size_t len) {
-    if ((buf == NULL) || (buf->error != 0)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[13]) {
+      if ((buf == (void *) 0 || buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 13\n");
+      else
+        fprintf(stderr, "reached bug index 13\n");
+    }
+    if ((!FIXREVERTER[13] && (buf == (void *) 0 || buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     CHECK_COMPAT(buf)
-    if (len == 0) return(0);
-    if (len > buf->use) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[14]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 14\n");
+      else
+        fprintf(stderr, "reached bug index 14\n");
+    }
+    if ((!FIXREVERTER[14] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[15]) {
+      if ((len > buf -> use ) && !(0))
+        fprintf(stderr, "triggered bug index 15\n");
+      else
+        fprintf(stderr, "reached bug index 15\n");
+    }
+    if ((!FIXREVERTER[15] && (len > buf -> use ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     buf->use -= len;
     if ((buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) ||
@@ -438,12 +637,42 @@ xmlBufGrowInternal(xmlBufPtr buf, size_t len) {
     size_t size;
     xmlChar *newbuf;
 
-    if ((buf == NULL) || (buf->error != 0)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[16]) {
+      if ((buf == (void *) 0 || buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 16\n");
+      else
+        fprintf(stderr, "reached bug index 16\n");
+    }
+    if ((!FIXREVERTER[16] && (buf == (void *) 0 || buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     CHECK_COMPAT(buf)
 
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);
-    if (buf->use + len < buf->size)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[17]) {
+      if ((buf -> use + len < buf -> size ) && !(0))
+        fprintf(stderr, "triggered bug index 17\n");
+      else
+        fprintf(stderr, "reached bug index 17\n");
+    }
+    if ((!FIXREVERTER[17] && (buf -> use + len < buf -> size ))
+    #else
+    if (0
+    #endif
+    )
         return(buf->size - buf->use);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Windows has a BIG problem on realloc timing, so we try to double
@@ -464,30 +693,89 @@ xmlBufGrowInternal(xmlBufPtr buf, size_t len) {
         /*
 	 * Used to provide parsing limits
 	 */
-        if ((buf->use + len >= XML_MAX_TEXT_LENGTH) ||
-	    (buf->size >= XML_MAX_TEXT_LENGTH)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[18]) {
+          if ((buf -> use + len >= 10000000 || buf -> size >= 10000000 ) && !(0))
+            fprintf(stderr, "triggered bug index 18\n");
+          else
+            fprintf(stderr, "reached bug index 18\n");
+        }
+        if ((!FIXREVERTER[18] && (buf -> use + len >= 10000000 || buf -> size >= 10000000 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlBufMemoryError(buf, "buffer error: text too long\n");
 	    return(0);
 	}
-	if (size >= XML_MAX_TEXT_LENGTH)
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[19]) {
+	  if ((size >= 10000000 ) && !(0))
+	    fprintf(stderr, "triggered bug index 19\n");
+	  else
+	    fprintf(stderr, "reached bug index 19\n");
+	}
+	if ((!FIXREVERTER[19] && (size >= 10000000 ))
+	#else
+	if (0
+	#endif
+	)
 	    size = XML_MAX_TEXT_LENGTH;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {
         size_t start_buf = buf->content - buf->contentIO;
 
 	newbuf = (xmlChar *) xmlRealloc(buf->contentIO, start_buf + size);
-	if (newbuf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[20]) {
+	  if ((newbuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 20\n");
+	  else
+	    fprintf(stderr, "reached bug index 20\n");
+	}
+	if ((!FIXREVERTER[20] && (newbuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlBufMemoryError(buf, "growing buffer");
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	buf->contentIO = newbuf;
 	buf->content = newbuf + start_buf;
     } else {
 	newbuf = (xmlChar *) xmlRealloc(buf->content, size);
-	if (newbuf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[21]) {
+	  if ((newbuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 21\n");
+	  else
+	    fprintf(stderr, "reached bug index 21\n");
+	}
+	if ((!FIXREVERTER[21] && (newbuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlBufMemoryError(buf, "growing buffer");
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	buf->content = newbuf;
     }
     buf->size = size;
@@ -509,12 +797,57 @@ int
 xmlBufGrow(xmlBufPtr buf, int len) {
     size_t ret;
 
-    if ((buf == NULL) || (len < 0)) return(-1);
-    if (len == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[22]) {
+      if ((buf == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 22\n");
+      else
+        fprintf(stderr, "reached bug index 22\n");
+    }
+    if ((!FIXREVERTER[22] && (buf == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[23]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 23\n");
+      else
+        fprintf(stderr, "reached bug index 23\n");
+    }
+    if ((!FIXREVERTER[23] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     ret = xmlBufGrowInternal(buf, len);
-    if (buf->error != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[24]) {
+      if ((buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 24\n");
+      else
+        fprintf(stderr, "reached bug index 24\n");
+    }
+    if ((!FIXREVERTER[24] && (buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     return((int) ret);
 }
 
@@ -622,8 +955,23 @@ xmlBufAddLen(xmlBufPtr buf, size_t len) {
     if ((buf == NULL) || (buf->error))
         return(-1);
     CHECK_COMPAT(buf)
-    if (len > (buf->size - buf->use))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[29]) {
+      if ((len > buf -> size - buf -> use ) && !(0))
+        fprintf(stderr, "triggered bug index 29\n");
+      else
+        fprintf(stderr, "reached bug index 29\n");
+    }
+    if ((!FIXREVERTER[29] && (len > buf -> size - buf -> use ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     buf->use += len;
     UPDATE_COMPAT(buf)
     if (buf->size > buf->use)
@@ -757,15 +1105,45 @@ xmlBufResize(xmlBufPtr buf, size_t size)
         /*
 	 * Used to provide parsing limits
 	 */
-        if (size >= XML_MAX_TEXT_LENGTH) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[31]) {
+          if ((size >= 10000000 ) && !(0))
+            fprintf(stderr, "triggered bug index 31\n");
+          else
+            fprintf(stderr, "reached bug index 31\n");
+        }
+        if ((!FIXREVERTER[31] && (size >= 10000000 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlBufMemoryError(buf, "buffer error: text too long\n");
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
 
     /* Don't resize if we don't have to */
-    if (size < buf->size)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[32]) {
+      if ((size < buf -> size ) && !(0))
+        fprintf(stderr, "triggered bug index 32\n");
+      else
+        fprintf(stderr, "reached bug index 32\n");
+    }
+    if ((!FIXREVERTER[32] && (size < buf -> size ))
+    #else
+    if (0
+    #endif
+    )
         return 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* figure out new size */
     switch (buf->alloc){
@@ -815,10 +1193,25 @@ xmlBufResize(xmlBufPtr buf, size_t size)
 	    buf->size += start_buf;
 	} else {
 	    rebuf = (xmlChar *) xmlRealloc(buf->contentIO, start_buf + newSize);
-	    if (rebuf == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[33]) {
+	      if ((rebuf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 33\n");
+	      else
+	        fprintf(stderr, "reached bug index 33\n");
+	    }
+	    if ((!FIXREVERTER[33] && (rebuf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlBufMemoryError(buf, "growing buffer");
 		return 0;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf->contentIO = rebuf;
 	    buf->content = rebuf + start_buf;
 	}
@@ -840,10 +1233,25 @@ xmlBufResize(xmlBufPtr buf, size_t size)
 		rebuf[buf->use] = 0;
 	    }
 	}
-	if (rebuf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[34]) {
+	  if ((rebuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 34\n");
+	  else
+	    fprintf(stderr, "reached bug index 34\n");
+	}
+	if ((!FIXREVERTER[34] && (rebuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlBufMemoryError(buf, "growing buffer");
 	    return 0;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	buf->content = rebuf;
     }
     buf->size = newSize;
@@ -880,13 +1288,73 @@ xmlBufAdd(xmlBufPtr buf, const xmlChar *str, int len) {
 #endif
 	return -1;
     }
-    if (len == 0) return 0;
-
-    if (len < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[35]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 35\n");
+      else
+        fprintf(stderr, "reached bug index 35\n");
+    }
+    if ((!FIXREVERTER[35] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[36]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 36\n");
+      else
+        fprintf(stderr, "reached bug index 36\n");
+    }
+    if ((!FIXREVERTER[36] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
         len = xmlStrlen(str);
-
-    if (len < 0) return -1;
-    if (len == 0) return 0;
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[37]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 37\n");
+      else
+        fprintf(stderr, "reached bug index 37\n");
+    }
+    if ((!FIXREVERTER[37] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[38]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 38\n");
+      else
+        fprintf(stderr, "reached bug index 38\n");
+    }
+    if ((!FIXREVERTER[38] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
 
     needSize = buf->use + len + 2;
     if (needSize > buf->size){
@@ -894,10 +1362,25 @@ xmlBufAdd(xmlBufPtr buf, const xmlChar *str, int len) {
 	    /*
 	     * Used to provide parsing limits
 	     */
-	    if (needSize >= XML_MAX_TEXT_LENGTH) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[39]) {
+	      if ((needSize >= 10000000 ) && !(0))
+	        fprintf(stderr, "triggered bug index 39\n");
+	      else
+	        fprintf(stderr, "reached bug index 39\n");
+	    }
+	    if ((!FIXREVERTER[39] && (needSize >= 10000000 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlBufMemoryError(buf, "buffer error: text too long\n");
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
         if (!xmlBufResize(buf, needSize)){
 	    xmlBufMemoryError(buf, "growing buffer");
@@ -1009,7 +1492,22 @@ xmlBufCat(xmlBufPtr buf, const xmlChar *str) {
         return(-1);
     CHECK_COMPAT(buf)
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;
-    if (str == NULL) return -1;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[45]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 45\n");
+      else
+        fprintf(stderr, "reached bug index 45\n");
+    }
+    if ((!FIXREVERTER[45] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
     return xmlBufAdd(buf, str, -1);
 }
 
diff --git a/buf.h b/buf.h
old mode 100644
new mode 100755
diff --git a/c14n.c b/c14n.c
old mode 100644
new mode 100755
diff --git a/catalog.c b/catalog.c
old mode 100644
new mode 100755
index f814121c..d20a9b9b
--- a/catalog.c
+++ b/catalog.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /**
  * catalog.c: set of generic Catalog related routines
  *
@@ -278,18 +282,48 @@ xmlNewCatalogEntry(xmlCatalogEntryType type, const xmlChar *name,
     xmlChar *normid = NULL;
 
     ret = (xmlCatalogEntryPtr) xmlMalloc(sizeof(xmlCatalogEntry));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[949]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 949\n");
+      else
+        fprintf(stderr, "reached bug index 949\n");
+    }
+    if ((!FIXREVERTER[949] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCatalogErrMemory("allocating catalog entry");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->next = NULL;
     ret->parent = NULL;
     ret->children = NULL;
     ret->type = type;
     if (type == XML_CATA_PUBLIC || type == XML_CATA_DELEGATE_PUBLIC) {
         normid = xmlCatalogNormalizePublic(name);
-        if (normid != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[950]) {
+          if ((normid != (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 950\n");
+          else
+            fprintf(stderr, "reached bug index 950\n");
+        }
+        if ((!FIXREVERTER[950] && (normid != (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             name = (*normid != 0 ? normid : NULL);
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (name != NULL)
 	ret->name = xmlStrdup(name);
@@ -301,8 +335,23 @@ xmlNewCatalogEntry(xmlCatalogEntryType type, const xmlChar *name,
 	ret->value = xmlStrdup(value);
     else
 	ret->value = NULL;
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[951]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 951\n");
+      else
+        fprintf(stderr, "reached bug index 951\n");
+    }
+    if ((!FIXREVERTER[951] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	URL = value;
+	#ifdef FRCOV
+	}
+	#endif
     if (URL != NULL)
 	ret->URL = xmlStrdup(URL);
     else
@@ -326,14 +375,44 @@ xmlFreeCatalogEntryList(xmlCatalogEntryPtr ret);
 static void
 xmlFreeCatalogEntry(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlCatalogEntryPtr ret = (xmlCatalogEntryPtr) payload;
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[952]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 952\n");
+      else
+        fprintf(stderr, "reached bug index 952\n");
+    }
+    if ((!FIXREVERTER[952] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     /*
      * Entries stored in the file hash must be deallocated
      * only by the file hash cleaner !
      */
-    if (ret->dealloc == 1)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[953]) {
+      if ((ret -> dealloc == 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 953\n");
+      else
+        fprintf(stderr, "reached bug index 953\n");
+    }
+    if ((!FIXREVERTER[953] && (ret -> dealloc == 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (xmlDebugCatalogs) {
 	if (ret->name != NULL)
@@ -386,8 +465,23 @@ xmlFreeCatalogHashEntryList(void *payload,
     xmlCatalogEntryPtr catal = (xmlCatalogEntryPtr) payload;
     xmlCatalogEntryPtr children, next;
 
-    if (catal == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[954]) {
+      if ((catal == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 954\n");
+      else
+        fprintf(stderr, "reached bug index 954\n");
+    }
+    if ((!FIXREVERTER[954] && (catal == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     children = catal->children;
     while (children != NULL) {
@@ -416,10 +510,25 @@ xmlCreateNewCatalog(xmlCatalogType type, xmlCatalogPrefer prefer) {
     xmlCatalogPtr ret;
 
     ret = (xmlCatalogPtr) xmlMalloc(sizeof(xmlCatalog));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[955]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 955\n");
+      else
+        fprintf(stderr, "reached bug index 955\n");
+    }
+    if ((!FIXREVERTER[955] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCatalogErrMemory("allocating catalog");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlCatalog));
     ret->type = type;
     ret->catalNr = 0;
@@ -732,9 +841,23 @@ xmlCatalogConvertEntry(void *payload, void *data,
                        const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlCatalogEntryPtr entry = (xmlCatalogEntryPtr) payload;
     xmlCatalogPtr catal = (xmlCatalogPtr) data;
-    if ((entry == NULL) || (catal == NULL) || (catal->sgml == NULL) ||
-	(catal->xml == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[962]) {
+      if ((entry == (void *) 0 || catal == (void *) 0 || catal -> sgml == (void *) 0 || catal -> xml == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 962\n");
+      else
+        fprintf(stderr, "reached bug index 962\n");
+    }
+    if ((!FIXREVERTER[962] && (entry == (void *) 0 || catal == (void *) 0 || catal -> sgml == (void *) 0 || catal -> xml == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     switch (entry->type) {
 	case SGML_CATA_ENTITY:
 	    entry->type = XML_CATA_PUBLIC;
@@ -1043,8 +1166,23 @@ xmlCatalogNormalizePublic(const xmlChar *pubID)
     xmlChar *ret;
     xmlChar *q;
 
-    if (pubID == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[970]) {
+      if ((pubID == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 970\n");
+      else
+        fprintf(stderr, "reached bug index 970\n");
+    }
+    if ((!FIXREVERTER[970] && (pubID == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     white = 1;
     for (p = pubID;*p != 0 && ok;p++) {
@@ -3123,7 +3261,19 @@ xmlInitializeCatalog(void) {
 	xmlCatalogEntryPtr *nextent;
 
 	catalogs = (const char *) getenv("XML_CATALOG_FILES");
-	if (catalogs == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1048]) {
+	  if ((catalogs == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1048\n");
+	  else
+	    fprintf(stderr, "reached bug index 1048\n");
+	}
+	if ((!FIXREVERTER[1048] && (catalogs == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 #if defined(_WIN32) && defined(_MSC_VER)
     {
 		void* hmodule;
@@ -3152,6 +3302,9 @@ xmlInitializeCatalog(void) {
     }
 #else
 	    catalogs = XML_XML_DEFAULT_CATALOG;
+	    #ifdef FRCOV
+	    }
+	    #endif
 #endif
 
 	catal = xmlCreateNewCatalog(XML_XML_CATALOG_TYPE,
@@ -3627,8 +3780,23 @@ xmlCatalogAddLocal(void *catalogs, const xmlChar *URL) {
     if (!xmlCatalogInitialized)
 	xmlInitializeCatalog();
 
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1053]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1053\n");
+      else
+        fprintf(stderr, "reached bug index 1053\n");
+    }
+    if ((!FIXREVERTER[1053] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(catalogs);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (xmlDebugCatalogs)
 	xmlGenericError(xmlGenericErrorContext,
@@ -3636,12 +3804,42 @@ xmlCatalogAddLocal(void *catalogs, const xmlChar *URL) {
 
     add = xmlNewCatalogEntry(XML_CATA_CATALOG, NULL, URL, NULL,
 	                     xmlCatalogDefaultPrefer, NULL);
-    if (add == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1054]) {
+      if ((add == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1054\n");
+      else
+        fprintf(stderr, "reached bug index 1054\n");
+    }
+    if ((!FIXREVERTER[1054] && (add == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(catalogs);
+	#ifdef FRCOV
+	}
+	#endif
 
     catal = (xmlCatalogEntryPtr) catalogs;
-    if (catal == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1055]) {
+      if ((catal == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1055\n");
+      else
+        fprintf(stderr, "reached bug index 1055\n");
+    }
+    if ((!FIXREVERTER[1055] && (catal == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return((void *) add);
+	#ifdef FRCOV
+	}
+	#endif
 
     while (catal->next != NULL)
 	catal = catal->next;
diff --git a/chvalid.c b/chvalid.c
old mode 100644
new mode 100755
index 06e8db06..2e6466fc
--- a/chvalid.c
+++ b/chvalid.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * chvalid.c:	this module implements the character range
  *		validation APIs
@@ -170,10 +174,40 @@ xmlCharInRange (unsigned int val, const xmlChRangeGroup *rptr) {
     const xmlChSRange *sptr;
     const xmlChLRange *lptr;
 
-    if (rptr == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1678]) {
+      if ((rptr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1678\n");
+      else
+        fprintf(stderr, "reached bug index 1678\n");
+    }
+    if ((!FIXREVERTER[1678] && (rptr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (val < 0x10000) {	/* is val in 'short' or 'long'  array? */
-	if (rptr->nbShortRange == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1679]) {
+	  if ((rptr -> nbShortRange == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1679\n");
+	  else
+	    fprintf(stderr, "reached bug index 1679\n");
+	}
+	if ((!FIXREVERTER[1679] && (rptr -> nbShortRange == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	low = 0;
 	high = rptr->nbShortRange - 1;
 	sptr = rptr->shortRange;
@@ -190,9 +224,24 @@ xmlCharInRange (unsigned int val, const xmlChRangeGroup *rptr) {
 	    }
 	}
     } else {
-	if (rptr->nbLongRange == 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1680]) {
+	  if ((rptr -> nbLongRange == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1680\n");
+	  else
+	    fprintf(stderr, "reached bug index 1680\n");
+	}
+	if ((!FIXREVERTER[1680] && (rptr -> nbLongRange == 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return 0;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	low = 0;
 	high = rptr->nbLongRange - 1;
 	lptr = rptr->longRange;
diff --git a/chvalid.def b/chvalid.def
old mode 100644
new mode 100755
diff --git a/configure.ac b/configure.ac
old mode 100644
new mode 100755
diff --git a/debugXML.c b/debugXML.c
old mode 100644
new mode 100755
diff --git a/dict.c b/dict.c
old mode 100644
new mode 100755
index 13a7b937..a1db1552
--- a/dict.c
+++ b/dict.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * dict.c: dictionary of reusable strings, just used to avoid allocation
  *         and freeing operations.
@@ -252,7 +256,22 @@ xmlDictAddString(xmlDictPtr dict, const xmlChar *name, unsigned int namelen) {
     while (pool != NULL) {
 	if ((size_t)(pool->end - pool->free) > namelen)
 	    goto found_pool;
-	if (pool->size > size) size = pool->size;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2512]) {
+	  if ((pool -> size > size ) && !(0))
+	    fprintf(stderr, "triggered bug index 2512\n");
+	  else
+	    fprintf(stderr, "reached bug index 2512\n");
+	}
+	if ((!FIXREVERTER[2512] && (pool -> size > size ))
+	#else
+	if (0
+	#endif
+	) size = pool->size;
+	#ifdef FRCOV
+	}
+	#endif
         limit += pool->size;
 	pool = pool->next;
     }
@@ -266,11 +285,41 @@ xmlDictAddString(xmlDictPtr dict, const xmlChar *name, unsigned int namelen) {
 
         if (size == 0) size = 1000;
 	else size *= 4; /* exponential growth */
-        if (size < 4 * namelen)
-	    size = 4 * namelen; /* just in case ! */
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2513]) {
+          if ((size < 4 * namelen ) && !(0))
+            fprintf(stderr, "triggered bug index 2513\n");
+          else
+            fprintf(stderr, "reached bug index 2513\n");
+        }
+        if ((!FIXREVERTER[2513] && (size < 4 * namelen ))
+        #else
+        if (0
+        #endif
+        )
+	    size = 4 * namelen;
+	    #ifdef FRCOV
+	    }
+	    #endif /* just in case ! */
 	pool = (xmlDictStringsPtr) xmlMalloc(sizeof(xmlDictStrings) + size);
-	if (pool == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2514]) {
+	  if ((pool == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2514\n");
+	  else
+	    fprintf(stderr, "reached bug index 2514\n");
+	}
+	if ((!FIXREVERTER[2514] && (pool == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	pool->size = size;
 	pool->nbStrings = 0;
 	pool->free = &pool->array[0];
@@ -311,7 +360,22 @@ xmlDictAddQString(xmlDictPtr dict, const xmlChar *prefix, unsigned int plen,
     size_t size = 0; /* + sizeof(_xmlDictStrings) == 1024 */
     size_t limit = 0;
 
-    if (prefix == NULL) return(xmlDictAddString(dict, name, namelen));
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2515]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2515\n");
+      else
+        fprintf(stderr, "reached bug index 2515\n");
+    }
+    if ((!FIXREVERTER[2515] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(xmlDictAddString(dict, name, namelen));
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef DICT_DEBUG_PATTERNS
     fprintf(stderr, "=");
@@ -320,7 +384,22 @@ xmlDictAddQString(xmlDictPtr dict, const xmlChar *prefix, unsigned int plen,
     while (pool != NULL) {
 	if ((size_t)(pool->end - pool->free) > namelen + plen + 1)
 	    goto found_pool;
-	if (pool->size > size) size = pool->size;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2516]) {
+	  if ((pool -> size > size ) && !(0))
+	    fprintf(stderr, "triggered bug index 2516\n");
+	  else
+	    fprintf(stderr, "reached bug index 2516\n");
+	}
+	if ((!FIXREVERTER[2516] && (pool -> size > size ))
+	#else
+	if (0
+	#endif
+	) size = pool->size;
+	#ifdef FRCOV
+	}
+	#endif
         limit += pool->size;
 	pool = pool->next;
     }
@@ -337,8 +416,23 @@ xmlDictAddQString(xmlDictPtr dict, const xmlChar *prefix, unsigned int plen,
         if (size < 4 * (namelen + plen + 1))
 	    size = 4 * (namelen + plen + 1); /* just in case ! */
 	pool = (xmlDictStringsPtr) xmlMalloc(sizeof(xmlDictStrings) + size);
-	if (pool == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2517]) {
+	  if ((pool == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2517\n");
+	  else
+	    fprintf(stderr, "reached bug index 2517\n");
+	}
+	if ((!FIXREVERTER[2517] && (pool == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	pool->size = size;
 	pool->nbStrings = 0;
 	pool->free = &pool->array[0];
@@ -447,7 +541,22 @@ static unsigned long
 xmlDictComputeFastKey(const xmlChar *name, int namelen, int seed) {
     unsigned long value = seed;
 
-    if (name == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2518]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2518\n");
+      else
+        fprintf(stderr, "reached bug index 2518\n");
+    }
+    if ((!FIXREVERTER[2518] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     value = *name;
     value <<= 5;
     if (namelen > 10) {
@@ -499,12 +608,42 @@ xmlDictComputeFastQKey(const xmlChar *prefix, int plen,
 
     if (len > 10) {
         int offset = len - (plen + 1 + 1);
-	if (offset < 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2519]) {
+	  if ((offset < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2519\n");
+	  else
+	    fprintf(stderr, "reached bug index 2519\n");
+	}
+	if ((!FIXREVERTER[2519] && (offset < 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    offset = len - (10 + 1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	value += name[offset];
         len = 10;
-	if (plen > 10)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2520]) {
+	  if ((plen > 10 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2520\n");
+	  else
+	    fprintf(stderr, "reached bug index 2520\n");
+	}
+	if ((!FIXREVERTER[2520] && (plen > 10 ))
+	#else
+	if (0
+	#endif
+	)
 	    plen = 10;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     switch (plen) {
         case 10: value += prefix[9];
@@ -643,7 +782,22 @@ xmlDictReference(xmlDictPtr dict) {
         if (!__xmlInitializeDict())
             return(-1);
 
-    if (dict == NULL) return -1;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2522]) {
+      if ((dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2522\n");
+      else
+        fprintf(stderr, "reached bug index 2522\n");
+    }
+    if ((!FIXREVERTER[2522] && (dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
     xmlRMutexLock(xmlDictMutex);
     dict->ref_counter++;
     xmlRMutexUnlock(xmlDictMutex);
@@ -671,12 +825,57 @@ xmlDictGrow(xmlDictPtr dict, size_t size) {
     int ret = 0;
     int keep_keys = 1;
 
-    if (dict == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2523]) {
+      if ((dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2523\n");
+      else
+        fprintf(stderr, "reached bug index 2523\n");
+    }
+    if ((!FIXREVERTER[2523] && (dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (size < 8)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2524]) {
+      if ((size < 8 ) && !(0))
+        fprintf(stderr, "triggered bug index 2524\n");
+      else
+        fprintf(stderr, "reached bug index 2524\n");
+    }
+    if ((!FIXREVERTER[2524] && (size < 8 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
-    if (size > 8 * 2048)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2525]) {
+      if ((size > 8 * 2048 ) && !(0))
+        fprintf(stderr, "triggered bug index 2525\n");
+      else
+        fprintf(stderr, "reached bug index 2525\n");
+    }
+    if ((!FIXREVERTER[2525] && (size > 8 * 2048 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifdef DICT_DEBUG_PATTERNS
     fprintf(stderr, "*");
@@ -684,16 +883,46 @@ xmlDictGrow(xmlDictPtr dict, size_t size) {
 
     oldsize = dict->size;
     olddict = dict->dict;
-    if (olddict == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2526]) {
+      if ((olddict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2526\n");
+      else
+        fprintf(stderr, "reached bug index 2526\n");
+    }
+    if ((!FIXREVERTER[2526] && (olddict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (oldsize == MIN_DICT_SIZE)
         keep_keys = 0;
 
     dict->dict = xmlMalloc(size * sizeof(xmlDictEntry));
-    if (dict->dict == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2528]) {
+      if ((dict -> dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2528\n");
+      else
+        fprintf(stderr, "reached bug index 2528\n");
+    }
+    if ((!FIXREVERTER[2528] && (dict -> dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	dict->dict = olddict;
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(dict->dict, 0, size * sizeof(xmlDictEntry));
     dict->size = size;
 
@@ -800,8 +1029,23 @@ xmlDictFree(xmlDictPtr dict) {
     int inside_dict = 0;
     xmlDictStringsPtr pool, nextp;
 
-    if (dict == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2529]) {
+      if ((dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2529\n");
+      else
+        fprintf(stderr, "reached bug index 2529\n");
+    }
+    if ((!FIXREVERTER[2529] && (dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (!xmlDictInitialized)
         if (!__xmlInitializeDict())
@@ -822,7 +1066,21 @@ xmlDictFree(xmlDictPtr dict) {
     }
 
     if (dict->dict) {
-	for(i = 0; ((i < dict->size) && (dict->nbElems > 0)); i++) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2532])
+	  fprintf(stderr, "reached bug index 2532\n");
+	for (i = 0; (FIXREVERTER[2532] && (i < dict -> size )) || (!FIXREVERTER[2532] && (i < dict -> size && dict -> nbElems > 0 ))
+	#else
+	for (i = 0; i < dict -> size 
+	#endif
+	; i++) {
+	  
+	#ifdef FRCOV
+	  if (!(dict -> nbElems > 0 ))
+	    fprintf(stderr, "triggered bug index 2532\n");
+	  #endif
+	
 	    iter = &(dict->dict[i]);
 	    if (iter->valid == 0)
 		continue;
@@ -836,6 +1094,9 @@ xmlDictFree(xmlDictPtr dict) {
 		iter = next;
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	xmlFree(dict->dict);
     }
     pool = dict->strings;
@@ -865,8 +1126,23 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
     const xmlChar *ret;
     unsigned int l;
 
-    if ((dict == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2533]) {
+      if ((dict == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2533\n");
+      else
+        fprintf(stderr, "reached bug index 2533\n");
+    }
+    if ((!FIXREVERTER[2533] && (dict == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (len < 0)
         l = strlen((const char *) name);
@@ -888,10 +1164,28 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
 	for (insert = &(dict->dict[key]); insert->next != NULL;
 	     insert = insert->next) {
 #ifdef __GNUC__
-	    if ((insert->okey == okey) && (insert->len == l)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2534]) {
+	      fprintf(stderr, "reached bug index 2534\n");
+	    }
+	    if ((FIXREVERTER[2534] && (insert -> okey == okey )) || (!FIXREVERTER[2534] && (insert -> okey == okey && insert -> len == l ))
+	    #else
+	    if (insert -> okey == okey 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(insert -> len == l ))
+	        fprintf(stderr, "triggered bug index 2534\n");
+	      #endif
+	    
 		if (!memcmp(insert->name, name, l))
 		    return(insert->name);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 #else
 	    if ((insert->okey == okey) && (insert->len == l) &&
 	        (!xmlStrncmp(insert->name, name, l)))
@@ -900,10 +1194,28 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
 	    nbi++;
 	}
 #ifdef __GNUC__
-	if ((insert->okey == okey) && (insert->len == l)) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2535]) {
+	  fprintf(stderr, "reached bug index 2535\n");
+	}
+	if ((FIXREVERTER[2535] && (insert -> okey == okey )) || (!FIXREVERTER[2535] && (insert -> okey == okey && insert -> len == l ))
+	#else
+	if (insert -> okey == okey 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(insert -> len == l ))
+	    fprintf(stderr, "triggered bug index 2535\n");
+	  #endif
+	
 	    if (!memcmp(insert->name, name, l))
 		return(insert->name);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 #else
 	if ((insert->okey == okey) && (insert->len == l) &&
 	    (!xmlStrncmp(insert->name, name, l)))
@@ -930,10 +1242,28 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
 	    for (tmp = &(dict->subdict->dict[key]); tmp->next != NULL;
 		 tmp = tmp->next) {
 #ifdef __GNUC__
-		if ((tmp->okey == skey) && (tmp->len == l)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2536]) {
+		  fprintf(stderr, "reached bug index 2536\n");
+		}
+		if ((FIXREVERTER[2536] && (tmp -> okey == skey )) || (!FIXREVERTER[2536] && (tmp -> okey == skey && tmp -> len == l ))
+		#else
+		if (tmp -> okey == skey 
+		#endif
+		) {
+		  
+		#ifdef FRCOV
+		  if (!(tmp -> len == l ))
+		    fprintf(stderr, "triggered bug index 2536\n");
+		  #endif
+		
 		    if (!memcmp(tmp->name, name, l))
 			return(tmp->name);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 #else
 		if ((tmp->okey == skey) && (tmp->len == l) &&
 		    (!xmlStrncmp(tmp->name, name, l)))
@@ -942,10 +1272,28 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
 		nbi++;
 	    }
 #ifdef __GNUC__
-	    if ((tmp->okey == skey) && (tmp->len == l)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2537]) {
+	      fprintf(stderr, "reached bug index 2537\n");
+	    }
+	    if ((FIXREVERTER[2537] && (tmp -> okey == skey )) || (!FIXREVERTER[2537] && (tmp -> okey == skey && tmp -> len == l ))
+	    #else
+	    if (tmp -> okey == skey 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(tmp -> len == l ))
+	        fprintf(stderr, "triggered bug index 2537\n");
+	      #endif
+	    
 		if (!memcmp(tmp->name, name, l))
 		    return(tmp->name);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 #else
 	    if ((tmp->okey == skey) && (tmp->len == l) &&
 		(!xmlStrncmp(tmp->name, name, l)))
@@ -956,14 +1304,44 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
     }
 
     ret = xmlDictAddString(dict, name, l);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2538]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2538\n");
+      else
+        fprintf(stderr, "reached bug index 2538\n");
+    }
+    if ((!FIXREVERTER[2538] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (insert == NULL) {
 	entry = &(dict->dict[key]);
     } else {
 	entry = xmlMalloc(sizeof(xmlDictEntry));
-	if (entry == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2539]) {
+	  if ((entry == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2539\n");
+	  else
+	    fprintf(stderr, "reached bug index 2539\n");
+	}
+	if ((!FIXREVERTER[2539] && (entry == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	     return(NULL);
+	     #ifdef FRCOV
+	     }
+	     #endif
     }
     entry->name = ret;
     entry->len = l;
@@ -1113,10 +1491,40 @@ xmlDictQLookup(xmlDictPtr dict, const xmlChar *prefix, const xmlChar *name) {
     const xmlChar *ret;
     unsigned int len, plen, l;
 
-    if ((dict == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2546]) {
+      if ((dict == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2546\n");
+      else
+        fprintf(stderr, "reached bug index 2546\n");
+    }
+    if ((!FIXREVERTER[2546] && (dict == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (prefix == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2547]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2547\n");
+      else
+        fprintf(stderr, "reached bug index 2547\n");
+    }
+    if ((!FIXREVERTER[2547] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlDictLookup(dict, name, -1));
+        #ifdef FRCOV
+        }
+        #endif
 
     l = len = strlen((const char *) name);
     plen = strlen((const char *) prefix);
@@ -1172,14 +1580,44 @@ xmlDictQLookup(xmlDictPtr dict, const xmlChar *prefix, const xmlChar *name) {
     }
 
     ret = xmlDictAddQString(dict, prefix, plen, name, l);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2548]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2548\n");
+      else
+        fprintf(stderr, "reached bug index 2548\n");
+    }
+    if ((!FIXREVERTER[2548] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (insert == NULL) {
 	entry = &(dict->dict[key]);
     } else {
 	entry = xmlMalloc(sizeof(xmlDictEntry));
-	if (entry == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2549]) {
+	  if ((entry == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2549\n");
+	  else
+	    fprintf(stderr, "reached bug index 2549\n");
+	}
+	if ((!FIXREVERTER[2549] && (entry == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	     return(NULL);
+	     #ifdef FRCOV
+	     }
+	     #endif
     }
     entry->name = ret;
     entry->len = len;
@@ -1187,8 +1625,23 @@ xmlDictQLookup(xmlDictPtr dict, const xmlChar *prefix, const xmlChar *name) {
     entry->valid = 1;
     entry->okey = okey;
 
-    if (insert != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2550]) {
+      if ((insert != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2550\n");
+      else
+        fprintf(stderr, "reached bug index 2550\n");
+    }
+    if ((!FIXREVERTER[2550] && (insert != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	insert->next = entry;
+	#ifdef FRCOV
+	}
+	#endif
 
     dict->nbElems++;
 
@@ -1214,8 +1667,23 @@ int
 xmlDictOwns(xmlDictPtr dict, const xmlChar *str) {
     xmlDictStringsPtr pool;
 
-    if ((dict == NULL) || (str == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2551]) {
+      if ((dict == (void *) 0 || str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2551\n");
+      else
+        fprintf(stderr, "reached bug index 2551\n");
+    }
+    if ((!FIXREVERTER[2551] && (dict == (void *) 0 || str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     pool = dict->strings;
     while (pool != NULL) {
         if ((str >= &pool->array[0]) && (str <= pool->free))
diff --git a/doc/APIchunk0.html b/doc/APIchunk0.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk1.html b/doc/APIchunk1.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk10.html b/doc/APIchunk10.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk11.html b/doc/APIchunk11.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk12.html b/doc/APIchunk12.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk13.html b/doc/APIchunk13.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk14.html b/doc/APIchunk14.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk15.html b/doc/APIchunk15.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk16.html b/doc/APIchunk16.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk17.html b/doc/APIchunk17.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk18.html b/doc/APIchunk18.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk19.html b/doc/APIchunk19.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk2.html b/doc/APIchunk2.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk20.html b/doc/APIchunk20.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk21.html b/doc/APIchunk21.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk22.html b/doc/APIchunk22.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk23.html b/doc/APIchunk23.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk24.html b/doc/APIchunk24.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk25.html b/doc/APIchunk25.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk26.html b/doc/APIchunk26.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk27.html b/doc/APIchunk27.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk28.html b/doc/APIchunk28.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk29.html b/doc/APIchunk29.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk3.html b/doc/APIchunk3.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk4.html b/doc/APIchunk4.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk5.html b/doc/APIchunk5.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk6.html b/doc/APIchunk6.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk7.html b/doc/APIchunk7.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk8.html b/doc/APIchunk8.html
old mode 100644
new mode 100755
diff --git a/doc/APIchunk9.html b/doc/APIchunk9.html
old mode 100644
new mode 100755
diff --git a/doc/APIconstructors.html b/doc/APIconstructors.html
old mode 100644
new mode 100755
diff --git a/doc/APIfiles.html b/doc/APIfiles.html
old mode 100644
new mode 100755
diff --git a/doc/APIfunctions.html b/doc/APIfunctions.html
old mode 100644
new mode 100755
diff --git a/doc/APIsymbols.html b/doc/APIsymbols.html
old mode 100644
new mode 100755
diff --git a/doc/ChangeLog.xsl b/doc/ChangeLog.xsl
old mode 100644
new mode 100755
diff --git a/doc/DOM.fig b/doc/DOM.fig
old mode 100644
new mode 100755
diff --git a/doc/DOM.gif b/doc/DOM.gif
old mode 100644
new mode 100755
diff --git a/doc/DOM.html b/doc/DOM.html
old mode 100644
new mode 100755
diff --git a/doc/FAQ.html b/doc/FAQ.html
old mode 100644
new mode 100755
diff --git a/doc/Libxml2-Logo-180x168.gif b/doc/Libxml2-Logo-180x168.gif
old mode 100644
new mode 100755
diff --git a/doc/Libxml2-Logo-90x34.gif b/doc/Libxml2-Logo-90x34.gif
old mode 100644
new mode 100755
diff --git a/doc/Makefile.am b/doc/Makefile.am
old mode 100644
new mode 100755
diff --git a/doc/README.docs b/doc/README.docs
old mode 100644
new mode 100755
diff --git a/doc/XMLinfo.html b/doc/XMLinfo.html
old mode 100644
new mode 100755
diff --git a/doc/XSLT.html b/doc/XSLT.html
old mode 100644
new mode 100755
diff --git a/doc/api.xsl b/doc/api.xsl
old mode 100644
new mode 100755
diff --git a/doc/architecture.html b/doc/architecture.html
old mode 100644
new mode 100755
diff --git a/doc/bugs.html b/doc/bugs.html
old mode 100644
new mode 100755
diff --git a/doc/catalog.fig b/doc/catalog.fig
old mode 100644
new mode 100755
diff --git a/doc/catalog.gif b/doc/catalog.gif
old mode 100644
new mode 100755
diff --git a/doc/catalog.html b/doc/catalog.html
old mode 100644
new mode 100755
diff --git a/doc/checkapisym.xsl b/doc/checkapisym.xsl
old mode 100644
new mode 100755
diff --git a/doc/contribs.html b/doc/contribs.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/Makefile.am b/doc/devhelp/Makefile.am
old mode 100644
new mode 100755
diff --git a/doc/devhelp/devhelp.xsl b/doc/devhelp/devhelp.xsl
old mode 100644
new mode 100755
diff --git a/doc/devhelp/general.html b/doc/devhelp/general.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/home.png b/doc/devhelp/home.png
old mode 100644
new mode 100755
diff --git a/doc/devhelp/html.xsl b/doc/devhelp/html.xsl
old mode 100644
new mode 100755
diff --git a/doc/devhelp/index.html b/doc/devhelp/index.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/left.png b/doc/devhelp/left.png
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-DOCBparser.html b/doc/devhelp/libxml2-DOCBparser.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-HTMLparser.html b/doc/devhelp/libxml2-HTMLparser.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-HTMLtree.html b/doc/devhelp/libxml2-HTMLtree.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-SAX.html b/doc/devhelp/libxml2-SAX.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-SAX2.html b/doc/devhelp/libxml2-SAX2.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-c14n.html b/doc/devhelp/libxml2-c14n.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-catalog.html b/doc/devhelp/libxml2-catalog.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-chvalid.html b/doc/devhelp/libxml2-chvalid.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-debugXML.html b/doc/devhelp/libxml2-debugXML.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-dict.html b/doc/devhelp/libxml2-dict.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-encoding.html b/doc/devhelp/libxml2-encoding.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-entities.html b/doc/devhelp/libxml2-entities.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-globals.html b/doc/devhelp/libxml2-globals.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-hash.html b/doc/devhelp/libxml2-hash.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-list.html b/doc/devhelp/libxml2-list.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-nanoftp.html b/doc/devhelp/libxml2-nanoftp.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-nanohttp.html b/doc/devhelp/libxml2-nanohttp.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-parser.html b/doc/devhelp/libxml2-parser.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-parserInternals.html b/doc/devhelp/libxml2-parserInternals.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-pattern.html b/doc/devhelp/libxml2-pattern.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-relaxng.html b/doc/devhelp/libxml2-relaxng.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-schemasInternals.html b/doc/devhelp/libxml2-schemasInternals.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-schematron.html b/doc/devhelp/libxml2-schematron.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-threads.html b/doc/devhelp/libxml2-threads.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-tree.html b/doc/devhelp/libxml2-tree.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-uri.html b/doc/devhelp/libxml2-uri.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-valid.html b/doc/devhelp/libxml2-valid.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xinclude.html b/doc/devhelp/libxml2-xinclude.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xlink.html b/doc/devhelp/libxml2-xlink.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlIO.html b/doc/devhelp/libxml2-xmlIO.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlautomata.html b/doc/devhelp/libxml2-xmlautomata.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlerror.html b/doc/devhelp/libxml2-xmlerror.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlexports.html b/doc/devhelp/libxml2-xmlexports.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlmemory.html b/doc/devhelp/libxml2-xmlmemory.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlmodule.html b/doc/devhelp/libxml2-xmlmodule.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlreader.html b/doc/devhelp/libxml2-xmlreader.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlregexp.html b/doc/devhelp/libxml2-xmlregexp.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlsave.html b/doc/devhelp/libxml2-xmlsave.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlschemas.html b/doc/devhelp/libxml2-xmlschemas.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlschemastypes.html b/doc/devhelp/libxml2-xmlschemastypes.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlstring.html b/doc/devhelp/libxml2-xmlstring.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlunicode.html b/doc/devhelp/libxml2-xmlunicode.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlversion.html b/doc/devhelp/libxml2-xmlversion.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xmlwriter.html b/doc/devhelp/libxml2-xmlwriter.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xpath.html b/doc/devhelp/libxml2-xpath.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xpathInternals.html b/doc/devhelp/libxml2-xpathInternals.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xpointer.html b/doc/devhelp/libxml2-xpointer.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2-xzlib.html b/doc/devhelp/libxml2-xzlib.html
old mode 100644
new mode 100755
diff --git a/doc/devhelp/libxml2.devhelp b/doc/devhelp/libxml2.devhelp
old mode 100644
new mode 100755
diff --git a/doc/devhelp/right.png b/doc/devhelp/right.png
old mode 100644
new mode 100755
diff --git a/doc/devhelp/style.css b/doc/devhelp/style.css
old mode 100644
new mode 100755
diff --git a/doc/devhelp/up.png b/doc/devhelp/up.png
old mode 100644
new mode 100755
diff --git a/doc/docdescr.doc b/doc/docdescr.doc
old mode 100644
new mode 100755
diff --git a/doc/docs.html b/doc/docs.html
old mode 100644
new mode 100755
diff --git a/doc/downloads.html b/doc/downloads.html
old mode 100644
new mode 100755
diff --git a/doc/elfgcchack.xsl b/doc/elfgcchack.xsl
old mode 100644
new mode 100755
diff --git a/doc/encoding.html b/doc/encoding.html
old mode 100644
new mode 100755
diff --git a/doc/entities.html b/doc/entities.html
old mode 100644
new mode 100755
diff --git a/doc/epatents.png b/doc/epatents.png
old mode 100644
new mode 100755
diff --git a/doc/example.html b/doc/example.html
old mode 100644
new mode 100755
diff --git a/doc/examples/Makefile.am b/doc/examples/Makefile.am
old mode 100644
new mode 100755
diff --git a/doc/examples/examples.xml b/doc/examples/examples.xml
old mode 100644
new mode 100755
diff --git a/doc/examples/examples.xsl b/doc/examples/examples.xsl
old mode 100644
new mode 100755
diff --git a/doc/examples/index.html b/doc/examples/index.html
old mode 100644
new mode 100755
diff --git a/doc/examples/io1.c b/doc/examples/io1.c
old mode 100644
new mode 100755
diff --git a/doc/examples/io1.res b/doc/examples/io1.res
old mode 100644
new mode 100755
diff --git a/doc/examples/io2.c b/doc/examples/io2.c
old mode 100644
new mode 100755
diff --git a/doc/examples/io2.res b/doc/examples/io2.res
old mode 100644
new mode 100755
diff --git a/doc/examples/parse1.c b/doc/examples/parse1.c
old mode 100644
new mode 100755
diff --git a/doc/examples/parse2.c b/doc/examples/parse2.c
old mode 100644
new mode 100755
diff --git a/doc/examples/parse3.c b/doc/examples/parse3.c
old mode 100644
new mode 100755
diff --git a/doc/examples/parse4.c b/doc/examples/parse4.c
old mode 100644
new mode 100755
diff --git a/doc/examples/reader1.c b/doc/examples/reader1.c
old mode 100644
new mode 100755
diff --git a/doc/examples/reader1.res b/doc/examples/reader1.res
old mode 100644
new mode 100755
diff --git a/doc/examples/reader2.c b/doc/examples/reader2.c
old mode 100644
new mode 100755
diff --git a/doc/examples/reader3.c b/doc/examples/reader3.c
old mode 100644
new mode 100755
diff --git a/doc/examples/reader3.res b/doc/examples/reader3.res
old mode 100644
new mode 100755
diff --git a/doc/examples/reader4.c b/doc/examples/reader4.c
old mode 100644
new mode 100755
diff --git a/doc/examples/reader4.res b/doc/examples/reader4.res
old mode 100644
new mode 100755
diff --git a/doc/examples/test1.xml b/doc/examples/test1.xml
old mode 100644
new mode 100755
diff --git a/doc/examples/test2.xml b/doc/examples/test2.xml
old mode 100644
new mode 100755
diff --git a/doc/examples/test3.xml b/doc/examples/test3.xml
old mode 100644
new mode 100755
diff --git a/doc/examples/testWriter.c b/doc/examples/testWriter.c
old mode 100644
new mode 100755
diff --git a/doc/examples/tree1.c b/doc/examples/tree1.c
old mode 100644
new mode 100755
diff --git a/doc/examples/tree1.res b/doc/examples/tree1.res
old mode 100644
new mode 100755
diff --git a/doc/examples/tree2.c b/doc/examples/tree2.c
old mode 100644
new mode 100755
diff --git a/doc/examples/tree2.res b/doc/examples/tree2.res
old mode 100644
new mode 100755
diff --git a/doc/examples/tst.xml b/doc/examples/tst.xml
old mode 100644
new mode 100755
diff --git a/doc/examples/writer.xml b/doc/examples/writer.xml
old mode 100644
new mode 100755
diff --git a/doc/examples/xpath1.c b/doc/examples/xpath1.c
old mode 100644
new mode 100755
diff --git a/doc/examples/xpath1.res b/doc/examples/xpath1.res
old mode 100644
new mode 100755
diff --git a/doc/examples/xpath2.c b/doc/examples/xpath2.c
old mode 100644
new mode 100755
diff --git a/doc/examples/xpath2.res b/doc/examples/xpath2.res
old mode 100644
new mode 100755
diff --git a/doc/favicon.ico b/doc/favicon.ico
old mode 100644
new mode 100755
diff --git a/doc/gnome2.png b/doc/gnome2.png
old mode 100644
new mode 100755
diff --git a/doc/guidelines.html b/doc/guidelines.html
old mode 100644
new mode 100755
diff --git a/doc/help.html b/doc/help.html
old mode 100644
new mode 100755
diff --git a/doc/html/book1.html b/doc/html/book1.html
old mode 100644
new mode 100755
diff --git a/doc/html/home.png b/doc/html/home.png
old mode 100644
new mode 100755
diff --git a/doc/html/index.html b/doc/html/index.html
old mode 100644
new mode 100755
diff --git a/doc/html/index.sgml b/doc/html/index.sgml
old mode 100644
new mode 100755
diff --git a/doc/html/left.png b/doc/html/left.png
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-DOCBparser.html b/doc/html/libxml-DOCBparser.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-HTMLparser.html b/doc/html/libxml-HTMLparser.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-HTMLtree.html b/doc/html/libxml-HTMLtree.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-SAX.html b/doc/html/libxml-SAX.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-SAX2.html b/doc/html/libxml-SAX2.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-c14n.html b/doc/html/libxml-c14n.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-catalog.html b/doc/html/libxml-catalog.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-chvalid.html b/doc/html/libxml-chvalid.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-debugXML.html b/doc/html/libxml-debugXML.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-dict.html b/doc/html/libxml-dict.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-encoding.html b/doc/html/libxml-encoding.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-entities.html b/doc/html/libxml-entities.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-globals.html b/doc/html/libxml-globals.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-hash.html b/doc/html/libxml-hash.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-lib.html b/doc/html/libxml-lib.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-list.html b/doc/html/libxml-list.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-nanoftp.html b/doc/html/libxml-nanoftp.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-nanohttp.html b/doc/html/libxml-nanohttp.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-parser.html b/doc/html/libxml-parser.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-parserInternals.html b/doc/html/libxml-parserInternals.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-pattern.html b/doc/html/libxml-pattern.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-relaxng.html b/doc/html/libxml-relaxng.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-schemasInternals.html b/doc/html/libxml-schemasInternals.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-schematron.html b/doc/html/libxml-schematron.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-threads.html b/doc/html/libxml-threads.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-tree.html b/doc/html/libxml-tree.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-uri.html b/doc/html/libxml-uri.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-valid.html b/doc/html/libxml-valid.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xinclude.html b/doc/html/libxml-xinclude.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xlink.html b/doc/html/libxml-xlink.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlIO.html b/doc/html/libxml-xmlIO.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlautomata.html b/doc/html/libxml-xmlautomata.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlerror.html b/doc/html/libxml-xmlerror.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlexports.html b/doc/html/libxml-xmlexports.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlmemory.html b/doc/html/libxml-xmlmemory.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlmodule.html b/doc/html/libxml-xmlmodule.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlreader.html b/doc/html/libxml-xmlreader.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlregexp.html b/doc/html/libxml-xmlregexp.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlsave.html b/doc/html/libxml-xmlsave.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlschemas.html b/doc/html/libxml-xmlschemas.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlschemastypes.html b/doc/html/libxml-xmlschemastypes.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlstring.html b/doc/html/libxml-xmlstring.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlunicode.html b/doc/html/libxml-xmlunicode.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlversion.html b/doc/html/libxml-xmlversion.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xmlwriter.html b/doc/html/libxml-xmlwriter.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xpath.html b/doc/html/libxml-xpath.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xpathInternals.html b/doc/html/libxml-xpathInternals.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml-xpointer.html b/doc/html/libxml-xpointer.html
old mode 100644
new mode 100755
diff --git a/doc/html/libxml.devhelp b/doc/html/libxml.devhelp
old mode 100644
new mode 100755
diff --git a/doc/html/right.png b/doc/html/right.png
old mode 100644
new mode 100755
diff --git a/doc/html/up.png b/doc/html/up.png
old mode 100644
new mode 100755
diff --git a/doc/index.html b/doc/index.html
old mode 100644
new mode 100755
diff --git a/doc/interface.html b/doc/interface.html
old mode 100644
new mode 100755
diff --git a/doc/intro.html b/doc/intro.html
old mode 100644
new mode 100755
diff --git a/doc/library.html b/doc/library.html
old mode 100644
new mode 100755
diff --git a/doc/libxml-doc.el b/doc/libxml-doc.el
old mode 100644
new mode 100755
diff --git a/doc/libxml.fig b/doc/libxml.fig
old mode 100644
new mode 100755
diff --git a/doc/libxml.gif b/doc/libxml.gif
old mode 100644
new mode 100755
diff --git a/doc/libxml2-api.xml b/doc/libxml2-api.xml
old mode 100644
new mode 100755
diff --git a/doc/libxml2-refs.xml b/doc/libxml2-refs.xml
old mode 100644
new mode 100755
diff --git a/doc/libxml2.xsa b/doc/libxml2.xsa
old mode 100644
new mode 100755
diff --git a/doc/namespaces.html b/doc/namespaces.html
old mode 100644
new mode 100755
diff --git a/doc/newapi.xsl b/doc/newapi.xsl
old mode 100644
new mode 100755
diff --git a/doc/news.html b/doc/news.html
old mode 100644
new mode 100755
diff --git a/doc/news.xsl b/doc/news.xsl
old mode 100644
new mode 100755
diff --git a/doc/python.html b/doc/python.html
old mode 100644
new mode 100755
diff --git a/doc/redhat.gif b/doc/redhat.gif
old mode 100644
new mode 100755
diff --git a/doc/search.php b/doc/search.php
old mode 100644
new mode 100755
diff --git a/doc/searches.html b/doc/searches.html
old mode 100644
new mode 100755
diff --git a/doc/searches.xsl b/doc/searches.xsl
old mode 100644
new mode 100755
diff --git a/doc/searches/AllQueries-20040408.xml b/doc/searches/AllQueries-20040408.xml
old mode 100644
new mode 100755
diff --git a/doc/searches/Queries-20040408.xml b/doc/searches/Queries-20040408.xml
old mode 100644
new mode 100755
diff --git a/doc/site.xsl b/doc/site.xsl
old mode 100644
new mode 100755
diff --git a/doc/smallfootonly.gif b/doc/smallfootonly.gif
old mode 100644
new mode 100755
diff --git a/doc/structure.fig b/doc/structure.fig
old mode 100644
new mode 100755
diff --git a/doc/structure.gif b/doc/structure.gif
old mode 100644
new mode 100755
diff --git a/doc/symbols.xml b/doc/symbols.xml
old mode 100644
new mode 100755
diff --git a/doc/syms.xsl b/doc/syms.xsl
old mode 100644
new mode 100755
diff --git a/doc/threads.html b/doc/threads.html
old mode 100644
new mode 100755
diff --git a/doc/tree.html b/doc/tree.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/apa.html b/doc/tutorial/apa.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/apb.html b/doc/tutorial/apb.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/apc.html b/doc/tutorial/apc.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/apd.html b/doc/tutorial/apd.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/ape.html b/doc/tutorial/ape.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/apf.html b/doc/tutorial/apf.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/apg.html b/doc/tutorial/apg.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/aph.html b/doc/tutorial/aph.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/api.html b/doc/tutorial/api.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/ar01s02.html b/doc/tutorial/ar01s02.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/ar01s03.html b/doc/tutorial/ar01s03.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/ar01s04.html b/doc/tutorial/ar01s04.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/ar01s05.html b/doc/tutorial/ar01s05.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/ar01s06.html b/doc/tutorial/ar01s06.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/ar01s07.html b/doc/tutorial/ar01s07.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/ar01s08.html b/doc/tutorial/ar01s08.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/ar01s09.html b/doc/tutorial/ar01s09.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/customfo.xsl b/doc/tutorial/customfo.xsl
old mode 100644
new mode 100755
diff --git a/doc/tutorial/customhtml.xsl b/doc/tutorial/customhtml.xsl
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/blank.png b/doc/tutorial/images/blank.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/callouts/1.png b/doc/tutorial/images/callouts/1.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/callouts/10.png b/doc/tutorial/images/callouts/10.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/callouts/2.png b/doc/tutorial/images/callouts/2.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/callouts/3.png b/doc/tutorial/images/callouts/3.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/callouts/4.png b/doc/tutorial/images/callouts/4.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/callouts/5.png b/doc/tutorial/images/callouts/5.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/callouts/6.png b/doc/tutorial/images/callouts/6.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/callouts/7.png b/doc/tutorial/images/callouts/7.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/callouts/8.png b/doc/tutorial/images/callouts/8.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/callouts/9.png b/doc/tutorial/images/callouts/9.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/caution.png b/doc/tutorial/images/caution.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/draft.png b/doc/tutorial/images/draft.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/home.png b/doc/tutorial/images/home.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/important.png b/doc/tutorial/images/important.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/next.png b/doc/tutorial/images/next.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/note.png b/doc/tutorial/images/note.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/prev.png b/doc/tutorial/images/prev.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/tip.png b/doc/tutorial/images/tip.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/toc-blank.png b/doc/tutorial/images/toc-blank.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/toc-minus.png b/doc/tutorial/images/toc-minus.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/toc-plus.png b/doc/tutorial/images/toc-plus.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/up.png b/doc/tutorial/images/up.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/images/warning.png b/doc/tutorial/images/warning.png
old mode 100644
new mode 100755
diff --git a/doc/tutorial/includeaddattribute.c b/doc/tutorial/includeaddattribute.c
old mode 100644
new mode 100755
diff --git a/doc/tutorial/includeaddkeyword.c b/doc/tutorial/includeaddkeyword.c
old mode 100644
new mode 100755
diff --git a/doc/tutorial/includeconvert.c b/doc/tutorial/includeconvert.c
old mode 100644
new mode 100755
diff --git a/doc/tutorial/includegetattribute.c b/doc/tutorial/includegetattribute.c
old mode 100644
new mode 100755
diff --git a/doc/tutorial/includekeyword.c b/doc/tutorial/includekeyword.c
old mode 100644
new mode 100755
diff --git a/doc/tutorial/includestory.xml b/doc/tutorial/includestory.xml
old mode 100644
new mode 100755
diff --git a/doc/tutorial/includexpath.c b/doc/tutorial/includexpath.c
old mode 100644
new mode 100755
diff --git a/doc/tutorial/index.html b/doc/tutorial/index.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/ix01.html b/doc/tutorial/ix01.html
old mode 100644
new mode 100755
diff --git a/doc/tutorial/xmltutorial.pdf b/doc/tutorial/xmltutorial.pdf
old mode 100644
new mode 100755
diff --git a/doc/tutorial/xmltutorial.xml b/doc/tutorial/xmltutorial.xml
old mode 100644
new mode 100755
diff --git a/doc/upgrade.html b/doc/upgrade.html
old mode 100644
new mode 100755
diff --git a/doc/w3c.png b/doc/w3c.png
old mode 100644
new mode 100755
diff --git a/doc/wiki.xsl b/doc/wiki.xsl
old mode 100644
new mode 100755
diff --git a/doc/xml.html b/doc/xml.html
old mode 100644
new mode 100755
diff --git a/doc/xmlcatalog.1 b/doc/xmlcatalog.1
old mode 100644
new mode 100755
diff --git a/doc/xmlcatalog_man.html b/doc/xmlcatalog_man.html
old mode 100644
new mode 100755
diff --git a/doc/xmlcatalog_man.xml b/doc/xmlcatalog_man.xml
old mode 100644
new mode 100755
diff --git a/doc/xmldtd.html b/doc/xmldtd.html
old mode 100644
new mode 100755
diff --git a/doc/xmlio.html b/doc/xmlio.html
old mode 100644
new mode 100755
diff --git a/doc/xmllint.1 b/doc/xmllint.1
old mode 100644
new mode 100755
diff --git a/doc/xmllint.html b/doc/xmllint.html
old mode 100644
new mode 100755
diff --git a/doc/xmllint.xml b/doc/xmllint.xml
old mode 100644
new mode 100755
diff --git a/doc/xmlmem.html b/doc/xmlmem.html
old mode 100644
new mode 100755
diff --git a/doc/xmlreader.html b/doc/xmlreader.html
old mode 100644
new mode 100755
diff --git a/doc/xsa.xsl b/doc/xsa.xsl
old mode 100644
new mode 100755
diff --git a/elfgcchack.h b/elfgcchack.h
old mode 100644
new mode 100755
diff --git a/enc.h b/enc.h
old mode 100644
new mode 100755
diff --git a/encoding.c b/encoding.c
old mode 100644
new mode 100755
index a3aaf10e..3aa9b7a1
--- a/encoding.c
+++ b/encoding.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * encoding.c : implements the encoding conversion functions needed for XML
  *
@@ -186,8 +190,23 @@ asciiToUTF8(unsigned char* out, int *outlen,
     while ((in < inend) && (out - outstart + 5 < *outlen)) {
 	c= *in++;
 
-        if (out >= outend)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1597]) {
+          if ((out >= outend ) && !(0))
+            fprintf(stderr, "triggered bug index 1597\n");
+          else
+            fprintf(stderr, "reached bug index 1597\n");
+        }
+        if ((!FIXREVERTER[1597] && (out >= outend ))
+        #else
+        if (0
+        #endif
+        )
 	    break;
+	    #ifdef FRCOV
+	    }
+	    #endif
         if (c < 0x80) {
 	    *out++ = c;
 	} else {
@@ -230,8 +249,35 @@ UTF8Toascii(unsigned char* out, int *outlen,
     unsigned int c, d;
     int trailing;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);
-    if (in == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1598]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1598\n");
+      else
+        fprintf(stderr, "reached bug index 1598\n");
+    }
+    if ((!FIXREVERTER[1598] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1599]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1599\n");
+      else
+        fprintf(stderr, "reached bug index 1599\n");
+    }
+    if ((!FIXREVERTER[1599] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
 	 * initialization nothing to do
 	 */
@@ -239,6 +285,9 @@ UTF8Toascii(unsigned char* out, int *outlen,
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend = in + (*inlen);
     outend = out + (*outlen);
     while (in < inend) {
@@ -272,8 +321,23 @@ UTF8Toascii(unsigned char* out, int *outlen,
 
 	/* assertion: c is a single UTF-4 value */
 	if (c < 0x80) {
-	    if (out >= outend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1600]) {
+	      if ((out >= outend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1600\n");
+	      else
+	        fprintf(stderr, "reached bug index 1600\n");
+	    }
+	    if ((!FIXREVERTER[1600] && (out >= outend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    *out++ = c;
 	} else {
 	    /* no chance for this in Ascii */
@@ -312,14 +376,43 @@ isolat1ToUTF8(unsigned char* out, int *outlen,
     const unsigned char* inend;
     const unsigned char* instop;
 
-    if ((out == NULL) || (in == NULL) || (outlen == NULL) || (inlen == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1601]) {
+      if ((out == (void *) 0 || in == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1601\n");
+      else
+        fprintf(stderr, "reached bug index 1601\n");
+    }
+    if ((!FIXREVERTER[1601] && (out == (void *) 0 || in == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     outend = out + *outlen;
     inend = in + (*inlen);
     instop = inend;
 
-    while ((in < inend) && (out < outend - 1)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1602])
+      fprintf(stderr, "reached bug index 1602\n");
+    while ((FIXREVERTER[1602] && (in < inend )) || (!FIXREVERTER[1602] && (in < inend && out < outend - 1 ))
+    #else
+    while (in < inend 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(out < outend - 1 ))
+        fprintf(stderr, "triggered bug index 1602\n");
+      #endif
+    
 	if (*in >= 0x80) {
 	    *out++ = (((*in) >>  6) & 0x1F) | 0xC0;
             *out++ = ((*in) & 0x3F) | 0x80;
@@ -330,6 +423,9 @@ isolat1ToUTF8(unsigned char* out, int *outlen,
 	    *out++ = *in++;
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((in < inend) && (out < outend) && (*in < 0x80)) {
         *out++ = *in++;
     }
@@ -357,21 +453,66 @@ UTF8ToUTF8(unsigned char* out, int *outlen,
 {
     int len;
 
-    if ((out == NULL) || (outlen == NULL) || (inlenb == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1603]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlenb == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1603\n");
+      else
+        fprintf(stderr, "reached bug index 1603\n");
+    }
+    if ((!FIXREVERTER[1603] && (out == (void *) 0 || outlen == (void *) 0 || inlenb == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (inb == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1604]) {
+      if ((inb == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1604\n");
+      else
+        fprintf(stderr, "reached bug index 1604\n");
+    }
+    if ((!FIXREVERTER[1604] && (inb == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /* inb == NULL means output is initialized. */
         *outlen = 0;
         *inlenb = 0;
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (*outlen > *inlenb) {
 	len = *inlenb;
     } else {
 	len = *outlen;
     }
-    if (len < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1605]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1605\n");
+      else
+        fprintf(stderr, "reached bug index 1605\n");
+    }
+    if ((!FIXREVERTER[1605] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     memcpy(out, inb, len);
 
@@ -409,8 +550,35 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
     unsigned int c, d;
     int trailing;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);
-    if (in == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1606]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1606\n");
+      else
+        fprintf(stderr, "reached bug index 1606\n");
+    }
+    if ((!FIXREVERTER[1606] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1607]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1607\n");
+      else
+        fprintf(stderr, "reached bug index 1607\n");
+    }
+    if ((!FIXREVERTER[1607] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
 	 * initialization nothing to do
 	 */
@@ -418,6 +586,9 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend = in + (*inlen);
     outend = out + (*outlen);
     while (in < inend) {
@@ -443,8 +614,23 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
 	}
 
 	for ( ; trailing; trailing--) {
-	    if (in >= inend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1608]) {
+	      if ((in >= inend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1608\n");
+	      else
+	        fprintf(stderr, "reached bug index 1608\n");
+	    }
+	    if ((!FIXREVERTER[1608] && (in >= inend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    if (((d= *in++) & 0xC0) != 0x80) {
 		*outlen = out - outstart;
 		*inlen = processed - instart;
@@ -456,8 +642,23 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
 
 	/* assertion: c is a single UTF-4 value */
 	if (c <= 0xFF) {
-	    if (out >= outend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1609]) {
+	      if ((out >= outend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1609\n");
+	      else
+	        fprintf(stderr, "reached bug index 1609\n");
+	    }
+	    if ((!FIXREVERTER[1609] && (out >= outend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    *out++ = c;
 	} else {
 	    /* no chance for this in IsoLat1 */
@@ -517,9 +718,24 @@ UTF16LEToUTF8(unsigned char* out, int *outlen,
 	    in++;
 	}
         if ((c & 0xFC00) == 0xD800) {    /* surrogates */
-	    if (in >= inend) {           /* (in > inend) shouldn't happens */
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1610]) {
+	      if ((in >= inend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1610\n");
+	      else
+	        fprintf(stderr, "reached bug index 1610\n");
+	    }
+	    if ((!FIXREVERTER[1610] && (in >= inend ))
+	    #else
+	    if (0
+	    #endif
+	    ) {           /* (in > inend) shouldn't happens */
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (xmlLittleEndian) {
 		d = *in++;
 	    } else {
@@ -542,16 +758,46 @@ UTF16LEToUTF8(unsigned char* out, int *outlen,
         }
 
 	/* assertion: c is a single UTF-4 value */
-        if (out >= outend)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1611]) {
+          if ((out >= outend ) && !(0))
+            fprintf(stderr, "triggered bug index 1611\n");
+          else
+            fprintf(stderr, "reached bug index 1611\n");
+        }
+        if ((!FIXREVERTER[1611] && (out >= outend ))
+        #else
+        if (0
+        #endif
+        )
 	    break;
+	    #ifdef FRCOV
+	    }
+	    #endif
         if      (c <    0x80) {  *out++=  c;                bits= -6; }
         else if (c <   0x800) {  *out++= ((c >>  6) & 0x1F) | 0xC0;  bits=  0; }
         else if (c < 0x10000) {  *out++= ((c >> 12) & 0x0F) | 0xE0;  bits=  6; }
         else                  {  *out++= ((c >> 18) & 0x07) | 0xF0;  bits= 12; }
 
         for ( ; bits >= 0; bits-= 6) {
-            if (out >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1612]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1612\n");
+              else
+                fprintf(stderr, "reached bug index 1612\n");
+            }
+            if ((!FIXREVERTER[1612] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
             *out++= ((c >> bits) & 0x3F) | 0x80;
         }
 	processed = (const unsigned char*) in;
@@ -591,12 +837,42 @@ UTF8ToUTF16LE(unsigned char* outb, int *outlen,
     unsigned short tmp1, tmp2;
 
     /* UTF16LE encoding has no BOM */
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);
-    if (in == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1613]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1613\n");
+      else
+        fprintf(stderr, "reached bug index 1613\n");
+    }
+    if ((!FIXREVERTER[1613] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1614]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1614\n");
+      else
+        fprintf(stderr, "reached bug index 1614\n");
+    }
+    if ((!FIXREVERTER[1614] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	*outlen = 0;
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend= in + *inlen;
     outend = out + (*outlen / 2);
     while (in < inend) {
@@ -630,8 +906,23 @@ UTF8ToUTF16LE(unsigned char* outb, int *outlen,
 
       /* assertion: c is a single UTF-4 value */
         if (c < 0x10000) {
-            if (out >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1615]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1615\n");
+              else
+                fprintf(stderr, "reached bug index 1615\n");
+            }
+            if ((!FIXREVERTER[1615] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    if (xmlLittleEndian) {
 		*out++ = c;
 	    } else {
@@ -642,8 +933,23 @@ UTF8ToUTF16LE(unsigned char* outb, int *outlen,
 	    }
         }
         else if (c < 0x110000) {
-            if (out+1 >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1616]) {
+              if ((out + 1 >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1616\n");
+              else
+                fprintf(stderr, "reached bug index 1616\n");
+            }
+            if ((!FIXREVERTER[1616] && (out + 1 >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
             c -= 0x10000;
 	    if (xmlLittleEndian) {
 		*out++ = 0xD800 | (c >> 10);
@@ -756,11 +1062,26 @@ UTF16BEToUTF8(unsigned char* out, int *outlen,
 	    c= *in++;
 	}
         if ((c & 0xFC00) == 0xD800) {    /* surrogates */
-	    if (in >= inend) {           /* (in > inend) shouldn't happens */
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1617]) {
+	      if ((in >= inend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1617\n");
+	      else
+	        fprintf(stderr, "reached bug index 1617\n");
+	    }
+	    if ((!FIXREVERTER[1617] && (in >= inend ))
+	    #else
+	    if (0
+	    #endif
+	    ) {           /* (in > inend) shouldn't happens */
 		*outlen = out - outstart;
 		*inlenb = processed - inb;
 	        return(-2);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (xmlLittleEndian) {
 		tmp = (unsigned char *) in;
 		d = *tmp++;
@@ -784,16 +1105,46 @@ UTF16BEToUTF8(unsigned char* out, int *outlen,
         }
 
 	/* assertion: c is a single UTF-4 value */
-        if (out >= outend)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1618]) {
+          if ((out >= outend ) && !(0))
+            fprintf(stderr, "triggered bug index 1618\n");
+          else
+            fprintf(stderr, "reached bug index 1618\n");
+        }
+        if ((!FIXREVERTER[1618] && (out >= outend ))
+        #else
+        if (0
+        #endif
+        )
 	    break;
+	    #ifdef FRCOV
+	    }
+	    #endif
         if      (c <    0x80) {  *out++=  c;                bits= -6; }
         else if (c <   0x800) {  *out++= ((c >>  6) & 0x1F) | 0xC0;  bits=  0; }
         else if (c < 0x10000) {  *out++= ((c >> 12) & 0x0F) | 0xE0;  bits=  6; }
         else                  {  *out++= ((c >> 18) & 0x07) | 0xF0;  bits= 12; }
 
         for ( ; bits >= 0; bits-= 6) {
-            if (out >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1619]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1619\n");
+              else
+                fprintf(stderr, "reached bug index 1619\n");
+            }
+            if ((!FIXREVERTER[1619] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
             *out++= ((c >> bits) & 0x3F) | 0x80;
         }
 	processed = (const unsigned char*) in;
@@ -833,12 +1184,42 @@ UTF8ToUTF16BE(unsigned char* outb, int *outlen,
     unsigned short tmp1, tmp2;
 
     /* UTF-16BE has no BOM */
-    if ((outb == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);
-    if (in == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1620]) {
+      if ((outb == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1620\n");
+      else
+        fprintf(stderr, "reached bug index 1620\n");
+    }
+    if ((!FIXREVERTER[1620] && (outb == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1621]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1621\n");
+      else
+        fprintf(stderr, "reached bug index 1621\n");
+    }
+    if ((!FIXREVERTER[1621] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	*outlen = 0;
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend= in + *inlen;
     outend = out + (*outlen / 2);
     while (in < inend) {
@@ -871,7 +1252,22 @@ UTF8ToUTF16BE(unsigned char* outb, int *outlen,
 
       /* assertion: c is a single UTF-4 value */
         if (c < 0x10000) {
-            if (out >= outend)  break;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1622]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1622\n");
+              else
+                fprintf(stderr, "reached bug index 1622\n");
+            }
+            if ((!FIXREVERTER[1622] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )  break;
+            #ifdef FRCOV
+            }
+            #endif
 	    if (xmlLittleEndian) {
 		tmp = (unsigned char *) out;
 		*tmp = c >> 8;
@@ -882,7 +1278,22 @@ UTF8ToUTF16BE(unsigned char* outb, int *outlen,
 	    }
         }
         else if (c < 0x110000) {
-            if (out+1 >= outend)  break;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1623]) {
+              if ((out + 1 >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1623\n");
+              else
+                fprintf(stderr, "reached bug index 1623\n");
+            }
+            if ((!FIXREVERTER[1623] && (out + 1 >= outend ))
+            #else
+            if (0
+            #endif
+            )  break;
+            #ifdef FRCOV
+            }
+            #endif
             c -= 0x10000;
 	    if (xmlLittleEndian) {
 		tmp1 = 0xD800 | (c >> 10);
@@ -931,8 +1342,23 @@ UTF8ToUTF16BE(unsigned char* outb, int *outlen,
 xmlCharEncoding
 xmlDetectCharEncoding(const unsigned char* in, int len)
 {
-    if (in == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1624]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1624\n");
+      else
+        fprintf(stderr, "reached bug index 1624\n");
+    }
+    if ((!FIXREVERTER[1624] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_CHAR_ENCODING_NONE);
+        #ifdef FRCOV
+        }
+        #endif
     if (len >= 4) {
 	if ((in[0] == 0x00) && (in[1] == 0x00) &&
 	    (in[2] == 0x00) && (in[3] == 0x3C))
@@ -1020,8 +1446,23 @@ xmlGetEncodingAlias(const char *alias) {
     int i;
     char upper[100];
 
-    if (alias == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1626]) {
+      if ((alias == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1626\n");
+      else
+        fprintf(stderr, "reached bug index 1626\n");
+    }
+    if ((!FIXREVERTER[1626] && (alias == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (xmlCharEncodingAliases == NULL)
 	return(NULL);
@@ -1153,15 +1594,45 @@ xmlParseCharEncoding(const char* name)
     char upper[500];
     int i;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1632]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1632\n");
+      else
+        fprintf(stderr, "reached bug index 1632\n");
+    }
+    if ((!FIXREVERTER[1632] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(XML_CHAR_ENCODING_NONE);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Do the alias resolution
      */
     alias = xmlGetEncodingAlias(name);
-    if (alias != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1633]) {
+      if ((alias != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1633\n");
+      else
+        fprintf(stderr, "reached bug index 1633\n");
+    }
+    if ((!FIXREVERTER[1633] && (alias != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	name = alias;
+	#ifdef FRCOV
+	}
+	#endif
 
     for (i = 0;i < 499;i++) {
         upper[i] = toupper(name[i]);
@@ -1328,38 +1799,98 @@ xmlNewCharEncodingHandler(const char *name,
      * Do the alias resolution
      */
     alias = xmlGetEncodingAlias(name);
-    if (alias != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1634]) {
+      if ((alias != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1634\n");
+      else
+        fprintf(stderr, "reached bug index 1634\n");
+    }
+    if ((!FIXREVERTER[1634] && (alias != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	name = alias;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Keep only the uppercase version of the encoding.
      */
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1635]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1635\n");
+      else
+        fprintf(stderr, "reached bug index 1635\n");
+    }
+    if ((!FIXREVERTER[1635] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlEncodingErr(XML_I18N_NO_NAME,
 		       "xmlNewCharEncodingHandler : no name !\n", NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     for (i = 0;i < 499;i++) {
         upper[i] = toupper(name[i]);
 	if (upper[i] == 0) break;
     }
     upper[i] = 0;
     up = xmlMemStrdup(upper);
-    if (up == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1636]) {
+      if ((up == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1636\n");
+      else
+        fprintf(stderr, "reached bug index 1636\n");
+    }
+    if ((!FIXREVERTER[1636] && (up == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlEncodingErrMemory("xmlNewCharEncodingHandler : out of memory !\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * allocate and fill-up an handler block.
      */
     handler = (xmlCharEncodingHandlerPtr)
               xmlMalloc(sizeof(xmlCharEncodingHandler));
-    if (handler == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1637]) {
+      if ((handler == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1637\n");
+      else
+        fprintf(stderr, "reached bug index 1637\n");
+    }
+    if ((!FIXREVERTER[1637] && (handler == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(up);
         xmlEncodingErrMemory("xmlNewCharEncodingHandler : out of memory !\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(handler, 0, sizeof(xmlCharEncodingHandler));
     handler->input = input;
     handler->output = output;
@@ -1480,11 +2011,26 @@ xmlCleanupCharEncodingHandlers(void) {
 void
 xmlRegisterCharEncodingHandler(xmlCharEncodingHandlerPtr handler) {
     if (handlers == NULL) xmlInitCharEncodingHandlers();
-    if ((handler == NULL) || (handlers == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1640]) {
+      if ((handler == (void *) 0 ) && !(handlers == (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1640\n");
+      else
+        fprintf(stderr, "reached bug index 1640\n");
+    }
+    if ((FIXREVERTER[1640] && (handlers == (void *) 0 )) || (!FIXREVERTER[1640] && (handler == (void *) 0 || handlers == (void *) 0 ))
+    #else
+    if (handlers == (void *) 0 
+    #endif
+    ) {
         xmlEncodingErr(XML_I18N_NO_HANDLER,
 		"xmlRegisterCharEncodingHandler: NULL handler !\n", NULL);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (nbCharEncodingHandler >= MAX_ENCODING_HANDLERS) {
         xmlEncodingErr(XML_I18N_EXCESS_HANDLER,
@@ -1654,7 +2200,22 @@ xmlFindCharEncodingHandler(const char *name) {
     int i;
 
     if (handlers == NULL) xmlInitCharEncodingHandlers();
-    if (name == NULL) return(xmlDefaultCharEncodingHandler);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1642]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1642\n");
+      else
+        fprintf(stderr, "reached bug index 1642\n");
+    }
+    if ((!FIXREVERTER[1642] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(xmlDefaultCharEncodingHandler);
+    #ifdef FRCOV
+    }
+    #endif
     if (name[0] == 0) return(xmlDefaultCharEncodingHandler);
 
     /*
@@ -1662,8 +2223,23 @@ xmlFindCharEncodingHandler(const char *name) {
      */
     norig = name;
     nalias = xmlGetEncodingAlias(name);
-    if (nalias != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1643]) {
+      if ((nalias != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1643\n");
+      else
+        fprintf(stderr, "reached bug index 1643\n");
+    }
+    if ((!FIXREVERTER[1643] && (nalias != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	name = nalias;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Check first for directly registered encoding names
@@ -1699,11 +2275,26 @@ xmlFindCharEncodingHandler(const char *name) {
     if ((icv_in != (iconv_t) -1) && (icv_out != (iconv_t) -1)) {
 	    enc = (xmlCharEncodingHandlerPtr)
 	          xmlMalloc(sizeof(xmlCharEncodingHandler));
-	    if (enc == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1644]) {
+	      if ((enc == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1644\n");
+	      else
+	        fprintf(stderr, "reached bug index 1644\n");
+	    }
+	    if ((!FIXREVERTER[1644] && (enc == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        iconv_close(icv_in);
 	        iconv_close(icv_out);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
             memset(enc, 0, sizeof(xmlCharEncodingHandler));
 	    enc->name = xmlMemStrdup(name);
 	    enc->input = NULL;
@@ -1805,10 +2396,25 @@ xmlIconvWrapper(iconv_t cd, unsigned char *out, int *outlen,
     char *icv_out = (char *) out;
     int ret;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL) || (in == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1645]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 || in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1645\n");
+      else
+        fprintf(stderr, "reached bug index 1645\n");
+    }
+    if ((!FIXREVERTER[1645] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 || in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (outlen != NULL) *outlen = 0;
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     icv_inlen = *inlen;
     icv_outlen = *outlen;
     ret = iconv(cd, (ICONV_CONST char **) &icv_in, &icv_inlen, &icv_out, &icv_outlen);
@@ -2103,15 +2709,44 @@ xmlCharEncFirstLineInput(xmlParserInputBufferPtr input, int len)
     xmlBufPtr in;
     xmlBufPtr out;
 
-    if ((input == NULL) || (input->encoder == NULL) ||
-        (input->buffer == NULL) || (input->raw == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1651]) {
+      if ((input == (void *) 0 || input -> encoder == (void *) 0 || input -> buffer == (void *) 0 || input -> raw == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1651\n");
+      else
+        fprintf(stderr, "reached bug index 1651\n");
+    }
+    if ((!FIXREVERTER[1651] && (input == (void *) 0 || input -> encoder == (void *) 0 || input -> buffer == (void *) 0 || input -> raw == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     out = input->buffer;
     in = input->raw;
 
     toconv = xmlBufUse(in);
-    if (toconv == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1652]) {
+      if ((toconv == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1652\n");
+      else
+        fprintf(stderr, "reached bug index 1652\n");
+    }
+    if ((!FIXREVERTER[1652] && (toconv == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     written = xmlBufAvail(out) - 1; /* count '\0' */
     /*
      * echo '<?xml version="1.0" encoding="UCS4"?>' | wc -c => 38
@@ -2125,15 +2760,45 @@ xmlCharEncFirstLineInput(xmlParserInputBufferPtr input, int len)
         if (toconv > (unsigned int) len)
             toconv = len;
     } else {
-        if (toconv > 180)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1653]) {
+          if ((toconv > 180 ) && !(0))
+            fprintf(stderr, "triggered bug index 1653\n");
+          else
+            fprintf(stderr, "reached bug index 1653\n");
+        }
+        if ((!FIXREVERTER[1653] && (toconv > 180 ))
+        #else
+        if (0
+        #endif
+        )
             toconv = 180;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (toconv * 2 >= written) {
         xmlBufGrow(out, toconv * 2);
         written = xmlBufAvail(out) - 1;
     }
-    if (written > 360)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1654]) {
+      if ((written > 360 ) && !(0))
+        fprintf(stderr, "triggered bug index 1654\n");
+      else
+        fprintf(stderr, "reached bug index 1654\n");
+    }
+    if ((!FIXREVERTER[1654] && (written > 360 ))
+    #else
+    if (0
+    #endif
+    )
         written = 360;
+        #ifdef FRCOV
+        }
+        #endif
 
     c_in = toconv;
     c_out = written;
@@ -2210,15 +2875,44 @@ xmlCharEncInput(xmlParserInputBufferPtr input, int flush)
     xmlBufPtr in;
     xmlBufPtr out;
 
-    if ((input == NULL) || (input->encoder == NULL) ||
-        (input->buffer == NULL) || (input->raw == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1655]) {
+      if ((input == (void *) 0 || input -> encoder == (void *) 0 || input -> buffer == (void *) 0 || input -> raw == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1655\n");
+      else
+        fprintf(stderr, "reached bug index 1655\n");
+    }
+    if ((!FIXREVERTER[1655] && (input == (void *) 0 || input -> encoder == (void *) 0 || input -> buffer == (void *) 0 || input -> raw == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     out = input->buffer;
     in = input->raw;
 
     toconv = xmlBufUse(in);
-    if (toconv == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1656]) {
+      if ((toconv == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1656\n");
+      else
+        fprintf(stderr, "reached bug index 1656\n");
+    }
+    if ((!FIXREVERTER[1656] && (toconv == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     if ((toconv > 64 * 1024) && (flush == 0))
         toconv = 64 * 1024;
     written = xmlBufAvail(out);
@@ -2401,9 +3095,23 @@ xmlCharEncOutput(xmlOutputBufferPtr output, int init)
     xmlBufPtr in;
     xmlBufPtr out;
 
-    if ((output == NULL) || (output->encoder == NULL) ||
-        (output->buffer == NULL) || (output->conv == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1663]) {
+      if ((output == (void *) 0 || output -> encoder == (void *) 0 || output -> buffer == (void *) 0 || output -> conv == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1663\n");
+      else
+        fprintf(stderr, "reached bug index 1663\n");
+    }
+    if ((!FIXREVERTER[1663] && (output == (void *) 0 || output -> encoder == (void *) 0 || output -> buffer == (void *) 0 || output -> conv == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     out = output->conv;
     in = output->buffer;
 
@@ -2434,16 +3142,61 @@ retry:
      * Conversion itself.
      */
     toconv = xmlBufUse(in);
-    if (toconv == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1664]) {
+      if ((toconv == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1664\n");
+      else
+        fprintf(stderr, "reached bug index 1664\n");
+    }
+    if ((!FIXREVERTER[1664] && (toconv == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
-    if (toconv > 64 * 1024)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1665]) {
+      if ((toconv > 64 * 1024 ) && !(0))
+        fprintf(stderr, "triggered bug index 1665\n");
+      else
+        fprintf(stderr, "reached bug index 1665\n");
+    }
+    if ((!FIXREVERTER[1665] && (toconv > 64 * 1024 ))
+    #else
+    if (0
+    #endif
+    )
         toconv = 64 * 1024;
+        #ifdef FRCOV
+        }
+        #endif
     if (toconv * 4 >= written) {
         xmlBufGrow(out, toconv * 4);
         written = xmlBufAvail(out) - 1;
     }
-    if (written > 256 * 1024)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1666]) {
+      if ((written > 256 * 1024 ) && !(0))
+        fprintf(stderr, "triggered bug index 1666\n");
+      else
+        fprintf(stderr, "reached bug index 1666\n");
+    }
+    if ((!FIXREVERTER[1666] && (written > 256 * 1024 ))
+    #else
+    if (0
+    #endif
+    )
         written = 256 * 1024;
+        #ifdef FRCOV
+        }
+        #endif
 
     c_in = toconv;
     c_out = written;
@@ -2453,10 +3206,25 @@ retry:
     xmlBufAddLen(out, c_out);
     writtentot += c_out;
     if (ret == -1) {
-        if (c_out > 0) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1667]) {
+          if ((c_out > 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1667\n");
+          else
+            fprintf(stderr, "reached bug index 1667\n");
+        }
+        if ((!FIXREVERTER[1667] && (c_out > 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             /* Can be a limitation of iconv or uconv */
             goto retry;
         }
+        #ifdef FRCOV
+        }
+        #endif
         ret = -3;
     }
 
@@ -2722,8 +3490,38 @@ xmlCharEncCloseFunc(xmlCharEncodingHandler *handler) {
     int tofree = 0;
     int i, handler_in_list = 0;
 
-    if (handler == NULL) return(-1);
-    if (handler->name == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1674]) {
+      if ((handler == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1674\n");
+      else
+        fprintf(stderr, "reached bug index 1674\n");
+    }
+    if ((!FIXREVERTER[1674] && (handler == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1675]) {
+      if ((handler -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1675\n");
+      else
+        fprintf(stderr, "reached bug index 1675\n");
+    }
+    if ((!FIXREVERTER[1675] && (handler -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (handlers != NULL) {
         for (i = 0;i < nbCharEncodingHandler; i++) {
             if (handler == handlers[i]) {
diff --git a/entities.c b/entities.c
old mode 100644
new mode 100755
index 43549bc5..32170c91
--- a/entities.c
+++ b/entities.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * entities.c : implementation for the XML entities handling
  *
@@ -102,11 +106,41 @@ xmlFreeEntity(xmlEntityPtr entity)
 {
     xmlDictPtr dict = NULL;
 
-    if (entity == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2192]) {
+      if ((entity == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2192\n");
+      else
+        fprintf(stderr, "reached bug index 2192\n");
+    }
+    if ((!FIXREVERTER[2192] && (entity == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-
-    if (entity->doc != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2193]) {
+      if ((entity -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2193\n");
+      else
+        fprintf(stderr, "reached bug index 2193\n");
+    }
+    if ((!FIXREVERTER[2193] && (entity -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = entity->doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
 
     if ((entity->children) && (entity->owner == 1) &&
@@ -157,10 +191,25 @@ xmlCreateEntity(xmlDictPtr dict, const xmlChar *name, int type,
     xmlEntityPtr ret;
 
     ret = (xmlEntityPtr) xmlMalloc(sizeof(xmlEntity));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2194]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2194\n");
+      else
+        fprintf(stderr, "reached bug index 2194\n");
+    }
+    if ((!FIXREVERTER[2194] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlEntitiesErrMemory("xmlCreateEntity: malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlEntity));
     ret->type = XML_ENTITY_DECL;
     ret->checked = 0;
@@ -171,16 +220,76 @@ xmlCreateEntity(xmlDictPtr dict, const xmlChar *name, int type,
     ret->etype = (xmlEntityType) type;
     if (dict == NULL) {
 	ret->name = xmlStrdup(name);
-	if (ExternalID != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2195]) {
+	  if ((ExternalID != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2195\n");
+	  else
+	    fprintf(stderr, "reached bug index 2195\n");
+	}
+	if ((!FIXREVERTER[2195] && (ExternalID != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ret->ExternalID = xmlStrdup(ExternalID);
-	if (SystemID != NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2196]) {
+	  if ((SystemID != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2196\n");
+	  else
+	    fprintf(stderr, "reached bug index 2196\n");
+	}
+	if ((!FIXREVERTER[2196] && (SystemID != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ret->SystemID = xmlStrdup(SystemID);
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
         ret->name = xmlDictLookup(dict, name, -1);
-	if (ExternalID != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2197]) {
+	  if ((ExternalID != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2197\n");
+	  else
+	    fprintf(stderr, "reached bug index 2197\n");
+	}
+	if ((!FIXREVERTER[2197] && (ExternalID != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ret->ExternalID = xmlDictLookup(dict, ExternalID, -1);
-	if (SystemID != NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2198]) {
+	  if ((SystemID != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2198\n");
+	  else
+	    fprintf(stderr, "reached bug index 2198\n");
+	}
+	if ((!FIXREVERTER[2198] && (SystemID != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ret->SystemID = xmlDictLookup(dict, SystemID, -1);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     if (content != NULL) {
         ret->length = xmlStrlen(content);
@@ -212,35 +321,140 @@ xmlAddEntity(xmlDtdPtr dtd, const xmlChar *name, int type,
     xmlEntitiesTablePtr table = NULL;
     xmlEntityPtr ret;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2199]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2199\n");
+      else
+        fprintf(stderr, "reached bug index 2199\n");
+    }
+    if ((!FIXREVERTER[2199] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (dtd == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2200]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2200\n");
+      else
+        fprintf(stderr, "reached bug index 2200\n");
+    }
+    if ((!FIXREVERTER[2200] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (dtd->doc != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2201]) {
+      if ((dtd -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2201\n");
+      else
+        fprintf(stderr, "reached bug index 2201\n");
+    }
+    if ((!FIXREVERTER[2201] && (dtd -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = dtd->doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     switch (type) {
         case XML_INTERNAL_GENERAL_ENTITY:
         case XML_EXTERNAL_GENERAL_PARSED_ENTITY:
         case XML_EXTERNAL_GENERAL_UNPARSED_ENTITY:
-	    if (dtd->entities == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2202]) {
+	      if ((dtd -> entities == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 2202\n");
+	      else
+	        fprintf(stderr, "reached bug index 2202\n");
+	    }
+	    if ((!FIXREVERTER[2202] && (dtd -> entities == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		dtd->entities = xmlHashCreateDict(0, dict);
+		#ifdef FRCOV
+		}
+		#endif
 	    table = dtd->entities;
 	    break;
         case XML_INTERNAL_PARAMETER_ENTITY:
         case XML_EXTERNAL_PARAMETER_ENTITY:
-	    if (dtd->pentities == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2203]) {
+	      if ((dtd -> pentities == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 2203\n");
+	      else
+	        fprintf(stderr, "reached bug index 2203\n");
+	    }
+	    if ((!FIXREVERTER[2203] && (dtd -> pentities == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		dtd->pentities = xmlHashCreateDict(0, dict);
+		#ifdef FRCOV
+		}
+		#endif
 	    table = dtd->pentities;
 	    break;
         case XML_INTERNAL_PREDEFINED_ENTITY:
 	    return(NULL);
     }
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2204]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2204\n");
+      else
+        fprintf(stderr, "reached bug index 2204\n");
+    }
+    if ((!FIXREVERTER[2204] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ret = xmlCreateEntity(dict, name, type, ExternalID, SystemID, content);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2205]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2205\n");
+      else
+        fprintf(stderr, "reached bug index 2205\n");
+    }
+    if ((!FIXREVERTER[2205] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret->doc = dtd->doc;
 
     if (xmlHashAddEntry(table, name, ret)) {
@@ -263,7 +477,22 @@ xmlAddEntity(xmlDtdPtr dtd, const xmlChar *name, int type,
  */
 xmlEntityPtr
 xmlGetPredefinedEntity(const xmlChar *name) {
-    if (name == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2206]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2206\n");
+      else
+        fprintf(stderr, "reached bug index 2206\n");
+    }
+    if ((!FIXREVERTER[2206] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     switch (name[0]) {
         case 'l':
 	    if (xmlStrEqual(name, BAD_CAST "lt"))
@@ -309,19 +538,64 @@ xmlAddDtdEntity(xmlDocPtr doc, const xmlChar *name, int type,
     xmlEntityPtr ret;
     xmlDtdPtr dtd;
 
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2207]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2207\n");
+      else
+        fprintf(stderr, "reached bug index 2207\n");
+    }
+    if ((!FIXREVERTER[2207] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlEntitiesErr(XML_DTD_NO_DOC,
 	        "xmlAddDtdEntity: document is NULL");
 	return(NULL);
     }
-    if (doc->extSubset == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2208]) {
+      if ((doc -> extSubset == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2208\n");
+      else
+        fprintf(stderr, "reached bug index 2208\n");
+    }
+    if ((!FIXREVERTER[2208] && (doc -> extSubset == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlEntitiesErr(XML_DTD_NO_DTD,
 	        "xmlAddDtdEntity: document without external subset");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     dtd = doc->extSubset;
     ret = xmlAddEntity(dtd, name, type, ExternalID, SystemID, content);
-    if (ret == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2209]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2209\n");
+      else
+        fprintf(stderr, "reached bug index 2209\n");
+    }
+    if ((!FIXREVERTER[2209] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Link it to the DTD
@@ -358,19 +632,64 @@ xmlAddDocEntity(xmlDocPtr doc, const xmlChar *name, int type,
     xmlEntityPtr ret;
     xmlDtdPtr dtd;
 
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2210]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2210\n");
+      else
+        fprintf(stderr, "reached bug index 2210\n");
+    }
+    if ((!FIXREVERTER[2210] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlEntitiesErr(XML_DTD_NO_DOC,
 	        "xmlAddDocEntity: document is NULL");
 	return(NULL);
     }
-    if (doc->intSubset == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2211]) {
+      if ((doc -> intSubset == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2211\n");
+      else
+        fprintf(stderr, "reached bug index 2211\n");
+    }
+    if ((!FIXREVERTER[2211] && (doc -> intSubset == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlEntitiesErr(XML_DTD_NO_DTD,
 	        "xmlAddDocEntity: document without internal subset");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     dtd = doc->intSubset;
     ret = xmlAddEntity(dtd, name, type, ExternalID, SystemID, content);
-    if (ret == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2212]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2212\n");
+      else
+        fprintf(stderr, "reached bug index 2212\n");
+    }
+    if ((!FIXREVERTER[2212] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Link it to the DTD
@@ -456,8 +775,23 @@ xmlGetParameterEntity(xmlDocPtr doc, const xmlChar *name) {
     xmlEntitiesTablePtr table;
     xmlEntityPtr ret;
 
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2214]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2214\n");
+      else
+        fprintf(stderr, "reached bug index 2214\n");
+    }
+    if ((!FIXREVERTER[2214] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((doc->intSubset != NULL) && (doc->intSubset->pentities != NULL)) {
 	table = (xmlEntitiesTablePtr) doc->intSubset->pentities;
 	ret = xmlGetEntityFromTable(table, name);
@@ -565,7 +899,22 @@ xmlEncodeEntitiesInternal(xmlDocPtr doc, const xmlChar *input, int attr) {
     size_t buffer_size = 0;
     int html = 0;
 
-    if (input == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2216]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2216\n");
+      else
+        fprintf(stderr, "reached bug index 2216\n");
+    }
+    if ((!FIXREVERTER[2216] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (doc != NULL)
         html = (doc->type == XML_HTML_DOCUMENT_NODE);
 
@@ -574,10 +923,25 @@ xmlEncodeEntitiesInternal(xmlDocPtr doc, const xmlChar *input, int attr) {
      */
     buffer_size = 1000;
     buffer = (xmlChar *) xmlMalloc(buffer_size * sizeof(xmlChar));
-    if (buffer == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2218]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2218\n");
+      else
+        fprintf(stderr, "reached bug index 2218\n");
+    }
+    if ((!FIXREVERTER[2218] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlEntitiesErrMemory("xmlEncodeEntities: malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     out = buffer;
 
     while (*cur != '\0') {
@@ -673,8 +1037,23 @@ xmlEncodeEntitiesInternal(xmlDocPtr doc, const xmlChar *input, int attr) {
 		if (*cur < 0xC0) {
 		    xmlEntitiesErr(XML_CHECK_NOT_UTF8,
 			    "xmlEncodeEntities: input not UTF-8");
-		    if (doc != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2219]) {
+		      if ((doc != (void *) 0  ) && !(0))
+		        fprintf(stderr, "triggered bug index 2219\n");
+		      else
+		        fprintf(stderr, "reached bug index 2219\n");
+		    }
+		    if ((!FIXREVERTER[2219] && (doc != (void *) 0  ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			doc->encoding = xmlStrdup(BAD_CAST "ISO-8859-1");
+			#ifdef FRCOV
+			}
+			#endif
 		    snprintf(buf, sizeof(buf), "&#%d;", *cur);
 		    buf[sizeof(buf) - 1] = 0;
 		    ptr = buf;
@@ -706,8 +1085,23 @@ xmlEncodeEntitiesInternal(xmlDocPtr doc, const xmlChar *input, int attr) {
 		if ((l == 1) || (!IS_CHAR(val))) {
 		    xmlEntitiesErr(XML_ERR_INVALID_CHAR,
 			"xmlEncodeEntities: char out of range\n");
-		    if (doc != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2220]) {
+		      if ((doc != (void *) 0  ) && !(0))
+		        fprintf(stderr, "triggered bug index 2220\n");
+		      else
+		        fprintf(stderr, "reached bug index 2220\n");
+		    }
+		    if ((!FIXREVERTER[2220] && (doc != (void *) 0  ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			doc->encoding = xmlStrdup(BAD_CAST "ISO-8859-1");
+			#ifdef FRCOV
+			}
+			#endif
 		    snprintf(buf, sizeof(buf), "&#%d;", *cur);
 		    buf[sizeof(buf) - 1] = 0;
 		    ptr = buf;
@@ -916,26 +1310,131 @@ xmlCopyEntity(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlEntityPtr cur;
 
     cur = (xmlEntityPtr) xmlMalloc(sizeof(xmlEntity));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2223]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2223\n");
+      else
+        fprintf(stderr, "reached bug index 2223\n");
+    }
+    if ((!FIXREVERTER[2223] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlEntitiesErrMemory("xmlCopyEntity:: malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlEntity));
     cur->type = XML_ENTITY_DECL;
 
     cur->etype = ent->etype;
-    if (ent->name != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2224]) {
+      if ((ent -> name != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2224\n");
+      else
+        fprintf(stderr, "reached bug index 2224\n");
+    }
+    if ((!FIXREVERTER[2224] && (ent -> name != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->name = xmlStrdup(ent->name);
-    if (ent->ExternalID != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2225]) {
+      if ((ent -> ExternalID != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2225\n");
+      else
+        fprintf(stderr, "reached bug index 2225\n");
+    }
+    if ((!FIXREVERTER[2225] && (ent -> ExternalID != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->ExternalID = xmlStrdup(ent->ExternalID);
-    if (ent->SystemID != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2226]) {
+      if ((ent -> SystemID != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2226\n");
+      else
+        fprintf(stderr, "reached bug index 2226\n");
+    }
+    if ((!FIXREVERTER[2226] && (ent -> SystemID != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->SystemID = xmlStrdup(ent->SystemID);
-    if (ent->content != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2227]) {
+      if ((ent -> content != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2227\n");
+      else
+        fprintf(stderr, "reached bug index 2227\n");
+    }
+    if ((!FIXREVERTER[2227] && (ent -> content != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->content = xmlStrdup(ent->content);
-    if (ent->orig != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2228]) {
+      if ((ent -> orig != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2228\n");
+      else
+        fprintf(stderr, "reached bug index 2228\n");
+    }
+    if ((!FIXREVERTER[2228] && (ent -> orig != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->orig = xmlStrdup(ent->orig);
-    if (ent->URI != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2229]) {
+      if ((ent -> URI != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2229\n");
+      else
+        fprintf(stderr, "reached bug index 2229\n");
+    }
+    if ((!FIXREVERTER[2229] && (ent -> URI != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->URI = xmlStrdup(ent->URI);
+	#ifdef FRCOV
+	}
+	#endif
     return(cur);
 }
 
diff --git a/error.c b/error.c
old mode 100644
new mode 100755
index 9d39f79e..79090e78
--- a/error.c
+++ b/error.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * error.c: module displaying/handling XML parser errors
  *
@@ -177,8 +181,23 @@ xmlParserPrintFileContextInternal(xmlParserInputPtr input ,
     xmlChar  content[81]; /* space for 80 chars + line terminator */
     xmlChar *ctnt;
 
-    if ((input == NULL) || (input->cur == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[930]) {
+      if ((input == (void *) 0 || input -> cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 930\n");
+      else
+        fprintf(stderr, "reached bug index 930\n");
+    }
+    if ((!FIXREVERTER[930] && (input == (void *) 0 || input -> cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = input->cur;
     base = input->base;
@@ -255,8 +274,23 @@ xmlReportError(xmlErrorPtr err, xmlParserCtxtPtr ctxt, const char *str,
     xmlParserInputPtr input = NULL;
     xmlParserInputPtr cur = NULL;
 
-    if (err == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[931]) {
+      if ((err == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 931\n");
+      else
+        fprintf(stderr, "reached bug index 931\n");
+    }
+    if ((!FIXREVERTER[931] && (err == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (channel == NULL) {
 	channel = xmlGenericError;
@@ -288,8 +322,25 @@ xmlReportError(xmlErrorPtr err, xmlParserCtxtPtr ctxt, const char *str,
         if (input != NULL) {
             if (input->filename)
                 channel(data, "%s:%d: ", input->filename, input->line);
-            else if ((line != 0) && (domain == XML_FROM_PARSER))
+            else 
+            #ifdef FRCOV
+            {if (FIXREVERTER[933]) {
+              fprintf(stderr, "reached bug index 933\n");
+            }
+            if ((FIXREVERTER[933] && (domain == XML_FROM_PARSER )) || (!FIXREVERTER[933] && (line != 0 && domain == XML_FROM_PARSER ))
+            #else
+            if (domain == XML_FROM_PARSER 
+            #endif
+            )
+                
+                #ifdef FRCOV
+                {if (!(line != 0 ))
+                  fprintf(stderr, "triggered bug index 933\n");
+                #endif
                 channel(data, "Entity: line %d: ", input->line);
+                #ifdef FRCOV
+                }}
+                #endif
         }
     } else {
         if (file != NULL)
@@ -407,8 +458,25 @@ xmlReportError(xmlErrorPtr err, xmlParserCtxtPtr ctxt, const char *str,
         if (cur != NULL) {
             if (cur->filename)
                 channel(data, "%s:%d: \n", cur->filename, cur->line);
-            else if ((line != 0) && (domain == XML_FROM_PARSER))
+            else 
+            #ifdef FRCOV
+            {if (FIXREVERTER[934]) {
+              fprintf(stderr, "reached bug index 934\n");
+            }
+            if ((FIXREVERTER[934] && (domain == XML_FROM_PARSER )) || (!FIXREVERTER[934] && (line != 0 && domain == XML_FROM_PARSER ))
+            #else
+            if (domain == XML_FROM_PARSER 
+            #endif
+            )
+                
+                #ifdef FRCOV
+                {if (!(line != 0 ))
+                  fprintf(stderr, "triggered bug index 934\n");
+                #endif
                 channel(data, "Entity: line %d: \n", cur->line);
+                #ifdef FRCOV
+                }}
+                #endif
             xmlParserPrintFileContextInternal(cur, channel, data);
         }
     }
@@ -466,8 +534,23 @@ __xmlRaiseError(xmlStructuredErrorFunc schannel,
     xmlErrorPtr to = &xmlLastError;
     xmlNodePtr baseptr = NULL;
 
-    if (code == XML_ERR_OK)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[935]) {
+      if ((code == XML_ERR_OK ) && !(0))
+        fprintf(stderr, "triggered bug index 935\n");
+      else
+        fprintf(stderr, "reached bug index 935\n");
+    }
+    if ((!FIXREVERTER[935] && (code == XML_ERR_OK ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((xmlGetWarningsDefaultValue == 0) && (level == XML_ERR_WARNING))
         return;
     if ((domain == XML_FROM_PARSER) || (domain == XML_FROM_HTML) ||
@@ -489,8 +572,23 @@ __xmlRaiseError(xmlStructuredErrorFunc schannel,
 	/*
 	 * if user has defined handler, change data ptr to user's choice
 	 */
-	if (schannel != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[936]) {
+	  if ((schannel != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 936\n");
+	  else
+	    fprintf(stderr, "reached bug index 936\n");
+	}
+	if ((!FIXREVERTER[936] && (schannel != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    data = xmlStructuredErrorContext;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     /*
      * Formatting the message
@@ -586,12 +684,57 @@ __xmlRaiseError(xmlStructuredErrorFunc schannel,
 	}
     }
     to->line = line;
-    if (str1 != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[937]) {
+      if ((str1 != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 937\n");
+      else
+        fprintf(stderr, "reached bug index 937\n");
+    }
+    if ((!FIXREVERTER[937] && (str1 != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         to->str1 = (char *) xmlStrdup((const xmlChar *) str1);
-    if (str2 != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[938]) {
+      if ((str2 != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 938\n");
+      else
+        fprintf(stderr, "reached bug index 938\n");
+    }
+    if ((!FIXREVERTER[938] && (str2 != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         to->str2 = (char *) xmlStrdup((const xmlChar *) str2);
-    if (str3 != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[939]) {
+      if ((str3 != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 939\n");
+      else
+        fprintf(stderr, "reached bug index 939\n");
+    }
+    if ((!FIXREVERTER[939] && (str3 != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         to->str3 = (char *) xmlStrdup((const xmlChar *) str3);
+        #ifdef FRCOV
+        }
+        #endif
     to->int1 = int1;
     to->int2 = col;
     to->node = node;
@@ -799,9 +942,27 @@ xmlParserValidityError(void *ctx, const char *msg, ...)
     if (str != NULL)
 	xmlFree(str);
 
-    if ((ctxt != NULL) && (input != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[941]) {
+      fprintf(stderr, "reached bug index 941\n");
+    }
+    if ((FIXREVERTER[941] && (ctxt != (void *) 0 )) || (!FIXREVERTER[941] && (ctxt != (void *) 0 && input != (void *) 0 ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(input != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 941\n");
+      #endif
+    
 	xmlParserPrintFileContext(input);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 /**
@@ -872,10 +1033,40 @@ xmlGetLastError(void)
 void
 xmlResetError(xmlErrorPtr err)
 {
-    if (err == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[943]) {
+      if ((err == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 943\n");
+      else
+        fprintf(stderr, "reached bug index 943\n");
+    }
+    if ((!FIXREVERTER[943] && (err == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-    if (err->code == XML_ERR_OK)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[944]) {
+      if ((err -> code == XML_ERR_OK ) && !(0))
+        fprintf(stderr, "triggered bug index 944\n");
+      else
+        fprintf(stderr, "reached bug index 944\n");
+    }
+    if ((!FIXREVERTER[944] && (err -> code == XML_ERR_OK ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (err->message != NULL)
         xmlFree(err->message);
     if (err->file != NULL)
@@ -957,8 +1148,23 @@ int
 xmlCopyError(xmlErrorPtr from, xmlErrorPtr to) {
     char *message, *file, *str1, *str2, *str3;
 
-    if ((from == NULL) || (to == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[948]) {
+      if ((from == (void *) 0 || to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 948\n");
+      else
+        fprintf(stderr, "reached bug index 948\n");
+    }
+    if ((!FIXREVERTER[948] && (from == (void *) 0 || to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     message = (char *) xmlStrdup((xmlChar *) from->message);
     file = (char *) xmlStrdup ((xmlChar *) from->file);
diff --git a/example/Makefile.am b/example/Makefile.am
old mode 100644
new mode 100755
diff --git a/example/gjobread.c b/example/gjobread.c
old mode 100644
new mode 100755
diff --git a/example/gjobs.xml b/example/gjobs.xml
old mode 100644
new mode 100755
diff --git a/global.data b/global.data
old mode 100644
new mode 100755
diff --git a/globals.c b/globals.c
old mode 100644
new mode 100755
diff --git a/hash.c b/hash.c
old mode 100644
new mode 100755
index f037af69..c253ad0d
--- a/hash.c
+++ b/hash.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * hash.c: chained hash tables
  *
@@ -177,8 +181,23 @@ xmlHashTablePtr
 xmlHashCreate(int size) {
     xmlHashTablePtr table;
 
-    if (size <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2156]) {
+      if ((size <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2156\n");
+      else
+        fprintf(stderr, "reached bug index 2156\n");
+    }
+    if ((!FIXREVERTER[2156] && (size <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         size = 256;
+        #ifdef FRCOV
+        }
+        #endif
 
     table = xmlMalloc(sizeof(xmlHashTable));
     if (table) {
@@ -238,23 +257,98 @@ xmlHashGrow(xmlHashTablePtr table, int size) {
     unsigned long nbElem = 0;
 #endif
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2157]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2157\n");
+      else
+        fprintf(stderr, "reached bug index 2157\n");
+    }
+    if ((!FIXREVERTER[2157] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (size < 8)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2158]) {
+      if ((size < 8 ) && !(0))
+        fprintf(stderr, "triggered bug index 2158\n");
+      else
+        fprintf(stderr, "reached bug index 2158\n");
+    }
+    if ((!FIXREVERTER[2158] && (size < 8 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
-    if (size > 8 * 2048)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2159]) {
+      if ((size > 8 * 2048 ) && !(0))
+        fprintf(stderr, "triggered bug index 2159\n");
+      else
+        fprintf(stderr, "reached bug index 2159\n");
+    }
+    if ((!FIXREVERTER[2159] && (size > 8 * 2048 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     oldsize = table->size;
     oldtable = table->table;
-    if (oldtable == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2160]) {
+      if ((oldtable == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2160\n");
+      else
+        fprintf(stderr, "reached bug index 2160\n");
+    }
+    if ((!FIXREVERTER[2160] && (oldtable == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     table->table = xmlMalloc(size * sizeof(xmlHashEntry));
-    if (table->table == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2161]) {
+      if ((table -> table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2161\n");
+      else
+        fprintf(stderr, "reached bug index 2161\n");
+    }
+    if ((!FIXREVERTER[2161] && (table -> table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	table->table = oldtable;
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(table->table, 0, size * sizeof(xmlHashEntry));
     table->size = size;
 
@@ -327,19 +421,80 @@ xmlHashFree(xmlHashTablePtr table, xmlHashDeallocator f) {
     int inside_table = 0;
     int nbElems;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2162]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2162\n");
+      else
+        fprintf(stderr, "reached bug index 2162\n");
+    }
+    if ((!FIXREVERTER[2162] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (table->table) {
 	nbElems = table->nbElems;
-	for(i = 0; (i < table->size) && (nbElems > 0); i++) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2165])
+	  fprintf(stderr, "reached bug index 2165\n");
+	for (i = 0; (FIXREVERTER[2165] && (nbElems > 0 )) || (!FIXREVERTER[2165] && (i < table -> size && nbElems > 0 ))
+	#else
+	for (i = 0; nbElems > 0 
+	#endif
+	; i++) {
+	  
+	#ifdef FRCOV
+	  if (!(i < table -> size ))
+	    fprintf(stderr, "triggered bug index 2165\n");
+	  #endif
+	
 	    iter = &(table->table[i]);
-	    if (iter->valid == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2163]) {
+	      if ((iter -> valid == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2163\n");
+	      else
+	        fprintf(stderr, "reached bug index 2163\n");
+	    }
+	    if ((!FIXREVERTER[2163] && (iter -> valid == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    inside_table = 1;
 	    while (iter) {
 		next = iter->next;
-		if ((f != NULL) && (iter->payload != NULL))
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2164]) {
+		  fprintf(stderr, "reached bug index 2164\n");
+		}
+		if ((FIXREVERTER[2164] && (f != (void *) 0 )) || (!FIXREVERTER[2164] && (f != (void *) 0 && iter -> payload != (void *) 0 ))
+		#else
+		if (f != (void *) 0 
+		#endif
+		)
+		    
+		    #ifdef FRCOV
+		    {if (!(iter -> payload != (void *) 0 ))
+		      fprintf(stderr, "triggered bug index 2164\n");
+		    #endif
 		    f(iter->payload, iter->name);
+		    #ifdef FRCOV
+		    }}
+		    #endif
 		if (table->dict == NULL) {
 		    if (iter->name)
 			xmlFree(iter->name);
@@ -356,6 +511,9 @@ xmlHashFree(xmlHashTablePtr table, xmlHashDeallocator f) {
 		iter = next;
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	xmlFree(table->table);
     }
     if (table->dict)
@@ -536,8 +694,23 @@ xmlHashAddEntry3(xmlHashTablePtr table, const xmlChar *name,
     xmlHashEntryPtr entry;
     xmlHashEntryPtr insert;
 
-    if ((table == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2166]) {
+      if ((table == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2166\n");
+      else
+        fprintf(stderr, "reached bug index 2166\n");
+    }
+    if ((!FIXREVERTER[2166] && (table == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * If using a dict internalize if needed
@@ -545,18 +718,63 @@ xmlHashAddEntry3(xmlHashTablePtr table, const xmlChar *name,
     if (table->dict) {
         if (!xmlDictOwns(table->dict, name)) {
 	    name = xmlDictLookup(table->dict, name, -1);
-	    if (name == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2167]) {
+	      if ((name == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2167\n");
+	      else
+	        fprintf(stderr, "reached bug index 2167\n");
+	    }
+	    if ((!FIXREVERTER[2167] && (name == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
         if ((name2 != NULL) && (!xmlDictOwns(table->dict, name2))) {
 	    name2 = xmlDictLookup(table->dict, name2, -1);
-	    if (name2 == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2168]) {
+	      if ((name2 == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2168\n");
+	      else
+	        fprintf(stderr, "reached bug index 2168\n");
+	    }
+	    if ((!FIXREVERTER[2168] && (name2 == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
         if ((name3 != NULL) && (!xmlDictOwns(table->dict, name3))) {
 	    name3 = xmlDictLookup(table->dict, name3, -1);
-	    if (name3 == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2169]) {
+	      if ((name3 == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2169\n");
+	      else
+	        fprintf(stderr, "reached bug index 2169\n");
+	    }
+	    if ((!FIXREVERTER[2169] && (name3 == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
     }
 
@@ -600,8 +818,23 @@ xmlHashAddEntry3(xmlHashTablePtr table, const xmlChar *name,
 	entry = &(table->table[key]);
     } else {
 	entry = xmlMalloc(sizeof(xmlHashEntry));
-	if (entry == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2170]) {
+	  if ((entry == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2170\n");
+	  else
+	    fprintf(stderr, "reached bug index 2170\n");
+	}
+	if ((!FIXREVERTER[2170] && (entry == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	     return(-1);
+	     #ifdef FRCOV
+	     }
+	     #endif
     }
 
     if (table->dict != NULL) {
@@ -618,8 +851,23 @@ xmlHashAddEntry3(xmlHashTablePtr table, const xmlChar *name,
     entry->valid = 1;
 
 
-    if (insert != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2171]) {
+      if ((insert != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2171\n");
+      else
+        fprintf(stderr, "reached bug index 2171\n");
+    }
+    if ((!FIXREVERTER[2171] && (insert != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	insert->next = entry;
+	#ifdef FRCOV
+	}
+	#endif
 
     table->nbElems++;
 
@@ -652,8 +900,23 @@ xmlHashUpdateEntry3(xmlHashTablePtr table, const xmlChar *name,
     xmlHashEntryPtr entry;
     xmlHashEntryPtr insert;
 
-    if ((table == NULL) || name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2172]) {
+      if ((table == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2172\n");
+      else
+        fprintf(stderr, "reached bug index 2172\n");
+    }
+    if ((!FIXREVERTER[2172] && (table == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * If using a dict internalize if needed
@@ -661,18 +924,63 @@ xmlHashUpdateEntry3(xmlHashTablePtr table, const xmlChar *name,
     if (table->dict) {
         if (!xmlDictOwns(table->dict, name)) {
 	    name = xmlDictLookup(table->dict, name, -1);
-	    if (name == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2173]) {
+	      if ((name == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2173\n");
+	      else
+	        fprintf(stderr, "reached bug index 2173\n");
+	    }
+	    if ((!FIXREVERTER[2173] && (name == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
         if ((name2 != NULL) && (!xmlDictOwns(table->dict, name2))) {
 	    name2 = xmlDictLookup(table->dict, name2, -1);
-	    if (name2 == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2174]) {
+	      if ((name2 == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2174\n");
+	      else
+	        fprintf(stderr, "reached bug index 2174\n");
+	    }
+	    if ((!FIXREVERTER[2174] && (name2 == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
         if ((name3 != NULL) && (!xmlDictOwns(table->dict, name3))) {
 	    name3 = xmlDictLookup(table->dict, name3, -1);
-	    if (name3 == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2175]) {
+	      if ((name3 == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2175\n");
+	      else
+	        fprintf(stderr, "reached bug index 2175\n");
+	    }
+	    if ((!FIXREVERTER[2175] && (name3 == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
     }
 
@@ -730,8 +1038,23 @@ xmlHashUpdateEntry3(xmlHashTablePtr table, const xmlChar *name,
 	entry =  &(table->table[key]);
     } else {
 	entry = xmlMalloc(sizeof(xmlHashEntry));
-	if (entry == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2176]) {
+	  if ((entry == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2176\n");
+	  else
+	    fprintf(stderr, "reached bug index 2176\n");
+	}
+	if ((!FIXREVERTER[2176] && (entry == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	     return(-1);
+	     #ifdef FRCOV
+	     }
+	     #endif
     }
 
     if (table->dict != NULL) {
@@ -772,10 +1095,40 @@ xmlHashLookup3(xmlHashTablePtr table, const xmlChar *name,
     unsigned long key;
     xmlHashEntryPtr entry;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2177]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2177\n");
+      else
+        fprintf(stderr, "reached bug index 2177\n");
+    }
+    if ((!FIXREVERTER[2177] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (name == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2178]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2178\n");
+      else
+        fprintf(stderr, "reached bug index 2178\n");
+    }
+    if ((!FIXREVERTER[2178] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     key = xmlHashComputeKey(table, name, name2, name3);
     if (table->table[key].valid == 0)
 	return(NULL);
@@ -818,10 +1171,40 @@ xmlHashQLookup3(xmlHashTablePtr table,
     unsigned long key;
     xmlHashEntryPtr entry;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2179]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2179\n");
+      else
+        fprintf(stderr, "reached bug index 2179\n");
+    }
+    if ((!FIXREVERTER[2179] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (name == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2180]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2180\n");
+      else
+        fprintf(stderr, "reached bug index 2180\n");
+    }
+    if ((!FIXREVERTER[2180] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     key = xmlHashComputeQKey(table, prefix, name, prefix2,
                              name2, prefix3, name3);
     if (table->table[key].valid == 0)
@@ -878,10 +1261,40 @@ xmlHashScanFull(xmlHashTablePtr table, xmlHashScannerFull f, void *data) {
     xmlHashEntryPtr iter;
     xmlHashEntryPtr next;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2181]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2181\n");
+      else
+        fprintf(stderr, "reached bug index 2181\n");
+    }
+    if ((!FIXREVERTER[2181] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
-    if (f == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2182]) {
+      if ((f == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2182\n");
+      else
+        fprintf(stderr, "reached bug index 2182\n");
+    }
+    if ((!FIXREVERTER[2182] && (f == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (table->table) {
 	for(i = 0; i < table->size; i++) {
@@ -891,9 +1304,26 @@ xmlHashScanFull(xmlHashTablePtr table, xmlHashScannerFull f, void *data) {
 	    while (iter) {
 		next = iter->next;
                 nb = table->nbElems;
-		if ((f != NULL) && (iter->payload != NULL))
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2183]) {
+		  fprintf(stderr, "reached bug index 2183\n");
+		}
+		if ((FIXREVERTER[2183] && (f != (void *) 0 )) || (!FIXREVERTER[2183] && (f != (void *) 0 && iter -> payload != (void *) 0 ))
+		#else
+		if (f != (void *) 0 
+		#endif
+		)
+		    
+		    #ifdef FRCOV
+		    {if (!(iter -> payload != (void *) 0 ))
+		      fprintf(stderr, "triggered bug index 2183\n");
+		    #endif
 		    f(iter->payload, data, iter->name,
 		      iter->name2, iter->name3);
+		      #ifdef FRCOV
+		      }}
+		      #endif
                 if (nb != table->nbElems) {
                     /* table was modified by the callback, be careful */
                     if (iter == &(table->table[i])) {
@@ -955,10 +1385,40 @@ xmlHashScanFull3(xmlHashTablePtr table, const xmlChar *name,
     xmlHashEntryPtr iter;
     xmlHashEntryPtr next;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2184]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2184\n");
+      else
+        fprintf(stderr, "reached bug index 2184\n");
+    }
+    if ((!FIXREVERTER[2184] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
-    if (f == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2185]) {
+      if ((f == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2185\n");
+      else
+        fprintf(stderr, "reached bug index 2185\n");
+    }
+    if ((!FIXREVERTER[2185] && (f == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (table->table) {
 	for(i = 0; i < table->size; i++) {
@@ -996,14 +1456,59 @@ xmlHashCopy(xmlHashTablePtr table, xmlHashCopier f) {
     xmlHashEntryPtr next;
     xmlHashTablePtr ret;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2186]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2186\n");
+      else
+        fprintf(stderr, "reached bug index 2186\n");
+    }
+    if ((!FIXREVERTER[2186] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (f == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2187]) {
+      if ((f == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2187\n");
+      else
+        fprintf(stderr, "reached bug index 2187\n");
+    }
+    if ((!FIXREVERTER[2187] && (f == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlHashCreate(table->size);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2188]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2188\n");
+      else
+        fprintf(stderr, "reached bug index 2188\n");
+    }
+    if ((!FIXREVERTER[2188] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (table->table) {
 	for(i = 0; i < table->size; i++) {
@@ -1033,8 +1538,23 @@ xmlHashCopy(xmlHashTablePtr table, xmlHashCopier f) {
  */
 int
 xmlHashSize(xmlHashTablePtr table) {
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2189]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2189\n");
+      else
+        fprintf(stderr, "reached bug index 2189\n");
+    }
+    if ((!FIXREVERTER[2189] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     return(table->nbElems);
 }
 
@@ -1095,8 +1615,23 @@ xmlHashRemoveEntry3(xmlHashTablePtr table, const xmlChar *name,
     xmlHashEntryPtr entry;
     xmlHashEntryPtr prev = NULL;
 
-    if (table == NULL || name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2190]) {
+      if ((table == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2190\n");
+      else
+        fprintf(stderr, "reached bug index 2190\n");
+    }
+    if ((!FIXREVERTER[2190] && (table == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     key = xmlHashComputeKey(table, name, name2, name3);
     if (table->table[key].valid == 0) {
@@ -1106,8 +1641,25 @@ xmlHashRemoveEntry3(xmlHashTablePtr table, const xmlChar *name,
             if (xmlStrEqual(entry->name, name) &&
                     xmlStrEqual(entry->name2, name2) &&
                     xmlStrEqual(entry->name3, name3)) {
-                if ((f != NULL) && (entry->payload != NULL))
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2191]) {
+                  fprintf(stderr, "reached bug index 2191\n");
+                }
+                if ((FIXREVERTER[2191] && (f != (void *) 0 )) || (!FIXREVERTER[2191] && (f != (void *) 0 && entry -> payload != (void *) 0 ))
+                #else
+                if (f != (void *) 0 
+                #endif
+                )
+                    
+                    #ifdef FRCOV
+                    {if (!(entry -> payload != (void *) 0 ))
+                      fprintf(stderr, "triggered bug index 2191\n");
+                    #endif
                     f(entry->payload, entry->name);
+                    #ifdef FRCOV
+                    }}
+                    #endif
                 entry->payload = NULL;
 		if (table->dict == NULL) {
 		    if(entry->name)
diff --git a/include/Makefile.am b/include/Makefile.am
old mode 100644
new mode 100755
diff --git a/include/libxml/DOCBparser.h b/include/libxml/DOCBparser.h
old mode 100644
new mode 100755
diff --git a/include/libxml/HTMLparser.h b/include/libxml/HTMLparser.h
old mode 100644
new mode 100755
diff --git a/include/libxml/HTMLtree.h b/include/libxml/HTMLtree.h
old mode 100644
new mode 100755
diff --git a/include/libxml/Makefile.am b/include/libxml/Makefile.am
old mode 100644
new mode 100755
diff --git a/include/libxml/SAX.h b/include/libxml/SAX.h
old mode 100644
new mode 100755
diff --git a/include/libxml/SAX2.h b/include/libxml/SAX2.h
old mode 100644
new mode 100755
diff --git a/include/libxml/c14n.h b/include/libxml/c14n.h
old mode 100644
new mode 100755
diff --git a/include/libxml/catalog.h b/include/libxml/catalog.h
old mode 100644
new mode 100755
diff --git a/include/libxml/chvalid.h b/include/libxml/chvalid.h
old mode 100644
new mode 100755
diff --git a/include/libxml/debugXML.h b/include/libxml/debugXML.h
old mode 100644
new mode 100755
diff --git a/include/libxml/dict.h b/include/libxml/dict.h
old mode 100644
new mode 100755
diff --git a/include/libxml/encoding.h b/include/libxml/encoding.h
old mode 100644
new mode 100755
diff --git a/include/libxml/entities.h b/include/libxml/entities.h
old mode 100644
new mode 100755
diff --git a/include/libxml/globals.h b/include/libxml/globals.h
old mode 100644
new mode 100755
diff --git a/include/libxml/hash.h b/include/libxml/hash.h
old mode 100644
new mode 100755
diff --git a/include/libxml/list.h b/include/libxml/list.h
old mode 100644
new mode 100755
diff --git a/include/libxml/nanoftp.h b/include/libxml/nanoftp.h
old mode 100644
new mode 100755
diff --git a/include/libxml/nanohttp.h b/include/libxml/nanohttp.h
old mode 100644
new mode 100755
diff --git a/include/libxml/parser.h b/include/libxml/parser.h
old mode 100644
new mode 100755
diff --git a/include/libxml/parserInternals.h b/include/libxml/parserInternals.h
old mode 100644
new mode 100755
diff --git a/include/libxml/pattern.h b/include/libxml/pattern.h
old mode 100644
new mode 100755
diff --git a/include/libxml/relaxng.h b/include/libxml/relaxng.h
old mode 100644
new mode 100755
diff --git a/include/libxml/schemasInternals.h b/include/libxml/schemasInternals.h
old mode 100644
new mode 100755
diff --git a/include/libxml/schematron.h b/include/libxml/schematron.h
old mode 100644
new mode 100755
diff --git a/include/libxml/threads.h b/include/libxml/threads.h
old mode 100644
new mode 100755
diff --git a/include/libxml/tree.h b/include/libxml/tree.h
old mode 100644
new mode 100755
diff --git a/include/libxml/uri.h b/include/libxml/uri.h
old mode 100644
new mode 100755
diff --git a/include/libxml/valid.h b/include/libxml/valid.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xinclude.h b/include/libxml/xinclude.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xlink.h b/include/libxml/xlink.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlIO.h b/include/libxml/xmlIO.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlautomata.h b/include/libxml/xmlautomata.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlerror.h b/include/libxml/xmlerror.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlexports.h b/include/libxml/xmlexports.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlmemory.h b/include/libxml/xmlmemory.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlmodule.h b/include/libxml/xmlmodule.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlreader.h b/include/libxml/xmlreader.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlregexp.h b/include/libxml/xmlregexp.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlsave.h b/include/libxml/xmlsave.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlschemas.h b/include/libxml/xmlschemas.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlschemastypes.h b/include/libxml/xmlschemastypes.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlstring.h b/include/libxml/xmlstring.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlunicode.h b/include/libxml/xmlunicode.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlversion.h.in b/include/libxml/xmlversion.h.in
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlwin32version.h b/include/libxml/xmlwin32version.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlwin32version.h.in b/include/libxml/xmlwin32version.h.in
old mode 100644
new mode 100755
diff --git a/include/libxml/xmlwriter.h b/include/libxml/xmlwriter.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xpath.h b/include/libxml/xpath.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xpathInternals.h b/include/libxml/xpathInternals.h
old mode 100644
new mode 100755
diff --git a/include/libxml/xpointer.h b/include/libxml/xpointer.h
old mode 100644
new mode 100755
diff --git a/include/win32config.h b/include/win32config.h
old mode 100644
new mode 100755
diff --git a/include/wsockcompat.h b/include/wsockcompat.h
old mode 100644
new mode 100755
diff --git a/legacy.c b/legacy.c
old mode 100644
new mode 100755
diff --git a/libxml-2.0-uninstalled.pc.in b/libxml-2.0-uninstalled.pc.in
old mode 100644
new mode 100755
diff --git a/libxml-2.0.pc.in b/libxml-2.0.pc.in
old mode 100644
new mode 100755
diff --git a/libxml.3 b/libxml.3
old mode 100644
new mode 100755
diff --git a/libxml.h b/libxml.h
old mode 100644
new mode 100755
diff --git a/libxml.m4 b/libxml.m4
old mode 100644
new mode 100755
diff --git a/libxml.spec.in b/libxml.spec.in
old mode 100644
new mode 100755
diff --git a/libxml2-config.cmake.in b/libxml2-config.cmake.in
old mode 100644
new mode 100755
diff --git a/libxml2.doap b/libxml2.doap
old mode 100644
new mode 100755
diff --git a/libxml2.syms b/libxml2.syms
old mode 100644
new mode 100755
diff --git a/list.c b/list.c
old mode 100644
new mode 100755
index 24da6b1e..9e5fa462
--- a/list.c
+++ b/list.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * list.c: lists handling implementation
  *
@@ -99,8 +103,23 @@ xmlListLowerSearch(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3323]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3323\n");
+      else
+        fprintf(stderr, "reached bug index 3323\n");
+    }
+    if ((!FIXREVERTER[3323] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     for(lk = l->sentinel->next;lk != l->sentinel && l->linkCompare(lk->data, data) <0 ;lk = lk->next);
     return lk;
 }
@@ -119,8 +138,23 @@ xmlListHigherSearch(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3324]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3324\n");
+      else
+        fprintf(stderr, "reached bug index 3324\n");
+    }
+    if ((!FIXREVERTER[3324] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     for(lk = l->sentinel->prev;lk != l->sentinel && l->linkCompare(lk->data, data) >0 ;lk = lk->prev);
     return lk;
 }
@@ -138,8 +172,23 @@ static xmlLinkPtr
 xmlListLinkSearch(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3325]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3325\n");
+      else
+        fprintf(stderr, "reached bug index 3325\n");
+    }
+    if ((!FIXREVERTER[3325] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     lk = xmlListLowerSearch(l, data);
     if (lk == l->sentinel)
         return NULL;
@@ -208,8 +257,23 @@ xmlListCreate(xmlListDeallocator deallocator, xmlListDataCompare compare)
     l->sentinel->data = NULL;
 
     /* If there is a link deallocator, use it */
-    if (deallocator != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3327]) {
+      if ((deallocator != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3327\n");
+      else
+        fprintf(stderr, "reached bug index 3327\n");
+    }
+    if ((!FIXREVERTER[3327] && (deallocator != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         l->linkDeallocator = deallocator;
+        #ifdef FRCOV
+        }
+        #endif
     /* If there is a link comparator, use it */
     if (compare != NULL)
         l->linkCompare = compare;
@@ -306,16 +370,46 @@ int xmlListAppend(xmlListPtr l, void *data)
 {
     xmlLinkPtr lkPlace, lkNew;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3332]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3332\n");
+      else
+        fprintf(stderr, "reached bug index 3332\n");
+    }
+    if ((!FIXREVERTER[3332] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(1);
+        #ifdef FRCOV
+        }
+        #endif
     lkPlace = xmlListHigherSearch(l, data);
     /* Add the new link */
     lkNew = (xmlLinkPtr) xmlMalloc(sizeof(xmlLink));
-    if (lkNew == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3333]) {
+      if ((lkNew == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3333\n");
+      else
+        fprintf(stderr, "reached bug index 3333\n");
+    }
+    if ((!FIXREVERTER[3333] && (lkNew == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlGenericError(xmlGenericErrorContext,
 		        "Cannot initialize memory for new link");
         return (1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     lkNew->data = data;
     lkNew->next = lkPlace->next;
     (lkPlace->next)->prev = lkNew;
@@ -332,8 +426,23 @@ int xmlListAppend(xmlListPtr l, void *data)
  */
 void xmlListDelete(xmlListPtr l)
 {
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3334]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3334\n");
+      else
+        fprintf(stderr, "reached bug index 3334\n");
+    }
+    if ((!FIXREVERTER[3334] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlListClear(l);
     xmlFree(l->sentinel);
@@ -354,8 +463,23 @@ xmlListRemoveFirst(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3335]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3335\n");
+      else
+        fprintf(stderr, "reached bug index 3335\n");
+    }
+    if ((!FIXREVERTER[3335] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     /*Find the first instance of this data */
     lk = xmlListLinkSearch(l, data);
     if (lk != NULL) {
@@ -423,8 +547,23 @@ xmlListClear(xmlListPtr l)
 {
     xmlLinkPtr  lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3338]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3338\n");
+      else
+        fprintf(stderr, "reached bug index 3338\n");
+    }
+    if ((!FIXREVERTER[3338] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     lk = l->sentinel->next;
     while(lk != l->sentinel) {
         xmlLinkPtr next = lk->next;
@@ -603,8 +742,23 @@ xmlListPushBack(xmlListPtr l, void *data)
 void *
 xmlLinkGetData(xmlLinkPtr lk)
 {
-    if (lk == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3346]) {
+      if ((lk == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3346\n");
+      else
+        fprintf(stderr, "reached bug index 3346\n");
+    }
+    if ((!FIXREVERTER[3346] && (lk == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     return lk->data;
 }
 
@@ -676,8 +830,23 @@ void
 xmlListWalk(xmlListPtr l, xmlListWalker walker, void *user) {
     xmlLinkPtr lk;
 
-    if ((l == NULL) || (walker == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3349]) {
+      if ((l == (void *) 0 || walker == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3349\n");
+      else
+        fprintf(stderr, "reached bug index 3349\n");
+    }
+    if ((!FIXREVERTER[3349] && (l == (void *) 0 || walker == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     for(lk = l->sentinel->next; lk != l->sentinel; lk = lk->next) {
         if((walker(lk->data, user)) == 0)
                 break;
diff --git a/macos/README b/macos/README
old mode 100644
new mode 100755
diff --git a/macos/libxml2.mcp.xml.sit.hqx b/macos/libxml2.mcp.xml.sit.hqx
old mode 100644
new mode 100755
diff --git a/macos/src/XMLTestPrefix.h b/macos/src/XMLTestPrefix.h
old mode 100644
new mode 100755
diff --git a/macos/src/XMLTestPrefix2.h b/macos/src/XMLTestPrefix2.h
old mode 100644
new mode 100755
diff --git a/macos/src/config-mac.h b/macos/src/config-mac.h
old mode 100644
new mode 100755
diff --git a/macos/src/libxml2_GUSIConfig.cp b/macos/src/libxml2_GUSIConfig.cp
old mode 100644
new mode 100755
diff --git a/macos/src/macos_main.c b/macos/src/macos_main.c
old mode 100644
new mode 100755
diff --git a/nanoftp.c b/nanoftp.c
old mode 100644
new mode 100755
index 54fa026d..a36fa6d4
--- a/nanoftp.c
+++ b/nanoftp.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * nanoftp.c: basic FTP client support
  *
@@ -309,16 +313,61 @@ xmlNanoFTPScanURL(void *ctx, const char *URL) {
         xmlFree(ctxt->path);
 	ctxt->path = NULL;
     }
-    if (URL == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4089]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4089\n");
+      else
+        fprintf(stderr, "reached bug index 4089\n");
+    }
+    if ((!FIXREVERTER[4089] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     uri = xmlParseURIRaw(URL, 1);
-    if (uri == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4090]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4090\n");
+      else
+        fprintf(stderr, "reached bug index 4090\n");
+    }
+    if ((!FIXREVERTER[4090] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
-
-    if ((uri->scheme == NULL) || (uri->server == NULL)) {
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4091]) {
+      if ((uri -> scheme == (void *) 0 || uri -> server == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4091\n");
+      else
+        fprintf(stderr, "reached bug index 4091\n");
+    }
+    if ((!FIXREVERTER[4091] && (uri -> scheme == (void *) 0 || uri -> server == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeURI(uri);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt->protocol = xmlMemStrdup(uri->scheme);
     ctxt->hostname = xmlMemStrdup(uri->server);
@@ -326,8 +375,23 @@ xmlNanoFTPScanURL(void *ctx, const char *URL) {
 	ctxt->path = xmlMemStrdup(uri->path);
     else
 	ctxt->path = xmlMemStrdup("/");
-    if (uri->port != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4092]) {
+      if ((uri -> port != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4092\n");
+      else
+        fprintf(stderr, "reached bug index 4092\n");
+    }
+    if ((!FIXREVERTER[4092] && (uri -> port != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->port = uri->port;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (uri->user != NULL) {
 	char *cptr;
@@ -433,7 +497,22 @@ xmlNanoFTPScanProxy(const char *URL) {
 	xmlGenericError(xmlGenericErrorContext,
 		"Using FTP proxy %s\n", URL);
 #endif
-    if (URL == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4100]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4100\n");
+      else
+        fprintf(stderr, "reached bug index 4100\n");
+    }
+    if ((!FIXREVERTER[4100] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     uri = xmlParseURIRaw(URL, 1);
     if ((uri == NULL) || (uri->scheme == NULL) ||
@@ -466,10 +545,25 @@ xmlNanoFTPNewCtxt(const char *URL) {
     char *unescaped;
 
     ret = (xmlNanoFTPCtxtPtr) xmlMalloc(sizeof(xmlNanoFTPCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4102]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4102\n");
+      else
+        fprintf(stderr, "reached bug index 4102\n");
+    }
+    if ((!FIXREVERTER[4102] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFTPErrMemory("allocating FTP context");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     memset(ret, 0, sizeof(xmlNanoFTPCtxt));
     ret->port = 21;
@@ -499,7 +593,22 @@ xmlNanoFTPNewCtxt(const char *URL) {
 void
 xmlNanoFTPFreeCtxt(void * ctx) {
     xmlNanoFTPCtxtPtr ctxt = (xmlNanoFTPCtxtPtr) ctx;
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4103]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4103\n");
+      else
+        fprintf(stderr, "reached bug index 4103\n");
+    }
+    if ((!FIXREVERTER[4103] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->hostname != NULL) xmlFree(ctxt->hostname);
     if (ctxt->protocol != NULL) xmlFree(ctxt->protocol);
     if (ctxt->path != NULL) xmlFree(ctxt->path);
@@ -564,7 +673,19 @@ xmlNanoFTPGetMore(void *ctx) {
 
     if ((ctxt == NULL) || (ctxt->controlFd == INVALID_SOCKET)) return(-1);
 
-    if ((ctxt->controlBufIndex < 0) || (ctxt->controlBufIndex > FTP_BUF_SIZE)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4105]) {
+      if ((ctxt -> controlBufIndex < 0 || ctxt -> controlBufIndex > 1024 ) && !(0))
+        fprintf(stderr, "triggered bug index 4105\n");
+      else
+        fprintf(stderr, "reached bug index 4105\n");
+    }
+    if ((!FIXREVERTER[4105] && (ctxt -> controlBufIndex < 0 || ctxt -> controlBufIndex > 1024 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_FTP
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNanoFTPGetMore : controlBufIndex = %d\n",
@@ -572,8 +693,23 @@ xmlNanoFTPGetMore(void *ctx) {
 #endif
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
-    if ((ctxt->controlBufUsed < 0) || (ctxt->controlBufUsed > FTP_BUF_SIZE)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4106]) {
+      if ((ctxt -> controlBufUsed < 0 || ctxt -> controlBufUsed > 1024 ) && !(0))
+        fprintf(stderr, "triggered bug index 4106\n");
+      else
+        fprintf(stderr, "reached bug index 4106\n");
+    }
+    if ((!FIXREVERTER[4106] && (ctxt -> controlBufUsed < 0 || ctxt -> controlBufUsed > 1024 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_FTP
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNanoFTPGetMore : controlBufUsed = %d\n",
@@ -581,7 +717,22 @@ xmlNanoFTPGetMore(void *ctx) {
 #endif
 	return(-1);
     }
-    if (ctxt->controlBufIndex > ctxt->controlBufUsed) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4107]) {
+      if ((ctxt -> controlBufIndex > ctxt -> controlBufUsed ) && !(0))
+        fprintf(stderr, "triggered bug index 4107\n");
+      else
+        fprintf(stderr, "reached bug index 4107\n");
+    }
+    if ((!FIXREVERTER[4107] && (ctxt -> controlBufIndex > ctxt -> controlBufUsed ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_FTP
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNanoFTPGetMore : controlBufIndex > controlBufUsed %d > %d\n",
@@ -589,6 +740,9 @@ xmlNanoFTPGetMore(void *ctx) {
 #endif
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * First pack the control buffer
@@ -681,10 +835,25 @@ get_more:
 	    break;
 	}
 	while ((ptr < end) && (*ptr != '\n')) ptr++;
-	if (ptr >= end) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4110]) {
+	  if ((ptr >= end ) && !(0))
+	    fprintf(stderr, "triggered bug index 4110\n");
+	  else
+	    fprintf(stderr, "reached bug index 4110\n");
+	}
+	if ((!FIXREVERTER[4110] && (ptr >= end ))
+	#else
+	if (0
+	#endif
+	) {
 	    ctxt->controlBufIndex = ctxt->controlBufUsed;
 	    goto get_more;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (*ptr != '\r') ptr++;
     }
 
@@ -853,10 +1022,40 @@ xmlNanoFTPConnect(void *ctx) {
     int res;
     int addrlen = sizeof (struct sockaddr_in);
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4115]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4115\n");
+      else
+        fprintf(stderr, "reached bug index 4115\n");
+    }
+    if ((!FIXREVERTER[4115] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (ctxt->hostname == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4116]) {
+      if ((ctxt -> hostname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4116\n");
+      else
+        fprintf(stderr, "reached bug index 4116\n");
+    }
+    if ((!FIXREVERTER[4116] && (ctxt -> hostname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * do the blocking DNS query.
@@ -892,8 +1091,23 @@ xmlNanoFTPConnect(void *ctx) {
 	    }
 
 	for (tmp = result; tmp; tmp = tmp->ai_next)
-	    if (tmp->ai_family == AF_INET || tmp->ai_family == AF_INET6)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4118]) {
+	      if ((tmp -> ai_family == 2 || tmp -> ai_family == 10 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4118\n");
+	      else
+	        fprintf(stderr, "reached bug index 4118\n");
+	    }
+	    if ((!FIXREVERTER[4118] && (tmp -> ai_family == 2 || tmp -> ai_family == 10 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 
 	if (!tmp) {
 	    if (result)
@@ -927,10 +1141,25 @@ xmlNanoFTPConnect(void *ctx) {
 	    hp = gethostbyname (GETHOSTBYNAME_ARG_CAST proxy);
 	else
 	    hp = gethostbyname (GETHOSTBYNAME_ARG_CAST ctxt->hostname);
-	if (hp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4119]) {
+	  if ((hp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4119\n");
+	  else
+	    fprintf(stderr, "reached bug index 4119\n");
+	}
+	if ((!FIXREVERTER[4119] && (hp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    __xmlIOErr(XML_FROM_FTP, 0, "gethostbyname failed");
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if ((unsigned int) hp->h_length >
 	    sizeof(((struct sockaddr_in *)&ctxt->ftpAddr)->sin_addr)) {
 	    __xmlIOErr(XML_FROM_FTP, 0, "gethostbyname address mismatch");
@@ -1969,10 +2198,55 @@ int
 xmlNanoFTPRead(void *ctx, void *dest, int len) {
     xmlNanoFTPCtxtPtr ctxt = (xmlNanoFTPCtxtPtr) ctx;
 
-    if (ctx == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4150]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4150\n");
+      else
+        fprintf(stderr, "reached bug index 4150\n");
+    }
+    if ((!FIXREVERTER[4150] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->dataFd == INVALID_SOCKET) return(0);
-    if (dest == NULL) return(-1);
-    if (len <= 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4151]) {
+      if ((dest == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4151\n");
+      else
+        fprintf(stderr, "reached bug index 4151\n");
+    }
+    if ((!FIXREVERTER[4151] && (dest == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4152]) {
+      if ((len <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4152\n");
+      else
+        fprintf(stderr, "reached bug index 4152\n");
+    }
+    if ((!FIXREVERTER[4152] && (len <= 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     len = recv(ctxt->dataFd, dest, len, 0);
     if (len <= 0) {
@@ -2001,11 +2275,41 @@ xmlNanoFTPOpen(const char *URL) {
     SOCKET sock;
 
     xmlNanoFTPInit();
-    if (URL == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4153]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4153\n");
+      else
+        fprintf(stderr, "reached bug index 4153\n");
+    }
+    if ((!FIXREVERTER[4153] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (strncmp("ftp://", URL, 6)) return(NULL);
 
     ctxt = (xmlNanoFTPCtxtPtr) xmlNanoFTPNewCtxt(URL);
-    if (ctxt == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4154]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4154\n");
+      else
+        fprintf(stderr, "reached bug index 4154\n");
+    }
+    if ((!FIXREVERTER[4154] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlNanoFTPConnect(ctxt) < 0) {
 	xmlNanoFTPFreeCtxt(ctxt);
 	return(NULL);
@@ -2031,8 +2335,23 @@ int
 xmlNanoFTPClose(void *ctx) {
     xmlNanoFTPCtxtPtr ctxt = (xmlNanoFTPCtxtPtr) ctx;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4155]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4155\n");
+      else
+        fprintf(stderr, "reached bug index 4155\n");
+    }
+    if ((!FIXREVERTER[4155] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ctxt->dataFd != INVALID_SOCKET) {
 	closesocket(ctxt->dataFd);
diff --git a/nanohttp.c b/nanohttp.c
old mode 100644
new mode 100755
index 2143718a..d9d924cb
--- a/nanohttp.c
+++ b/nanohttp.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * nanohttp.c: minimalist HTTP GET implementation to fetch external subsets.
  *             focuses on size, streamability, reentrancy and portability
@@ -304,16 +308,61 @@ xmlNanoHTTPScanURL(xmlNanoHTTPCtxtPtr ctxt, const char *URL) {
         xmlFree(ctxt->query);
 	ctxt->query = NULL;
     }
-    if (URL == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[198]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 198\n");
+      else
+        fprintf(stderr, "reached bug index 198\n");
+    }
+    if ((!FIXREVERTER[198] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     uri = xmlParseURIRaw(URL, 1);
-    if (uri == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[199]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 199\n");
+      else
+        fprintf(stderr, "reached bug index 199\n");
+    }
+    if ((!FIXREVERTER[199] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
-
-    if ((uri->scheme == NULL) || (uri->server == NULL)) {
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[200]) {
+      if ((uri -> scheme == (void *) 0 || uri -> server == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 200\n");
+      else
+        fprintf(stderr, "reached bug index 200\n");
+    }
+    if ((!FIXREVERTER[200] && (uri -> scheme == (void *) 0 || uri -> server == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeURI(uri);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt->protocol = xmlMemStrdup(uri->scheme);
     /* special case of IPv6 addresses, the [] need to be removed */
@@ -329,10 +378,40 @@ xmlNanoHTTPScanURL(xmlNanoHTTPCtxtPtr ctxt, const char *URL) {
 	ctxt->path = xmlMemStrdup(uri->path);
     else
 	ctxt->path = xmlMemStrdup("/");
-    if (uri->query != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[201]) {
+      if ((uri -> query != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 201\n");
+      else
+        fprintf(stderr, "reached bug index 201\n");
+    }
+    if ((!FIXREVERTER[201] && (uri -> query != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->query = xmlMemStrdup(uri->query);
-    if (uri->port != 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[202]) {
+      if ((uri -> port != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 202\n");
+      else
+        fprintf(stderr, "reached bug index 202\n");
+    }
+    if ((!FIXREVERTER[202] && (uri -> port != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->port = uri->port;
+	#ifdef FRCOV
+	}
+	#endif
 
     xmlFreeURI(uri);
 }
@@ -365,7 +444,22 @@ xmlNanoHTTPScanProxy(const char *URL) {
 	xmlGenericError(xmlGenericErrorContext,
 		"Using HTTP proxy %s\n", URL);
 #endif
-    if (URL == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[203]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 203\n");
+      else
+        fprintf(stderr, "reached bug index 203\n");
+    }
+    if ((!FIXREVERTER[203] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     uri = xmlParseURIRaw(URL, 1);
     if ((uri == NULL) || (uri->scheme == NULL) ||
@@ -397,10 +491,25 @@ xmlNanoHTTPNewCtxt(const char *URL) {
     xmlNanoHTTPCtxtPtr ret;
 
     ret = (xmlNanoHTTPCtxtPtr) xmlMalloc(sizeof(xmlNanoHTTPCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[205]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 205\n");
+      else
+        fprintf(stderr, "reached bug index 205\n");
+    }
+    if ((!FIXREVERTER[205] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlHTTPErrMemory("allocating context");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     memset(ret, 0, sizeof(xmlNanoHTTPCtxt));
     ret->port = 80;
@@ -422,7 +531,22 @@ xmlNanoHTTPNewCtxt(const char *URL) {
 
 static void
 xmlNanoHTTPFreeCtxt(xmlNanoHTTPCtxtPtr ctxt) {
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[206]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 206\n");
+      else
+        fprintf(stderr, "reached bug index 206\n");
+    }
+    if ((!FIXREVERTER[206] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->hostname != NULL) xmlFree(ctxt->hostname);
     if (ctxt->protocol != NULL) xmlFree(ctxt->protocol);
     if (ctxt->path != NULL) xmlFree(ctxt->path);
@@ -543,11 +667,26 @@ xmlNanoHTTPRecv(xmlNanoHTTPCtxtPtr ctxt)
     while (ctxt->state & XML_NANO_HTTP_READ) {
         if (ctxt->in == NULL) {
             ctxt->in = (char *) xmlMallocAtomic(65000 * sizeof(char));
-            if (ctxt->in == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[208]) {
+              if ((ctxt -> in == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 208\n");
+              else
+                fprintf(stderr, "reached bug index 208\n");
+            }
+            if ((!FIXREVERTER[208] && (ctxt -> in == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlHTTPErrMemory("allocating input");
                 ctxt->last = -1;
                 return (-1);
             }
+            #ifdef FRCOV
+            }
+            #endif
             ctxt->inlen = 65000;
             ctxt->inptr = ctxt->content = ctxt->inrptr = ctxt->in;
         }
@@ -579,13 +718,43 @@ xmlNanoHTTPRecv(xmlNanoHTTPCtxtPtr ctxt)
             ctxt->inrptr = ctxt->in + d_inrptr;
         }
         ctxt->last = recv(ctxt->fd, ctxt->inptr, XML_NANO_HTTP_CHUNK, 0);
-        if (ctxt->last > 0) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[209]) {
+          if ((ctxt -> last > 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 209\n");
+          else
+            fprintf(stderr, "reached bug index 209\n");
+        }
+        if ((!FIXREVERTER[209] && (ctxt -> last > 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             ctxt->inptr += ctxt->last;
             return (ctxt->last);
         }
-        if (ctxt->last == 0) {
+        #ifdef FRCOV
+        }
+        #endif
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[210]) {
+          if ((ctxt -> last == 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 210\n");
+          else
+            fprintf(stderr, "reached bug index 210\n");
+        }
+        if ((!FIXREVERTER[210] && (ctxt -> last == 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (ctxt->last == -1) {
             switch (socket_errno()) {
                 case EINPROGRESS:
@@ -706,7 +875,22 @@ static void
 xmlNanoHTTPScanAnswer(xmlNanoHTTPCtxtPtr ctxt, const char *line) {
     const char *cur = line;
 
-    if (line == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[211]) {
+      if ((line == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 211\n");
+      else
+        fprintf(stderr, "reached bug index 211\n");
+    }
+    if ((!FIXREVERTER[211] && (line == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (!strncmp(line, "HTTP/", 5)) {
         int version = 0;
@@ -1279,9 +1463,54 @@ xmlNanoHTTPRead(void *ctx, void *dest, int len) {
     int z_ret;
 #endif
 
-    if (ctx == NULL) return(-1);
-    if (dest == NULL) return(-1);
-    if (len <= 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[213]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 213\n");
+      else
+        fprintf(stderr, "reached bug index 213\n");
+    }
+    if ((!FIXREVERTER[213] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[214]) {
+      if ((dest == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 214\n");
+      else
+        fprintf(stderr, "reached bug index 214\n");
+    }
+    if ((!FIXREVERTER[214] && (dest == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[215]) {
+      if ((len <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 215\n");
+      else
+        fprintf(stderr, "reached bug index 215\n");
+    }
+    if ((!FIXREVERTER[215] && (len <= 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef LIBXML_ZLIB_ENABLED
     if (ctxt->usesGzip == 1) {
@@ -1329,7 +1558,22 @@ void
 xmlNanoHTTPClose(void *ctx) {
     xmlNanoHTTPCtxtPtr ctxt = (xmlNanoHTTPCtxtPtr) ctx;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[216]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 216\n");
+      else
+        fprintf(stderr, "reached bug index 216\n");
+    }
+    if ((!FIXREVERTER[216] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     xmlNanoHTTPFreeCtxt(ctxt);
 }
@@ -1366,19 +1610,79 @@ xmlNanoHTTPMethodRedir(const char *URL, const char *method, const char *input,
     int xmt_bytes;
 #endif
 
-    if (URL == NULL) return(NULL);
-    if (method == NULL) method = "GET";
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[217]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 217\n");
+      else
+        fprintf(stderr, "reached bug index 217\n");
+    }
+    if ((!FIXREVERTER[217] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[218]) {
+      if ((method == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 218\n");
+      else
+        fprintf(stderr, "reached bug index 218\n");
+    }
+    if ((!FIXREVERTER[218] && (method == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) method = "GET";
+    #ifdef FRCOV
+    }
+    #endif
     xmlNanoHTTPInit();
 
 retry:
     if (redirURL == NULL) {
 	ctxt = xmlNanoHTTPNewCtxt(URL);
-	if (ctxt == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[219]) {
+	  if ((ctxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 219\n");
+	  else
+	    fprintf(stderr, "reached bug index 219\n");
+	}
+	if ((!FIXREVERTER[219] && (ctxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
 	ctxt = xmlNanoHTTPNewCtxt(redirURL);
-	if (ctxt == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[220]) {
+	  if ((ctxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 220\n");
+	  else
+	    fprintf(stderr, "reached bug index 220\n");
+	}
+	if ((!FIXREVERTER[220] && (ctxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->location = xmlMemStrdup(redirURL);
     }
 
@@ -1436,11 +1740,26 @@ retry:
 	    blen += 11;
     }
     bp = (char*)xmlMallocAtomic(blen);
-    if ( bp == NULL ) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[221]) {
+      if ((bp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 221\n");
+      else
+        fprintf(stderr, "reached bug index 221\n");
+    }
+    if ((!FIXREVERTER[221] && (bp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     ) {
         xmlNanoHTTPFreeCtxt( ctxt );
 	xmlHTTPErrMemory("allocating header buffer");
 	return ( NULL );
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     p = bp;
 
@@ -1568,7 +1887,22 @@ retry:
 	    *contentType = NULL;
     }
 
-    if ((redir != NULL) && (redirURL != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[222]) {
+      fprintf(stderr, "reached bug index 222\n");
+    }
+    if ((FIXREVERTER[222] && (redir != (void *) 0 )) || (!FIXREVERTER[222] && (redir != (void *) 0 && redirURL != (void *) 0 ))
+    #else
+    if (redir != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(redirURL != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 222\n");
+      #endif
+    
 	*redir = redirURL;
     } else {
 	if (redirURL != NULL)
@@ -1576,6 +1910,9 @@ retry:
 	if (redir != NULL)
 	    *redir = NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef DEBUG_HTTP
     if (ctxt->contentType != NULL)
@@ -1721,7 +2058,22 @@ int
 xmlNanoHTTPReturnCode(void *ctx) {
     xmlNanoHTTPCtxtPtr ctxt = (xmlNanoHTTPCtxtPtr) ctx;
 
-    if (ctxt == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[228]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 228\n");
+      else
+        fprintf(stderr, "reached bug index 228\n");
+    }
+    if ((!FIXREVERTER[228] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     return(ctxt->returnValue);
 }
diff --git a/optim/TOTRY b/optim/TOTRY
old mode 100644
new mode 100755
diff --git a/optim/hash_dict.patch b/optim/hash_dict.patch
old mode 100644
new mode 100755
diff --git a/optim/hash_dict.txt b/optim/hash_dict.txt
old mode 100644
new mode 100755
diff --git a/os400/README400 b/os400/README400
old mode 100644
new mode 100755
diff --git a/os400/dlfcn/dlfcn.c b/os400/dlfcn/dlfcn.c
old mode 100644
new mode 100755
diff --git a/os400/dlfcn/dlfcn.h b/os400/dlfcn/dlfcn.h
old mode 100644
new mode 100755
diff --git a/os400/iconv/README.iconv b/os400/iconv/README.iconv
old mode 100644
new mode 100755
diff --git a/os400/iconv/bldcsndfa/bldcsndfa.c b/os400/iconv/bldcsndfa/bldcsndfa.c
old mode 100644
new mode 100755
diff --git a/os400/iconv/bldcsndfa/ccsid_mibenum.dtd b/os400/iconv/bldcsndfa/ccsid_mibenum.dtd
old mode 100644
new mode 100755
diff --git a/os400/iconv/bldcsndfa/ccsid_mibenum.xml b/os400/iconv/bldcsndfa/ccsid_mibenum.xml
old mode 100644
new mode 100755
diff --git a/os400/iconv/bldcsndfa/character-sets.xhtml b/os400/iconv/bldcsndfa/character-sets.xhtml
old mode 100644
new mode 100755
diff --git a/os400/iconv/ianatables.c b/os400/iconv/ianatables.c
old mode 100644
new mode 100755
diff --git a/os400/iconv/iconv.c b/os400/iconv/iconv.c
old mode 100644
new mode 100755
diff --git a/os400/iconv/iconv.h b/os400/iconv/iconv.h
old mode 100644
new mode 100755
diff --git a/os400/initscript.sh b/os400/initscript.sh
old mode 100644
new mode 100755
diff --git a/os400/libxmlmain.c b/os400/libxmlmain.c
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/DOCBparser.rpgle b/os400/libxmlrpg/DOCBparser.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/HTMLparser.rpgle b/os400/libxmlrpg/HTMLparser.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/HTMLtree.rpgle b/os400/libxmlrpg/HTMLtree.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/SAX.rpgle b/os400/libxmlrpg/SAX.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/SAX2.rpgle b/os400/libxmlrpg/SAX2.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/c14n.rpgle b/os400/libxmlrpg/c14n.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/catalog.rpgle b/os400/libxmlrpg/catalog.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/chvalid.rpgle b/os400/libxmlrpg/chvalid.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/debugXML.rpgle b/os400/libxmlrpg/debugXML.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/dict.rpgle b/os400/libxmlrpg/dict.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/encoding.rpgle b/os400/libxmlrpg/encoding.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/entities.rpgle b/os400/libxmlrpg/entities.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/globals.rpgle b/os400/libxmlrpg/globals.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/hash.rpgle b/os400/libxmlrpg/hash.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/list.rpgle b/os400/libxmlrpg/list.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/nanoftp.rpgle b/os400/libxmlrpg/nanoftp.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/nanohttp.rpgle b/os400/libxmlrpg/nanohttp.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/parser.rpgle b/os400/libxmlrpg/parser.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/parserInternals.rpgle b/os400/libxmlrpg/parserInternals.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/pattern.rpgle b/os400/libxmlrpg/pattern.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/relaxng.rpgle b/os400/libxmlrpg/relaxng.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/schemasInternals.rpgle b/os400/libxmlrpg/schemasInternals.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/schematron.rpgle b/os400/libxmlrpg/schematron.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/threads.rpgle b/os400/libxmlrpg/threads.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/transcode.rpgle b/os400/libxmlrpg/transcode.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/tree.rpgle b/os400/libxmlrpg/tree.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/uri.rpgle b/os400/libxmlrpg/uri.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/valid.rpgle b/os400/libxmlrpg/valid.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xinclude.rpgle b/os400/libxmlrpg/xinclude.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xlink.rpgle b/os400/libxmlrpg/xlink.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlIO.rpgle b/os400/libxmlrpg/xmlIO.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlTypesC.rpgle b/os400/libxmlrpg/xmlTypesC.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlautomata.rpgle b/os400/libxmlrpg/xmlautomata.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlerror.rpgle b/os400/libxmlrpg/xmlerror.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlexports.rpgle b/os400/libxmlrpg/xmlexports.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlmemory.rpgle b/os400/libxmlrpg/xmlmemory.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlmodule.rpgle b/os400/libxmlrpg/xmlmodule.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlreader.rpgle b/os400/libxmlrpg/xmlreader.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlregexp.rpgle b/os400/libxmlrpg/xmlregexp.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlsave.rpgle b/os400/libxmlrpg/xmlsave.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlschemas.rpgle b/os400/libxmlrpg/xmlschemas.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlschemastypes.rpgle b/os400/libxmlrpg/xmlschemastypes.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlstdarg.rpgle b/os400/libxmlrpg/xmlstdarg.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlstring.rpgle b/os400/libxmlrpg/xmlstring.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlunicode.rpgle b/os400/libxmlrpg/xmlunicode.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlversion.rpgle.in b/os400/libxmlrpg/xmlversion.rpgle.in
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xmlwriter.rpgle b/os400/libxmlrpg/xmlwriter.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xpath.rpgle b/os400/libxmlrpg/xpath.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xpathInternals.rpgle b/os400/libxmlrpg/xpathInternals.rpgle
old mode 100644
new mode 100755
diff --git a/os400/libxmlrpg/xpointer.rpgle b/os400/libxmlrpg/xpointer.rpgle
old mode 100644
new mode 100755
diff --git a/os400/make-bldcsndfa.sh b/os400/make-bldcsndfa.sh
old mode 100644
new mode 100755
diff --git a/os400/make-include.sh b/os400/make-include.sh
old mode 100644
new mode 100755
diff --git a/os400/make-rpg.sh b/os400/make-rpg.sh
old mode 100644
new mode 100755
diff --git a/os400/make-src.sh b/os400/make-src.sh
old mode 100644
new mode 100755
diff --git a/os400/make.sh b/os400/make.sh
old mode 100644
new mode 100755
diff --git a/os400/os400config.h.in b/os400/os400config.h.in
old mode 100644
new mode 100755
diff --git a/os400/rpgsupport.c b/os400/rpgsupport.c
old mode 100644
new mode 100755
diff --git a/os400/rpgsupport.h b/os400/rpgsupport.h
old mode 100644
new mode 100755
diff --git a/os400/transcode.c b/os400/transcode.c
old mode 100644
new mode 100755
diff --git a/os400/transcode.h b/os400/transcode.h
old mode 100644
new mode 100755
diff --git a/os400/wrappers.c b/os400/wrappers.c
old mode 100644
new mode 100755
diff --git a/os400/wrappers.h b/os400/wrappers.h
old mode 100644
new mode 100755
diff --git a/os400/xmlcatalog.cmd b/os400/xmlcatalog.cmd
old mode 100644
new mode 100755
diff --git a/os400/xmlcatlgcl.c b/os400/xmlcatlgcl.c
old mode 100644
new mode 100755
diff --git a/os400/xmllint.cmd b/os400/xmllint.cmd
old mode 100644
new mode 100755
diff --git a/os400/xmllintcl.c b/os400/xmllintcl.c
old mode 100644
new mode 100755
diff --git a/parser.c b/parser.c
old mode 100644
new mode 100755
index cad0a9d4..66e4b4f4
--- a/parser.c
+++ b/parser.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * parser.c : an XML 1.0 parser, namespaces and validity support are mostly
  *            implemented on top of the SAX interfaces
@@ -160,8 +164,23 @@ xmlParserEntityCheck(xmlParserCtxtPtr ctxt, size_t size,
 	}
 
         diff = ctxt->nbentities - oldnbent + 1;
-        if (diff > INT_MAX / 2)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2585]) {
+          if ((diff > 2147483647 / 2 ) && !(0))
+            fprintf(stderr, "triggered bug index 2585\n");
+          else
+            fprintf(stderr, "reached bug index 2585\n");
+        }
+        if ((!FIXREVERTER[2585] && (diff > 2147483647 / 2 ))
+        #else
+        if (0
+        #endif
+        )
             diff = INT_MAX / 2;
+            #ifdef FRCOV
+            }
+            #endif
 	ent->checked = diff * 2;
 	if (rep != NULL) {
 	    if (xmlStrchr(rep, '<'))
@@ -326,8 +345,23 @@ xmlErrAttributeDup(xmlParserCtxtPtr ctxt, const xmlChar * prefix,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2590]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2590\n");
+      else
+        fprintf(stderr, "reached bug index 2590\n");
+    }
+    if ((!FIXREVERTER[2590] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = XML_ERR_ATTRIBUTE_REDEFINED;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (prefix == NULL)
         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,
@@ -342,8 +376,23 @@ xmlErrAttributeDup(xmlParserCtxtPtr ctxt, const xmlChar * prefix,
                         localname);
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2591]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2591\n");
+	  else
+	    fprintf(stderr, "reached bug index 2591\n");
+	}
+	if ((!FIXREVERTER[2591] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -545,8 +594,23 @@ xmlFatalErr(xmlParserCtxtPtr ctxt, xmlParserErrors error, const char *info)
         default:
             errmsg = "Unregistered error message";
     }
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2592]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2592\n");
+      else
+        fprintf(stderr, "reached bug index 2592\n");
+    }
+    if ((!FIXREVERTER[2592] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     if (info == NULL) {
         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                         XML_ERR_FATAL, NULL, 0, info, NULL, NULL, 0, 0, "%s\n",
@@ -558,8 +622,23 @@ xmlFatalErr(xmlParserCtxtPtr ctxt, xmlParserErrors error, const char *info)
     }
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2593]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2593\n");
+	  else
+	    fprintf(stderr, "reached bug index 2593\n");
+	}
+	if ((!FIXREVERTER[2593] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -578,8 +657,23 @@ xmlFatalErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2594]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2594\n");
+      else
+        fprintf(stderr, "reached bug index 2594\n");
+    }
+    if ((!FIXREVERTER[2594] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                     XML_ERR_FATAL, NULL, 0, NULL, NULL, NULL, 0, 0, "%s", msg);
     if (ctxt != NULL) {
@@ -684,15 +778,45 @@ xmlFatalErrMsgInt(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2596]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2596\n");
+      else
+        fprintf(stderr, "reached bug index 2596\n");
+    }
+    if ((!FIXREVERTER[2596] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL,
                     ctxt, NULL, XML_FROM_PARSER, error, XML_ERR_FATAL,
                     NULL, 0, NULL, NULL, NULL, val, 0, msg, val);
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2597]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2597\n");
+	  else
+	    fprintf(stderr, "reached bug index 2597\n");
+	}
+	if ((!FIXREVERTER[2597] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -715,16 +839,46 @@ xmlFatalErrMsgStrIntStr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2598]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2598\n");
+      else
+        fprintf(stderr, "reached bug index 2598\n");
+    }
+    if ((!FIXREVERTER[2598] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL,
                     ctxt, NULL, XML_FROM_PARSER, error, XML_ERR_FATAL,
                     NULL, 0, (const char *) str1, (const char *) str2,
 		    NULL, val, 0, msg, str1, val, str2);
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2599]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2599\n");
+	  else
+	    fprintf(stderr, "reached bug index 2599\n");
+	}
+	if ((!FIXREVERTER[2599] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -744,16 +898,46 @@ xmlFatalErrMsgStr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2600]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2600\n");
+      else
+        fprintf(stderr, "reached bug index 2600\n");
+    }
+    if ((!FIXREVERTER[2600] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL,
                     XML_FROM_PARSER, error, XML_ERR_FATAL,
                     NULL, 0, (const char *) val, NULL, NULL, 0, 0, msg,
                     val);
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2601]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2601\n");
+	  else
+	    fprintf(stderr, "reached bug index 2601\n");
+	}
+	if ((!FIXREVERTER[2601] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -773,8 +957,23 @@ xmlErrMsgStr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2602]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2602\n");
+      else
+        fprintf(stderr, "reached bug index 2602\n");
+    }
+    if ((!FIXREVERTER[2602] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL,
                     XML_FROM_PARSER, error, XML_ERR_ERROR,
                     NULL, 0, (const char *) val, NULL, NULL, 0, 0, msg,
@@ -800,14 +999,44 @@ xmlNsErr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2603]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2603\n");
+      else
+        fprintf(stderr, "reached bug index 2603\n");
+    }
+    if ((!FIXREVERTER[2603] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,
                     XML_ERR_ERROR, NULL, 0, (const char *) info1,
                     (const char *) info2, (const char *) info3, 0, 0, msg,
                     info1, info2, info3);
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2604]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2604\n");
+      else
+        fprintf(stderr, "reached bug index 2604\n");
+    }
+    if ((!FIXREVERTER[2604] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->nsWellFormed = 0;
+	#ifdef FRCOV
+	}
+	#endif
 }
 
 /**
@@ -1073,7 +1302,22 @@ xmlHasFeature(xmlFeature feature)
  */
 static void
 xmlDetectSAX2(xmlParserCtxtPtr ctxt) {
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2605]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2605\n");
+      else
+        fprintf(stderr, "reached bug index 2605\n");
+    }
+    if ((!FIXREVERTER[2605] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef LIBXML_SAX1_ENABLED
     if ((ctxt->sax) &&  (ctxt->sax->initialized == XML_SAX2_MAGIC) &&
         ((ctxt->sax->startElementNs != NULL) ||
@@ -1124,8 +1368,23 @@ struct _xmlDefAttrs {
 static xmlChar *
 xmlAttrNormalizeSpace(const xmlChar *src, xmlChar *dst)
 {
-    if ((src == NULL) || (dst == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2606]) {
+      if ((src == (void *) 0 || dst == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2606\n");
+      else
+        fprintf(stderr, "reached bug index 2606\n");
+    }
+    if ((!FIXREVERTER[2606] && (src == (void *) 0 || dst == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (*src == 0x20) src++;
     while (*src != 0) {
@@ -1162,11 +1421,41 @@ xmlAttrNormalizeSpace2(xmlParserCtxtPtr ctxt, xmlChar *src, int *len)
     int need_realloc = 0;
     const xmlChar *cur;
 
-    if ((ctxt == NULL) || (src == NULL) || (len == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2607]) {
+      if ((ctxt == (void *) 0 || src == (void *) 0 || len == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2607\n");
+      else
+        fprintf(stderr, "reached bug index 2607\n");
+    }
+    if ((!FIXREVERTER[2607] && (ctxt == (void *) 0 || src == (void *) 0 || len == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     i = *len;
-    if (i <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2608]) {
+      if ((i <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2608\n");
+      else
+        fprintf(stderr, "reached bug index 2608\n");
+    }
+    if ((!FIXREVERTER[2608] && (i <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = src;
     while (*cur == 0x20) {
@@ -1187,10 +1476,25 @@ xmlAttrNormalizeSpace2(xmlParserCtxtPtr ctxt, xmlChar *src, int *len)
         xmlChar *ret;
 
 	ret = xmlStrndup(src + remove_head, i - remove_head + 1);
-	if (ret == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2609]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2609\n");
+	  else
+	    fprintf(stderr, "reached bug index 2609\n");
+	}
+	if ((!FIXREVERTER[2609] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	xmlAttrNormalizeSpace(ret, ret);
 	*len = (int) strlen((const char *)ret);
         return(ret);
@@ -1231,8 +1535,23 @@ xmlAddDefAttrs(xmlParserCtxtPtr ctxt,
 
     if (ctxt->attsDefault == NULL) {
         ctxt->attsDefault = xmlHashCreateDict(10, ctxt->dict);
-	if (ctxt->attsDefault == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2610]) {
+	  if ((ctxt -> attsDefault == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2610\n");
+	  else
+	    fprintf(stderr, "reached bug index 2610\n");
+	}
+	if ((!FIXREVERTER[2610] && (ctxt -> attsDefault == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
     /*
@@ -1255,8 +1574,23 @@ xmlAddDefAttrs(xmlParserCtxtPtr ctxt,
     if (defaults == NULL) {
         defaults = (xmlDefAttrsPtr) xmlMalloc(sizeof(xmlDefAttrs) +
 	                   (4 * 5) * sizeof(const xmlChar *));
-	if (defaults == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2611]) {
+	  if ((defaults == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2611\n");
+	  else
+	    fprintf(stderr, "reached bug index 2611\n");
+	}
+	if ((!FIXREVERTER[2611] && (defaults == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	defaults->nbAttrs = 0;
 	defaults->maxAttrs = 4;
 	if (xmlHashUpdateEntry2(ctxt->attsDefault, name, prefix,
@@ -1269,8 +1603,23 @@ xmlAddDefAttrs(xmlParserCtxtPtr ctxt,
 
         temp = (xmlDefAttrsPtr) xmlRealloc(defaults, sizeof(xmlDefAttrs) +
 		       (2 * defaults->maxAttrs * 5) * sizeof(const xmlChar *));
-	if (temp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2612]) {
+	  if ((temp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2612\n");
+	  else
+	    fprintf(stderr, "reached bug index 2612\n");
+	}
+	if ((!FIXREVERTER[2612] && (temp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	defaults = temp;
 	defaults->maxAttrs *= 2;
 	if (xmlHashUpdateEntry2(ctxt->attsDefault, name, prefix,
@@ -1330,8 +1679,23 @@ xmlAddSpecialAttr(xmlParserCtxtPtr ctxt,
 {
     if (ctxt->attsSpecial == NULL) {
         ctxt->attsSpecial = xmlHashCreateDict(10, ctxt->dict);
-	if (ctxt->attsSpecial == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2613]) {
+	  if ((ctxt -> attsSpecial == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2613\n");
+	  else
+	    fprintf(stderr, "reached bug index 2613\n");
+	}
+	if ((!FIXREVERTER[2613] && (ctxt -> attsSpecial == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
     if (xmlHashLookup2(ctxt->attsSpecial, fullname, fullattr) != NULL)
@@ -1373,8 +1737,23 @@ xmlCleanSpecialAttrCallback(void *payload, void *data,
 static void
 xmlCleanSpecialAttr(xmlParserCtxtPtr ctxt)
 {
-    if (ctxt->attsSpecial == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2614]) {
+      if ((ctxt -> attsSpecial == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2614\n");
+      else
+        fprintf(stderr, "reached bug index 2614\n");
+    }
+    if ((!FIXREVERTER[2614] && (ctxt -> attsSpecial == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlHashScanFull(ctxt->attsSpecial, xmlCleanSpecialAttrCallback, ctxt);
 
@@ -1448,8 +1827,23 @@ xmlCheckLanguageID(const xmlChar * lang)
 {
     const xmlChar *cur = lang, *nxt;
 
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2615]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2615\n");
+      else
+        fprintf(stderr, "reached bug index 2615\n");
+    }
+    if ((!FIXREVERTER[2615] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     if (((cur[0] == 'i') && (cur[1] == '-')) ||
         ((cur[0] == 'I') && (cur[1] == '-')) ||
         ((cur[0] == 'x') && (cur[1] == '-')) ||
@@ -1620,21 +2014,51 @@ nsPush(xmlParserCtxtPtr ctxt, const xmlChar *prefix, const xmlChar *URL)
 	ctxt->nsNr = 0;
 	ctxt->nsTab = (const xmlChar **)
 	              xmlMalloc(ctxt->nsMax * sizeof(xmlChar *));
-	if (ctxt->nsTab == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2616]) {
+	  if ((ctxt -> nsTab == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2616\n");
+	  else
+	    fprintf(stderr, "reached bug index 2616\n");
+	}
+	if ((!FIXREVERTER[2616] && (ctxt -> nsTab == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    ctxt->nsMax = 0;
             return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (ctxt->nsNr >= ctxt->nsMax) {
         const xmlChar ** tmp;
         ctxt->nsMax *= 2;
         tmp = (const xmlChar **) xmlRealloc((char *) ctxt->nsTab,
 				    ctxt->nsMax * sizeof(ctxt->nsTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2617]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2617\n");
+          else
+            fprintf(stderr, "reached bug index 2617\n");
+        }
+        if ((!FIXREVERTER[2617] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlErrMemory(ctxt, NULL);
 	    ctxt->nsMax /= 2;
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	ctxt->nsTab = tmp;
     }
     ctxt->nsTab[ctxt->nsNr++] = prefix;
@@ -1655,13 +2079,43 @@ nsPop(xmlParserCtxtPtr ctxt, int nr)
 {
     int i;
 
-    if (ctxt->nsTab == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2618]) {
+      if ((ctxt -> nsTab == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2618\n");
+      else
+        fprintf(stderr, "reached bug index 2618\n");
+    }
+    if ((!FIXREVERTER[2618] && (ctxt -> nsTab == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->nsNr < nr) {
         xmlGenericError(xmlGenericErrorContext, "Pbm popping %d NS\n", nr);
         nr = ctxt->nsNr;
     }
-    if (ctxt->nsNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2619]) {
+      if ((ctxt -> nsNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2619\n");
+      else
+        fprintf(stderr, "reached bug index 2619\n");
+    }
+    if ((!FIXREVERTER[2619] && (ctxt -> nsNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
 
     for (i = 0;i < nr;i++) {
          ctxt->nsNr--;
@@ -1681,21 +2135,81 @@ xmlCtxtGrowAttrs(xmlParserCtxtPtr ctxt, int nr) {
 	maxatts = 55; /* allow for 10 attrs by default */
 	atts = (const xmlChar **)
 	       xmlMalloc(maxatts * sizeof(xmlChar *));
-	if (atts == NULL) goto mem_error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2620]) {
+	  if ((atts == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2620\n");
+	  else
+	    fprintf(stderr, "reached bug index 2620\n");
+	}
+	if ((!FIXREVERTER[2620] && (atts == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto mem_error;
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->atts = atts;
 	attallocs = (int *) xmlMalloc((maxatts / 5) * sizeof(int));
-	if (attallocs == NULL) goto mem_error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2621]) {
+	  if ((attallocs == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2621\n");
+	  else
+	    fprintf(stderr, "reached bug index 2621\n");
+	}
+	if ((!FIXREVERTER[2621] && (attallocs == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto mem_error;
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->attallocs = attallocs;
 	ctxt->maxatts = maxatts;
     } else if (nr + 5 > ctxt->maxatts) {
 	maxatts = (nr + 5) * 2;
 	atts = (const xmlChar **) xmlRealloc((void *) ctxt->atts,
 				     maxatts * sizeof(const xmlChar *));
-	if (atts == NULL) goto mem_error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2622]) {
+	  if ((atts == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2622\n");
+	  else
+	    fprintf(stderr, "reached bug index 2622\n");
+	}
+	if ((!FIXREVERTER[2622] && (atts == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto mem_error;
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->atts = atts;
 	attallocs = (int *) xmlRealloc((void *) ctxt->attallocs,
 	                             (maxatts / 5) * sizeof(int));
-	if (attallocs == NULL) goto mem_error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2623]) {
+	  if ((attallocs == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2623\n");
+	  else
+	    fprintf(stderr, "reached bug index 2623\n");
+	}
+	if ((!FIXREVERTER[2623] && (attallocs == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto mem_error;
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->attallocs = attallocs;
 	ctxt->maxatts = maxatts;
     }
@@ -1717,8 +2231,23 @@ mem_error:
 int
 inputPush(xmlParserCtxtPtr ctxt, xmlParserInputPtr value)
 {
-    if ((ctxt == NULL) || (value == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2624]) {
+      if ((ctxt == (void *) 0 || value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2624\n");
+      else
+        fprintf(stderr, "reached bug index 2624\n");
+    }
+    if ((!FIXREVERTER[2624] && (ctxt == (void *) 0 || value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->inputNr >= ctxt->inputMax) {
         ctxt->inputMax *= 2;
         ctxt->inputTab =
@@ -1750,8 +2279,23 @@ inputPop(xmlParserCtxtPtr ctxt)
 {
     xmlParserInputPtr ret;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2625]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2625\n");
+      else
+        fprintf(stderr, "reached bug index 2625\n");
+    }
+    if ((!FIXREVERTER[2625] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->inputNr <= 0)
         return (NULL);
     ctxt->inputNr--;
@@ -1775,17 +2319,47 @@ inputPop(xmlParserCtxtPtr ctxt)
 int
 nodePush(xmlParserCtxtPtr ctxt, xmlNodePtr value)
 {
-    if (ctxt == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2627]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2627\n");
+      else
+        fprintf(stderr, "reached bug index 2627\n");
+    }
+    if ((!FIXREVERTER[2627] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->nodeNr >= ctxt->nodeMax) {
         xmlNodePtr *tmp;
 
 	tmp = (xmlNodePtr *) xmlRealloc(ctxt->nodeTab,
                                       ctxt->nodeMax * 2 *
                                       sizeof(ctxt->nodeTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2628]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2628\n");
+          else
+            fprintf(stderr, "reached bug index 2628\n");
+        }
+        if ((!FIXREVERTER[2628] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlErrMemory(ctxt, NULL);
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->nodeTab = tmp;
 	ctxt->nodeMax *= 2;
     }
@@ -1815,9 +2389,39 @@ nodePop(xmlParserCtxtPtr ctxt)
 {
     xmlNodePtr ret;
 
-    if (ctxt == NULL) return(NULL);
-    if (ctxt->nodeNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2629]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2629\n");
+      else
+        fprintf(stderr, "reached bug index 2629\n");
+    }
+    if ((!FIXREVERTER[2629] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2630]) {
+      if ((ctxt -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2630\n");
+      else
+        fprintf(stderr, "reached bug index 2630\n");
+    }
+    if ((!FIXREVERTER[2630] && (ctxt -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nodeNr--;
     if (ctxt->nodeNr > 0)
         ctxt->node = ctxt->nodeTab[ctxt->nodeNr - 1];
@@ -1850,24 +2454,69 @@ nameNsPush(xmlParserCtxtPtr ctxt, const xmlChar * value,
         tmp = (const xmlChar * *) xmlRealloc((xmlChar * *)ctxt->nameTab,
                                     ctxt->nameMax *
                                     sizeof(ctxt->nameTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2631]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2631\n");
+          else
+            fprintf(stderr, "reached bug index 2631\n");
+        }
+        if ((!FIXREVERTER[2631] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    ctxt->nameMax /= 2;
 	    goto mem_error;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	ctxt->nameTab = tmp;
         tmp2 = (void **) xmlRealloc((void * *)ctxt->pushTab,
                                     ctxt->nameMax * 3 *
                                     sizeof(ctxt->pushTab[0]));
-        if (tmp2 == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2632]) {
+          if ((tmp2 == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2632\n");
+          else
+            fprintf(stderr, "reached bug index 2632\n");
+        }
+        if ((!FIXREVERTER[2632] && (tmp2 == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    ctxt->nameMax /= 2;
 	    goto mem_error;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	ctxt->pushTab = tmp2;
     } else if (ctxt->pushTab == NULL) {
         ctxt->pushTab = (void **) xmlMalloc(ctxt->nameMax * 3 *
                                             sizeof(ctxt->pushTab[0]));
-        if (ctxt->pushTab == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2633]) {
+          if ((ctxt -> pushTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2633\n");
+          else
+            fprintf(stderr, "reached bug index 2633\n");
+        }
+        if ((!FIXREVERTER[2633] && (ctxt -> pushTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     ctxt->nameTab[ctxt->nameNr] = value;
     ctxt->name = value;
@@ -1893,8 +2542,23 @@ nameNsPop(xmlParserCtxtPtr ctxt)
 {
     const xmlChar *ret;
 
-    if (ctxt->nameNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2634]) {
+      if ((ctxt -> nameNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2634\n");
+      else
+        fprintf(stderr, "reached bug index 2634\n");
+    }
+    if ((!FIXREVERTER[2634] && (ctxt -> nameNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nameNr--;
     if (ctxt->nameNr > 0)
         ctxt->name = ctxt->nameTab[ctxt->nameNr - 1];
@@ -1918,16 +2582,46 @@ nameNsPop(xmlParserCtxtPtr ctxt)
 int
 namePush(xmlParserCtxtPtr ctxt, const xmlChar * value)
 {
-    if (ctxt == NULL) return (-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2635]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2635\n");
+      else
+        fprintf(stderr, "reached bug index 2635\n");
+    }
+    if ((!FIXREVERTER[2635] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return (-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (ctxt->nameNr >= ctxt->nameMax) {
         const xmlChar * *tmp;
         tmp = (const xmlChar * *) xmlRealloc((xmlChar * *)ctxt->nameTab,
                                     ctxt->nameMax * 2 *
                                     sizeof(ctxt->nameTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2636]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2636\n");
+          else
+            fprintf(stderr, "reached bug index 2636\n");
+        }
+        if ((!FIXREVERTER[2636] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    goto mem_error;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	ctxt->nameTab = tmp;
         ctxt->nameMax *= 2;
     }
@@ -1951,8 +2645,23 @@ namePop(xmlParserCtxtPtr ctxt)
 {
     const xmlChar *ret;
 
-    if ((ctxt == NULL) || (ctxt->nameNr <= 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2637]) {
+      if ((ctxt == (void *) 0 || ctxt -> nameNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2637\n");
+      else
+        fprintf(stderr, "reached bug index 2637\n");
+    }
+    if ((!FIXREVERTER[2637] && (ctxt == (void *) 0 || ctxt -> nameNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nameNr--;
     if (ctxt->nameNr > 0)
         ctxt->name = ctxt->nameTab[ctxt->nameNr - 1];
@@ -1970,11 +2679,26 @@ static int spacePush(xmlParserCtxtPtr ctxt, int val) {
 	ctxt->spaceMax *= 2;
         tmp = (int *) xmlRealloc(ctxt->spaceTab,
 	                         ctxt->spaceMax * sizeof(ctxt->spaceTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2638]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2638\n");
+          else
+            fprintf(stderr, "reached bug index 2638\n");
+        }
+        if ((!FIXREVERTER[2638] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlErrMemory(ctxt, NULL);
 	    ctxt->spaceMax /=2;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->spaceTab = tmp;
     }
     ctxt->spaceTab[ctxt->spaceNr] = val;
@@ -1984,7 +2708,22 @@ static int spacePush(xmlParserCtxtPtr ctxt, int val) {
 
 static int spacePop(xmlParserCtxtPtr ctxt) {
     int ret;
-    if (ctxt->spaceNr <= 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2639]) {
+      if ((ctxt -> spaceNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2639\n");
+      else
+        fprintf(stderr, "reached bug index 2639\n");
+    }
+    if ((!FIXREVERTER[2639] && (ctxt -> spaceNr <= 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->spaceNr--;
     if (ctxt->spaceNr > 0)
 	ctxt->space = &ctxt->spaceTab[ctxt->spaceNr - 1];
@@ -2191,8 +2930,23 @@ xmlSkipBlankChars(xmlParserCtxtPtr ctxt) {
                     break;
 	        xmlParsePEReference(ctxt);
             } else if (CUR == 0) {
-                if (ctxt->inputNr <= 1)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2640]) {
+                  if ((ctxt -> inputNr <= 1 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2640\n");
+                  else
+                    fprintf(stderr, "reached bug index 2640\n");
+                }
+                if ((!FIXREVERTER[2640] && (ctxt -> inputNr <= 1 ))
+                #else
+                if (0
+                #endif
+                )
                     break;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 xmlPopInput(ctxt);
             } else {
                 break;
@@ -2228,7 +2982,22 @@ xmlSkipBlankChars(xmlParserCtxtPtr ctxt) {
  */
 xmlChar
 xmlPopInput(xmlParserCtxtPtr ctxt) {
-    if ((ctxt == NULL) || (ctxt->inputNr <= 1)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2641]) {
+      if ((ctxt == (void *) 0 || ctxt -> inputNr <= 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 2641\n");
+      else
+        fprintf(stderr, "reached bug index 2641\n");
+    }
+    if ((!FIXREVERTER[2641] && (ctxt == (void *) 0 || ctxt -> inputNr <= 1 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlParserDebugEntities)
 	xmlGenericError(xmlGenericErrorContext,
 		"Popping input %d\n", ctxt->inputNr);
@@ -2254,7 +3023,22 @@ xmlPopInput(xmlParserCtxtPtr ctxt) {
 int
 xmlPushInput(xmlParserCtxtPtr ctxt, xmlParserInputPtr input) {
     int ret;
-    if (input == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2642]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2642\n");
+      else
+        fprintf(stderr, "reached bug index 2642\n");
+    }
+    if ((!FIXREVERTER[2642] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (xmlParserDebugEntities) {
 	if ((ctxt->input != NULL) && (ctxt->input->filename))
@@ -2323,8 +3107,23 @@ xmlParseCharRef(xmlParserCtxtPtr ctxt) {
 		val = 0;
 		break;
 	    }
-	    if (val > 0x110000)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2643]) {
+	      if ((val > 1114112 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2643\n");
+	      else
+	        fprintf(stderr, "reached bug index 2643\n");
+	    }
+	    if ((!FIXREVERTER[2643] && (val > 1114112 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        val = 0x110000;
+	        #ifdef FRCOV
+	        }
+	        #endif
 
 	    NEXT;
 	    count++;
@@ -2352,8 +3151,23 @@ xmlParseCharRef(xmlParserCtxtPtr ctxt) {
 		val = 0;
 		break;
 	    }
-	    if (val > 0x110000)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2644]) {
+	      if ((val > 1114112 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2644\n");
+	      else
+	        fprintf(stderr, "reached bug index 2644\n");
+	    }
+	    if ((!FIXREVERTER[2644] && (val > 1114112 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        val = 0x110000;
+	        #ifdef FRCOV
+	        }
+	        #endif
 
 	    NEXT;
 	    count++;
@@ -2429,8 +3243,23 @@ xmlParseStringCharRef(xmlParserCtxtPtr ctxt, const xmlChar **str) {
 		val = 0;
 		break;
 	    }
-	    if (val > 0x110000)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2645]) {
+	      if ((val > 1114112 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2645\n");
+	      else
+	        fprintf(stderr, "reached bug index 2645\n");
+	    }
+	    if ((!FIXREVERTER[2645] && (val > 1114112 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        val = 0x110000;
+	        #ifdef FRCOV
+	        }
+	        #endif
 
 	    ptr++;
 	    cur = *ptr;
@@ -2448,8 +3277,23 @@ xmlParseStringCharRef(xmlParserCtxtPtr ctxt, const xmlChar **str) {
 		val = 0;
 		break;
 	    }
-	    if (val > 0x110000)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2646]) {
+	      if ((val > 1114112 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2646\n");
+	      else
+	        fprintf(stderr, "reached bug index 2646\n");
+	    }
+	    if ((!FIXREVERTER[2646] && (val > 1114112 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        val = 0x110000;
+	        #ifdef FRCOV
+	        }
+	        #endif
 
 	    ptr++;
 	    cur = *ptr;
@@ -2619,8 +3463,23 @@ xmlStringLenDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
     xmlEntityPtr ent;
     int c,l;
 
-    if ((ctxt == NULL) || (str == NULL) || (len < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2647]) {
+      if ((ctxt == (void *) 0 || str == (void *) 0 ) && !(len < 0 ))
+        fprintf(stderr, "triggered bug index 2647\n");
+      else
+        fprintf(stderr, "reached bug index 2647\n");
+    }
+    if ((FIXREVERTER[2647] && (len < 0 )) || (!FIXREVERTER[2647] && (ctxt == (void *) 0 || str == (void *) 0 || len < 0 ))
+    #else
+    if (len < 0 
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     last = str + len;
 
     if (((ctxt->depth > 40) &&
@@ -2635,7 +3494,22 @@ xmlStringLenDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
      */
     buffer_size = XML_PARSER_BIG_BUFFER_SIZE;
     buffer = (xmlChar *) xmlMallocAtomic(buffer_size);
-    if (buffer == NULL) goto mem_error;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2648]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2648\n");
+      else
+        fprintf(stderr, "reached bug index 2648\n");
+    }
+    if ((!FIXREVERTER[2648] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) goto mem_error;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * OK loop until we reach one of the ending char or a size limit.
@@ -2648,11 +3522,41 @@ xmlStringLenDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
     while ((c != 0) && (c != end) && /* non input consuming loop */
 	   (c != end2) && (c != end3)) {
 
-	if (c == 0) break;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2649]) {
+	  if ((c == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2649\n");
+	  else
+	    fprintf(stderr, "reached bug index 2649\n");
+	}
+	if ((!FIXREVERTER[2649] && (c == 0 ))
+	#else
+	if (0
+	#endif
+	) break;
+	#ifdef FRCOV
+	}
+	#endif
         if ((c == '&') && (str[1] == '#')) {
 	    int val = xmlParseStringCharRef(ctxt, &str);
-	    if (val == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2650]) {
+	      if ((val == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2650\n");
+	      else
+	        fprintf(stderr, "reached bug index 2650\n");
+	    }
+	    if ((!FIXREVERTER[2650] && (val == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
                 goto int_error;
+                #ifdef FRCOV
+                }
+                #endif
 	    COPY_BUF(0,buffer,nbchars,val);
 	    if (nbchars + XML_PARSER_BUFFER_SIZE > buffer_size) {
 	        growBuffer(buffer, XML_PARSER_BUFFER_SIZE);
@@ -2683,8 +3587,23 @@ xmlStringLenDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
 		rep = xmlStringDecodeEntities(ctxt, ent->content, what,
 			                      0, 0, 0);
 		ctxt->depth--;
-		if (rep == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2651]) {
+		  if ((rep == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2651\n");
+		  else
+		    fprintf(stderr, "reached bug index 2651\n");
+		}
+		if ((!FIXREVERTER[2651] && (rep == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
                     goto int_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 current = rep;
                 while (*current != 0) { /* non input consuming loop */
@@ -2739,8 +3658,23 @@ xmlStringLenDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
 		rep = xmlStringDecodeEntities(ctxt, ent->content, what,
 			                      0, 0, 0);
 		ctxt->depth--;
-		if (rep == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2652]) {
+		  if ((rep == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2652\n");
+		  else
+		    fprintf(stderr, "reached bug index 2652\n");
+		}
+		if ((!FIXREVERTER[2652] && (rep == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
                     goto int_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 current = rep;
                 while (*current != 0) { /* non input consuming loop */
                     buffer[nbchars++] = *current++;
@@ -2799,7 +3733,22 @@ int_error:
 xmlChar *
 xmlStringDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int what,
 		        xmlChar end, xmlChar  end2, xmlChar end3) {
-    if ((ctxt == NULL) || (str == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2653]) {
+      if ((ctxt == (void *) 0 || str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2653\n");
+      else
+        fprintf(stderr, "reached bug index 2653\n");
+    }
+    if ((!FIXREVERTER[2653] && (ctxt == (void *) 0 || str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlStringLenDecodeEntities(ctxt, str, xmlStrlen(str), what,
            end, end2, end3));
 }
@@ -2852,7 +3801,22 @@ static int areBlanks(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
     /*
      * Look if the element is mixed content in the DTD if available
      */
-    if (ctxt->node == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2654]) {
+      if ((ctxt -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2654\n");
+      else
+        fprintf(stderr, "reached bug index 2654\n");
+    }
+    if ((!FIXREVERTER[2654] && (ctxt -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->myDoc != NULL) {
 	ret = xmlIsMixedElement(ctxt->myDoc, ctxt->node->name);
         if (ret == 0) return(1);
@@ -2913,7 +3877,22 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
     const xmlChar *cur = name;
     int c;
 
-    if (prefix == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2657]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2657\n");
+      else
+        fprintf(stderr, "reached bug index 2657\n");
+    }
+    if ((!FIXREVERTER[2657] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     *prefix = NULL;
 
     if (cur == NULL) return(NULL);
@@ -2942,10 +3921,25 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
 	max = len * 2;
 
 	buffer = (xmlChar *) xmlMallocAtomic(max * sizeof(xmlChar));
-	if (buffer == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2659]) {
+	  if ((buffer == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2659\n");
+	  else
+	    fprintf(stderr, "reached bug index 2659\n");
+	}
+	if ((!FIXREVERTER[2659] && (buffer == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(buffer, buf, len);
 	while ((c != 0) && (c != ':')) { /* tested bigname.xml */
 	    if (len + 10 > max) {
@@ -2954,11 +3948,26 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
 		max *= 2;
 		tmp = (xmlChar *) xmlRealloc(buffer,
 						max * sizeof(xmlChar));
-		if (tmp == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2660]) {
+		  if ((tmp == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2660\n");
+		  else
+		    fprintf(stderr, "reached bug index 2660\n");
+		}
+		if ((!FIXREVERTER[2660] && (tmp == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlFree(buffer);
 		    xmlErrMemory(ctxt, NULL);
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		buffer = tmp;
 	    }
 	    buffer[len++] = c;
@@ -2986,9 +3995,24 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
     if (c == ':') {
 	c = *cur;
         *prefix = ret;
-	if (c == 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2661]) {
+	  if ((c == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2661\n");
+	  else
+	    fprintf(stderr, "reached bug index 2661\n");
+	}
+	if ((!FIXREVERTER[2661] && (c == 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return(xmlStrndup(BAD_CAST "", 0));
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	len = 0;
 
 	/*
@@ -3009,10 +4033,27 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
 	}
 	cur++;
 
-	while ((c != 0) && (len < max)) { /* tested bigname2.xml */
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2662])
+	  fprintf(stderr, "reached bug index 2662\n");
+	while ((FIXREVERTER[2662] && (c != 0 )) || (!FIXREVERTER[2662] && (c != 0 && len < max ))
+	#else
+	while (c != 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(len < max ))
+	    fprintf(stderr, "triggered bug index 2662\n");
+	  #endif
+	 /* tested bigname2.xml */
 	    buf[len++] = c;
 	    c = *cur++;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (len >= max) {
 	    /*
 	     * Okay someone managed to make a huge name, so he's ready to pay
@@ -3021,10 +4062,25 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
 	    max = len * 2;
 
 	    buffer = (xmlChar *) xmlMallocAtomic(max * sizeof(xmlChar));
-	    if (buffer == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2663]) {
+	      if ((buffer == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2663\n");
+	      else
+	        fprintf(stderr, "reached bug index 2663\n");
+	    }
+	    if ((!FIXREVERTER[2663] && (buffer == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlErrMemory(ctxt, NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memcpy(buffer, buf, len);
 	    while (c != 0) { /* tested bigname2.xml */
 		if (len + 10 > max) {
@@ -3033,11 +4089,26 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
 		    max *= 2;
 		    tmp = (xmlChar *) xmlRealloc(buffer,
 						    max * sizeof(xmlChar));
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2664]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2664\n");
+		      else
+		        fprintf(stderr, "reached bug index 2664\n");
+		    }
+		    if ((!FIXREVERTER[2664] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlErrMemory(ctxt, NULL);
 			xmlFree(buffer);
 			return(NULL);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    buffer = tmp;
 		}
 		buffer[len++] = c;
@@ -3444,8 +4515,23 @@ xmlParseNCName(xmlParserCtxtPtr ctxt) {
 	        (*in == '_') || (*in == '-') ||
 	        (*in == '.')) && (in < e))
 	    in++;
-	if (in >= e)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2665]) {
+	  if ((in >= e ) && !(0))
+	    fprintf(stderr, "triggered bug index 2665\n");
+	  else
+	    fprintf(stderr, "reached bug index 2665\n");
+	}
+	if ((!FIXREVERTER[2665] && (in >= e ))
+	#else
+	if (0
+	#endif
+	)
 	    goto complex;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((*in > 0) && (*in < 0x80)) {
 	    count = in - ctxt->input->cur;
             if ((count > XML_MAX_NAME_LENGTH) &&
@@ -3558,10 +4644,25 @@ xmlParseStringName(xmlParserCtxtPtr ctxt, const xmlChar** str) {
 	    int max = len * 2;
 
 	    buffer = (xmlChar *) xmlMallocAtomic(max * sizeof(xmlChar));
-	    if (buffer == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2666]) {
+	      if ((buffer == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2666\n");
+	      else
+	        fprintf(stderr, "reached bug index 2666\n");
+	    }
+	    if ((!FIXREVERTER[2666] && (buffer == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlErrMemory(ctxt, NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memcpy(buffer, buf, len);
 	    while (xmlIsNameChar(ctxt, c)) {
 		if (len + 10 > max) {
@@ -3576,11 +4677,26 @@ xmlParseStringName(xmlParserCtxtPtr ctxt, const xmlChar** str) {
 		    max *= 2;
 		    tmp = (xmlChar *) xmlRealloc(buffer,
 			                            max * sizeof(xmlChar));
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2667]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2667\n");
+		      else
+		        fprintf(stderr, "reached bug index 2667\n");
+		    }
+		    if ((!FIXREVERTER[2667] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlErrMemory(ctxt, NULL);
 			xmlFree(buffer);
 			return(NULL);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    buffer = tmp;
 		}
 		COPY_BUF(l,buffer,len,c);
@@ -3654,10 +4770,25 @@ xmlParseNmtoken(xmlParserCtxtPtr ctxt) {
 	    int max = len * 2;
 
 	    buffer = (xmlChar *) xmlMallocAtomic(max * sizeof(xmlChar));
-	    if (buffer == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2668]) {
+	      if ((buffer == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2668\n");
+	      else
+	        fprintf(stderr, "reached bug index 2668\n");
+	    }
+	    if ((!FIXREVERTER[2668] && (buffer == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlErrMemory(ctxt, NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memcpy(buffer, buf, len);
 	    while (xmlIsNameChar(ctxt, c)) {
 		if (count++ > XML_PARSER_CHUNK_SIZE) {
@@ -3680,11 +4811,26 @@ xmlParseNmtoken(xmlParserCtxtPtr ctxt) {
 		    max *= 2;
 		    tmp = (xmlChar *) xmlRealloc(buffer,
 			                            max * sizeof(xmlChar));
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2669]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2669\n");
+		      else
+		        fprintf(stderr, "reached bug index 2669\n");
+		    }
+		    if ((!FIXREVERTER[2669] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlErrMemory(ctxt, NULL);
 			xmlFree(buffer);
 			return(NULL);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    buffer = tmp;
 		}
 		COPY_BUF(l,buffer,len,c);
@@ -3695,8 +4841,23 @@ xmlParseNmtoken(xmlParserCtxtPtr ctxt) {
 	    return(buffer);
 	}
     }
-    if (len == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2670]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2670\n");
+      else
+        fprintf(stderr, "reached bug index 2670\n");
+    }
+    if ((!FIXREVERTER[2670] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if ((len > XML_MAX_NAME_LENGTH) &&
         ((ctxt->options & XML_PARSE_HUGE) == 0)) {
         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "NmToken");
@@ -3736,10 +4897,25 @@ xmlParseEntityValue(xmlParserCtxtPtr ctxt, xmlChar **orig) {
 	return(NULL);
     }
     buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2671]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2671\n");
+      else
+        fprintf(stderr, "reached bug index 2671\n");
+    }
+    if ((!FIXREVERTER[2671] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt, NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * The content of the entity definition is copied in a buffer.
@@ -3768,10 +4944,25 @@ xmlParseEntityValue(xmlParserCtxtPtr ctxt, xmlChar **orig) {
 
 	    size *= 2;
 	    tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2672]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2672\n");
+	      else
+	        fprintf(stderr, "reached bug index 2672\n");
+	    }
+	    if ((!FIXREVERTER[2672] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrMemory(ctxt, NULL);
                 goto error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	}
 	COPY_BUF(l,buf,len,c);
@@ -3892,7 +5083,22 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
      */
     buf_size = XML_PARSER_BUFFER_SIZE;
     buf = (xmlChar *) xmlMallocAtomic(buf_size);
-    if (buf == NULL) goto mem_error;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2673]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2673\n");
+      else
+        fprintf(stderr, "reached bug index 2673\n");
+    }
+    if ((!FIXREVERTER[2673] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) goto mem_error;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * OK loop until we reach one of the ending char or a size limit.
@@ -3911,7 +5117,22 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
                            "AttValue length too long\n");
             goto mem_error;
         }
-	if (c == 0) break;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2674]) {
+	  if ((c == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2674\n");
+	  else
+	    fprintf(stderr, "reached bug index 2674\n");
+	}
+	if ((!FIXREVERTER[2674] && (c == 0 ))
+	#else
+	if (0
+	#endif
+	) break;
+	#ifdef FRCOV
+	}
+	#endif
 	if (c == '&') {
 	    in_space = 0;
 	    if (NXT(1) == '#') {
@@ -4012,8 +5233,23 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
 			--ctxt->depth;
 
                         diff = ctxt->nbentities - oldnbent + 1;
-                        if (diff > INT_MAX / 2)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[2675]) {
+                          if ((diff > 2147483647 / 2 ) && !(0))
+                            fprintf(stderr, "triggered bug index 2675\n");
+                          else
+                            fprintf(stderr, "reached bug index 2675\n");
+                        }
+                        if ((!FIXREVERTER[2675] && (diff > 2147483647 / 2 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             diff = INT_MAX / 2;
+                            #ifdef FRCOV
+                            }
+                            #endif
                         ent->checked = diff * 2;
 			if (rep != NULL) {
 			    if (xmlStrchr(rep, '<'))
@@ -4084,11 +5320,26 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
      * There we potentially risk an overflow, don't allow attribute value of
      * length more than INT_MAX it is a very reasonnable assumption !
      */
-    if (len >= INT_MAX) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2676]) {
+      if ((len >= 2147483647 ) && !(0))
+        fprintf(stderr, "triggered bug index 2676\n");
+      else
+        fprintf(stderr, "reached bug index 2676\n");
+    }
+    if ((!FIXREVERTER[2676] && (len >= 2147483647 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,
                        "AttValue length too long\n");
         goto mem_error;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (attlen != NULL) *attlen = (int) len;
     return(buf);
@@ -4139,7 +5390,22 @@ error:
 
 xmlChar *
 xmlParseAttValue(xmlParserCtxtPtr ctxt) {
-    if ((ctxt == NULL) || (ctxt->input == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2677]) {
+      if ((ctxt == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2677\n");
+      else
+        fprintf(stderr, "reached bug index 2677\n");
+    }
+    if ((!FIXREVERTER[2677] && (ctxt == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlParseAttValueInternal(ctxt, NULL, NULL, 0));
 }
 
@@ -4177,10 +5443,25 @@ xmlParseSystemLiteral(xmlParserCtxtPtr ctxt) {
     }
 
     buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2678]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2678\n");
+      else
+        fprintf(stderr, "reached bug index 2678\n");
+    }
+    if ((!FIXREVERTER[2678] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(ctxt, NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->instate = XML_PARSER_SYSTEM_LITERAL;
     cur = CUR_CHAR(l);
     while ((IS_CHAR(cur)) && (cur != stop)) { /* checked */
@@ -4265,10 +5546,25 @@ xmlParsePubidLiteral(xmlParserCtxtPtr ctxt) {
 	return(NULL);
     }
     buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2679]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2679\n");
+      else
+        fprintf(stderr, "reached bug index 2679\n");
+    }
+    if ((!FIXREVERTER[2679] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt, NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->instate = XML_PARSER_PUBLIC_LITERAL;
     cur = CUR;
     while ((IS_PUBIDCHAR_CH(cur)) && (cur != stop)) { /* checked */
@@ -4283,11 +5579,26 @@ xmlParsePubidLiteral(xmlParserCtxtPtr ctxt) {
             }
 	    size *= 2;
 	    tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2680]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2680\n");
+	      else
+	        fprintf(stderr, "reached bug index 2680\n");
+	    }
+	    if ((!FIXREVERTER[2680] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrMemory(ctxt, NULL);
 		xmlFree(buf);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	}
 	buf[len++] = cur;
@@ -4712,15 +6023,45 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
         len = 0;
 	size = XML_PARSER_BUFFER_SIZE;
 	buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-	if (buf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2681]) {
+	  if ((buf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2681\n");
+	  else
+	    fprintf(stderr, "reached bug index 2681\n");
+	}
+	if ((!FIXREVERTER[2681] && (buf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     GROW;	/* Assure there's enough input data */
     q = CUR_CHAR(ql);
-    if (q == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2682]) {
+      if ((q == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2682\n");
+      else
+        fprintf(stderr, "reached bug index 2682\n");
+    }
+    if ((!FIXREVERTER[2682] && (q == 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto not_terminated;
+        #ifdef FRCOV
+        }
+        #endif
     if (!IS_CHAR(q)) {
         xmlFatalErrMsgInt(ctxt, XML_ERR_INVALID_CHAR,
                           "xmlParseComment: invalid xmlChar value %d\n",
@@ -4730,8 +6071,23 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
     }
     NEXTL(ql);
     r = CUR_CHAR(rl);
-    if (r == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2683]) {
+      if ((r == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2683\n");
+      else
+        fprintf(stderr, "reached bug index 2683\n");
+    }
+    if ((!FIXREVERTER[2683] && (r == 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto not_terminated;
+        #ifdef FRCOV
+        }
+        #endif
     if (!IS_CHAR(r)) {
         xmlFatalErrMsgInt(ctxt, XML_ERR_INVALID_CHAR,
                           "xmlParseComment: invalid xmlChar value %d\n",
@@ -4741,8 +6097,23 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
     }
     NEXTL(rl);
     cur = CUR_CHAR(l);
-    if (cur == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2684]) {
+      if ((cur == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2684\n");
+      else
+        fprintf(stderr, "reached bug index 2684\n");
+    }
+    if ((!FIXREVERTER[2684] && (cur == 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto not_terminated;
+        #ifdef FRCOV
+        }
+        #endif
     while (IS_CHAR(cur) && /* checked */
            ((cur != '>') ||
 	    (r != '-') || (q != '-'))) {
@@ -4762,11 +6133,26 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
 
 	    new_size = size * 2;
 	    new_buf = (xmlChar *) xmlRealloc(buf, new_size);
-	    if (new_buf == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2685]) {
+	      if ((new_buf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2685\n");
+	      else
+	        fprintf(stderr, "reached bug index 2685\n");
+	    }
+	    if ((!FIXREVERTER[2685] && (new_buf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFree (buf);
 		xmlErrMemory(ctxt, NULL);
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = new_buf;
             size = new_size;
 	}
@@ -4895,11 +6281,26 @@ get_more:
 		    else
 		        size = XML_PARSER_BUFFER_SIZE + nbchar;
 		    buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-		    if (buf == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2686]) {
+		      if ((buf == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2686\n");
+		      else
+		        fprintf(stderr, "reached bug index 2686\n");
+		    }
+		    if ((!FIXREVERTER[2686] && (buf == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 		        xmlErrMemory(ctxt, NULL);
 			ctxt->instate = state;
 			return;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    len = 0;
 		} else if (len + nbchar + 1 >= size) {
 		    xmlChar *new_buf;
@@ -5161,11 +6562,26 @@ xmlParsePI(xmlParserCtxtPtr ctxt) {
 		return;
 	    }
 	    buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-	    if (buf == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2687]) {
+	      if ((buf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2687\n");
+	      else
+	        fprintf(stderr, "reached bug index 2687\n");
+	    }
+	    if ((!FIXREVERTER[2687] && (buf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrMemory(ctxt, NULL);
 		ctxt->instate = state;
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (SKIP_BLANKS == 0) {
 		xmlFatalErrMsgStr(ctxt, XML_ERR_SPACE_REQUIRED,
 			  "ParsePI: PI %s space expected\n", target);
@@ -5294,10 +6710,25 @@ xmlParseNotationDecl(xmlParserCtxtPtr ctxt) {
 	}
 
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2688]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2688\n");
+	  else
+	    fprintf(stderr, "reached bug index 2688\n");
+	}
+	if ((!FIXREVERTER[2688] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErr(ctxt, XML_ERR_NOTATION_NOT_STARTED, NULL);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (xmlStrchr(name, ':') != NULL) {
 	    xmlNsErr(ctxt, XML_NS_ERR_COLON,
 		     "colons are forbidden from notation names '%s'\n",
@@ -5384,11 +6815,26 @@ xmlParseEntityDecl(xmlParserCtxtPtr ctxt) {
 	}
 
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2689]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2689\n");
+	  else
+	    fprintf(stderr, "reached bug index 2689\n");
+	}
+	if ((!FIXREVERTER[2689] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 	                   "xmlParseEntityDecl: no name\n");
             return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (xmlStrchr(name, ':') != NULL) {
 	    xmlNsErr(ctxt, XML_NS_ERR_COLON,
 		     "colons are forbidden from entities names '%s'\n",
@@ -5464,10 +6910,25 @@ xmlParseEntityDecl(xmlParserCtxtPtr ctxt) {
 		    (xmlStrEqual(ctxt->myDoc->version, SAX_COMPAT_MODE))) {
 		    if (ctxt->myDoc == NULL) {
 			ctxt->myDoc = xmlNewDoc(SAX_COMPAT_MODE);
-			if (ctxt->myDoc == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2690]) {
+			  if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 2690\n");
+			  else
+			    fprintf(stderr, "reached bug index 2690\n");
+			}
+			if ((!FIXREVERTER[2690] && (ctxt -> myDoc == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    xmlErrMemory(ctxt, "New Doc failed");
 			    return;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			ctxt->myDoc->properties = XML_DOC_INTERNAL;
 		    }
 		    if (ctxt->myDoc->intSubset == NULL)
@@ -5535,10 +6996,25 @@ xmlParseEntityDecl(xmlParserCtxtPtr ctxt) {
 			(xmlStrEqual(ctxt->myDoc->version, SAX_COMPAT_MODE)))) {
 			if (ctxt->myDoc == NULL) {
 			    ctxt->myDoc = xmlNewDoc(SAX_COMPAT_MODE);
-			    if (ctxt->myDoc == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[2691]) {
+			      if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 2691\n");
+			      else
+			        fprintf(stderr, "reached bug index 2691\n");
+			    }
+			    if ((!FIXREVERTER[2691] && (ctxt -> myDoc == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 			        xmlErrMemory(ctxt, "New Doc failed");
 				return;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 			    ctxt->myDoc->properties = XML_DOC_INTERNAL;
 			}
 
@@ -5692,12 +7168,27 @@ xmlParseNotationType(xmlParserCtxtPtr ctxt) {
         NEXT;
 	SKIP_BLANKS;
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2692]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2692\n");
+	  else
+	    fprintf(stderr, "reached bug index 2692\n");
+	}
+	if ((!FIXREVERTER[2692] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			   "Name expected in NOTATION declaration\n");
             xmlFreeEnumeration(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	tmp = ret;
 	while (tmp != NULL) {
 	    if (xmlStrEqual(name, tmp->name)) {
@@ -5712,10 +7203,25 @@ xmlParseNotationType(xmlParserCtxtPtr ctxt) {
 	}
 	if (tmp == NULL) {
 	    cur = xmlCreateEnumeration(name);
-	    if (cur == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2693]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2693\n");
+	      else
+	        fprintf(stderr, "reached bug index 2693\n");
+	    }
+	    if ((!FIXREVERTER[2693] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 xmlFreeEnumeration(ret);
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    if (last == NULL) ret = last = cur;
 	    else {
 		last->next = cur;
@@ -5762,10 +7268,25 @@ xmlParseEnumerationType(xmlParserCtxtPtr ctxt) {
         NEXT;
 	SKIP_BLANKS;
         name = xmlParseNmtoken(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2694]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2694\n");
+	  else
+	    fprintf(stderr, "reached bug index 2694\n");
+	}
+	if ((!FIXREVERTER[2694] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErr(ctxt, XML_ERR_NMTOKEN_REQUIRED, NULL);
 	    return(ret);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	tmp = ret;
 	while (tmp != NULL) {
 	    if (xmlStrEqual(name, tmp->name)) {
@@ -5782,10 +7303,25 @@ xmlParseEnumerationType(xmlParserCtxtPtr ctxt) {
 	    cur = xmlCreateEnumeration(name);
 	    if (!xmlDictOwns(ctxt->dict, name))
 		xmlFree(name);
-	    if (cur == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2695]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2695\n");
+	      else
+	        fprintf(stderr, "reached bug index 2695\n");
+	    }
+	    if ((!FIXREVERTER[2695] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 xmlFreeEnumeration(ret);
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    if (last == NULL) ret = last = cur;
 	    else {
 		last->next = cur;
@@ -5937,11 +7473,26 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 		                 "Space required after '<!ATTLIST'\n");
 	}
         elemName = xmlParseName(ctxt);
-	if (elemName == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2696]) {
+	  if ((elemName == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2696\n");
+	  else
+	    fprintf(stderr, "reached bug index 2696\n");
+	}
+	if ((!FIXREVERTER[2696] && (elemName == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			   "ATTLIST: no name for Element\n");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	SKIP_BLANKS;
 	GROW;
 	while ((RAW != '>') && (ctxt->instate != XML_PARSER_EOF)) {
@@ -5952,11 +7503,26 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 	    GROW;
             tree = NULL;
 	    attrName = xmlParseName(ctxt);
-	    if (attrName == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2697]) {
+	      if ((attrName == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2697\n");
+	      else
+	        fprintf(stderr, "reached bug index 2697\n");
+	    }
+	    if ((!FIXREVERTER[2697] && (attrName == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			       "ATTLIST: no name for Attribute\n");
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    GROW;
 	    if (SKIP_BLANKS == 0) {
 		xmlFatalErrMsg(ctxt, XML_ERR_SPACE_REQUIRED,
@@ -5965,9 +7531,24 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 	    }
 
 	    type = xmlParseAttributeType(ctxt, &tree);
-	    if (type <= 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2698]) {
+	      if ((type <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2698\n");
+	      else
+	        fprintf(stderr, "reached bug index 2698\n");
+	    }
+	    if ((!FIXREVERTER[2698] && (type <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	    GROW;
 	    if (SKIP_BLANKS == 0) {
@@ -5979,15 +7560,47 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 	    }
 
 	    def = xmlParseDefaultDecl(ctxt, &defaultValue);
-	    if (def <= 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2699]) {
+	      if ((def <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2699\n");
+	      else
+	        fprintf(stderr, "reached bug index 2699\n");
+	    }
+	    if ((!FIXREVERTER[2699] && (def <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 if (defaultValue != NULL)
 		    xmlFree(defaultValue);
 	        if (tree != NULL)
 		    xmlFreeEnumeration(tree);
 	        break;
 	    }
-	    if ((type != XML_ATTRIBUTE_CDATA) && (defaultValue != NULL))
+	    #ifdef FRCOV
+	    }
+	    #endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2700]) {
+	      fprintf(stderr, "reached bug index 2700\n");
+	    }
+	    if ((FIXREVERTER[2700] && (type != XML_ATTRIBUTE_CDATA )) || (!FIXREVERTER[2700] && (type != XML_ATTRIBUTE_CDATA && defaultValue != (void *) 0 ))
+	    #else
+	    if (type != XML_ATTRIBUTE_CDATA 
+	    #endif
+	    )
+	        
+	        #ifdef FRCOV
+	        {if (!(defaultValue != (void *) 0 ))
+	          fprintf(stderr, "triggered bug index 2700\n");
+	        #endif
 	        xmlAttrNormalizeSpace(defaultValue, defaultValue);
+	        #ifdef FRCOV
+	        }}
+	        #endif
 
 	    GROW;
             if (RAW != '>') {
@@ -6068,8 +7681,23 @@ xmlParseElementMixedContentDecl(xmlParserCtxtPtr ctxt, int inputchk) {
 	    }
 	    NEXT;
 	    ret = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_PCDATA);
-	    if (ret == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2701]) {
+	      if ((ret == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2701\n");
+	      else
+	        fprintf(stderr, "reached bug index 2701\n");
+	    }
+	    if ((!FIXREVERTER[2701] && (ret == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(NULL);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    if (RAW == '*') {
 		ret->ocur = XML_ELEMENT_CONTENT_MULT;
 		NEXT;
@@ -6078,36 +7706,126 @@ xmlParseElementMixedContentDecl(xmlParserCtxtPtr ctxt, int inputchk) {
 	}
 	if ((RAW == '(') || (RAW == '|')) {
 	    ret = cur = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_PCDATA);
-	    if (ret == NULL) return(NULL);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2702]) {
+	      if ((ret == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2702\n");
+	      else
+	        fprintf(stderr, "reached bug index 2702\n");
+	    }
+	    if ((!FIXREVERTER[2702] && (ret == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	while ((RAW == '|') && (ctxt->instate != XML_PARSER_EOF)) {
 	    NEXT;
 	    if (elem == NULL) {
 	        ret = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_OR);
-		if (ret == NULL) return(NULL);
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2703]) {
+		  if ((ret == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2703\n");
+		  else
+		    fprintf(stderr, "reached bug index 2703\n");
+		}
+		if ((!FIXREVERTER[2703] && (ret == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 		ret->c1 = cur;
-		if (cur != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2704]) {
+		  if ((cur != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2704\n");
+		  else
+		    fprintf(stderr, "reached bug index 2704\n");
+		}
+		if ((!FIXREVERTER[2704] && (cur != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    cur->parent = ret;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		cur = ret;
 	    } else {
 	        n = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_OR);
-		if (n == NULL) return(NULL);
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2705]) {
+		  if ((n == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2705\n");
+		  else
+		    fprintf(stderr, "reached bug index 2705\n");
+		}
+		if ((!FIXREVERTER[2705] && (n == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 		n->c1 = xmlNewDocElementContent(ctxt->myDoc, elem, XML_ELEMENT_CONTENT_ELEMENT);
 		if (n->c1 != NULL)
 		    n->c1->parent = n;
 	        cur->c2 = n;
-		if (n != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2706]) {
+		  if ((n != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2706\n");
+		  else
+		    fprintf(stderr, "reached bug index 2706\n");
+		}
+		if ((!FIXREVERTER[2706] && (n != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    n->parent = cur;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		cur = n;
 	    }
 	    SKIP_BLANKS;
 	    elem = xmlParseName(ctxt);
-	    if (elem == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2707]) {
+	      if ((elem == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2707\n");
+	      else
+	        fprintf(stderr, "reached bug index 2707\n");
+	    }
+	    if ((!FIXREVERTER[2707] && (elem == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			"xmlParseElementMixedContentDecl : Name expected\n");
 		xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    SKIP_BLANKS;
 	    GROW;
 	}
@@ -6198,15 +7916,45 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	GROW;
     } else {
 	elem = xmlParseName(ctxt);
-	if (elem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2708]) {
+	  if ((elem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2708\n");
+	  else
+	    fprintf(stderr, "reached bug index 2708\n");
+	}
+	if ((!FIXREVERTER[2708] && (elem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErr(ctxt, XML_ERR_ELEMCONTENT_NOT_STARTED, NULL);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         cur = ret = xmlNewDocElementContent(ctxt->myDoc, elem, XML_ELEMENT_CONTENT_ELEMENT);
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2709]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2709\n");
+	  else
+	    fprintf(stderr, "reached bug index 2709\n");
+	}
+	if ((!FIXREVERTER[2709] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	GROW;
 	if (RAW == '?') {
 	    cur->ocur = XML_ELEMENT_CONTENT_OPT;
@@ -6247,24 +7995,84 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	    NEXT;
 
 	    op = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_SEQ);
-	    if (op == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2710]) {
+	      if ((op == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2710\n");
+	      else
+	        fprintf(stderr, "reached bug index 2710\n");
+	    }
+	    if ((!FIXREVERTER[2710] && (op == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if ((last != NULL) && (last != ret))
 		    xmlFreeDocElementContent(ctxt->myDoc, last);
 	        xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (last == NULL) {
 		op->c1 = ret;
-		if (ret != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2711]) {
+		  if ((ret != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2711\n");
+		  else
+		    fprintf(stderr, "reached bug index 2711\n");
+		}
+		if ((!FIXREVERTER[2711] && (ret != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ret->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		ret = cur = op;
 	    } else {
 	        cur->c2 = op;
-		if (op != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2712]) {
+		  if ((op != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2712\n");
+		  else
+		    fprintf(stderr, "reached bug index 2712\n");
+		}
+		if ((!FIXREVERTER[2712] && (op != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    op->parent = cur;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		op->c1 = last;
-		if (last != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2713]) {
+		  if ((last != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2713\n");
+		  else
+		    fprintf(stderr, "reached bug index 2713\n");
+		}
+		if ((!FIXREVERTER[2713] && (last != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    last->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		cur =op;
 		last = NULL;
 	    }
@@ -6287,25 +8095,85 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	    NEXT;
 
 	    op = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_OR);
-	    if (op == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2714]) {
+	      if ((op == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2714\n");
+	      else
+	        fprintf(stderr, "reached bug index 2714\n");
+	    }
+	    if ((!FIXREVERTER[2714] && (op == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if ((last != NULL) && (last != ret))
 		    xmlFreeDocElementContent(ctxt->myDoc, last);
 		if (ret != NULL)
 		    xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (last == NULL) {
 		op->c1 = ret;
-		if (ret != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2715]) {
+		  if ((ret != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2715\n");
+		  else
+		    fprintf(stderr, "reached bug index 2715\n");
+		}
+		if ((!FIXREVERTER[2715] && (ret != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ret->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		ret = cur = op;
 	    } else {
 	        cur->c2 = op;
-		if (op != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2716]) {
+		  if ((op != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2716\n");
+		  else
+		    fprintf(stderr, "reached bug index 2716\n");
+		}
+		if ((!FIXREVERTER[2716] && (op != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    op->parent = cur;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		op->c1 = last;
-		if (last != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2717]) {
+		  if ((last != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2717\n");
+		  else
+		    fprintf(stderr, "reached bug index 2717\n");
+		}
+		if ((!FIXREVERTER[2717] && (last != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    last->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		cur =op;
 		last = NULL;
 	    }
@@ -6330,18 +8198,48 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	    SKIP_BLANKS;
 	} else {
 	    elem = xmlParseName(ctxt);
-	    if (elem == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2718]) {
+	      if ((elem == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2718\n");
+	      else
+	        fprintf(stderr, "reached bug index 2718\n");
+	    }
+	    if ((!FIXREVERTER[2718] && (elem == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFatalErr(ctxt, XML_ERR_ELEMCONTENT_NOT_STARTED, NULL);
 		if (ret != NULL)
 		    xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    last = xmlNewDocElementContent(ctxt->myDoc, elem, XML_ELEMENT_CONTENT_ELEMENT);
-	    if (last == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2719]) {
+	      if ((last == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2719\n");
+	      else
+	        fprintf(stderr, "reached bug index 2719\n");
+	    }
+	    if ((!FIXREVERTER[2719] && (last == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if (ret != NULL)
 		    xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (RAW == '?') {
 		last->ocur = XML_ELEMENT_CONTENT_OPT;
 		NEXT;
@@ -6358,11 +8256,44 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	SKIP_BLANKS;
 	GROW;
     }
-    if ((cur != NULL) && (last != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2721]) {
+      fprintf(stderr, "reached bug index 2721\n");
+    }
+    if ((FIXREVERTER[2721] && (cur != (void *) 0 )) || (!FIXREVERTER[2721] && (cur != (void *) 0 && last != (void *) 0 ))
+    #else
+    if (cur != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(last != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2721\n");
+      #endif
+    
         cur->c2 = last;
-	if (last != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2720]) {
+	  if ((last != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2720\n");
+	  else
+	    fprintf(stderr, "reached bug index 2720\n");
+	}
+	if ((!FIXREVERTER[2720] && (last != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    last->parent = cur;
+	    #ifdef FRCOV
+	    }
+	    #endif
+    }
+    #ifdef FRCOV
     }
+    #endif
     if (ctxt->input->id != inputchk) {
 	xmlFatalErrMsg(ctxt, XML_ERR_ENTITY_BOUNDARY,
                        "Element content declaration doesn't start and stop in"
@@ -6548,11 +8479,26 @@ xmlParseElementDecl(xmlParserCtxtPtr ctxt) {
 	    return(-1);
 	}
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2722]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2722\n");
+	  else
+	    fprintf(stderr, "reached bug index 2722\n");
+	}
+	if ((!FIXREVERTER[2722] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			   "xmlParseElementDecl: no name for Element\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (SKIP_BLANKS == 0) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_SPACE_REQUIRED,
 			   "Space required after the element name\n");
@@ -6604,8 +8550,23 @@ xmlParseElementDecl(xmlParserCtxtPtr ctxt) {
 	    NEXT;
 	    if ((ctxt->sax != NULL) && (!ctxt->disableSAX) &&
 		(ctxt->sax->elementDecl != NULL)) {
-		if (content != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2723]) {
+		  if ((content != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2723\n");
+		  else
+		    fprintf(stderr, "reached bug index 2723\n");
+		}
+		if ((!FIXREVERTER[2723] && (content != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    content->parent = NULL;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	        ctxt->sax->elementDecl(ctxt->userData, name, ret,
 		                       content);
 		if ((content != NULL) && (content->parent == NULL)) {
@@ -6730,7 +8691,22 @@ xmlParseConditionalSections(xmlParserCtxtPtr ctxt) {
 	 */
 	state = ctxt->disableSAX;
 	instate = ctxt->instate;
-	if (ctxt->recovery == 0) ctxt->disableSAX = 1;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2724]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2724\n");
+	  else
+	    fprintf(stderr, "reached bug index 2724\n");
+	}
+	if ((!FIXREVERTER[2724] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	) ctxt->disableSAX = 1;
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->instate = XML_PARSER_IGNORE;
 
 	while (((depth >= 0) && (RAW != 0)) &&
@@ -6846,11 +8822,29 @@ xmlParseMarkupDecl(xmlParserCtxtPtr ctxt) {
      * Conditional sections are allowed from entities included
      * by PE References in the internal subset.
      */
-    if ((ctxt->external == 0) && (ctxt->inputNr > 1)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2725]) {
+      fprintf(stderr, "reached bug index 2725\n");
+    }
+    if ((FIXREVERTER[2725] && (ctxt -> external == 0 )) || (!FIXREVERTER[2725] && (ctxt -> external == 0 && ctxt -> inputNr > 1 ))
+    #else
+    if (ctxt -> external == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> inputNr > 1 ))
+        fprintf(stderr, "triggered bug index 2725\n");
+      #endif
+    
         if ((RAW == '<') && (NXT(1) == '!') && (NXT(2) == '[')) {
 	    xmlParseConditionalSections(ctxt);
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt->instate = XML_PARSER_DTD;
 }
@@ -6902,12 +8896,27 @@ xmlParseTextDecl(xmlParserCtxtPtr ctxt) {
      * We must have the encoding declaration
      */
     encoding = xmlParseEncodingDecl(ctxt);
-    if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2726]) {
+      if ((ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ) && !(0))
+        fprintf(stderr, "triggered bug index 2726\n");
+      else
+        fprintf(stderr, "reached bug index 2726\n");
+    }
+    if ((!FIXREVERTER[2726] && (ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * The XML REC instructs us to stop parsing right here
 	 */
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((encoding == NULL) && (ctxt->errNo == XML_ERR_OK)) {
 	xmlFatalErrMsg(ctxt, XML_ERR_MISSING_ENCODING,
 		       "Missing encoding in text declaration\n");
@@ -6961,20 +8970,50 @@ xmlParseExternalSubset(xmlParserCtxtPtr ctxt, const xmlChar *ExternalID,
 
     if (CMP5(CUR_PTR, '<', '?', 'x', 'm', 'l')) {
 	xmlParseTextDecl(ctxt);
-	if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2727]) {
+	  if ((ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ) && !(0))
+	    fprintf(stderr, "triggered bug index 2727\n");
+	  else
+	    fprintf(stderr, "reached bug index 2727\n");
+	}
+	if ((!FIXREVERTER[2727] && (ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	     * The XML REC instructs us to stop parsing right here
 	     */
 	    xmlHaltParser(ctxt);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     if (ctxt->myDoc == NULL) {
         ctxt->myDoc = xmlNewDoc(BAD_CAST "1.0");
-	if (ctxt->myDoc == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2728]) {
+	  if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2728\n");
+	  else
+	    fprintf(stderr, "reached bug index 2728\n");
+	}
+	if ((!FIXREVERTER[2728] && (ctxt -> myDoc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, "New Doc failed");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->myDoc->properties = XML_DOC_INTERNAL;
     }
     if ((ctxt->myDoc != NULL) && (ctxt->myDoc->intSubset == NULL))
@@ -7040,8 +9079,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 	int hex = NXT(2);
 	int value = xmlParseCharRef(ctxt);
 
-	if (value == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2729]) {
+	  if ((value == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2729\n");
+	  else
+	    fprintf(stderr, "reached bug index 2729\n");
+	}
+	if ((!FIXREVERTER[2729] && (value == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (ctxt->charset != XML_CHAR_ENCODING_UTF8) {
 	    /*
 	     * So we are using non-UTF-8 buffers
@@ -7080,7 +9134,22 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
      * We are seeing an entity reference
      */
     ent = xmlParseEntityRef(ctxt);
-    if (ent == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2730]) {
+      if ((ent == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2730\n");
+      else
+        fprintf(stderr, "reached bug index 2730\n");
+    }
+    if ((!FIXREVERTER[2730] && (ent == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (!ctxt->wellFormed)
 	return;
     was_checked = ent->checked;
@@ -7089,7 +9158,22 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
     if ((ent->name == NULL) ||
         (ent->etype == XML_INTERNAL_PREDEFINED_ENTITY)) {
 	val = ent->content;
-	if (val == NULL) return;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2731]) {
+	  if ((val == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2731\n");
+	  else
+	    fprintf(stderr, "reached bug index 2731\n");
+	}
+	if ((!FIXREVERTER[2731] && (val == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) return;
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	 * inline the entity.
 	 */
@@ -7155,8 +9239,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 	 * content and do checkings
 	 */
         diff = ctxt->nbentities - oldnbent + 1;
-        if (diff > INT_MAX / 2)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2732]) {
+          if ((diff > 2147483647 / 2 ) && !(0))
+            fprintf(stderr, "triggered bug index 2732\n");
+          else
+            fprintf(stderr, "reached bug index 2732\n");
+        }
+        if ((!FIXREVERTER[2732] && (diff > 2147483647 / 2 ))
+        #else
+        if (0
+        #endif
+        )
             diff = INT_MAX / 2;
+            #ifdef FRCOV
+            }
+            #endif
         ent->checked = diff * 2;
 	if ((ent->content != NULL) && (xmlStrchr(ent->content, '<')))
 	    ent->checked |= 1;
@@ -7191,8 +9290,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 			while (list != NULL) {
 			    list->parent = (xmlNodePtr) ctxt->node;
 			    list->doc = ctxt->myDoc;
-			    if (list->next == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[2733]) {
+			      if ((list -> next == (void *) 0  ) && !(0))
+			        fprintf(stderr, "triggered bug index 2733\n");
+			      else
+			        fprintf(stderr, "reached bug index 2733\n");
+			    }
+			    if ((!FIXREVERTER[2733] && (list -> next == (void *) 0  ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				ent->last = list;
+				#ifdef FRCOV
+				}
+				#endif
 			    list = list->next;
 			}
 			list = ent->children;
@@ -7206,8 +9320,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 		    while (list != NULL) {
 			list->parent = (xmlNodePtr) ent;
 			xmlSetTreeDoc(list, ent->doc);
-			if (list->next == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2734]) {
+			  if ((list -> next == (void *) 0  ) && !(0))
+			    fprintf(stderr, "triggered bug index 2734\n");
+			  else
+			    fprintf(stderr, "reached bug index 2734\n");
+			}
+			if ((!FIXREVERTER[2734] && (list -> next == (void *) 0  ))
+			#else
+			if (0
+			#endif
+			)
 			    ent->last = list;
+			    #ifdef FRCOV
+			    }
+			    #endif
 			list = list->next;
 		    }
 		}
@@ -7226,8 +9355,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 	    xmlFreeNodeList(list);
 	    list = NULL;
 	}
-	if (ent->checked == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2735]) {
+	  if ((ent -> checked == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2735\n");
+	  else
+	    fprintf(stderr, "reached bug index 2735\n");
+	}
+	if ((!FIXREVERTER[2735] && (ent -> checked == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ent->checked = 2;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
         /* Prevent entity from being parsed and expanded twice (Bug 760367). */
         was_checked = 0;
@@ -7240,7 +9384,19 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
      * provide it to the application, this can take different forms based
      * on the parsing modes.
      */
-    if (ent->children == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2736]) {
+      if ((ent -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2736\n");
+      else
+        fprintf(stderr, "reached bug index 2736\n");
+    }
+    if ((!FIXREVERTER[2736] && (ent -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * Probably running in SAX mode and the callbacks don't
 	 * build the entity content. So unless we already went
@@ -7291,6 +9447,9 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 	}
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * If we didn't get any children for the entity being built
@@ -7346,8 +9505,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 		while (cur != NULL) {
 		    nw = xmlDocCopyNode(cur, ctxt->myDoc, 1);
 		    if (nw != NULL) {
-			if (nw->_private == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2737]) {
+			  if ((nw -> _private == (void *) 0  ) && !(0))
+			    fprintf(stderr, "triggered bug index 2737\n");
+			  else
+			    fprintf(stderr, "reached bug index 2737\n");
+			}
+			if ((!FIXREVERTER[2737] && (nw -> _private == (void *) 0  ))
+			#else
+			if (0
+			#endif
+			)
 			    nw->_private = cur->_private;
+			    #ifdef FRCOV
+			    }
+			    #endif
 			if (firstChild == NULL){
 			    firstChild = nw;
 			}
@@ -7399,8 +9573,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 		    cur->parent = NULL;
 		    nw = xmlDocCopyNode(cur, ctxt->myDoc, 1);
 		    if (nw != NULL) {
-			if (nw->_private == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2738]) {
+			  if ((nw -> _private == (void *) 0  ) && !(0))
+			    fprintf(stderr, "triggered bug index 2738\n");
+			  else
+			    fprintf(stderr, "reached bug index 2738\n");
+			}
+			if ((!FIXREVERTER[2738] && (nw -> _private == (void *) 0  ))
+			#else
+			if (0
+			#endif
+			)
 			    nw->_private = cur->_private;
+			    #ifdef FRCOV
+			    }
+			    #endif
 			if (firstChild == NULL){
 			    firstChild = cur;
 			}
@@ -7411,8 +9600,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 			break;
 		    cur = next;
 		}
-		if (ent->owner == 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2739]) {
+		  if ((ent -> owner == 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2739\n");
+		  else
+		    fprintf(stderr, "reached bug index 2739\n");
+		}
+		if ((!FIXREVERTER[2739] && (ent -> owner == 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ent->owner = 1;
+		    #ifdef FRCOV
+		    }
+		    #endif
 #ifdef LIBXML_LEGACY_ENABLED
 		if (ent->etype == XML_EXTERNAL_GENERAL_PARSED_ENTITY)
 		  xmlAddEntityReference(ent, firstChild, nw);
@@ -7487,11 +9691,26 @@ xmlParseEntityRef(xmlParserCtxtPtr ctxt) {
         return(NULL);
     NEXT;
     name = xmlParseName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2740]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2740\n");
+      else
+        fprintf(stderr, "reached bug index 2740\n");
+    }
+    if ((!FIXREVERTER[2740] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "xmlParseEntityRef: no name\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (RAW != ';') {
 	xmlFatalErr(ctxt, XML_ERR_ENTITYREF_SEMICOL_MISSING, NULL);
 	return(NULL);
@@ -7677,12 +9896,27 @@ xmlParseStringEntityRef(xmlParserCtxtPtr ctxt, const xmlChar ** str) {
 
     ptr++;
     name = xmlParseStringName(ctxt, &ptr);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2741]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2741\n");
+      else
+        fprintf(stderr, "reached bug index 2741\n");
+    }
+    if ((!FIXREVERTER[2741] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "xmlParseStringEntityRef: no name\n");
 	*str = ptr;
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (*ptr != ';') {
 	xmlFatalErr(ctxt, XML_ERR_ENTITYREF_SEMICOL_MISSING, NULL);
         xmlFree(name);
@@ -7866,10 +10100,25 @@ xmlParsePEReference(xmlParserCtxtPtr ctxt)
         return;
     NEXT;
     name = xmlParseName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2742]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2742\n");
+      else
+        fprintf(stderr, "reached bug index 2742\n");
+    }
+    if ((!FIXREVERTER[2742] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_PEREF_NO_NAME, "PEReference: no name\n");
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlParserDebugEntities)
 	xmlGenericError(xmlGenericErrorContext,
 		"PEReference: %s\n", name);
@@ -8021,19 +10270,49 @@ xmlLoadEntityContent(xmlParserCtxtPtr ctxt, xmlEntityPtr entity) {
 		"Reading %s entity content input\n", entity->name);
 
     buf = xmlBufferCreate();
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2743]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2743\n");
+      else
+        fprintf(stderr, "reached bug index 2743\n");
+    }
+    if ((!FIXREVERTER[2743] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErr(ctxt, XML_ERR_INTERNAL_ERROR,
 	            "xmlLoadEntityContent parameter error");
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     input = xmlNewEntityInputStream(ctxt, entity);
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2744]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2744\n");
+      else
+        fprintf(stderr, "reached bug index 2744\n");
+    }
+    if ((!FIXREVERTER[2744] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErr(ctxt, XML_ERR_INTERNAL_ERROR,
 	            "xmlLoadEntityContent input error");
 	xmlBufferFree(buf);
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Push the entity as the current input, read char by char
@@ -8131,12 +10410,27 @@ xmlParseStringPEReference(xmlParserCtxtPtr ctxt, const xmlChar **str) {
         return(NULL);
     ptr++;
     name = xmlParseStringName(ctxt, &ptr);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2745]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2745\n");
+      else
+        fprintf(stderr, "reached bug index 2745\n");
+    }
+    if ((!FIXREVERTER[2745] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "xmlParseStringPEReference: no name\n");
 	*str = ptr;
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur = *ptr;
     if (cur != ';') {
 	xmlFatalErr(ctxt, XML_ERR_ENTITYREF_SEMICOL_MISSING, NULL);
@@ -8382,11 +10676,26 @@ xmlParseAttribute(xmlParserCtxtPtr ctxt, xmlChar **value) {
     *value = NULL;
     GROW;
     name = xmlParseName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2746]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2746\n");
+      else
+        fprintf(stderr, "reached bug index 2746\n");
+    }
+    if ((!FIXREVERTER[2746] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 	               "error parsing attribute name\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * read the value
@@ -8498,7 +10807,22 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
 	unsigned int cons = ctxt->input->consumed;
 
 	attname = xmlParseAttribute(ctxt, &attvalue);
-        if ((attname != NULL) && (attvalue != NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2750]) {
+          fprintf(stderr, "reached bug index 2750\n");
+        }
+        if ((FIXREVERTER[2750] && (attname != (void *) 0 )) || (!FIXREVERTER[2750] && (attname != (void *) 0 && attvalue != (void *) 0 ))
+        #else
+        if (attname != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(attvalue != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 2750\n");
+          #endif
+        
 	    /*
 	     * [ WFC: Unique Att Spec ]
 	     * No attribute name may appear more than once in the same
@@ -8518,12 +10842,27 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
 	        maxatts = 22; /* allow for 10 attrs by default */
 	        atts = (const xmlChar **)
 		       xmlMalloc(maxatts * sizeof(xmlChar *));
-		if (atts == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2748]) {
+		  if ((atts == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2748\n");
+		  else
+		    fprintf(stderr, "reached bug index 2748\n");
+		}
+		if ((!FIXREVERTER[2748] && (atts == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlErrMemory(ctxt, NULL);
 		    if (attvalue != NULL)
 			xmlFree(attvalue);
 		    goto failed;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ctxt->atts = atts;
 		ctxt->maxatts = maxatts;
 	    } else if (nbatts + 4 > maxatts) {
@@ -8532,12 +10871,27 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
 	        maxatts *= 2;
 	        n = (const xmlChar **) xmlRealloc((void *) atts,
 					     maxatts * sizeof(const xmlChar *));
-		if (n == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2749]) {
+		  if ((n == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2749\n");
+		  else
+		    fprintf(stderr, "reached bug index 2749\n");
+		}
+		if ((!FIXREVERTER[2749] && (n == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlErrMemory(ctxt, NULL);
 		    if (attvalue != NULL)
 			xmlFree(attvalue);
 		    goto failed;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		atts = n;
 		ctxt->atts = atts;
 		ctxt->maxatts = maxatts;
@@ -8550,6 +10904,9 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
 	    if (attvalue != NULL)
 		xmlFree(attvalue);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 failed:
 
@@ -8636,7 +10993,22 @@ xmlParseEndTag1(xmlParserCtxtPtr ctxt, int line) {
      *
      */
     if (name != (xmlChar*)1) {
-        if (name == NULL) name = BAD_CAST "unparseable";
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2751]) {
+          if ((name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2751\n");
+          else
+            fprintf(stderr, "reached bug index 2751\n");
+        }
+        if ((!FIXREVERTER[2751] && (name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) name = BAD_CAST "unparseable";
+        #ifdef FRCOV
+        }
+        #endif
         xmlFatalErrMsgStrIntStr(ctxt, XML_ERR_TAG_NAME_MISMATCH,
 		     "Opening and ending tag mismatch: %s line %d and %s\n",
 		                ctxt->name, line, name);
@@ -8724,7 +11096,19 @@ xmlParseQName(xmlParserCtxtPtr ctxt, const xmlChar **prefix) {
     GROW;
 
     l = xmlParseNCName(ctxt);
-    if (l == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2752]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2752\n");
+      else
+        fprintf(stderr, "reached bug index 2752\n");
+    }
+    if ((!FIXREVERTER[2752] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (CUR == ':') {
 	    l = xmlParseName(ctxt);
 	    if (l != NULL) {
@@ -8736,6 +11120,9 @@ xmlParseQName(xmlParserCtxtPtr ctxt, const xmlChar **prefix) {
 	}
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (CUR == ':') {
         NEXT;
 	p = l;
@@ -8810,7 +11197,22 @@ xmlParseQNameAndCompare(xmlParserCtxtPtr ctxt, xmlChar const *name,
     const xmlChar *ret;
     const xmlChar *prefix2;
 
-    if (prefix == NULL) return(xmlParseNameAndCompare(ctxt, name));
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2753]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2753\n");
+      else
+        fprintf(stderr, "reached bug index 2753\n");
+    }
+    if ((!FIXREVERTER[2753] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(xmlParseNameAndCompare(ctxt, name));
+    #ifdef FRCOV
+    }
+    #endif
 
     GROW;
     in = ctxt->input->cur;
@@ -9069,11 +11471,26 @@ xmlParseAttribute2(xmlParserCtxtPtr ctxt,
     *value = NULL;
     GROW;
     name = xmlParseQName(ctxt, prefix);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2754]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2754\n");
+      else
+        fprintf(stderr, "reached bug index 2754\n");
+    }
+    if ((!FIXREVERTER[2754] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
                        "error parsing attribute name\n");
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * get the type if needed
@@ -9251,7 +11668,22 @@ xmlParseStartTag2(xmlParserCtxtPtr ctxt, const xmlChar **pref,
 	                             &aprefix, &attvalue, &len, &alloc);
         if ((attname == NULL) || (attvalue == NULL))
             goto next_attr;
-	if (len < 0) len = xmlStrlen(attvalue);
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2758]) {
+	  if ((len < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2758\n");
+	  else
+	    fprintf(stderr, "reached bug index 2758\n");
+	}
+	if ((!FIXREVERTER[2758] && (len < 0 ))
+	#else
+	if (0
+	#endif
+	) len = xmlStrlen(attvalue);
+	#ifdef FRCOV
+	}
+	#endif
 
         if ((attname == ctxt->str_xmlns) && (aprefix == NULL)) {
             const xmlChar *URL = xmlDictLookup(ctxt->dict, attvalue, len);
@@ -9259,8 +11691,25 @@ xmlParseStartTag2(xmlParserCtxtPtr ctxt, const xmlChar **pref,
 
             if (URL == NULL) {
                 xmlErrMemory(ctxt, "dictionary allocation failure");
-                if ((attvalue != NULL) && (alloc != 0))
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2759]) {
+                  fprintf(stderr, "reached bug index 2759\n");
+                }
+                if ((FIXREVERTER[2759] && (attvalue != (void *) 0 )) || (!FIXREVERTER[2759] && (attvalue != (void *) 0 && alloc != 0 ))
+                #else
+                if (attvalue != (void *) 0 
+                #endif
+                )
+                    
+                    #ifdef FRCOV
+                    {if (!(alloc != 0 ))
+                      fprintf(stderr, "triggered bug index 2759\n");
+                    #endif
                     xmlFree(attvalue);
+                    #ifdef FRCOV
+                    }}
+                    #endif
                 localname = NULL;
                 goto done;
             }
@@ -9410,10 +11859,28 @@ xmlParseStartTag2(xmlParserCtxtPtr ctxt, const xmlChar **pref,
         }
 
 next_attr:
-        if ((attvalue != NULL) && (alloc != 0)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2761]) {
+          fprintf(stderr, "reached bug index 2761\n");
+        }
+        if ((FIXREVERTER[2761] && (attvalue != (void *) 0 )) || (!FIXREVERTER[2761] && (attvalue != (void *) 0 && alloc != 0 ))
+        #else
+        if (attvalue != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(alloc != 0 ))
+            fprintf(stderr, "triggered bug index 2761\n");
+          #endif
+        
             xmlFree(attvalue);
             attvalue = NULL;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
 	GROW
         if (ctxt->instate == XML_PARSER_EOF)
@@ -9477,7 +11944,22 @@ next_attr:
 		    for (j = 1;j <= nbNs;j++)
 		        if (ctxt->nsTab[ctxt->nsNr - 2 * j] == NULL)
 			    break;
-	            if (j <= nbNs) continue;
+	            
+	            #ifdef FRCOV
+	            {if (FIXREVERTER[2762]) {
+	              if ((j <= nbNs ) && !(0))
+	                fprintf(stderr, "triggered bug index 2762\n");
+	              else
+	                fprintf(stderr, "reached bug index 2762\n");
+	            }
+	            if ((!FIXREVERTER[2762] && (j <= nbNs ))
+	            #else
+	            if (0
+	            #endif
+	            ) continue;
+	            #ifdef FRCOV
+	            }
+	            #endif
 
 		    nsname = xmlGetNamespace(ctxt, NULL);
 		    if (nsname != defaults->values[5 * i + 2]) {
@@ -9492,7 +11974,22 @@ next_attr:
 		    for (j = 1;j <= nbNs;j++)
 		        if (ctxt->nsTab[ctxt->nsNr - 2 * j] == attname)
 			    break;
-	            if (j <= nbNs) continue;
+	            
+	            #ifdef FRCOV
+	            {if (FIXREVERTER[2763]) {
+	              if ((j <= nbNs ) && !(0))
+	                fprintf(stderr, "triggered bug index 2763\n");
+	              else
+	                fprintf(stderr, "reached bug index 2763\n");
+	            }
+	            if ((!FIXREVERTER[2763] && (j <= nbNs ))
+	            #else
+	            if (0
+	            #endif
+	            ) continue;
+	            #ifdef FRCOV
+	            }
+	            #endif
 
 		    nsname = xmlGetNamespace(ctxt, attname);
 		    if (nsname != defaults->values[2]) {
@@ -9508,7 +12005,22 @@ next_attr:
 			if ((attname == atts[j]) && (aprefix == atts[j+1]))
 			    break;
 		    }
-		    if (j < nbatts) continue;
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2764]) {
+		      if ((j < nbatts ) && !(0))
+		        fprintf(stderr, "triggered bug index 2764\n");
+		      else
+		        fprintf(stderr, "reached bug index 2764\n");
+		    }
+		    if ((!FIXREVERTER[2764] && (j < nbatts ))
+		    #else
+		    if (0
+		    #endif
+		    ) continue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 
 		    if ((atts == NULL) || (nbatts + 5 > maxatts)) {
 			if (xmlCtxtGrowAttrs(ctxt, nbatts + 5) < 0) {
@@ -9679,9 +12191,41 @@ xmlParseEndTag2(xmlParserCtxtPtr ctxt, const xmlChar *prefix,
      *
      */
     if (name != (xmlChar*)1) {
-        if (name == NULL) name = BAD_CAST "unparseable";
-        if ((line == 0) && (ctxt->node != NULL))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2765]) {
+          if ((name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2765\n");
+          else
+            fprintf(stderr, "reached bug index 2765\n");
+        }
+        if ((!FIXREVERTER[2765] && (name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) name = BAD_CAST "unparseable";
+        #ifdef FRCOV
+        }
+        #endif
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2766]) {
+          fprintf(stderr, "reached bug index 2766\n");
+        }
+        if ((FIXREVERTER[2766] && (line == 0 )) || (!FIXREVERTER[2766] && (line == 0 && ctxt -> node != (void *) 0 ))
+        #else
+        if (line == 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> node != (void *) 0 ))
+              fprintf(stderr, "triggered bug index 2766\n");
+            #endif
             line = ctxt->node->line;
+            #ifdef FRCOV
+            }}
+            #endif
         xmlFatalErrMsgStrIntStr(ctxt, XML_ERR_TAG_NAME_MISMATCH,
 		     "Opening and ending tag mismatch: %s line %d and %s\n",
 		                ctxt->name, line, name);
@@ -9748,10 +12292,25 @@ xmlParseCDSect(xmlParserCtxtPtr ctxt) {
     NEXTL(sl);
     cur = CUR_CHAR(l);
     buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2767]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2767\n");
+      else
+        fprintf(stderr, "reached bug index 2767\n");
+    }
+    if ((!FIXREVERTER[2767] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt, NULL);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (IS_CHAR(cur) &&
            ((r != ']') || (s != ']') || (cur != '>'))) {
 	if (len + 5 >= size) {
@@ -9765,11 +12324,26 @@ xmlParseCDSect(xmlParserCtxtPtr ctxt) {
                 return;
             }
 	    tmp = (xmlChar *) xmlRealloc(buf, size * 2 * sizeof(xmlChar));
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2768]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2768\n");
+	      else
+	        fprintf(stderr, "reached bug index 2768\n");
+	    }
+	    if ((!FIXREVERTER[2768] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlFree(buf);
 		xmlErrMemory(ctxt, NULL);
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	    size *= 2;
 	}
@@ -9861,8 +12435,23 @@ xmlParseContent(xmlParserCtxtPtr ctxt) {
 	 */
 	else if (*cur == '<') {
             if (NXT(1) == '/') {
-                if (ctxt->nameNr <= nameNr)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2769]) {
+                  if ((ctxt -> nameNr <= nameNr ) && !(0))
+                    fprintf(stderr, "triggered bug index 2769\n");
+                  else
+                    fprintf(stderr, "reached bug index 2769\n");
+                }
+                if ((!FIXREVERTER[2769] && (ctxt -> nameNr <= nameNr ))
+                #else
+                if (0
+                #endif
+                )
                     break;
+                    #ifdef FRCOV
+                    }
+                    #endif
 	        xmlParseElementEnd(ctxt);
             } else {
 	        xmlParseElementStart(ctxt);
@@ -9972,10 +12561,25 @@ xmlParseElementStart(xmlParserCtxtPtr ctxt) {
 #endif /* LIBXML_SAX1_ENABLED */
     if (ctxt->instate == XML_PARSER_EOF)
 	return(-1);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2770]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2770\n");
+      else
+        fprintf(stderr, "reached bug index 2770\n");
+    }
+    if ((!FIXREVERTER[2770] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	spacePop(ctxt);
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->sax2)
         nameNsPush(ctxt, name, prefix, URI, ctxt->nsNr - nsNr);
 #ifdef LIBXML_SAX1_ENABLED
@@ -10067,8 +12671,23 @@ xmlParseElementEnd(xmlParserCtxtPtr ctxt) {
     xmlParserNodeInfo node_info;
     xmlNodePtr ret = ctxt->node;
 
-    if (ctxt->nameNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2771]) {
+      if ((ctxt -> nameNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2771\n");
+      else
+        fprintf(stderr, "reached bug index 2771\n");
+    }
+    if ((!FIXREVERTER[2771] && (ctxt -> nameNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * parse the end of tag: '</' should be here.
@@ -10117,10 +12736,25 @@ xmlParseVersionNum(xmlParserCtxtPtr ctxt) {
     xmlChar cur;
 
     buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2772]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2772\n");
+      else
+        fprintf(stderr, "reached bug index 2772\n");
+    }
+    if ((!FIXREVERTER[2772] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt, NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur = CUR;
     if (!((cur >= '0') && (cur <= '9'))) {
 	xmlFree(buf);
@@ -10142,11 +12776,26 @@ xmlParseVersionNum(xmlParserCtxtPtr ctxt) {
 
 	    size *= 2;
 	    tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2773]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2773\n");
+	      else
+	        fprintf(stderr, "reached bug index 2773\n");
+	    }
+	    if ((!FIXREVERTER[2773] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlFree(buf);
 		xmlErrMemory(ctxt, NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	}
 	buf[len++] = cur;
@@ -10225,10 +12874,25 @@ xmlParseEncName(xmlParserCtxtPtr ctxt) {
     if (((cur >= 'a') && (cur <= 'z')) ||
         ((cur >= 'A') && (cur <= 'Z'))) {
 	buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-	if (buf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2774]) {
+	  if ((buf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2774\n");
+	  else
+	    fprintf(stderr, "reached bug index 2774\n");
+	}
+	if ((!FIXREVERTER[2774] && (buf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	buf[len++] = cur;
 	NEXT;
@@ -10243,11 +12907,26 @@ xmlParseEncName(xmlParserCtxtPtr ctxt) {
 
 		size *= 2;
 		tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));
-		if (tmp == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2775]) {
+		  if ((tmp == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2775\n");
+		  else
+		    fprintf(stderr, "reached bug index 2775\n");
+		}
+		if ((!FIXREVERTER[2775] && (tmp == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlErrMemory(ctxt, NULL);
 		    xmlFree(buf);
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		buf = tmp;
 	    }
 	    buf[len++] = cur;
@@ -10625,8 +13304,23 @@ xmlParseDocument(xmlParserCtxtPtr ctxt) {
 
     xmlInitParser();
 
-    if ((ctxt == NULL) || (ctxt->input == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2776]) {
+      if ((ctxt == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2776\n");
+      else
+        fprintf(stderr, "reached bug index 2776\n");
+    }
+    if ((!FIXREVERTER[2776] && (ctxt == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     GROW;
 
@@ -10936,11 +13630,56 @@ xmlParseLookupSequence(xmlParserCtxtPtr ctxt, xmlChar first,
     const xmlChar *buf;
 
     in = ctxt->input;
-    if (in == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2779]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2779\n");
+      else
+        fprintf(stderr, "reached bug index 2779\n");
+    }
+    if ((!FIXREVERTER[2779] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     base = in->cur - in->base;
-    if (base < 0) return(-1);
-    if (ctxt->checkIndex > base)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2780]) {
+      if ((base < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2780\n");
+      else
+        fprintf(stderr, "reached bug index 2780\n");
+    }
+    if ((!FIXREVERTER[2780] && (base < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2781]) {
+      if ((ctxt -> checkIndex > base ) && !(0))
+        fprintf(stderr, "triggered bug index 2781\n");
+      else
+        fprintf(stderr, "reached bug index 2781\n");
+    }
+    if ((!FIXREVERTER[2781] && (ctxt -> checkIndex > base ))
+    #else
+    if (0
+    #endif
+    )
         base = ctxt->checkIndex;
+        #ifdef FRCOV
+        }
+        #endif
     if (in->buf == NULL) {
 	buf = in->base;
 	len = in->length;
@@ -11005,12 +13744,42 @@ xmlParseGetLasts(xmlParserCtxtPtr ctxt, const xmlChar **lastlt,
                  const xmlChar **lastgt) {
     const xmlChar *tmp;
 
-    if ((ctxt == NULL) || (lastlt == NULL) || (lastgt == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2782]) {
+      if ((ctxt == (void *) 0 || lastlt == (void *) 0 || lastgt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2782\n");
+      else
+        fprintf(stderr, "reached bug index 2782\n");
+    }
+    if ((!FIXREVERTER[2782] && (ctxt == (void *) 0 || lastlt == (void *) 0 || lastgt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlGenericError(xmlGenericErrorContext,
 		    "Internal error: xmlParseGetLasts\n");
 	return;
     }
-    if ((ctxt->progressive != 0) && (ctxt->inputNr == 1)) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2783]) {
+      fprintf(stderr, "reached bug index 2783\n");
+    }
+    if ((FIXREVERTER[2783] && (ctxt -> progressive != 0 )) || (!FIXREVERTER[2783] && (ctxt -> progressive != 0 && ctxt -> inputNr == 1 ))
+    #else
+    if (ctxt -> progressive != 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> inputNr == 1 ))
+        fprintf(stderr, "triggered bug index 2783\n");
+      #endif
+    
         tmp = ctxt->input->end;
 	tmp--;
 	while ((tmp >= ctxt->input->base) && (*tmp != '<')) tmp--;
@@ -11048,6 +13817,9 @@ xmlParseGetLasts(xmlParserCtxtPtr ctxt, const xmlChar **lastlt,
         *lastlt = NULL;
 	*lastgt = NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 /**
  * xmlCheckCdataPush:
@@ -11066,8 +13838,23 @@ xmlCheckCdataPush(const xmlChar *utf, int len, int complete) {
     unsigned char c;
     int codepoint;
 
-    if ((utf == NULL) || (len <= 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2784]) {
+      if ((utf == (void *) 0 ) && !(len <= 0 ))
+        fprintf(stderr, "triggered bug index 2784\n");
+      else
+        fprintf(stderr, "reached bug index 2784\n");
+    }
+    if ((FIXREVERTER[2784] && (len <= 0 )) || (!FIXREVERTER[2784] && (utf == (void *) 0 || len <= 0 ))
+    #else
+    if (len <= 0 
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     for (ix = 0; ix < len;) {      /* string is 0-terminated */
         c = utf[ix];
@@ -11079,7 +13866,22 @@ xmlCheckCdataPush(const xmlChar *utf, int len, int complete) {
 	    else
 	        return(-ix);
 	} else if ((c & 0xe0) == 0xc0) {/* 2-byte code, starts with 110 */
-	    if (ix + 2 > len) return(complete ? -ix : ix);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2785]) {
+	      if ((ix + 2 > len ) && !(0))
+	        fprintf(stderr, "triggered bug index 2785\n");
+	      else
+	        fprintf(stderr, "reached bug index 2785\n");
+	    }
+	    if ((!FIXREVERTER[2785] && (ix + 2 > len ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(complete ? -ix : ix);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if ((utf[ix+1] & 0xc0 ) != 0x80)
 	        return(-ix);
 	    codepoint = (utf[ix] & 0x1f) << 6;
@@ -11088,7 +13890,22 @@ xmlCheckCdataPush(const xmlChar *utf, int len, int complete) {
 	        return(-ix);
 	    ix += 2;
 	} else if ((c & 0xf0) == 0xe0) {/* 3-byte code, starts with 1110 */
-	    if (ix + 3 > len) return(complete ? -ix : ix);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2786]) {
+	      if ((ix + 3 > len ) && !(0))
+	        fprintf(stderr, "triggered bug index 2786\n");
+	      else
+	        fprintf(stderr, "reached bug index 2786\n");
+	    }
+	    if ((!FIXREVERTER[2786] && (ix + 3 > len ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(complete ? -ix : ix);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (((utf[ix+1] & 0xc0) != 0x80) ||
 	        ((utf[ix+2] & 0xc0) != 0x80))
 		    return(-ix);
@@ -11099,7 +13916,22 @@ xmlCheckCdataPush(const xmlChar *utf, int len, int complete) {
 	        return(-ix);
 	    ix += 3;
 	} else if ((c & 0xf8) == 0xf0) {/* 4-byte code, starts with 11110 */
-	    if (ix + 4 > len) return(complete ? -ix : ix);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2787]) {
+	      if ((ix + 4 > len ) && !(0))
+	        fprintf(stderr, "triggered bug index 2787\n");
+	      else
+	        fprintf(stderr, "reached bug index 2787\n");
+	    }
+	    if ((!FIXREVERTER[2787] && (ix + 4 > len ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(complete ? -ix : ix);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (((utf[ix+1] & 0xc0) != 0x80) ||
 	        ((utf[ix+2] & 0xc0) != 0x80) ||
 		((utf[ix+3] & 0xc0) != 0x80))
@@ -11133,8 +13965,23 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
     xmlChar cur, next;
     const xmlChar *lastlt, *lastgt;
 
-    if (ctxt->input == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2788]) {
+      if ((ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2788\n");
+      else
+        fprintf(stderr, "reached bug index 2788\n");
+    }
+    if ((!FIXREVERTER[2788] && (ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
 #ifdef DEBUG_PUSH
     switch (ctxt->instate) {
@@ -11200,7 +14047,22 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
 	if ((ctxt->errNo != XML_ERR_OK) && (ctxt->disableSAX == 1))
 	    return(0);
 
-	if (ctxt->input == NULL) break;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2789]) {
+	  if ((ctxt -> input == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2789\n");
+	  else
+	    fprintf(stderr, "reached bug index 2789\n");
+	}
+	if ((!FIXREVERTER[2789] && (ctxt -> input == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) break;
+	#ifdef FRCOV
+	}
+	#endif
 	if (ctxt->input->buf == NULL)
 	    avail = ctxt->input->length -
 	            (ctxt->input->cur - ctxt->input->base);
@@ -11298,7 +14160,19 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
 				"PP: Parsing XML Decl\n");
 #endif
 			xmlParseXMLDecl(ctxt);
-			if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2794]) {
+			  if ((ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ) && !(0))
+			    fprintf(stderr, "triggered bug index 2794\n");
+			  else
+			    fprintf(stderr, "reached bug index 2794\n");
+			}
+			if ((!FIXREVERTER[2794] && (ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ))
+			#else
+			if (0
+			#endif
+			) {
 			    /*
 			     * The XML REC instructs us to stop parsing right
 			     * here
@@ -11306,6 +14180,9 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
 			    xmlHaltParser(ctxt);
 			    return(0);
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			ctxt->standalone = ctxt->input->standalone;
 			if ((ctxt->encoding == NULL) &&
 			    (ctxt->input->encoding != NULL))
@@ -11334,10 +14211,25 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
 			ctxt->sax->setDocumentLocator(ctxt->userData,
 						      &xmlDefaultSAXLocator);
 		    ctxt->version = xmlCharStrdup(XML_DEFAULT_VERSION);
-		    if (ctxt->version == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2795]) {
+		      if ((ctxt -> version == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2795\n");
+		      else
+		        fprintf(stderr, "reached bug index 2795\n");
+		    }
+		    if ((!FIXREVERTER[2795] && (ctxt -> version == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 		        xmlErrMemory(ctxt, NULL);
 			break;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    if ((ctxt->sax) && (ctxt->sax->startDocument) &&
 		        (!ctxt->disableSAX))
 			ctxt->sax->startDocument(ctxt->userData);
@@ -11534,8 +14426,22 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
 		     *    callbacks between the push and pull versions
 		     *    of the parser.
 		     */
-		    if ((ctxt->inputNr == 1) &&
-		        (avail < XML_PARSER_BIG_BUFFER_SIZE)) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2797]) {
+		      fprintf(stderr, "reached bug index 2797\n");
+		    }
+		    if ((FIXREVERTER[2797] && (avail < 300 )) || (!FIXREVERTER[2797] && (ctxt -> inputNr == 1 && avail < 300 ))
+		    #else
+		    if (avail < 300 
+		    #endif
+		    ) {
+		          
+		        #ifdef FRCOV
+		          if (!(ctxt -> inputNr == 1 ))
+		            fprintf(stderr, "triggered bug index 2797\n");
+		          #endif
+		        
 			if (!terminate) {
 			    if (ctxt->progressive) {
 				if ((lastlt == NULL) ||
@@ -11547,6 +14453,9 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
 			    }
 			}
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
 		    ctxt->checkIndex = 0;
 		    xmlParseCharData(ctxt, 0);
 		}
@@ -11604,11 +14513,26 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
 
 			tmp = xmlCheckCdataPush(ctxt->input->cur,
 			                        XML_PARSER_BIG_BUFFER_SIZE, 0);
-			if (tmp < 0) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2799]) {
+			  if ((tmp < 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 2799\n");
+			  else
+			    fprintf(stderr, "reached bug index 2799\n");
+			}
+			if ((!FIXREVERTER[2799] && (tmp < 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    tmp = -tmp;
 			    ctxt->input->cur += tmp;
 			    goto encoding_error;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			if ((ctxt->sax != NULL) && (!ctxt->disableSAX)) {
 			    if (ctxt->sax->cdataBlock != NULL)
 				ctxt->sax->cdataBlock(ctxt->userData,
@@ -11627,11 +14551,26 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
 		    int tmp;
 
 		    tmp = xmlCheckCdataPush(ctxt->input->cur, base, 1);
-		    if ((tmp < 0) || (tmp != base)) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2800]) {
+		      if ((tmp < 0 || tmp != base ) && !(0))
+		        fprintf(stderr, "triggered bug index 2800\n");
+		      else
+		        fprintf(stderr, "reached bug index 2800\n");
+		    }
+		    if ((!FIXREVERTER[2800] && (tmp < 0 || tmp != base ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			tmp = -tmp;
 			ctxt->input->cur += tmp;
 			goto encoding_error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    if ((ctxt->sax != NULL) && (base == 0) &&
 		        (ctxt->sax->cdataBlock != NULL) &&
 		        (!ctxt->disableSAX)) {
@@ -11819,8 +14758,23 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
 		    goto done;
 		} else {
 		    ctxt->instate = XML_PARSER_START_TAG;
-		    if (ctxt->progressive == 0)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2803]) {
+		      if ((ctxt -> progressive == 0  ) && !(0))
+		        fprintf(stderr, "triggered bug index 2803\n");
+		      else
+		        fprintf(stderr, "reached bug index 2803\n");
+		    }
+		    if ((!FIXREVERTER[2803] && (ctxt -> progressive == 0  ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			ctxt->progressive = XML_PARSER_START_TAG;
+			#ifdef FRCOV
+			}
+			#endif
 		    xmlParseGetLasts(ctxt, &lastlt, &lastgt);
 #ifdef DEBUG_PUSH
 		    xmlGenericError(xmlGenericErrorContext,
@@ -11902,9 +14856,39 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
                 size_t use;
 
 		base = ctxt->input->cur - ctxt->input->base;
-		if (base < 0) return(0);
-		if (ctxt->checkIndex > base)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2805]) {
+		  if ((base < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2805\n");
+		  else
+		    fprintf(stderr, "reached bug index 2805\n");
+		}
+		if ((!FIXREVERTER[2805] && (base < 0 ))
+		#else
+		if (0
+		#endif
+		) return(0);
+		#ifdef FRCOV
+		}
+		#endif
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2806]) {
+		  if ((ctxt -> checkIndex > base ) && !(0))
+		    fprintf(stderr, "triggered bug index 2806\n");
+		  else
+		    fprintf(stderr, "reached bug index 2806\n");
+		}
+		if ((!FIXREVERTER[2806] && (ctxt -> checkIndex > base ))
+		#else
+		if (0
+		#endif
+		)
 		    base = ctxt->checkIndex;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		buf = xmlBufContent(ctxt->input->buf->buffer);
                 use = xmlBufUse(ctxt->input->buf->buffer);
 		for (;(unsigned int) base < use; base++) {
@@ -12123,28 +15107,73 @@ encoding_error:
  */
 static int
 xmlParseCheckTransition(xmlParserCtxtPtr ctxt, const char *chunk, int size) {
-    if ((ctxt == NULL) || (chunk == NULL) || (size < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2807]) {
+      if ((ctxt == (void *) 0 || chunk == (void *) 0 ) && !(size < 0 ))
+        fprintf(stderr, "triggered bug index 2807\n");
+      else
+        fprintf(stderr, "reached bug index 2807\n");
+    }
+    if ((FIXREVERTER[2807] && (size < 0 )) || (!FIXREVERTER[2807] && (ctxt == (void *) 0 || chunk == (void *) 0 || size < 0 ))
+    #else
+    if (size < 0 
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->instate == XML_PARSER_START_TAG) {
         if (memchr(chunk, '>', size) != NULL)
             return(1);
         return(0);
     }
-    if (ctxt->progressive == XML_PARSER_COMMENT) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2808]) {
+      if ((ctxt -> progressive == XML_PARSER_COMMENT ) && !(0))
+        fprintf(stderr, "triggered bug index 2808\n");
+      else
+        fprintf(stderr, "reached bug index 2808\n");
+    }
+    if ((!FIXREVERTER[2808] && (ctxt -> progressive == XML_PARSER_COMMENT ))
+    #else
+    if (0
+    #endif
+    ) {
         if (memchr(chunk, '>', size) != NULL)
             return(1);
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->instate == XML_PARSER_CDATA_SECTION) {
         if (memchr(chunk, '>', size) != NULL)
             return(1);
         return(0);
     }
-    if (ctxt->progressive == XML_PARSER_PI) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2809]) {
+      if ((ctxt -> progressive == XML_PARSER_PI ) && !(0))
+        fprintf(stderr, "triggered bug index 2809\n");
+      else
+        fprintf(stderr, "reached bug index 2809\n");
+    }
+    if ((!FIXREVERTER[2809] && (ctxt -> progressive == XML_PARSER_PI ))
+    #else
+    if (0
+    #endif
+    ) {
         if (memchr(chunk, '>', size) != NULL)
             return(1);
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->instate == XML_PARSER_END_TAG) {
         if (memchr(chunk, '>', size) != NULL)
             return(1);
@@ -12178,8 +15207,23 @@ xmlParseChunk(xmlParserCtxtPtr ctxt, const char *chunk, int size,
     size_t old_avail = 0;
     size_t avail = 0;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2810]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2810\n");
+      else
+        fprintf(stderr, "reached bug index 2810\n");
+    }
+    if ((!FIXREVERTER[2810] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ERR_INTERNAL_ERROR);
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->errNo != XML_ERR_OK) && (ctxt->disableSAX == 1))
         return(ctxt->errNo);
     if (ctxt->instate == XML_PARSER_EOF)
@@ -12250,8 +15294,22 @@ xmldecl_done:
     } else if (ctxt->instate != XML_PARSER_EOF) {
 	if ((ctxt->input != NULL) && ctxt->input->buf != NULL) {
 	    xmlParserInputBufferPtr in = ctxt->input->buf;
-	    if ((in->encoder != NULL) && (in->buffer != NULL) &&
-		    (in->raw != NULL)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2813]) {
+	      fprintf(stderr, "reached bug index 2813\n");
+	    }
+	    if ((FIXREVERTER[2813] && (in -> encoder != (void *) 0 && in -> buffer != (void *) 0 )) || (!FIXREVERTER[2813] && (in -> encoder != (void *) 0 && in -> buffer != (void *) 0 && in -> raw != (void *) 0 ))
+	    #else
+	    if (in -> encoder != (void *) 0 && in -> buffer != (void *) 0 
+	    #endif
+	    ) {
+		      
+		    #ifdef FRCOV
+		      if (!(in -> raw != (void *) 0 ))
+		        fprintf(stderr, "triggered bug index 2813\n");
+		      #endif
+		    
 		int nbchars;
 		size_t base = xmlBufGetInputBase(in->buffer, ctxt->input);
 		size_t current = ctxt->input->cur - ctxt->input->base;
@@ -12266,6 +15324,9 @@ xmldecl_done:
 		}
 		xmlBufSetInputBaseCur(in->buffer, ctxt->input, base, current);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
     }
     if (remain != 0) {
@@ -12390,7 +15451,22 @@ xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data,
 	enc = xmlDetectCharEncoding((const xmlChar *) chunk, size);
 
     buf = xmlAllocParserInputBuffer(enc);
-    if (buf == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2814]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2814\n");
+      else
+        fprintf(stderr, "reached bug index 2814\n");
+    }
+    if ((!FIXREVERTER[2814] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt = xmlNewParserCtxt();
     if (ctxt == NULL) {
@@ -12416,8 +15492,23 @@ xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data,
 	    memcpy(ctxt->sax, sax, sizeof(xmlSAXHandler));
 	else
 	    memcpy(ctxt->sax, sax, sizeof(xmlSAXHandlerV1));
-	if (user_data != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2816]) {
+	  if ((user_data != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2816\n");
+	  else
+	    fprintf(stderr, "reached bug index 2816\n");
+	}
+	if ((!FIXREVERTER[2816] && (user_data != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->userData = user_data;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     if (filename == NULL) {
 	ctxt->directory = NULL;
@@ -12426,22 +15517,52 @@ xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data,
     }
 
     inputStream = xmlNewInputStream(ctxt);
-    if (inputStream == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2817]) {
+      if ((inputStream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2817\n");
+      else
+        fprintf(stderr, "reached bug index 2817\n");
+    }
+    if ((!FIXREVERTER[2817] && (inputStream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserCtxt(ctxt);
 	xmlFreeParserInputBuffer(buf);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (filename == NULL)
 	inputStream->filename = NULL;
     else {
 	inputStream->filename = (char *)
 	    xmlCanonicPath((const xmlChar *) filename);
-	if (inputStream->filename == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2818]) {
+	  if ((inputStream -> filename == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2818\n");
+	  else
+	    fprintf(stderr, "reached bug index 2818\n");
+	}
+	if ((!FIXREVERTER[2818] && (inputStream -> filename == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFreeParserCtxt(ctxt);
 	    xmlFreeParserInputBuffer(buf);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     inputStream->buf = buf;
     xmlBufResetInput(inputStream->buf->buffer, inputStream);
@@ -12483,8 +15604,23 @@ xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data,
  */
 static void
 xmlHaltParser(xmlParserCtxtPtr ctxt) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2819]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2819\n");
+      else
+        fprintf(stderr, "reached bug index 2819\n");
+    }
+    if ((!FIXREVERTER[2819] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->instate = XML_PARSER_EOF;
     ctxt->disableSAX = 1;
     while (ctxt->inputNr > 1)
@@ -12517,8 +15653,23 @@ xmlHaltParser(xmlParserCtxtPtr ctxt) {
  */
 void
 xmlStopParser(xmlParserCtxtPtr ctxt) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2820]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2820\n");
+      else
+        fprintf(stderr, "reached bug index 2820\n");
+    }
+    if ((!FIXREVERTER[2820] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     xmlHaltParser(ctxt);
     ctxt->errNo = XML_ERR_USER_STOP;
 }
@@ -12910,7 +16061,22 @@ xmlParseCtxtExternalEntity(xmlParserCtxtPtr ctx, const xmlChar *URL,
     xmlChar start[4];
     xmlCharEncoding enc;
 
-    if (ctx == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2838]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2838\n");
+      else
+        fprintf(stderr, "reached bug index 2838\n");
+    }
+    if ((!FIXREVERTER[2838] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (((ctx->depth > 40) && ((ctx->options & XML_PARSE_HUGE) == 0)) ||
         (ctx->depth > 1024)) {
@@ -12921,22 +16087,67 @@ xmlParseCtxtExternalEntity(xmlParserCtxtPtr ctx, const xmlChar *URL,
         *lst = NULL;
     if ((URL == NULL) && (ID == NULL))
 	return(-1);
-    if (ctx->myDoc == NULL) /* @@ relax but check for dereferences */
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2839]) {
+      if ((ctx -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2839\n");
+      else
+        fprintf(stderr, "reached bug index 2839\n");
+    }
+    if ((!FIXREVERTER[2839] && (ctx -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) /* @@ relax but check for dereferences */
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     ctxt = xmlCreateEntityParserCtxtInternal(URL, ID, NULL, ctx);
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2840]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2840\n");
+      else
+        fprintf(stderr, "reached bug index 2840\n");
+    }
+    if ((!FIXREVERTER[2840] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     oldsax = ctxt->sax;
     ctxt->sax = ctx->sax;
     xmlDetectSAX2(ctxt);
     newDoc = xmlNewDoc(BAD_CAST "1.0");
-    if (newDoc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2841]) {
+      if ((newDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2841\n");
+      else
+        fprintf(stderr, "reached bug index 2841\n");
+    }
+    if ((!FIXREVERTER[2841] && (newDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserCtxt(ctxt);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     newDoc->properties = XML_DOC_INTERNAL;
     if (ctx->myDoc->dict) {
 	newDoc->dict = ctx->myDoc->dict;
@@ -13127,12 +16338,42 @@ xmlParseExternalEntityPrivate(xmlDocPtr doc, xmlParserCtxtPtr oldctxt,
         *list = NULL;
     if ((URL == NULL) && (ID == NULL))
 	return(XML_ERR_INTERNAL_ERROR);
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2842]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2842\n");
+      else
+        fprintf(stderr, "reached bug index 2842\n");
+    }
+    if ((!FIXREVERTER[2842] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(XML_ERR_INTERNAL_ERROR);
+	#ifdef FRCOV
+	}
+	#endif
 
 
     ctxt = xmlCreateEntityParserCtxtInternal(URL, ID, NULL, oldctxt);
-    if (ctxt == NULL) return(XML_WAR_UNDECLARED_ENTITY);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2843]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2843\n");
+      else
+        fprintf(stderr, "reached bug index 2843\n");
+    }
+    if ((!FIXREVERTER[2843] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(XML_WAR_UNDECLARED_ENTITY);
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->userData = ctxt;
     if (oldctxt != NULL) {
 	ctxt->_private = oldctxt->_private;
@@ -13156,8 +16397,23 @@ xmlParseExternalEntityPrivate(xmlDocPtr doc, xmlParserCtxtPtr oldctxt,
     if (sax != NULL) {
 	oldsax = ctxt->sax;
         ctxt->sax = sax;
-	if (user_data != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2844]) {
+	  if ((user_data != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2844\n");
+	  else
+	    fprintf(stderr, "reached bug index 2844\n");
+	}
+	if ((!FIXREVERTER[2844] && (user_data != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->userData = user_data;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     xmlDetectSAX2(ctxt);
     newDoc = xmlNewDoc(BAD_CAST "1.0");
@@ -13179,8 +16435,23 @@ xmlParseExternalEntityPrivate(xmlDocPtr doc, xmlParserCtxtPtr oldctxt,
     }
     newRoot = xmlNewDocNode(newDoc, NULL, BAD_CAST "pseudoroot", NULL);
     if (newRoot == NULL) {
-	if (sax != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2845]) {
+	  if ((sax != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2845\n");
+	  else
+	    fprintf(stderr, "reached bug index 2845\n");
+	}
+	if ((!FIXREVERTER[2845] && (sax != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->sax = oldsax;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->node_seq.maximum = 0;
 	ctxt->node_seq.length = 0;
 	ctxt->node_seq.buffer = NULL;
@@ -13267,18 +16538,51 @@ xmlParseExternalEntityPrivate(xmlDocPtr doc, xmlParserCtxtPtr oldctxt,
     /*
      * Also record the size of the entity parsed
      */
-    if (ctxt->input != NULL && oldctxt != NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2846]) {
+      fprintf(stderr, "reached bug index 2846\n");
+    }
+    if ((FIXREVERTER[2846] && (ctxt -> input != (void *) 0 )) || (!FIXREVERTER[2846] && (ctxt -> input != (void *) 0 && oldctxt != (void *) 0 ))
+    #else
+    if (ctxt -> input != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(oldctxt != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2846\n");
+      #endif
+    
 	oldctxt->sizeentities += ctxt->input->consumed;
 	oldctxt->sizeentities += (ctxt->input->cur - ctxt->input->base);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
      * And record the last error if any
      */
     if ((oldctxt != NULL) && (ctxt->lastError.code != XML_ERR_OK))
         xmlCopyError(&ctxt->lastError, &oldctxt->lastError);
 
-    if (sax != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2847]) {
+      if ((sax != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2847\n");
+      else
+        fprintf(stderr, "reached bug index 2847\n");
+    }
+    if ((!FIXREVERTER[2847] && (sax != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->sax = oldsax;
+	#ifdef FRCOV
+	}
+	#endif
     if (oldctxt != NULL) {
         oldctxt->node_seq.maximum = ctxt->node_seq.maximum;
         oldctxt->node_seq.length = ctxt->node_seq.length;
@@ -13395,13 +16699,43 @@ xmlParseBalancedChunkMemoryInternal(xmlParserCtxtPtr oldctxt,
 
     if (lst != NULL)
         *lst = NULL;
-    if (string == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2848]) {
+      if ((string == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2848\n");
+      else
+        fprintf(stderr, "reached bug index 2848\n");
+    }
+    if ((!FIXREVERTER[2848] && (string == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ERR_INTERNAL_ERROR);
+        #ifdef FRCOV
+        }
+        #endif
 
     size = xmlStrlen(string);
 
     ctxt = xmlCreateMemoryParserCtxt((char *) string, size);
-    if (ctxt == NULL) return(XML_WAR_UNDECLARED_ENTITY);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2849]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2849\n");
+      else
+        fprintf(stderr, "reached bug index 2849\n");
+    }
+    if ((!FIXREVERTER[2849] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(XML_WAR_UNDECLARED_ENTITY);
+    #ifdef FRCOV
+    }
+    #endif
     if (user_data != NULL)
 	ctxt->userData = user_data;
     else
@@ -14030,9 +17364,24 @@ xmlCreateEntityParserCtxtInternal(const xmlChar *URL, const xmlChar *ID,
     xmlChar *uri;
 
     ctxt = xmlNewParserCtxt();
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2867]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2867\n");
+      else
+        fprintf(stderr, "reached bug index 2867\n");
+    }
+    if ((!FIXREVERTER[2867] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (pctx != NULL) {
         ctxt->options = pctx->options;
@@ -14052,10 +17401,25 @@ xmlCreateEntityParserCtxtInternal(const xmlChar *URL, const xmlChar *ID,
 
     if (uri == NULL) {
 	inputStream = xmlLoadExternalEntity((char *)URL, (char *)ID, ctxt);
-	if (inputStream == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2868]) {
+	  if ((inputStream == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2868\n");
+	  else
+	    fprintf(stderr, "reached bug index 2868\n");
+	}
+	if ((!FIXREVERTER[2868] && (inputStream == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFreeParserCtxt(ctxt);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	inputPush(ctxt, inputStream);
 
@@ -14065,11 +17429,26 @@ xmlCreateEntityParserCtxtInternal(const xmlChar *URL, const xmlChar *ID,
 	    ctxt->directory = directory;
     } else {
 	inputStream = xmlLoadExternalEntity((char *)uri, (char *)ID, ctxt);
-	if (inputStream == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2869]) {
+	  if ((inputStream == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2869\n");
+	  else
+	    fprintf(stderr, "reached bug index 2869\n");
+	}
+	if ((!FIXREVERTER[2869] && (inputStream == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFree(uri);
 	    xmlFreeParserCtxt(ctxt);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	inputPush(ctxt, inputStream);
 
@@ -14412,28 +17791,103 @@ xmlCreateMemoryParserCtxt(const char *buffer, int size) {
     xmlParserInputPtr input;
     xmlParserInputBufferPtr buf;
 
-    if (buffer == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2881]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2881\n");
+      else
+        fprintf(stderr, "reached bug index 2881\n");
+    }
+    if ((!FIXREVERTER[2881] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (size <= 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2882]) {
+      if ((size <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2882\n");
+      else
+        fprintf(stderr, "reached bug index 2882\n");
+    }
+    if ((!FIXREVERTER[2882] && (size <= 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ctxt = xmlNewParserCtxt();
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2883]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2883\n");
+      else
+        fprintf(stderr, "reached bug index 2883\n");
+    }
+    if ((!FIXREVERTER[2883] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     /* TODO: xmlParserInputBufferCreateStatic, requires some serious changes */
     buf = xmlParserInputBufferCreateMem(buffer, size, XML_CHAR_ENCODING_NONE);
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2884]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2884\n");
+      else
+        fprintf(stderr, "reached bug index 2884\n");
+    }
+    if ((!FIXREVERTER[2884] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserCtxt(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     input = xmlNewInputStream(ctxt);
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2885]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2885\n");
+      else
+        fprintf(stderr, "reached bug index 2885\n");
+    }
+    if ((!FIXREVERTER[2885] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserInputBuffer(buf);
 	xmlFreeParserCtxt(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     input->filename = NULL;
     input->buf = buf;
@@ -14856,8 +18310,23 @@ xmlCtxtReset(xmlParserCtxtPtr ctxt)
     xmlParserInputPtr input;
     xmlDictPtr dict;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2896]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2896\n");
+      else
+        fprintf(stderr, "reached bug index 2896\n");
+    }
+    if ((!FIXREVERTER[2896] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     dict = ctxt->dict;
 
@@ -15051,8 +18520,23 @@ xmlCtxtResetPush(xmlParserCtxtPtr ctxt, const char *chunk,
 static int
 xmlCtxtUseOptionsInternal(xmlParserCtxtPtr ctxt, int options, const char *encoding)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2901]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2901\n");
+      else
+        fprintf(stderr, "reached bug index 2901\n");
+    }
+    if ((!FIXREVERTER[2901] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (encoding != NULL) {
         if (ctxt->encoding != NULL)
 	    xmlFree((xmlChar *) ctxt->encoding);
@@ -15456,18 +18940,63 @@ xmlCtxtReadFile(xmlParserCtxtPtr ctxt, const char *filename,
 {
     xmlParserInputPtr stream;
 
-    if (filename == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2917]) {
+      if ((filename == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2917\n");
+      else
+        fprintf(stderr, "reached bug index 2917\n");
+    }
+    if ((!FIXREVERTER[2917] && (filename == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
-    if (ctxt == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2918]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2918\n");
+      else
+        fprintf(stderr, "reached bug index 2918\n");
+    }
+    if ((!FIXREVERTER[2918] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     xmlInitParser();
 
     xmlCtxtReset(ctxt);
 
     stream = xmlLoadExternalEntity(filename, NULL, ctxt);
-    if (stream == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2919]) {
+      if ((stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2919\n");
+      else
+        fprintf(stderr, "reached bug index 2919\n");
+    }
+    if ((!FIXREVERTER[2919] && (stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inputPush(ctxt, stream);
     return (xmlDoRead(ctxt, NULL, encoding, options, 1));
 }
@@ -15493,24 +19022,84 @@ xmlCtxtReadMemory(xmlParserCtxtPtr ctxt, const char *buffer, int size,
     xmlParserInputBufferPtr input;
     xmlParserInputPtr stream;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2920]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2920\n");
+      else
+        fprintf(stderr, "reached bug index 2920\n");
+    }
+    if ((!FIXREVERTER[2920] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
-    if (buffer == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2921]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2921\n");
+      else
+        fprintf(stderr, "reached bug index 2921\n");
+    }
+    if ((!FIXREVERTER[2921] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     xmlInitParser();
 
     xmlCtxtReset(ctxt);
 
     input = xmlParserInputBufferCreateMem(buffer, size, XML_CHAR_ENCODING_NONE);
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2922]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2922\n");
+      else
+        fprintf(stderr, "reached bug index 2922\n");
+    }
+    if ((!FIXREVERTER[2922] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     stream = xmlNewIOInputStream(ctxt, input, XML_CHAR_ENCODING_NONE);
-    if (stream == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2923]) {
+      if ((stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2923\n");
+      else
+        fprintf(stderr, "reached bug index 2923\n");
+    }
+    if ((!FIXREVERTER[2923] && (stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserInputBuffer(input);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     inputPush(ctxt, stream);
     return (xmlDoRead(ctxt, URL, encoding, options, 1));
diff --git a/parserInternals.c b/parserInternals.c
old mode 100644
new mode 100755
index 0f015ded..868b29fb
--- a/parserInternals.c
+++ b/parserInternals.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * parserInternals.c : Internal routines (and obsolete ones) needed for the
  *                     XML and HTML parsers.
@@ -148,16 +152,46 @@ __xmlErrEncoding(xmlParserCtxtPtr ctxt, xmlParserErrors xmlerr,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4034]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4034\n");
+      else
+        fprintf(stderr, "reached bug index 4034\n");
+    }
+    if ((!FIXREVERTER[4034] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->errNo = xmlerr;
+        #ifdef FRCOV
+        }
+        #endif
     __xmlRaiseError(NULL, NULL, NULL,
                     ctxt, NULL, XML_FROM_PARSER, xmlerr, XML_ERR_FATAL,
                     NULL, 0, (const char *) str1, (const char *) str2,
                     NULL, 0, 0, msg, str1, str2);
     if (ctxt != NULL) {
         ctxt->wellFormed = 0;
-        if (ctxt->recovery == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4035]) {
+          if ((ctxt -> recovery == 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 4035\n");
+          else
+            fprintf(stderr, "reached bug index 4035\n");
+        }
+        if ((!FIXREVERTER[4035] && (ctxt -> recovery == 0  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->disableSAX = 1;
+            #ifdef FRCOV
+            }
+            #endif
     }
 }
 
@@ -175,16 +209,46 @@ xmlErrInternal(xmlParserCtxtPtr ctxt, const char *msg, const xmlChar * str)
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4036]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4036\n");
+      else
+        fprintf(stderr, "reached bug index 4036\n");
+    }
+    if ((!FIXREVERTER[4036] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->errNo = XML_ERR_INTERNAL_ERROR;
+        #ifdef FRCOV
+        }
+        #endif
     __xmlRaiseError(NULL, NULL, NULL,
                     ctxt, NULL, XML_FROM_PARSER, XML_ERR_INTERNAL_ERROR,
                     XML_ERR_FATAL, NULL, 0, (const char *) str, NULL, NULL,
                     0, 0, msg, str);
     if (ctxt != NULL) {
         ctxt->wellFormed = 0;
-        if (ctxt->recovery == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4037]) {
+          if ((ctxt -> recovery == 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 4037\n");
+          else
+            fprintf(stderr, "reached bug index 4037\n");
+        }
+        if ((!FIXREVERTER[4037] && (ctxt -> recovery == 0  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->disableSAX = 1;
+            #ifdef FRCOV
+            }
+            #endif
     }
 }
 
@@ -204,15 +268,45 @@ xmlErrEncodingInt(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4038]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4038\n");
+      else
+        fprintf(stderr, "reached bug index 4038\n");
+    }
+    if ((!FIXREVERTER[4038] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->errNo = error;
+        #ifdef FRCOV
+        }
+        #endif
     __xmlRaiseError(NULL, NULL, NULL,
                     ctxt, NULL, XML_FROM_PARSER, error, XML_ERR_FATAL,
                     NULL, 0, NULL, NULL, NULL, val, 0, msg, val);
     if (ctxt != NULL) {
         ctxt->wellFormed = 0;
-        if (ctxt->recovery == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4039]) {
+          if ((ctxt -> recovery == 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 4039\n");
+          else
+            fprintf(stderr, "reached bug index 4039\n");
+        }
+        if ((!FIXREVERTER[4039] && (ctxt -> recovery == 0  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->disableSAX = 1;
+            #ifdef FRCOV
+            }
+            #endif
     }
 }
 
@@ -302,13 +396,73 @@ xmlParserInputGrow(xmlParserInputPtr in, int len) {
     size_t indx;
     const xmlChar *content;
 
-    if ((in == NULL) || (len < 0)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4040]) {
+      if ((in == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4040\n");
+      else
+        fprintf(stderr, "reached bug index 4040\n");
+    }
+    if ((!FIXREVERTER[4040] && (in == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_INPUT
     xmlGenericError(xmlGenericErrorContext, "Grow\n");
 #endif
-    if (in->buf == NULL) return(-1);
-    if (in->base == NULL) return(-1);
-    if (in->cur == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4041]) {
+      if ((in -> buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4041\n");
+      else
+        fprintf(stderr, "reached bug index 4041\n");
+    }
+    if ((!FIXREVERTER[4041] && (in -> buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4042]) {
+      if ((in -> base == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4042\n");
+      else
+        fprintf(stderr, "reached bug index 4042\n");
+    }
+    if ((!FIXREVERTER[4042] && (in -> base == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4043]) {
+      if ((in -> cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4043\n");
+      else
+        fprintf(stderr, "reached bug index 4043\n");
+    }
+    if ((!FIXREVERTER[4043] && (in -> cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (in->buf->buffer == NULL) return(-1);
 
     CHECK_BUFFER(in);
@@ -364,10 +518,70 @@ xmlParserInputShrink(xmlParserInputPtr in) {
 #ifdef DEBUG_INPUT
     xmlGenericError(xmlGenericErrorContext, "Shrink\n");
 #endif
-    if (in == NULL) return;
-    if (in->buf == NULL) return;
-    if (in->base == NULL) return;
-    if (in->cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4044]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4044\n");
+      else
+        fprintf(stderr, "reached bug index 4044\n");
+    }
+    if ((!FIXREVERTER[4044] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4045]) {
+      if ((in -> buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4045\n");
+      else
+        fprintf(stderr, "reached bug index 4045\n");
+    }
+    if ((!FIXREVERTER[4045] && (in -> buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4046]) {
+      if ((in -> base == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4046\n");
+      else
+        fprintf(stderr, "reached bug index 4046\n");
+    }
+    if ((!FIXREVERTER[4046] && (in -> base == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4047]) {
+      if ((in -> cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4047\n");
+      else
+        fprintf(stderr, "reached bug index 4047\n");
+    }
+    if ((!FIXREVERTER[4047] && (in -> cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (in->buf->buffer == NULL) return;
 
     CHECK_BUFFER(in);
@@ -586,7 +800,22 @@ encoding_error:
 
 int
 xmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {
-    if ((ctxt == NULL) || (len == NULL) || (ctxt->input == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4048]) {
+      if ((ctxt == (void *) 0 || len == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4048\n");
+      else
+        fprintf(stderr, "reached bug index 4048\n");
+    }
+    if ((!FIXREVERTER[4048] && (ctxt == (void *) 0 || len == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->instate == XML_PARSER_EOF)
 	return(0);
 
@@ -641,24 +870,69 @@ xmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {
 		    val |= (cur[1] & 0x3f) << 12;
 		    val |= (cur[2] & 0x3f) << 6;
 		    val |= cur[3] & 0x3f;
-		    if (val < 0x10000)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4049]) {
+		      if ((val < 65536 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4049\n");
+		      else
+		        fprintf(stderr, "reached bug index 4049\n");
+		    }
+		    if ((!FIXREVERTER[4049] && (val < 65536 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto encoding_error;
+			#ifdef FRCOV
+			}
+			#endif
 		} else {
 		  /* 3-byte code */
 		    *len = 3;
 		    val = (cur[0] & 0xf) << 12;
 		    val |= (cur[1] & 0x3f) << 6;
 		    val |= cur[2] & 0x3f;
-		    if (val < 0x800)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4050]) {
+		      if ((val < 2048 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4050\n");
+		      else
+		        fprintf(stderr, "reached bug index 4050\n");
+		    }
+		    if ((!FIXREVERTER[4050] && (val < 2048 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto encoding_error;
+			#ifdef FRCOV
+			}
+			#endif
 		}
 	    } else {
 	      /* 2-byte code */
 		*len = 2;
 		val = (cur[0] & 0x1f) << 6;
 		val |= cur[1] & 0x3f;
-		if (val < 0x80)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4051]) {
+		  if ((val < 128 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4051\n");
+		  else
+		    fprintf(stderr, "reached bug index 4051\n");
+		}
+		if ((!FIXREVERTER[4051] && (val < 128 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto encoding_error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	    if (!IS_CHAR(val)) {
 	        xmlErrEncodingInt(ctxt, XML_ERR_INVALID_CHAR,
@@ -747,7 +1021,22 @@ encoding_error:
 int
 xmlStringCurrentChar(xmlParserCtxtPtr ctxt, const xmlChar * cur, int *len)
 {
-    if ((len == NULL) || (cur == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4052]) {
+      if ((len == (void *) 0 || cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4052\n");
+      else
+        fprintf(stderr, "reached bug index 4052\n");
+    }
+    if ((!FIXREVERTER[4052] && (len == (void *) 0 || cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt == NULL) || (ctxt->charset == XML_CHAR_ENCODING_UTF8)) {
         /*
          * We are supposed to handle UTF8, check it's valid
@@ -855,7 +1144,22 @@ encoding_error:
  */
 int
 xmlCopyCharMultiByte(xmlChar *out, int val) {
-    if (out == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4053]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4053\n");
+      else
+        fprintf(stderr, "reached bug index 4053\n");
+    }
+    if ((!FIXREVERTER[4053] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     /*
      * We are supposed to handle UTF8, check it's valid
      * From rfc2044: encoding of the Unicode values on UTF-8:
@@ -898,11 +1202,41 @@ xmlCopyCharMultiByte(xmlChar *out, int val) {
 
 int
 xmlCopyChar(int len ATTRIBUTE_UNUSED, xmlChar *out, int val) {
-    if (out == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4054]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4054\n");
+      else
+        fprintf(stderr, "reached bug index 4054\n");
+    }
+    if ((!FIXREVERTER[4054] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     /* the len parameter is ignored */
-    if  (val >= 0x80) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4055]) {
+      if ((val >= 128 ) && !(0))
+        fprintf(stderr, "triggered bug index 4055\n");
+      else
+        fprintf(stderr, "reached bug index 4055\n");
+    }
+    if ((!FIXREVERTER[4055] && (val >= 128 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(xmlCopyCharMultiByte (out, val));
     }
+    #ifdef FRCOV
+    }
+    #endif
     *out = (xmlChar) val;
     return 1;
 }
@@ -936,7 +1270,22 @@ xmlSwitchEncoding(xmlParserCtxtPtr ctxt, xmlCharEncoding enc)
     int len = -1;
     int ret;
 
-    if (ctxt == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4056]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4056\n");
+      else
+        fprintf(stderr, "reached bug index 4056\n");
+    }
+    if ((!FIXREVERTER[4056] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     switch (enc) {
 	case XML_CHAR_ENCODING_ERROR:
 	    __xmlErrEncoding(ctxt, XML_ERR_UNKNOWN_ENCODING,
@@ -1097,10 +1446,25 @@ xmlSwitchEncoding(xmlParserCtxtPtr ctxt, xmlCharEncoding enc)
      * didn't stop the parser. But most callers of this function don't
      * check the return value.
      */
-    if (handler == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4057]) {
+      if ((handler == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4057\n");
+      else
+        fprintf(stderr, "reached bug index 4057\n");
+    }
+    if ((!FIXREVERTER[4057] && (handler == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlStopParser(ctxt);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->charset = XML_CHAR_ENCODING_UTF8;
     ret = xmlSwitchToEncodingInt(ctxt, handler, len);
     if ((ret < 0) || (ctxt->errNo == XML_I18N_CONV_FAILED)) {
@@ -1131,10 +1495,40 @@ xmlSwitchInputEncodingInt(xmlParserCtxtPtr ctxt, xmlParserInputPtr input,
 {
     int nbchars;
 
-    if (handler == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4058]) {
+      if ((handler == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4058\n");
+      else
+        fprintf(stderr, "reached bug index 4058\n");
+    }
+    if ((!FIXREVERTER[4058] && (handler == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
-    if (input == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4059]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4059\n");
+      else
+        fprintf(stderr, "reached bug index 4059\n");
+    }
+    if ((!FIXREVERTER[4059] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (input->buf != NULL) {
         if (input->buf->encoder != NULL) {
             /*
@@ -1234,7 +1628,19 @@ xmlSwitchInputEncodingInt(xmlParserCtxtPtr ctxt, xmlParserInputPtr input,
 	    input->buf->rawconsumed += use - xmlBufUse(input->buf->raw);
         }
         return (0);
-    } else if (input->length == 0) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[4061]) {
+      if ((input -> length == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4061\n");
+      else
+        fprintf(stderr, "reached bug index 4061\n");
+    }
+    if ((!FIXREVERTER[4061] && (input -> length == 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * When parsing a static memory array one must know the
 	 * size to be able to convert the buffer.
@@ -1248,6 +1654,9 @@ xmlSwitchInputEncodingInt(xmlParserCtxtPtr ctxt, xmlParserInputPtr input,
         xmlCharEncCloseFunc(handler);
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
      * We should actually raise an error here, see issue #34.
      */
@@ -1337,14 +1746,46 @@ xmlSwitchToEncoding(xmlParserCtxtPtr ctxt, xmlCharEncodingHandlerPtr handler)
  */
 void
 xmlFreeInputStream(xmlParserInputPtr input) {
-    if (input == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4062]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4062\n");
+      else
+        fprintf(stderr, "reached bug index 4062\n");
+    }
+    if ((!FIXREVERTER[4062] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (input->filename != NULL) xmlFree((char *) input->filename);
     if (input->directory != NULL) xmlFree((char *) input->directory);
     if (input->encoding != NULL) xmlFree((char *) input->encoding);
     if (input->version != NULL) xmlFree((char *) input->version);
-    if ((input->free != NULL) && (input->base != NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4063]) {
+      fprintf(stderr, "reached bug index 4063\n");
+    }
+    if ((FIXREVERTER[4063] && (input -> free != (void *) 0 )) || (!FIXREVERTER[4063] && (input -> free != (void *) 0 && input -> base != (void *) 0 ))
+    #else
+    if (input -> free != (void *) 0 
+    #endif
+    )
+        
+        #ifdef FRCOV
+        {if (!(input -> base != (void *) 0 ))
+          fprintf(stderr, "triggered bug index 4063\n");
+        #endif
         input->free((xmlChar *) input->base);
+        #ifdef FRCOV
+        }}
+        #endif
     if (input->buf != NULL)
         xmlFreeParserInputBuffer(input->buf);
     xmlFree(input);
@@ -1363,10 +1804,25 @@ xmlNewInputStream(xmlParserCtxtPtr ctxt) {
     xmlParserInputPtr input;
 
     input = (xmlParserInputPtr) xmlMalloc(sizeof(xmlParserInput));
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4064]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4064\n");
+      else
+        fprintf(stderr, "reached bug index 4064\n");
+    }
+    if ((!FIXREVERTER[4064] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(ctxt,  "couldn't allocate a new input stream\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(input, 0, sizeof(xmlParserInput));
     input->line = 1;
     input->col = 1;
@@ -1377,8 +1833,23 @@ xmlNewInputStream(xmlParserCtxtPtr ctxt) {
      * should not happen while parsing which is the situation where
      * the id is actually needed.
      */
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4065]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4065\n");
+      else
+        fprintf(stderr, "reached bug index 4065\n");
+    }
+    if ((!FIXREVERTER[4065] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         input->id = ctxt->input_id++;
+        #ifdef FRCOV
+        }
+        #endif
 
     return(input);
 }
@@ -1399,13 +1870,43 @@ xmlNewIOInputStream(xmlParserCtxtPtr ctxt, xmlParserInputBufferPtr input,
 	            xmlCharEncoding enc) {
     xmlParserInputPtr inputStream;
 
-    if (input == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4066]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4066\n");
+      else
+        fprintf(stderr, "reached bug index 4066\n");
+    }
+    if ((!FIXREVERTER[4066] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlParserDebugEntities)
 	xmlGenericError(xmlGenericErrorContext, "new input from I/O\n");
     inputStream = xmlNewInputStream(ctxt);
-    if (inputStream == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4067]) {
+      if ((inputStream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4067\n");
+      else
+        fprintf(stderr, "reached bug index 4067\n");
+    }
+    if ((!FIXREVERTER[4067] && (inputStream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inputStream->filename = NULL;
     inputStream->buf = input;
     xmlBufResetInput(inputStream->buf->buffer, inputStream);
@@ -1430,15 +1931,42 @@ xmlParserInputPtr
 xmlNewEntityInputStream(xmlParserCtxtPtr ctxt, xmlEntityPtr entity) {
     xmlParserInputPtr input;
 
-    if (entity == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4068]) {
+      if ((entity == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4068\n");
+      else
+        fprintf(stderr, "reached bug index 4068\n");
+    }
+    if ((!FIXREVERTER[4068] && (entity == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrInternal(ctxt, "xmlNewEntityInputStream entity = NULL\n",
 	               NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlParserDebugEntities)
 	xmlGenericError(xmlGenericErrorContext,
 		"new input from entity: %s\n", entity->name);
-    if (entity->content == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4069]) {
+      if ((entity -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4069\n");
+      else
+        fprintf(stderr, "reached bug index 4069\n");
+    }
+    if ((!FIXREVERTER[4069] && (entity -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	switch (entity->etype) {
             case XML_EXTERNAL_GENERAL_UNPARSED_ENTITY:
 	        xmlErrInternal(ctxt, "Cannot parse entity %s\n",
@@ -1466,15 +1994,63 @@ xmlNewEntityInputStream(xmlParserCtxtPtr ctxt, xmlEntityPtr entity) {
 	}
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     input = xmlNewInputStream(ctxt);
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4070]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4070\n");
+      else
+        fprintf(stderr, "reached bug index 4070\n");
+    }
+    if ((!FIXREVERTER[4070] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (entity->URI != NULL)
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4071]) {
+      if ((entity -> URI != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4071\n");
+      else
+        fprintf(stderr, "reached bug index 4071\n");
+    }
+    if ((!FIXREVERTER[4071] && (entity -> URI != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	input->filename = (char *) xmlStrdup((xmlChar *) entity->URI);
+	#ifdef FRCOV
+	}
+	#endif
     input->base = entity->content;
-    if (entity->length == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4072]) {
+      if ((entity -> length == 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4072\n");
+      else
+        fprintf(stderr, "reached bug index 4072\n");
+    }
+    if ((!FIXREVERTER[4072] && (entity -> length == 0  ))
+    #else
+    if (0
+    #endif
+    )
         entity->length = xmlStrlen(entity->content);
+        #ifdef FRCOV
+        }
+        #endif
     input->cur = entity->content;
     input->length = entity->length;
     input->end = &entity->content[input->length];
@@ -1590,10 +2166,25 @@ xmlInitParserCtxt(xmlParserCtxtPtr ctxt)
 {
     xmlParserInputPtr input;
 
-    if(ctxt==NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4079]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4079\n");
+      else
+        fprintf(stderr, "reached bug index 4079\n");
+    }
+    if ((!FIXREVERTER[4079] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrInternal(NULL, "Got NULL parser context\n", NULL);
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     xmlDefaultSAXHandlerInit();
 
@@ -1776,7 +2367,22 @@ xmlFreeParserCtxt(xmlParserCtxtPtr ctxt)
 {
     xmlParserInputPtr input;
 
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4083]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4083\n");
+      else
+        fprintf(stderr, "reached bug index 4083\n");
+    }
+    if ((!FIXREVERTER[4083] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     while ((input = inputPop(ctxt)) != NULL) { /* Non consuming */
         xmlFreeInputStream(input);
@@ -1863,10 +2469,25 @@ xmlNewParserCtxt(void)
     xmlParserCtxtPtr ctxt;
 
     ctxt = (xmlParserCtxtPtr) xmlMalloc(sizeof(xmlParserCtxt));
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4084]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4084\n");
+      else
+        fprintf(stderr, "reached bug index 4084\n");
+    }
+    if ((!FIXREVERTER[4084] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(NULL, "cannot allocate parser context\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ctxt, 0, sizeof(xmlParserCtxt));
     if (xmlInitParserCtxt(ctxt) < 0) {
         xmlFreeParserCtxt(ctxt);
@@ -1933,8 +2554,23 @@ xmlParserFindNodeInfo(const xmlParserCtxtPtr ctx, const xmlNodePtr node)
 void
 xmlInitNodeInfoSeq(xmlParserNodeInfoSeqPtr seq)
 {
-    if (seq == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4086]) {
+      if ((seq == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4086\n");
+      else
+        fprintf(stderr, "reached bug index 4086\n");
+    }
+    if ((!FIXREVERTER[4086] && (seq == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     seq->length = 0;
     seq->maximum = 0;
     seq->buffer = NULL;
@@ -2044,10 +2680,25 @@ xmlParserAddNodeInfo(xmlParserCtxtPtr ctxt,
                     (xmlParserNodeInfo *) xmlRealloc(ctxt->node_seq.buffer,
                                                      byte_size);
 
-            if (tmp_buffer == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4088]) {
+              if ((tmp_buffer == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 4088\n");
+              else
+                fprintf(stderr, "reached bug index 4088\n");
+            }
+            if ((!FIXREVERTER[4088] && (tmp_buffer == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
 		xmlErrMemory(ctxt, "failed to allocate buffer\n");
                 return;
             }
+            #ifdef FRCOV
+            }
+            #endif
             ctxt->node_seq.buffer = tmp_buffer;
             ctxt->node_seq.maximum *= 2;
         }
diff --git a/pattern.c b/pattern.c
old mode 100644
new mode 100755
index fdf5c79d..5f08f720
--- a/pattern.c
+++ b/pattern.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * pattern.c: Implemetation of selectors for nodes
  *
@@ -204,20 +208,50 @@ xmlNewPattern(void) {
     xmlPatternPtr cur;
 
     cur = (xmlPatternPtr) xmlMalloc(sizeof(xmlPattern));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[118]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 118\n");
+      else
+        fprintf(stderr, "reached bug index 118\n");
+    }
+    if ((!FIXREVERTER[118] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewPattern : malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlPattern));
     cur->maxStep = 10;
     cur->steps = (xmlStepOpPtr) xmlMalloc(cur->maxStep * sizeof(xmlStepOp));
-    if (cur->steps == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[119]) {
+      if ((cur -> steps == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 119\n");
+      else
+        fprintf(stderr, "reached bug index 119\n");
+    }
+    if ((!FIXREVERTER[119] && (cur -> steps == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(cur);
 	ERROR(NULL, NULL, NULL,
 		"xmlNewPattern : malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(cur);
 }
 
@@ -237,8 +271,23 @@ xmlFreePatternInternal(xmlPatternPtr comp) {
     xmlStepOpPtr op;
     int i;
 
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[120]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 120\n");
+      else
+        fprintf(stderr, "reached bug index 120\n");
+    }
+    if ((!FIXREVERTER[120] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (comp->stream != NULL)
         xmlFreeStreamComp(comp->stream);
     if (comp->pattern != NULL)
@@ -296,15 +345,45 @@ xmlNewPatParserContext(const xmlChar *pattern, xmlDictPtr dict,
                        const xmlChar **namespaces) {
     xmlPatParserContextPtr cur;
 
-    if (pattern == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[121]) {
+      if ((pattern == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 121\n");
+      else
+        fprintf(stderr, "reached bug index 121\n");
+    }
+    if ((!FIXREVERTER[121] && (pattern == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = (xmlPatParserContextPtr) xmlMalloc(sizeof(xmlPatParserContext));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[122]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 122\n");
+      else
+        fprintf(stderr, "reached bug index 122\n");
+    }
+    if ((!FIXREVERTER[122] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewPatParserContext : malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlPatParserContext));
     cur->dict = dict;
     cur->cur = pattern;
@@ -329,8 +408,23 @@ xmlNewPatParserContext(const xmlChar *pattern, xmlDictPtr dict,
  */
 static void
 xmlFreePatParserContext(xmlPatParserContextPtr ctxt) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[123]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 123\n");
+      else
+        fprintf(stderr, "reached bug index 123\n");
+    }
+    if ((!FIXREVERTER[123] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     memset(ctxt, -1, sizeof(xmlPatParserContext));
     xmlFree(ctxt);
 }
@@ -355,11 +449,26 @@ xmlPatternAdd(xmlPatParserContextPtr ctxt ATTRIBUTE_UNUSED,
         xmlStepOpPtr temp;
 	temp = (xmlStepOpPtr) xmlRealloc(comp->steps, comp->maxStep * 2 *
 	                                 sizeof(xmlStepOp));
-        if (temp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[124]) {
+          if ((temp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 124\n");
+          else
+            fprintf(stderr, "reached bug index 124\n");
+        }
+        if ((!FIXREVERTER[124] && (temp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    ERROR(ctxt, NULL, NULL,
 			     "xmlPatternAdd: realloc failed\n");
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->steps = temp;
 	comp->maxStep *= 2;
     }
@@ -426,11 +535,26 @@ xmlReversePattern(xmlPatternPtr comp) {
         xmlStepOpPtr temp;
 	temp = (xmlStepOpPtr) xmlRealloc(comp->steps, comp->maxStep * 2 *
 	                                 sizeof(xmlStepOp));
-        if (temp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[125]) {
+          if ((temp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 125\n");
+          else
+            fprintf(stderr, "reached bug index 125\n");
+        }
+        if ((!FIXREVERTER[125] && (temp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    ERROR(ctxt, NULL, NULL,
 			     "xmlReversePattern: realloc failed\n");
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->steps = temp;
 	comp->maxStep *= 2;
     }
@@ -475,8 +599,23 @@ xmlPatPushState(xmlStepStates *states, int step, xmlNodePtr node) {
 
 	tmp = (xmlStepStatePtr) xmlRealloc(states->states,
 			       2 * states->maxstates * sizeof(xmlStepState));
-	if (tmp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[126]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 126\n");
+	  else
+	    fprintf(stderr, "reached bug index 126\n");
+	}
+	if ((!FIXREVERTER[126] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	states->states = tmp;
 	states->maxstates *= 2;
     }
@@ -503,7 +642,22 @@ xmlPatMatch(xmlPatternPtr comp, xmlNodePtr node) {
     xmlStepOpPtr step;
     xmlStepStates states = {0, 0, NULL}; /* // may require backtrack */
 
-    if ((comp == NULL) || (node == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[127]) {
+      if ((comp == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 127\n");
+      else
+        fprintf(stderr, "reached bug index 127\n");
+    }
+    if ((!FIXREVERTER[127] && (comp == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     i = 0;
 restart:
     for (;i < comp->nbStep;i++) {
@@ -525,8 +679,23 @@ restart:
             case XML_OP_ELEM:
 		if (node->type != XML_ELEMENT_NODE)
 		    goto rollback;
-		if (step->value == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[128]) {
+		  if ((step -> value == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 128\n");
+		  else
+		    fprintf(stderr, "reached bug index 128\n");
+		}
+		if ((!FIXREVERTER[128] && (step -> value == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    continue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		if (step->value[0] != node->name[0])
 		    goto rollback;
 		if (!xmlStrEqual(step->value, node->name))
@@ -537,8 +706,23 @@ restart:
 		    if (step->value2 != NULL)
 			goto rollback;
 		} else if (node->ns->href != NULL) {
-		    if (step->value2 == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[129]) {
+		      if ((step -> value2 == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 129\n");
+		      else
+		        fprintf(stderr, "reached bug index 129\n");
+		    }
+		    if ((!FIXREVERTER[129] && (step -> value2 == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto rollback;
+			#ifdef FRCOV
+			}
+			#endif
 		    if (!xmlStrEqual(step->value2, node->ns->href))
 			goto rollback;
 		}
@@ -596,10 +780,40 @@ restart:
 		    (node->type == XML_NAMESPACE_DECL))
 		    goto rollback;
 		node = node->parent;
-		if (node == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[130]) {
+		  if ((node == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 130\n");
+		  else
+		    fprintf(stderr, "reached bug index 130\n");
+		}
+		if ((!FIXREVERTER[130] && (node == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto rollback;
-		if (step->value == NULL)
+		    #ifdef FRCOV
+		    }
+		    #endif
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[131]) {
+		  if ((step -> value == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 131\n");
+		  else
+		    fprintf(stderr, "reached bug index 131\n");
+		}
+		if ((!FIXREVERTER[131] && (step -> value == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    continue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		if (step->value[0] != node->name[0])
 		    goto rollback;
 		if (!xmlStrEqual(step->value, node->name))
@@ -609,8 +823,23 @@ restart:
 		    if (step->value2 != NULL)
 			goto rollback;
 		} else if (node->ns->href != NULL) {
-		    if (step->value2 == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[132]) {
+		      if ((step -> value2 == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 132\n");
+		      else
+		        fprintf(stderr, "reached bug index 132\n");
+		    }
+		    if ((!FIXREVERTER[132] && (step -> value2 == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto rollback;
+			#ifdef FRCOV
+			}
+			#endif
 		    if (!xmlStrEqual(step->value2, node->ns->href))
 			goto rollback;
 		}
@@ -624,11 +853,41 @@ restart:
 			goto found;
 		    if (step->op != XML_OP_ELEM)
 			goto rollback;
-		    if (step->value == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[133]) {
+		      if ((step -> value == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 133\n");
+		      else
+		        fprintf(stderr, "reached bug index 133\n");
+		    }
+		    if ((!FIXREVERTER[133] && (step -> value == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return(-1);
+			#ifdef FRCOV
+			}
+			#endif
+		}
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[134]) {
+		  if ((node == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 134\n");
+		  else
+		    fprintf(stderr, "reached bug index 134\n");
 		}
-		if (node == NULL)
+		if ((!FIXREVERTER[134] && (node == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto rollback;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		if ((node->type == XML_DOCUMENT_NODE) ||
 		    (node->type == XML_HTML_DOCUMENT_NODE) ||
 #ifdef LIBXML_DOCB_ENABLED
@@ -643,8 +902,23 @@ restart:
 			(xmlStrEqual(step->value, node->name))) {
 			/* Namespace test */
 			if (node->ns == NULL) {
-			    if (step->value2 == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[135]) {
+			      if ((step -> value2 == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 135\n");
+			      else
+			        fprintf(stderr, "reached bug index 135\n");
+			    }
+			    if ((!FIXREVERTER[135] && (step -> value2 == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				break;
+				#ifdef FRCOV
+				}
+				#endif
 			} else if (node->ns->href != NULL) {
 			    if ((step->value2 != NULL) &&
 			        (xmlStrEqual(step->value2, node->ns->href)))
@@ -653,8 +927,23 @@ restart:
 		    }
 		    node = node->parent;
 		}
-		if (node == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[136]) {
+		  if ((node == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 136\n");
+		  else
+		    fprintf(stderr, "reached bug index 136\n");
+		}
+		if ((!FIXREVERTER[136] && (node == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto rollback;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		/*
 		 * prepare a potential rollback from here
 		 * for ancestors of that node.
@@ -671,8 +960,23 @@ restart:
 		    if (step->value != NULL)
 			goto rollback;
 		} else if (node->ns->href != NULL) {
-		    if (step->value == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[137]) {
+		      if ((step -> value == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 137\n");
+		      else
+		        fprintf(stderr, "reached bug index 137\n");
+		    }
+		    if ((!FIXREVERTER[137] && (step -> value == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto rollback;
+			#ifdef FRCOV
+			}
+			#endif
 		    if (!xmlStrEqual(step->value, node->ns->href))
 			goto rollback;
 		}
@@ -691,12 +995,42 @@ found:
     return(1);
 rollback:
     /* got an error try to rollback */
-    if (states.states == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[138]) {
+      if ((states . states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 138\n");
+      else
+        fprintf(stderr, "reached bug index 138\n");
+    }
+    if ((!FIXREVERTER[138] && (states . states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
-    if (states.nbstates <= 0) {
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[139]) {
+      if ((states . nbstates <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 139\n");
+      else
+        fprintf(stderr, "reached bug index 139\n");
+    }
+    if ((!FIXREVERTER[139] && (states . nbstates <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(states.states);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     states.nbstates--;
     i = states.states[states.nbstates].step;
     node = states.states[states.nbstates].node;
@@ -928,7 +1262,19 @@ xmlCompileAttributeTest(xmlPatParserContextPtr ctxt) {
 
     SKIP_BLANKS;
     name = xmlPatScanNCName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[140]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 140\n");
+      else
+        fprintf(stderr, "reached bug index 140\n");
+    }
+    if ((!FIXREVERTER[140] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (CUR == '*') {
 	    PUSH(XML_OP_ATTR, NULL, NULL);
 	    NEXT;
@@ -939,6 +1285,9 @@ xmlCompileAttributeTest(xmlPatParserContextPtr ctxt) {
 	}
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (CUR == ':') {
 	int i;
 	xmlChar *prefix = name;
@@ -1041,8 +1390,23 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 	}
 	NEXT;
 	xmlCompileAttributeTest(ctxt);
-	if (ctxt->error != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[141]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 141\n");
+	  else
+	    fprintf(stderr, "reached bug index 141\n");
+	}
+	if ((!FIXREVERTER[141] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return;
     }
     name = xmlPatScanNCName(ctxt);
@@ -1090,13 +1454,28 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 			break;
 		    }
 		}
-		if (i >= ctxt->nb_namespaces) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[142]) {
+		  if ((i >= ctxt -> nb_namespaces ) && !(0))
+		    fprintf(stderr, "triggered bug index 142\n");
+		  else
+		    fprintf(stderr, "reached bug index 142\n");
+		}
+		if ((!FIXREVERTER[142] && (i >= ctxt -> nb_namespaces ))
+		#else
+		if (0
+		#endif
+		) {
 		    ERROR5(NULL, NULL, NULL,
 			"xmlCompileStepPattern : no namespace bound to prefix %s\n",
 			prefix);
 		    ctxt->error = 1;
 		    goto error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 	    XML_PAT_FREE_STRING(ctxt, prefix);
 	    name = NULL;
@@ -1157,13 +1536,28 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 				break;
 			    }
 			}
-			if (i >= ctxt->nb_namespaces) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[143]) {
+			  if ((i >= ctxt -> nb_namespaces ) && !(0))
+			    fprintf(stderr, "triggered bug index 143\n");
+			  else
+			    fprintf(stderr, "reached bug index 143\n");
+			}
+			if ((!FIXREVERTER[143] && (i >= ctxt -> nb_namespaces ))
+			#else
+			if (0
+			#endif
+			) {
 			    ERROR5(NULL, NULL, NULL,
 				"xmlCompileStepPattern : no namespace bound "
 				"to prefix %s\n", prefix);
 			    ctxt->error = 1;
 			    goto error;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 		    }
 		    XML_PAT_FREE_STRING(ctxt, prefix);
 		    name = NULL;
@@ -1193,8 +1587,23 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 		    goto error;
 		}
 		xmlCompileAttributeTest(ctxt);
-		if (ctxt->error != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[144]) {
+		  if ((ctxt -> error != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 144\n");
+		  else
+		    fprintf(stderr, "reached bug index 144\n");
+		}
+		if ((!FIXREVERTER[144] && (ctxt -> error != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		return;
 	    } else {
 		ERROR5(NULL, NULL, NULL,
@@ -1266,8 +1675,23 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
 	/* TODO: check for incompleteness */
 	if (CUR != 0) {
 	    xmlCompileStepPattern(ctxt);
-	    if (ctxt->error != 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[145]) {
+	      if ((ctxt -> error != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 145\n");
+	      else
+	        fprintf(stderr, "reached bug index 145\n");
+	    }
+	    if ((!FIXREVERTER[145] && (ctxt -> error != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto error;
+		#ifdef FRCOV
+		}
+		#endif
 	}
     } else {
         if (CUR == '/') {
@@ -1283,8 +1707,23 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
 	    }
 	}
 	xmlCompileStepPattern(ctxt);
-	if (ctxt->error != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[146]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 146\n");
+	  else
+	    fprintf(stderr, "reached bug index 146\n");
+	}
+	if ((!FIXREVERTER[146] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	SKIP_BLANKS;
 	while (CUR == '/') {
 	    if (NXT(1) == '/') {
@@ -1293,8 +1732,23 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
 		NEXT;
 		SKIP_BLANKS;
 		xmlCompileStepPattern(ctxt);
-		if (ctxt->error != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[147]) {
+		  if ((ctxt -> error != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 147\n");
+		  else
+		    fprintf(stderr, "reached bug index 147\n");
+		}
+		if ((!FIXREVERTER[147] && (ctxt -> error != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    } else {
 	        PUSH(XML_OP_PARENT, NULL, NULL);
 		NEXT;
@@ -1306,8 +1760,23 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
 		    goto error;
 		}
 		xmlCompileStepPattern(ctxt);
-		if (ctxt->error != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[148]) {
+		  if ((ctxt -> error != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 148\n");
+		  else
+		    fprintf(stderr, "reached bug index 148\n");
+		}
+		if ((!FIXREVERTER[148] && (ctxt -> error != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	}
     }
@@ -1382,8 +1851,23 @@ xmlCompileIDCXPathPath(xmlPatParserContextPtr ctxt) {
     */
     do {
 	xmlCompileStepPattern(ctxt);
-	if (ctxt->error != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[149]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 149\n");
+	  else
+	    fprintf(stderr, "reached bug index 149\n");
+	}
+	if ((!FIXREVERTER[149] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	SKIP_BLANKS;
 	if (CUR != '/')
 	    break;
@@ -1495,23 +1979,68 @@ static xmlStreamCompPtr
 xmlNewStreamComp(int size) {
     xmlStreamCompPtr cur;
 
-    if (size < 4)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[150]) {
+      if ((size < 4 ) && !(0))
+        fprintf(stderr, "triggered bug index 150\n");
+      else
+        fprintf(stderr, "reached bug index 150\n");
+    }
+    if ((!FIXREVERTER[150] && (size < 4 ))
+    #else
+    if (0
+    #endif
+    )
         size  = 4;
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = (xmlStreamCompPtr) xmlMalloc(sizeof(xmlStreamComp));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[151]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 151\n");
+      else
+        fprintf(stderr, "reached bug index 151\n");
+    }
+    if ((!FIXREVERTER[151] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewStreamComp: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlStreamComp));
     cur->steps = (xmlStreamStepPtr) xmlMalloc(size * sizeof(xmlStreamStep));
-    if (cur->steps == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[152]) {
+      if ((cur -> steps == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 152\n");
+      else
+        fprintf(stderr, "reached bug index 152\n");
+    }
+    if ((!FIXREVERTER[152] && (cur -> steps == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(cur);
 	ERROR(NULL, NULL, NULL,
 	      "xmlNewStreamComp: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur->nbStep = 0;
     cur->maxStep = size;
     return(cur);
@@ -1553,11 +2082,26 @@ xmlStreamCompAddStep(xmlStreamCompPtr comp, const xmlChar *name,
     if (comp->nbStep >= comp->maxStep) {
 	cur = (xmlStreamStepPtr) xmlRealloc(comp->steps,
 				 comp->maxStep * 2 * sizeof(xmlStreamStep));
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[153]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 153\n");
+	  else
+	    fprintf(stderr, "reached bug index 153\n");
+	}
+	if ((!FIXREVERTER[153] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ERROR(NULL, NULL, NULL,
 		  "xmlNewStreamComp: malloc failed\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->steps = cur;
         comp->maxStep *= 2;
     }
@@ -1583,8 +2127,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
     int i, s = 0, root = 0, flags = 0, prevs = -1;
     xmlStepOp step;
 
-    if ((comp == NULL) || (comp->steps == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[154]) {
+      if ((comp == (void *) 0 || comp -> steps == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 154\n");
+      else
+        fprintf(stderr, "reached bug index 154\n");
+    }
+    if ((!FIXREVERTER[154] && (comp == (void *) 0 || comp -> steps == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * special case for .
      */
@@ -1593,8 +2152,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 	(comp->steps[0].value == NULL) &&
 	(comp->steps[0].value2 == NULL)) {
 	stream = xmlNewStreamComp(0);
-	if (stream == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[155]) {
+	  if ((stream == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 155\n");
+	  else
+	    fprintf(stderr, "reached bug index 155\n");
+	}
+	if ((!FIXREVERTER[155] && (stream == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/* Note that the stream will have no steps in this case. */
 	stream->flags |= XML_STREAM_FINAL_IS_ANY_NODE;
 	comp->stream = stream;
@@ -1602,8 +2176,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
     }
 
     stream = xmlNewStreamComp((comp->nbStep / 2) + 1);
-    if (stream == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[156]) {
+      if ((stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 156\n");
+      else
+        fprintf(stderr, "reached bug index 156\n");
+    }
+    if ((!FIXREVERTER[156] && (stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (comp->dict != NULL) {
         stream->dict = comp->dict;
 	xmlDictReference(stream->dict);
@@ -1626,8 +2215,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 	    case XML_OP_NS:
 		s = xmlStreamCompAddStep(stream, NULL, step.value,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[158]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 158\n");
+		  else
+		    fprintf(stderr, "reached bug index 158\n");
+		}
+		if ((!FIXREVERTER[158] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
@@ -1637,8 +2241,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		s = xmlStreamCompAddStep(stream,
 		    step.value, step.value2, XML_ATTRIBUTE_NODE, flags);
 		flags = 0;
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[159]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 159\n");
+		  else
+		    fprintf(stderr, "reached bug index 159\n");
+		}
+		if ((!FIXREVERTER[159] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_OP_ELEM:
 	        if ((step.value == NULL) && (step.value2 == NULL)) {
@@ -1662,8 +2281,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 			flags |= XML_STREAM_STEP_NODE;
 			s = xmlStreamCompAddStep(stream, NULL, NULL,
 			    XML_STREAM_ANY_NODE, flags);
-			if (s < 0)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[160]) {
+			  if ((s < 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 160\n");
+			  else
+			    fprintf(stderr, "reached bug index 160\n");
+			}
+			if ((!FIXREVERTER[160] && (s < 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    goto error;
+			    #ifdef FRCOV
+			    }
+			    #endif
 			flags = 0;
 			/*
 			* If there was a previous step, mark it to be added to
@@ -1685,8 +2319,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		/* An element node. */
 	        s = xmlStreamCompAddStep(stream, step.value, step.value2,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[161]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 161\n");
+		  else
+		    fprintf(stderr, "reached bug index 161\n");
+		}
+		if ((!FIXREVERTER[161] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
@@ -1694,16 +2343,46 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		/* An element node child. */
 	        s = xmlStreamCompAddStep(stream, step.value, step.value2,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[162]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 162\n");
+		  else
+		    fprintf(stderr, "reached bug index 162\n");
+		}
+		if ((!FIXREVERTER[162] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
 	    case XML_OP_ALL:
 	        s = xmlStreamCompAddStep(stream, NULL, NULL,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[163]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 163\n");
+		  else
+		    fprintf(stderr, "reached bug index 163\n");
+		}
+		if ((!FIXREVERTER[163] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
@@ -1736,8 +2415,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		stream->steps[0].flags |= XML_STREAM_STEP_DESC;
 	}
     }
-    if (stream->nbStep <= s)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[164]) {
+      if ((stream -> nbStep <= s ) && !(0))
+        fprintf(stderr, "triggered bug index 164\n");
+      else
+        fprintf(stderr, "reached bug index 164\n");
+    }
+    if ((!FIXREVERTER[164] && (stream -> nbStep <= s ))
+    #else
+    if (0
+    #endif
+    )
 	goto error;
+	#ifdef FRCOV
+	}
+	#endif
     stream->steps[s].flags |= XML_STREAM_STEP_FINAL;
     if (root)
 	stream->steps[0].flags |= XML_STREAM_STEP_ROOT;
@@ -1764,19 +2458,49 @@ xmlNewStreamCtxt(xmlStreamCompPtr stream) {
     xmlStreamCtxtPtr cur;
 
     cur = (xmlStreamCtxtPtr) xmlMalloc(sizeof(xmlStreamCtxt));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[165]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 165\n");
+      else
+        fprintf(stderr, "reached bug index 165\n");
+    }
+    if ((!FIXREVERTER[165] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewStreamCtxt: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlStreamCtxt));
     cur->states = (int *) xmlMalloc(4 * 2 * sizeof(int));
-    if (cur->states == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[166]) {
+      if ((cur -> states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 166\n");
+      else
+        fprintf(stderr, "reached bug index 166\n");
+    }
+    if ((!FIXREVERTER[166] && (cur -> states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(cur);
 	ERROR(NULL, NULL, NULL,
 	      "xmlNewStreamCtxt: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur->nbState = 0;
     cur->maxState = 4;
     cur->level = 0;
@@ -1828,11 +2552,26 @@ xmlStreamCtxtAddState(xmlStreamCtxtPtr comp, int idx, int level) {
 
 	cur = (int *) xmlRealloc(comp->states,
 				 comp->maxState * 4 * sizeof(int));
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[167]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 167\n");
+	  else
+	    fprintf(stderr, "reached bug index 167\n");
+	}
+	if ((!FIXREVERTER[167] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ERROR(NULL, NULL, NULL,
 		  "xmlNewStreamCtxt: malloc failed\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->states = cur;
         comp->maxState *= 2;
     }
@@ -1868,8 +2607,23 @@ xmlStreamPushInternal(xmlStreamCtxtPtr stream,
     xmlStreamCtxtPtr orig = stream;
 #endif
 
-    if ((stream == NULL) || (stream->nbState < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[168]) {
+      if ((stream == (void *) 0 || stream -> nbState < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 168\n");
+      else
+        fprintf(stderr, "reached bug index 168\n");
+    }
+    if ((!FIXREVERTER[168] && (stream == (void *) 0 || stream -> nbState < 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (stream != NULL) {
 	comp = stream->comp;
@@ -1982,14 +2736,44 @@ xmlStreamPushInternal(xmlStreamCtxtPtr stream,
 		stepNr = stream->states[2 * i];
 
 		/* TODO: should not happen anymore: dead states */
-		if (stepNr < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[169]) {
+		  if ((stepNr < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 169\n");
+		  else
+		    fprintf(stderr, "reached bug index 169\n");
+		}
+		if ((!FIXREVERTER[169] && (stepNr < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto next_state;
+		    #ifdef FRCOV
+		    }
+		    #endif
 
 		tmp = stream->states[(2 * i) + 1];
 
 		/* skip new states just added */
-		if (tmp > stream->level)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[170]) {
+		  if ((tmp > stream -> level ) && !(0))
+		    fprintf(stderr, "triggered bug index 170\n");
+		  else
+		    fprintf(stderr, "reached bug index 170\n");
+		}
+		if ((!FIXREVERTER[170] && (tmp > stream -> level ))
+		#else
+		if (0
+		#endif
+		)
 		    goto next_state;
+		    #ifdef FRCOV
+		    }
+		    #endif
 
 		/* skip states at ancestor levels, except if "//" */
 		desc = comp->steps[stepNr].flags & XML_STREAM_STEP_DESC;
@@ -2008,8 +2792,23 @@ xmlStreamPushInternal(xmlStreamCtxtPtr stream,
 		    if ((comp->flags & XML_STREAM_DESC) == 0)
 			stream->blockLevel = stream->level +1;
 		    goto next_state;
-		} else if (step.nodeType != XML_STREAM_ANY_NODE)
+		} else 
+		#ifdef FRCOV
+		{if (FIXREVERTER[171]) {
+		  if ((step . nodeType != 100 ) && !(0))
+		    fprintf(stderr, "triggered bug index 171\n");
+		  else
+		    fprintf(stderr, "reached bug index 171\n");
+		}
+		if ((!FIXREVERTER[171] && (step . nodeType != 100 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto next_state;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	    /*
 	    * Compare local/namespace-name.
@@ -2140,8 +2939,23 @@ compare:
 	if (step.nodeType != nodeType) {
 	    if (nodeType == XML_ATTRIBUTE_NODE)
 		goto stream_next;
-	    else if (step.nodeType != XML_STREAM_ANY_NODE)
+	    else 
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[173]) {
+	      if ((step . nodeType != 100 ) && !(0))
+	        fprintf(stderr, "triggered bug index 173\n");
+	      else
+	        fprintf(stderr, "reached bug index 173\n");
+	    }
+	    if ((!FIXREVERTER[173] && (step . nodeType != 100 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto stream_next;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	/*
 	* Compare local/namespace-name.
@@ -2284,14 +3098,44 @@ int
 xmlStreamPop(xmlStreamCtxtPtr stream) {
     int i, lev;
 
-    if (stream == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[176]) {
+      if ((stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 176\n");
+      else
+        fprintf(stderr, "reached bug index 176\n");
+    }
+    if ((!FIXREVERTER[176] && (stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     while (stream != NULL) {
 	/*
 	* Reset block-level.
 	*/
-	if (stream->blockLevel == stream->level)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[177]) {
+	  if ((stream -> blockLevel == stream -> level  ) && !(0))
+	    fprintf(stderr, "triggered bug index 177\n");
+	  else
+	    fprintf(stderr, "reached bug index 177\n");
+	}
+	if ((!FIXREVERTER[177] && (stream -> blockLevel == stream -> level  ))
+	#else
+	if (0
+	#endif
+	)
 	    stream->blockLevel = -1;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	/*
 	 *  stream->level can be zero when XML_FINAL_IS_ANY_NODE is set
@@ -2308,8 +3152,23 @@ xmlStreamPop(xmlStreamCtxtPtr stream) {
 	    lev = stream->states[(2 * i) + 1];
 	    if (lev > stream->level)
 		stream->nbState--;
-	    if (lev <= stream->level)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[178]) {
+	      if ((lev <= stream -> level ) && !(0))
+	        fprintf(stderr, "triggered bug index 178\n");
+	      else
+	        fprintf(stderr, "reached bug index 178\n");
+	    }
+	    if ((!FIXREVERTER[178] && (lev <= stream -> level ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	stream = stream->next;
     }
@@ -2331,8 +3190,23 @@ xmlStreamPop(xmlStreamCtxtPtr stream) {
 int
 xmlStreamWantsAnyNode(xmlStreamCtxtPtr streamCtxt)
 {
-    if (streamCtxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[179]) {
+      if ((streamCtxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 179\n");
+      else
+        fprintf(stderr, "reached bug index 179\n");
+    }
+    if ((!FIXREVERTER[179] && (streamCtxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     while (streamCtxt != NULL) {
 	if (streamCtxt->comp->flags & XML_STREAM_FINAL_IS_ANY_NODE)
 	    return(1);
@@ -2368,8 +3242,23 @@ xmlPatterncompile(const xmlChar *pattern, xmlDict *dict, int flags,
     int type = 0;
     int streamable = 1;
 
-    if (pattern == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[180]) {
+      if ((pattern == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 180\n");
+      else
+        fprintf(stderr, "reached bug index 180\n");
+    }
+    if ((!FIXREVERTER[180] && (pattern == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     start = pattern;
     or = start;
@@ -2385,9 +3274,39 @@ xmlPatterncompile(const xmlChar *pattern, xmlDict *dict, int flags,
 	    }
 	    or++;
 	}
-	if (ctxt == NULL) goto error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[181]) {
+	  if ((ctxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 181\n");
+	  else
+	    fprintf(stderr, "reached bug index 181\n");
+	}
+	if ((!FIXREVERTER[181] && (ctxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto error;
+	#ifdef FRCOV
+	}
+	#endif
 	cur = xmlNewPattern();
-	if (cur == NULL) goto error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[182]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 182\n");
+	  else
+	    fprintf(stderr, "reached bug index 182\n");
+	}
+	if ((!FIXREVERTER[182] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto error;
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Assign string dict.
 	*/
@@ -2408,8 +3327,23 @@ xmlPatterncompile(const xmlChar *pattern, xmlDict *dict, int flags,
 	    xmlCompileIDCXPathPath(ctxt);
 	else
 	    xmlCompilePathPattern(ctxt);
-	if (ctxt->error != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[183]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 183\n");
+	  else
+	    fprintf(stderr, "reached bug index 183\n");
+	}
+	if ((!FIXREVERTER[183] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlFreePatParserContext(ctxt);
 	ctxt = NULL;
 
@@ -2468,8 +3402,23 @@ xmlPatternMatch(xmlPatternPtr comp, xmlNodePtr node)
 {
     int ret = 0;
 
-    if ((comp == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[184]) {
+      if ((comp == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 184\n");
+      else
+        fprintf(stderr, "reached bug index 184\n");
+    }
+    if ((!FIXREVERTER[184] && (comp == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (comp != NULL) {
         ret = xmlPatMatch(comp, node);
@@ -2494,15 +3443,60 @@ xmlPatternGetStreamCtxt(xmlPatternPtr comp)
 {
     xmlStreamCtxtPtr ret = NULL, cur;
 
-    if ((comp == NULL) || (comp->stream == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[186]) {
+      if ((comp == (void *) 0 || comp -> stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 186\n");
+      else
+        fprintf(stderr, "reached bug index 186\n");
+    }
+    if ((!FIXREVERTER[186] && (comp == (void *) 0 || comp -> stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (comp != NULL) {
-        if (comp->stream == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[187]) {
+          if ((comp -> stream == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 187\n");
+          else
+            fprintf(stderr, "reached bug index 187\n");
+        }
+        if ((!FIXREVERTER[187] && (comp -> stream == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    goto failed;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	cur = xmlNewStreamCtxt(comp->stream);
-	if (cur == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[188]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 188\n");
+	  else
+	    fprintf(stderr, "reached bug index 188\n");
+	}
+	if ((!FIXREVERTER[188] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto failed;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (ret == NULL)
 	    ret = cur;
 	else {
@@ -2529,11 +3523,41 @@ failed:
  */
 int
 xmlPatternStreamable(xmlPatternPtr comp) {
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[189]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 189\n");
+      else
+        fprintf(stderr, "reached bug index 189\n");
+    }
+    if ((!FIXREVERTER[189] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     while (comp != NULL) {
-        if (comp->stream == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[190]) {
+          if ((comp -> stream == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 190\n");
+          else
+            fprintf(stderr, "reached bug index 190\n");
+        }
+        if ((!FIXREVERTER[190] && (comp -> stream == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    return(0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	comp = comp->next;
     }
     return(1);
@@ -2551,11 +3575,41 @@ xmlPatternStreamable(xmlPatternPtr comp) {
 int
 xmlPatternMaxDepth(xmlPatternPtr comp) {
     int ret = 0, i;
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[191]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 191\n");
+      else
+        fprintf(stderr, "reached bug index 191\n");
+    }
+    if ((!FIXREVERTER[191] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     while (comp != NULL) {
-        if (comp->stream == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[192]) {
+          if ((comp -> stream == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 192\n");
+          else
+            fprintf(stderr, "reached bug index 192\n");
+        }
+        if ((!FIXREVERTER[192] && (comp -> stream == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	for (i = 0;i < comp->stream->nbStep;i++)
 	    if (comp->stream->steps[i].flags & XML_STREAM_STEP_DESC)
 	        return(-2);
@@ -2579,11 +3633,41 @@ xmlPatternMaxDepth(xmlPatternPtr comp) {
 int
 xmlPatternMinDepth(xmlPatternPtr comp) {
     int ret = 12345678;
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[193]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 193\n");
+      else
+        fprintf(stderr, "reached bug index 193\n");
+    }
+    if ((!FIXREVERTER[193] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     while (comp != NULL) {
-        if (comp->stream == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[194]) {
+          if ((comp -> stream == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 194\n");
+          else
+            fprintf(stderr, "reached bug index 194\n");
+        }
+        if ((!FIXREVERTER[194] && (comp -> stream == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (comp->stream->nbStep < ret)
 	    ret = comp->stream->nbStep;
 	if (ret == 0)
@@ -2603,11 +3687,41 @@ xmlPatternMinDepth(xmlPatternPtr comp) {
  */
 int
 xmlPatternFromRoot(xmlPatternPtr comp) {
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[196]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 196\n");
+      else
+        fprintf(stderr, "reached bug index 196\n");
+    }
+    if ((!FIXREVERTER[196] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     while (comp != NULL) {
-        if (comp->stream == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[197]) {
+          if ((comp -> stream == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 197\n");
+          else
+            fprintf(stderr, "reached bug index 197\n");
+        }
+        if ((!FIXREVERTER[197] && (comp -> stream == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (comp->flags & PAT_FROM_ROOT)
 	    return(1);
 	comp = comp->next;
diff --git a/python/Makefile.am b/python/Makefile.am
old mode 100644
new mode 100755
diff --git a/python/README b/python/README
old mode 100644
new mode 100755
diff --git a/python/TODO b/python/TODO
old mode 100644
new mode 100755
diff --git a/python/drv_libxml2.py b/python/drv_libxml2.py
old mode 100644
new mode 100755
diff --git a/python/libxml.c b/python/libxml.c
old mode 100644
new mode 100755
diff --git a/python/libxml.py b/python/libxml.py
old mode 100644
new mode 100755
diff --git a/python/libxml2-python-api.xml b/python/libxml2-python-api.xml
old mode 100644
new mode 100755
diff --git a/python/libxml_wrap.h b/python/libxml_wrap.h
old mode 100644
new mode 100755
diff --git a/python/tests/Makefile.am b/python/tests/Makefile.am
old mode 100644
new mode 100755
diff --git a/python/tests/invalid.xml b/python/tests/invalid.xml
old mode 100644
new mode 100755
diff --git a/python/tests/test.dtd b/python/tests/test.dtd
old mode 100644
new mode 100755
diff --git a/python/tests/tst.xml b/python/tests/tst.xml
old mode 100644
new mode 100755
diff --git a/python/tests/valid.xml b/python/tests/valid.xml
old mode 100644
new mode 100755
diff --git a/python/types.c b/python/types.c
old mode 100644
new mode 100755
diff --git a/regressions.xml b/regressions.xml
old mode 100644
new mode 100755
diff --git a/relaxng.c b/relaxng.c
old mode 100644
new mode 100755
index 53125c8b..17e5510a
--- a/relaxng.c
+++ b/relaxng.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * relaxng.c : implementation of the Relax-NG handling and validity checking
  *
@@ -680,8 +684,23 @@ static void xmlRelaxNGFreeValidState(xmlRelaxNGValidCtxtPtr ctxt,
 static void
 xmlRelaxNGFreeDocument(xmlRelaxNGDocumentPtr docu)
 {
-    if (docu == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1681]) {
+      if ((docu == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1681\n");
+      else
+        fprintf(stderr, "reached bug index 1681\n");
+    }
+    if ((!FIXREVERTER[1681] && (docu == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (docu->href != NULL)
         xmlFree(docu->href);
@@ -719,8 +738,23 @@ xmlRelaxNGFreeDocumentList(xmlRelaxNGDocumentPtr docu)
 static void
 xmlRelaxNGFreeInclude(xmlRelaxNGIncludePtr incl)
 {
-    if (incl == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1682]) {
+      if ((incl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1682\n");
+      else
+        fprintf(stderr, "reached bug index 1682\n");
+    }
+    if ((!FIXREVERTER[1682] && (incl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (incl->href != NULL)
         xmlFree(incl->href);
@@ -781,8 +815,23 @@ xmlRelaxNGNewRelaxNG(xmlRelaxNGParserCtxtPtr ctxt)
 static void
 xmlRelaxNGFreeInnerSchema(xmlRelaxNGPtr schema)
 {
-    if (schema == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1684]) {
+      if ((schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1684\n");
+      else
+        fprintf(stderr, "reached bug index 1684\n");
+    }
+    if ((!FIXREVERTER[1684] && (schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (schema->doc != NULL)
         xmlFreeDoc(schema->doc);
@@ -806,8 +855,23 @@ xmlRelaxNGFreeInnerSchema(xmlRelaxNGPtr schema)
 void
 xmlRelaxNGFree(xmlRelaxNGPtr schema)
 {
-    if (schema == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1685]) {
+      if ((schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1685\n");
+      else
+        fprintf(stderr, "reached bug index 1685\n");
+    }
+    if ((!FIXREVERTER[1685] && (schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (schema->topgrammar != NULL)
         xmlRelaxNGFreeGrammar(schema->topgrammar);
@@ -860,8 +924,23 @@ xmlRelaxNGNewGrammar(xmlRelaxNGParserCtxtPtr ctxt)
 static void
 xmlRelaxNGFreeGrammar(xmlRelaxNGGrammarPtr grammar)
 {
-    if (grammar == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1687]) {
+      if ((grammar == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1687\n");
+      else
+        fprintf(stderr, "reached bug index 1687\n");
+    }
+    if ((!FIXREVERTER[1687] && (grammar == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (grammar->children != NULL) {
         xmlRelaxNGFreeGrammar(grammar->children);
@@ -970,15 +1049,47 @@ xmlRelaxNGFreePartition(xmlRelaxNGPartitionPtr partitions)
 static void
 xmlRelaxNGFreeDefine(xmlRelaxNGDefinePtr define)
 {
-    if (define == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1691]) {
+      if ((define == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1691\n");
+      else
+        fprintf(stderr, "reached bug index 1691\n");
+    }
+    if ((!FIXREVERTER[1691] && (define == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((define->type == XML_RELAXNG_VALUE) && (define->attrs != NULL)) {
         xmlRelaxNGTypeLibraryPtr lib;
 
         lib = (xmlRelaxNGTypeLibraryPtr) define->data;
-        if ((lib != NULL) && (lib->freef != NULL))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1692]) {
+          fprintf(stderr, "reached bug index 1692\n");
+        }
+        if ((FIXREVERTER[1692] && (lib != (void *) 0 )) || (!FIXREVERTER[1692] && (lib != (void *) 0 && lib -> freef != (void *) 0 ))
+        #else
+        if (lib != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(lib -> freef != (void *) 0 ))
+              fprintf(stderr, "triggered bug index 1692\n");
+            #endif
             lib->freef(lib->data, (void *) define->attrs);
+            #ifdef FRCOV
+            }}
+            #endif
     }
     if ((define->data != NULL) && (define->type == XML_RELAXNG_INTERLEAVE))
         xmlRelaxNGFreePartition((xmlRelaxNGPartitionPtr) define->data);
@@ -1016,27 +1127,72 @@ xmlRelaxNGNewStates(xmlRelaxNGValidCtxtPtr ctxt, int size)
         ret->nbState = 0;
         return (ret);
     }
-    if (size < 16)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1693]) {
+      if ((size < 16 ) && !(0))
+        fprintf(stderr, "triggered bug index 1693\n");
+      else
+        fprintf(stderr, "reached bug index 1693\n");
+    }
+    if ((!FIXREVERTER[1693] && (size < 16 ))
+    #else
+    if (0
+    #endif
+    )
         size = 16;
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlRelaxNGStatesPtr) xmlMalloc(sizeof(xmlRelaxNGStates) +
                                           (size -
                                            1) *
                                           sizeof(xmlRelaxNGValidStatePtr));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1694]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1694\n");
+      else
+        fprintf(stderr, "reached bug index 1694\n");
+    }
+    if ((!FIXREVERTER[1694] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt, "allocating states\n");
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->nbState = 0;
     ret->maxState = size;
     ret->tabState = (xmlRelaxNGValidStatePtr *) xmlMalloc((size) *
                                                           sizeof
                                                           (xmlRelaxNGValidStatePtr));
-    if (ret->tabState == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1695]) {
+      if ((ret -> tabState == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1695\n");
+      else
+        fprintf(stderr, "reached bug index 1695\n");
+    }
+    if ((!FIXREVERTER[1695] && (ret -> tabState == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt, "allocating states\n");
         xmlFree(ret);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (ret);
 }
 
@@ -1056,9 +1212,24 @@ xmlRelaxNGAddStatesUniq(xmlRelaxNGValidCtxtPtr ctxt,
                         xmlRelaxNGStatesPtr states,
                         xmlRelaxNGValidStatePtr state)
 {
-    if (state == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1696]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1696\n");
+      else
+        fprintf(stderr, "reached bug index 1696\n");
+    }
+    if ((!FIXREVERTER[1696] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (states->nbState >= states->maxState) {
         xmlRelaxNGValidStatePtr *tmp;
         int size;
@@ -1068,10 +1239,25 @@ xmlRelaxNGAddStatesUniq(xmlRelaxNGValidCtxtPtr ctxt,
                                                      (size) *
                                                      sizeof
                                                      (xmlRelaxNGValidStatePtr));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1697]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1697\n");
+          else
+            fprintf(stderr, "reached bug index 1697\n");
+        }
+        if ((!FIXREVERTER[1697] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "adding states\n");
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         states->tabState = tmp;
         states->maxState = size;
     }
@@ -1096,9 +1282,24 @@ xmlRelaxNGAddStates(xmlRelaxNGValidCtxtPtr ctxt,
 {
     int i;
 
-    if (state == NULL || states == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1698]) {
+      if ((state == (void *) 0 || states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1698\n");
+      else
+        fprintf(stderr, "reached bug index 1698\n");
+    }
+    if ((!FIXREVERTER[1698] && (state == (void *) 0 || states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (states->nbState >= states->maxState) {
         xmlRelaxNGValidStatePtr *tmp;
         int size;
@@ -1108,10 +1309,25 @@ xmlRelaxNGAddStates(xmlRelaxNGValidCtxtPtr ctxt,
                                                      (size) *
                                                      sizeof
                                                      (xmlRelaxNGValidStatePtr));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1699]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1699\n");
+          else
+            fprintf(stderr, "reached bug index 1699\n");
+        }
+        if ((!FIXREVERTER[1699] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "adding states\n");
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         states->tabState = tmp;
         states->maxState = size;
     }
@@ -1136,8 +1352,23 @@ static void
 xmlRelaxNGFreeStates(xmlRelaxNGValidCtxtPtr ctxt,
                      xmlRelaxNGStatesPtr states)
 {
-    if (states == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1700]) {
+      if ((states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1700\n");
+      else
+        fprintf(stderr, "reached bug index 1700\n");
+    }
+    if ((!FIXREVERTER[1700] && (states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt != NULL) && (ctxt->freeStates == NULL)) {
         ctxt->freeStatesMax = 40;
         ctxt->freeStatesNr = 0;
@@ -1146,8 +1377,22 @@ xmlRelaxNGFreeStates(xmlRelaxNGValidCtxtPtr ctxt,
         if (ctxt->freeStates == NULL) {
             xmlRngVErrMemory(ctxt, "storing states\n");
         }
-    } else if ((ctxt != NULL)
-               && (ctxt->freeStatesNr >= ctxt->freeStatesMax)) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[1701]) {
+      fprintf(stderr, "reached bug index 1701\n");
+    }
+    if ((FIXREVERTER[1701] && (ctxt != (void *) 0 )) || (!FIXREVERTER[1701] && (ctxt != (void *) 0 && ctxt -> freeStatesNr >= ctxt -> freeStatesMax ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+                 
+               #ifdef FRCOV
+                 if (!(ctxt -> freeStatesNr >= ctxt -> freeStatesMax ))
+                   fprintf(stderr, "triggered bug index 1701\n");
+                 #endif
+               
         xmlRelaxNGStatesPtr *tmp;
 
         tmp = (xmlRelaxNGStatesPtr *) xmlRealloc(ctxt->freeStates,
@@ -1163,6 +1408,9 @@ xmlRelaxNGFreeStates(xmlRelaxNGValidCtxtPtr ctxt,
         ctxt->freeStates = tmp;
         ctxt->freeStatesMax *= 2;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt == NULL) || (ctxt->freeStates == NULL)) {
         xmlFree(states->tabState);
         xmlFree(states);
@@ -1191,8 +1439,23 @@ xmlRelaxNGNewValidState(xmlRelaxNGValidCtxtPtr ctxt, xmlNodePtr node)
 
     if (node == NULL) {
         root = xmlDocGetRootElement(ctxt->doc);
-        if (root == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1702]) {
+          if ((root == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1702\n");
+          else
+            fprintf(stderr, "reached bug index 1702\n");
+        }
+        if ((!FIXREVERTER[1702] && (root == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (NULL);
+            #ifdef FRCOV
+            }
+            #endif
     } else {
         attr = node->properties;
         while (attr != NULL) {
@@ -1210,10 +1473,25 @@ xmlRelaxNGNewValidState(xmlRelaxNGValidCtxtPtr ctxt, xmlNodePtr node)
         ret =
             (xmlRelaxNGValidStatePtr)
             xmlMalloc(sizeof(xmlRelaxNGValidState));
-        if (ret == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1703]) {
+          if ((ret == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1703\n");
+          else
+            fprintf(stderr, "reached bug index 1703\n");
+        }
+        if ((!FIXREVERTER[1703] && (ret == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "allocating states\n");
             return (NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
         memset(ret, 0, sizeof(xmlRelaxNGValidState));
     }
     ret->value = NULL;
@@ -1234,19 +1512,49 @@ xmlRelaxNGNewValidState(xmlRelaxNGValidCtxtPtr ctxt, xmlNodePtr node)
                 ret->maxAttrs = nbAttrs;
             ret->attrs = (xmlAttrPtr *) xmlMalloc(ret->maxAttrs *
                                                   sizeof(xmlAttrPtr));
-            if (ret->attrs == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1704]) {
+              if ((ret -> attrs == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1704\n");
+              else
+                fprintf(stderr, "reached bug index 1704\n");
+            }
+            if ((!FIXREVERTER[1704] && (ret -> attrs == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt, "allocating states\n");
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
         } else if (ret->maxAttrs < nbAttrs) {
             xmlAttrPtr *tmp;
 
             tmp = (xmlAttrPtr *) xmlRealloc(ret->attrs, nbAttrs *
                                             sizeof(xmlAttrPtr));
-            if (tmp == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1705]) {
+              if ((tmp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1705\n");
+              else
+                fprintf(stderr, "reached bug index 1705\n");
+            }
+            if ((!FIXREVERTER[1705] && (tmp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt, "allocating states\n");
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             ret->attrs = tmp;
             ret->maxAttrs = nbAttrs;
         }
@@ -1283,8 +1591,23 @@ xmlRelaxNGCopyValidState(xmlRelaxNGValidCtxtPtr ctxt,
     unsigned int maxAttrs;
     xmlAttrPtr *attrs;
 
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1706]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1706\n");
+      else
+        fprintf(stderr, "reached bug index 1706\n");
+    }
+    if ((!FIXREVERTER[1706] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->freeState != NULL) && (ctxt->freeState->nbState > 0)) {
         ctxt->freeState->nbState--;
         ret = ctxt->freeState->tabState[ctxt->freeState->nbState];
@@ -1292,10 +1615,25 @@ xmlRelaxNGCopyValidState(xmlRelaxNGValidCtxtPtr ctxt,
         ret =
             (xmlRelaxNGValidStatePtr)
             xmlMalloc(sizeof(xmlRelaxNGValidState));
-        if (ret == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1707]) {
+          if ((ret == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1707\n");
+          else
+            fprintf(stderr, "reached bug index 1707\n");
+        }
+        if ((!FIXREVERTER[1707] && (ret == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "allocating states\n");
             return (NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
         memset(ret, 0, sizeof(xmlRelaxNGValidState));
     }
     attrs = ret->attrs;
@@ -1308,21 +1646,51 @@ xmlRelaxNGCopyValidState(xmlRelaxNGValidCtxtPtr ctxt,
             ret->maxAttrs = state->maxAttrs;
             ret->attrs = (xmlAttrPtr *) xmlMalloc(ret->maxAttrs *
                                                   sizeof(xmlAttrPtr));
-            if (ret->attrs == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1708]) {
+              if ((ret -> attrs == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1708\n");
+              else
+                fprintf(stderr, "reached bug index 1708\n");
+            }
+            if ((!FIXREVERTER[1708] && (ret -> attrs == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt, "allocating states\n");
                 ret->nbAttrs = 0;
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
         } else if (ret->maxAttrs < state->nbAttrs) {
             xmlAttrPtr *tmp;
 
             tmp = (xmlAttrPtr *) xmlRealloc(ret->attrs, state->maxAttrs *
                                             sizeof(xmlAttrPtr));
-            if (tmp == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1709]) {
+              if ((tmp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1709\n");
+              else
+                fprintf(stderr, "reached bug index 1709\n");
+            }
+            if ((!FIXREVERTER[1709] && (tmp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt, "allocating states\n");
                 ret->nbAttrs = 0;
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             ret->maxAttrs = state->maxAttrs;
             ret->attrs = tmp;
         }
@@ -1349,18 +1717,63 @@ xmlRelaxNGEqualValidState(xmlRelaxNGValidCtxtPtr ctxt ATTRIBUTE_UNUSED,
 {
     int i;
 
-    if ((state1 == NULL) || (state2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1710]) {
+      if ((state1 == (void *) 0 || state2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1710\n");
+      else
+        fprintf(stderr, "reached bug index 1710\n");
+    }
+    if ((!FIXREVERTER[1710] && (state1 == (void *) 0 || state2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     if (state1 == state2)
         return (1);
     if (state1->node != state2->node)
         return (0);
     if (state1->seq != state2->seq)
         return (0);
-    if (state1->nbAttrLeft != state2->nbAttrLeft)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1711]) {
+      if ((state1 -> nbAttrLeft != state2 -> nbAttrLeft ) && !(0))
+        fprintf(stderr, "triggered bug index 1711\n");
+      else
+        fprintf(stderr, "reached bug index 1711\n");
+    }
+    if ((!FIXREVERTER[1711] && (state1 -> nbAttrLeft != state2 -> nbAttrLeft ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
-    if (state1->nbAttrs != state2->nbAttrs)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1712]) {
+      if ((state1 -> nbAttrs != state2 -> nbAttrs ) && !(0))
+        fprintf(stderr, "triggered bug index 1712\n");
+      else
+        fprintf(stderr, "reached bug index 1712\n");
+    }
+    if ((!FIXREVERTER[1712] && (state1 -> nbAttrs != state2 -> nbAttrs ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     if (state1->endvalue != state2->endvalue)
         return (0);
     if ((state1->value != state2->value) &&
@@ -1383,8 +1796,23 @@ static void
 xmlRelaxNGFreeValidState(xmlRelaxNGValidCtxtPtr ctxt,
                          xmlRelaxNGValidStatePtr state)
 {
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1713]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1713\n");
+      else
+        fprintf(stderr, "reached bug index 1713\n");
+    }
+    if ((!FIXREVERTER[1713] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((ctxt != NULL) && (ctxt->freeState == NULL)) {
         ctxt->freeState = xmlRelaxNGNewStates(ctxt, 40);
@@ -1790,10 +2218,25 @@ xmlRelaxNGValidErrorPush(xmlRelaxNGValidCtxtPtr ctxt,
             (xmlRelaxNGValidErrorPtr) xmlMalloc(ctxt->errMax *
                                                 sizeof
                                                 (xmlRelaxNGValidError));
-        if (ctxt->errTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1723]) {
+          if ((ctxt -> errTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1723\n");
+          else
+            fprintf(stderr, "reached bug index 1723\n");
+        }
+        if ((!FIXREVERTER[1723] && (ctxt -> errTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "pushing error\n");
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->err = NULL;
     }
     if (ctxt->errNr >= ctxt->errMax) {
@@ -1803,10 +2246,25 @@ xmlRelaxNGValidErrorPush(xmlRelaxNGValidCtxtPtr ctxt,
                                                  ctxt->errMax *
                                                  sizeof
                                                  (xmlRelaxNGValidError));
-        if (ctxt->errTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1724]) {
+          if ((ctxt -> errTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1724\n");
+          else
+            fprintf(stderr, "reached bug index 1724\n");
+        }
+        if ((!FIXREVERTER[1724] && (ctxt -> errTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "pushing error\n");
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->err = &ctxt->errTab[ctxt->errNr - 1];
     }
     if ((ctxt->err != NULL) && (ctxt->state != NULL) &&
@@ -1845,10 +2303,25 @@ xmlRelaxNGValidErrorPop(xmlRelaxNGValidCtxtPtr ctxt)
 {
     xmlRelaxNGValidErrorPtr cur;
 
-    if (ctxt->errNr <= 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1725]) {
+      if ((ctxt -> errNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1725\n");
+      else
+        fprintf(stderr, "reached bug index 1725\n");
+    }
+    if ((!FIXREVERTER[1725] && (ctxt -> errNr <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->err = NULL;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->errNr--;
     if (ctxt->errNr > 0)
         ctxt->err = &ctxt->errTab[ctxt->errNr - 1];
@@ -2105,10 +2578,40 @@ xmlRelaxNGGetErrorString(xmlRelaxNGValidErr err, const xmlChar * arg1,
     char msg[1000];
     xmlChar *result;
 
-    if (arg1 == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1733]) {
+      if ((arg1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1733\n");
+      else
+        fprintf(stderr, "reached bug index 1733\n");
+    }
+    if ((!FIXREVERTER[1733] && (arg1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         arg1 = BAD_CAST "";
-    if (arg2 == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1734]) {
+      if ((arg2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1734\n");
+      else
+        fprintf(stderr, "reached bug index 1734\n");
+    }
+    if ((!FIXREVERTER[1734] && (arg2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         arg2 = BAD_CAST "";
+        #ifdef FRCOV
+        }
+        #endif
 
     msg[0] = 0;
     switch (err) {
@@ -2261,11 +2764,41 @@ xmlRelaxNGShowValidError(xmlRelaxNGValidCtxtPtr ctxt,
     xmlGenericError(xmlGenericErrorContext, "Show error %d\n", err);
 #endif
     msg = xmlRelaxNGGetErrorString(err, arg1, arg2);
-    if (msg == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1735]) {
+      if ((msg == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1735\n");
+      else
+        fprintf(stderr, "reached bug index 1735\n");
+    }
+    if ((!FIXREVERTER[1735] && (msg == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-
-    if (ctxt->errNo == XML_RELAXNG_OK)
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1736]) {
+      if ((ctxt -> errNo == XML_RELAXNG_OK  ) && !(0))
+        fprintf(stderr, "triggered bug index 1736\n");
+      else
+        fprintf(stderr, "reached bug index 1736\n");
+    }
+    if ((!FIXREVERTER[1736] && (ctxt -> errNo == XML_RELAXNG_OK  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->errNo = err;
+        #ifdef FRCOV
+        }
+        #endif
     xmlRngVErr(ctxt, (child == NULL ? node : child), err,
                (const char *) msg, arg1, arg2);
     xmlFree(msg);
@@ -2301,8 +2834,23 @@ xmlRelaxNGPopErrors(xmlRelaxNGValidCtxtPtr ctxt, int level)
         }
     }
     ctxt->errNr = level;
-    if (ctxt->errNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1737]) {
+      if ((ctxt -> errNr <= 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1737\n");
+      else
+        fprintf(stderr, "reached bug index 1737\n");
+    }
+    if ((!FIXREVERTER[1737] && (ctxt -> errNr <= 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->err = NULL;
+        #ifdef FRCOV
+        }
+        #endif
 }
 
 /**
@@ -2366,8 +2914,23 @@ xmlRelaxNGAddValidError(xmlRelaxNGValidCtxtPtr ctxt,
                         xmlRelaxNGValidErr err, const xmlChar * arg1,
                         const xmlChar * arg2, int dup)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1738]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1738\n");
+      else
+        fprintf(stderr, "reached bug index 1738\n");
+    }
+    if ((!FIXREVERTER[1738] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->flags & FLAGS_NOERROR)
         return;
 
@@ -2430,13 +2993,43 @@ xmlRelaxNGSchemaTypeHave(void *data ATTRIBUTE_UNUSED, const xmlChar * type)
 {
     xmlSchemaTypePtr typ;
 
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1739]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1739\n");
+      else
+        fprintf(stderr, "reached bug index 1739\n");
+    }
+    if ((!FIXREVERTER[1739] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1740]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1740\n");
+      else
+        fprintf(stderr, "reached bug index 1740\n");
+    }
+    if ((!FIXREVERTER[1740] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     return (1);
 }
 
@@ -2461,13 +3054,43 @@ xmlRelaxNGSchemaTypeCheck(void *data ATTRIBUTE_UNUSED,
     xmlSchemaTypePtr typ;
     int ret;
 
-    if ((type == NULL) || (value == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1741]) {
+      if ((type == (void *) 0 || value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1741\n");
+      else
+        fprintf(stderr, "reached bug index 1741\n");
+    }
+    if ((!FIXREVERTER[1741] && (type == (void *) 0 || value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1742]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1742\n");
+      else
+        fprintf(stderr, "reached bug index 1742\n");
+    }
+    if ((!FIXREVERTER[1742] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     ret = xmlSchemaValPredefTypeNode(typ, value,
                                      (xmlSchemaValPtr *) result, node);
     if (ret == 2)               /* special ID error code */
@@ -2502,17 +3125,62 @@ xmlRelaxNGSchemaFacetCheck(void *data ATTRIBUTE_UNUSED,
     xmlSchemaTypePtr typ;
     int ret;
 
-    if ((type == NULL) || (strval == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1746]) {
+      if ((type == (void *) 0 || strval == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1746\n");
+      else
+        fprintf(stderr, "reached bug index 1746\n");
+    }
+    if ((!FIXREVERTER[1746] && (type == (void *) 0 || strval == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1747]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1747\n");
+      else
+        fprintf(stderr, "reached bug index 1747\n");
+    }
+    if ((!FIXREVERTER[1747] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     facet = xmlSchemaNewFacet();
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1748]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1748\n");
+      else
+        fprintf(stderr, "reached bug index 1748\n");
+    }
+    if ((!FIXREVERTER[1748] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (xmlStrEqual(facetname, BAD_CAST "minInclusive")) {
         facet->type = XML_SCHEMA_FACET_MININCLUSIVE;
@@ -2594,19 +3262,64 @@ xmlRelaxNGSchemaTypeCompare(void *data ATTRIBUTE_UNUSED,
     xmlSchemaTypePtr typ;
     xmlSchemaValPtr res1 = NULL, res2 = NULL;
 
-    if ((type == NULL) || (value1 == NULL) || (value2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1751]) {
+      if ((type == (void *) 0 || value1 == (void *) 0 || value2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1751\n");
+      else
+        fprintf(stderr, "reached bug index 1751\n");
+    }
+    if ((!FIXREVERTER[1751] && (type == (void *) 0 || value1 == (void *) 0 || value2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1752]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1752\n");
+      else
+        fprintf(stderr, "reached bug index 1752\n");
+    }
+    if ((!FIXREVERTER[1752] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (comp1 == NULL) {
         ret = xmlSchemaValPredefTypeNode(typ, value1, &res1, ctxt1);
         if (ret != 0)
             return (-1);
-        if (res1 == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1754]) {
+          if ((res1 == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1754\n");
+          else
+            fprintf(stderr, "reached bug index 1754\n");
+        }
+        if ((!FIXREVERTER[1754] && (res1 == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (-1);
+            #ifdef FRCOV
+            }
+            #endif
     } else {
         res1 = (xmlSchemaValPtr) comp1;
     }
@@ -2641,8 +3354,23 @@ static int
 xmlRelaxNGDefaultTypeHave(void *data ATTRIBUTE_UNUSED,
                           const xmlChar * type)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1757]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1757\n");
+      else
+        fprintf(stderr, "reached bug index 1757\n");
+    }
+    if ((!FIXREVERTER[1757] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (xmlStrEqual(type, BAD_CAST "string"))
         return (1);
     if (xmlStrEqual(type, BAD_CAST "token"))
@@ -2669,8 +3397,23 @@ xmlRelaxNGDefaultTypeCheck(void *data ATTRIBUTE_UNUSED,
                            void **result ATTRIBUTE_UNUSED,
                            xmlNodePtr node ATTRIBUTE_UNUSED)
 {
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1758]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1758\n");
+      else
+        fprintf(stderr, "reached bug index 1758\n");
+    }
+    if ((!FIXREVERTER[1758] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (xmlStrEqual(type, BAD_CAST "string"))
         return (1);
     if (xmlStrEqual(type, BAD_CAST "token")) {
@@ -2747,8 +3490,23 @@ xmlRelaxNGFreeTypeLibrary(void *payload,
                           const xmlChar * namespace ATTRIBUTE_UNUSED)
 {
     xmlRelaxNGTypeLibraryPtr lib = (xmlRelaxNGTypeLibraryPtr) payload;
-    if (lib == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1759]) {
+      if ((lib == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1759\n");
+      else
+        fprintf(stderr, "reached bug index 1759\n");
+    }
+    if ((!FIXREVERTER[1759] && (lib == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (lib->namespace != NULL)
         xmlFree((xmlChar *) lib->namespace);
     xmlFree(lib);
@@ -3461,8 +4219,23 @@ xmlRelaxNGIsNullable(xmlRelaxNGDefinePtr define)
 static int
 xmlRelaxNGIsBlank(xmlChar * str)
 {
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1781]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1781\n");
+      else
+        fprintf(stderr, "reached bug index 1781\n");
+    }
+    if ((!FIXREVERTER[1781] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
     while (*str != 0) {
         if (!(IS_BLANK_CH(*str)))
             return (0);
@@ -7968,32 +8741,111 @@ xmlRelaxNGValidateCompiledCallback(xmlRegExecCtxtPtr exec ATTRIBUTE_UNUSED,
     xmlGenericError(xmlGenericErrorContext,
                     "Compiled callback for: '%s'\n", token);
 #endif
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1910]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1910\n");
+      else
+        fprintf(stderr, "reached bug index 1910\n");
+    }
+    if ((!FIXREVERTER[1910] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         fprintf(stderr, "callback on %s missing context\n", token);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (define == NULL) {
         if (token[0] == '#')
             return;
         fprintf(stderr, "callback on %s missing define\n", token);
-        if ((ctxt != NULL) && (ctxt->errNo == XML_RELAXNG_OK))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1911]) {
+          fprintf(stderr, "reached bug index 1911\n");
+        }
+        if ((FIXREVERTER[1911] && (ctxt != (void *) 0 )) || (!FIXREVERTER[1911] && (ctxt != (void *) 0 && ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (ctxt != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> errNo == XML_RELAXNG_OK  ))
+              fprintf(stderr, "triggered bug index 1911\n");
+            #endif
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }}
+            #endif
         return;
     }
     if ((ctxt == NULL) || (define == NULL)) {
         fprintf(stderr, "callback on %s missing info\n", token);
-        if ((ctxt != NULL) && (ctxt->errNo == XML_RELAXNG_OK))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1912]) {
+          fprintf(stderr, "reached bug index 1912\n");
+        }
+        if ((FIXREVERTER[1912] && (ctxt != (void *) 0 )) || (!FIXREVERTER[1912] && (ctxt != (void *) 0 && ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (ctxt != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> errNo == XML_RELAXNG_OK  ))
+              fprintf(stderr, "triggered bug index 1912\n");
+            #endif
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }}
+            #endif
         return;
     } else if (define->type != XML_RELAXNG_ELEMENT) {
         fprintf(stderr, "callback on %s define is not element\n", token);
-        if (ctxt->errNo == XML_RELAXNG_OK)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1913]) {
+          if ((ctxt -> errNo == XML_RELAXNG_OK  ) && !(0))
+            fprintf(stderr, "triggered bug index 1913\n");
+          else
+            fprintf(stderr, "reached bug index 1913\n");
+        }
+        if ((!FIXREVERTER[1913] && (ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }
+            #endif
         return;
     }
     ret = xmlRelaxNGValidateDefinition(ctxt, define);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1914]) {
+      if ((ret != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1914\n");
+      else
+        fprintf(stderr, "reached bug index 1914\n");
+    }
+    if ((!FIXREVERTER[1914] && (ret != 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->perr = ret;
+        #ifdef FRCOV
+        }
+        #endif
 }
 
 /**
@@ -8015,8 +8867,23 @@ xmlRelaxNGValidateCompiledContent(xmlRelaxNGValidCtxtPtr ctxt,
     int ret = 0;
     int oldperr;
 
-    if ((ctxt == NULL) || (regexp == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1915]) {
+      if ((ctxt == (void *) 0 || regexp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1915\n");
+      else
+        fprintf(stderr, "reached bug index 1915\n");
+    }
+    if ((!FIXREVERTER[1915] && (ctxt == (void *) 0 || regexp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     oldperr = ctxt->perr;
     exec = xmlRegNewExecCtxt(regexp,
                              xmlRelaxNGValidateCompiledCallback, ctxt);
@@ -8076,9 +8943,27 @@ xmlRelaxNGValidateCompiledContent(xmlRelaxNGValidCtxtPtr ctxt,
      * There might be content model errors outside of the pure
      * regexp validation, e.g. for attribute values.
      */
-    if ((ret == 0) && (ctxt->perr != 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1917]) {
+      fprintf(stderr, "reached bug index 1917\n");
+    }
+    if ((FIXREVERTER[1917] && (ret == 0 )) || (!FIXREVERTER[1917] && (ret == 0 && ctxt -> perr != 0 ))
+    #else
+    if (ret == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> perr != 0 ))
+        fprintf(stderr, "triggered bug index 1917\n");
+      #endif
+    
         ret = ctxt->perr;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->perr = oldperr;
     return (ret);
 }
@@ -8111,10 +8996,25 @@ xmlRelaxNGElemPush(xmlRelaxNGValidCtxtPtr ctxt, xmlRegExecCtxtPtr exec)
         ctxt->elemTab = (xmlRegExecCtxtPtr *) xmlMalloc(ctxt->elemMax *
                                                         sizeof
                                                         (xmlRegExecCtxtPtr));
-        if (ctxt->elemTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1918]) {
+          if ((ctxt -> elemTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1918\n");
+          else
+            fprintf(stderr, "reached bug index 1918\n");
+        }
+        if ((!FIXREVERTER[1918] && (ctxt -> elemTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "validating\n");
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     if (ctxt->elemNr >= ctxt->elemMax) {
         ctxt->elemMax *= 2;
@@ -8122,10 +9022,25 @@ xmlRelaxNGElemPush(xmlRelaxNGValidCtxtPtr ctxt, xmlRegExecCtxtPtr exec)
                                                          ctxt->elemMax *
                                                          sizeof
                                                          (xmlRegExecCtxtPtr));
-        if (ctxt->elemTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1919]) {
+          if ((ctxt -> elemTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1919\n");
+          else
+            fprintf(stderr, "reached bug index 1919\n");
+        }
+        if ((!FIXREVERTER[1919] && (ctxt -> elemTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "validating\n");
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     ctxt->elemTab[ctxt->elemNr++] = exec;
     ctxt->elem = exec;
@@ -8145,8 +9060,23 @@ xmlRelaxNGElemPop(xmlRelaxNGValidCtxtPtr ctxt)
 {
     xmlRegExecCtxtPtr ret;
 
-    if (ctxt->elemNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1920]) {
+      if ((ctxt -> elemNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1920\n");
+      else
+        fprintf(stderr, "reached bug index 1920\n");
+    }
+    if ((!FIXREVERTER[1920] && (ctxt -> elemNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->elemNr--;
     ret = ctxt->elemTab[ctxt->elemNr];
     ctxt->elemTab[ctxt->elemNr] = NULL;
@@ -8183,31 +9113,95 @@ xmlRelaxNGValidateProgressiveCallback(xmlRegExecCtxtPtr exec
     xmlGenericError(xmlGenericErrorContext,
                     "Progressive callback for: '%s'\n", token);
 #endif
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1921]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1921\n");
+      else
+        fprintf(stderr, "reached bug index 1921\n");
+    }
+    if ((!FIXREVERTER[1921] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         fprintf(stderr, "callback on %s missing context\n", token);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     node = ctxt->pnode;
     ctxt->pstate = 1;
     if (define == NULL) {
         if (token[0] == '#')
             return;
         fprintf(stderr, "callback on %s missing define\n", token);
-        if ((ctxt != NULL) && (ctxt->errNo == XML_RELAXNG_OK))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1922]) {
+          fprintf(stderr, "reached bug index 1922\n");
+        }
+        if ((FIXREVERTER[1922] && (ctxt != (void *) 0 )) || (!FIXREVERTER[1922] && (ctxt != (void *) 0 && ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (ctxt != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> errNo == XML_RELAXNG_OK  ))
+              fprintf(stderr, "triggered bug index 1922\n");
+            #endif
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }}
+            #endif
         ctxt->pstate = -1;
         return;
     }
     if ((ctxt == NULL) || (define == NULL)) {
         fprintf(stderr, "callback on %s missing info\n", token);
-        if ((ctxt != NULL) && (ctxt->errNo == XML_RELAXNG_OK))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1923]) {
+          fprintf(stderr, "reached bug index 1923\n");
+        }
+        if ((FIXREVERTER[1923] && (ctxt != (void *) 0 )) || (!FIXREVERTER[1923] && (ctxt != (void *) 0 && ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (ctxt != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> errNo == XML_RELAXNG_OK  ))
+              fprintf(stderr, "triggered bug index 1923\n");
+            #endif
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }}
+            #endif
         ctxt->pstate = -1;
         return;
     } else if (define->type != XML_RELAXNG_ELEMENT) {
         fprintf(stderr, "callback on %s define is not element\n", token);
-        if (ctxt->errNo == XML_RELAXNG_OK)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1924]) {
+          if ((ctxt -> errNo == XML_RELAXNG_OK  ) && !(0))
+            fprintf(stderr, "triggered bug index 1924\n");
+          else
+            fprintf(stderr, "reached bug index 1924\n");
+        }
+        if ((!FIXREVERTER[1924] && (ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }
+            #endif
         ctxt->pstate = -1;
         return;
     }
@@ -8218,7 +9212,19 @@ xmlRelaxNGValidateProgressiveCallback(xmlRegExecCtxtPtr exec
         ctxt->pstate = -1;
         return;
     }
-    if (define->contModel == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1925]) {
+      if ((define -> contModel == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1925\n");
+      else
+        fprintf(stderr, "reached bug index 1925\n");
+    }
+    if ((!FIXREVERTER[1925] && (define -> contModel == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
          * this node cannot be validated in a streamable fashion
          */
@@ -8231,22 +9237,55 @@ xmlRelaxNGValidateProgressiveCallback(xmlRegExecCtxtPtr exec
         ctxt->pdef = define;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     exec = xmlRegNewExecCtxt(define->contModel,
                              xmlRelaxNGValidateProgressiveCallback, ctxt);
-    if (exec == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1926]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1926\n");
+      else
+        fprintf(stderr, "reached bug index 1926\n");
+    }
+    if ((!FIXREVERTER[1926] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->pstate = -1;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlRelaxNGElemPush(ctxt, exec);
 
     /*
      * Validate the attributes part of the content.
      */
     state = xmlRelaxNGNewValidState(ctxt, node);
-    if (state == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1927]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1927\n");
+      else
+        fprintf(stderr, "reached bug index 1927\n");
+    }
+    if ((!FIXREVERTER[1927] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->pstate = -1;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     oldstate = ctxt->state;
     ctxt->state = state;
     if (define->attrs != NULL) {
@@ -8320,8 +9359,23 @@ xmlRelaxNGValidatePushElement(xmlRelaxNGValidCtxtPtr ctxt,
 {
     int ret = 1;
 
-    if ((ctxt == NULL) || (elem == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1928]) {
+      if ((ctxt == (void *) 0 || elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1928\n");
+      else
+        fprintf(stderr, "reached bug index 1928\n");
+    }
+    if ((!FIXREVERTER[1928] && (ctxt == (void *) 0 || elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
 #ifdef DEBUG_PROGRESSIVE
     xmlGenericError(xmlGenericErrorContext, "PushElem %s\n", elem->name);
@@ -8333,26 +9387,86 @@ xmlRelaxNGValidatePushElement(xmlRelaxNGValidCtxtPtr ctxt,
         xmlRelaxNGDefinePtr define;
 
         schema = ctxt->schema;
-        if (schema == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1929]) {
+          if ((schema == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1929\n");
+          else
+            fprintf(stderr, "reached bug index 1929\n");
+        }
+        if ((!FIXREVERTER[1929] && (schema == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             VALID_ERR(XML_RELAXNG_ERR_NOGRAMMAR);
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         grammar = schema->topgrammar;
-        if ((grammar == NULL) || (grammar->start == NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1930]) {
+          if ((grammar == (void *) 0 || grammar -> start == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1930\n");
+          else
+            fprintf(stderr, "reached bug index 1930\n");
+        }
+        if ((!FIXREVERTER[1930] && (grammar == (void *) 0 || grammar -> start == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             VALID_ERR(XML_RELAXNG_ERR_NOGRAMMAR);
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         define = grammar->start;
-        if (define->contModel == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1931]) {
+          if ((define -> contModel == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1931\n");
+          else
+            fprintf(stderr, "reached bug index 1931\n");
+        }
+        if ((!FIXREVERTER[1931] && (define -> contModel == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             ctxt->pdef = define;
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         exec = xmlRegNewExecCtxt(define->contModel,
                                  xmlRelaxNGValidateProgressiveCallback,
                                  ctxt);
-        if (exec == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1932]) {
+          if ((exec == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1932\n");
+          else
+            fprintf(stderr, "reached bug index 1932\n");
+        }
+        if ((!FIXREVERTER[1932] && (exec == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         xmlRelaxNGElemPush(ctxt, exec);
     }
     ctxt->pnode = elem;
@@ -8398,8 +9512,23 @@ xmlRelaxNGValidatePushCData(xmlRelaxNGValidCtxtPtr ctxt,
 {
     int ret = 1;
 
-    if ((ctxt == NULL) || (ctxt->elem == NULL) || (data == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1933]) {
+      if ((ctxt == (void *) 0 || ctxt -> elem == (void *) 0 || data == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1933\n");
+      else
+        fprintf(stderr, "reached bug index 1933\n");
+    }
+    if ((!FIXREVERTER[1933] && (ctxt == (void *) 0 || ctxt -> elem == (void *) 0 || data == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
 #ifdef DEBUG_PROGRESSIVE
     xmlGenericError(xmlGenericErrorContext, "CDATA %s %d\n", data, len);
@@ -8443,8 +9572,23 @@ xmlRelaxNGValidatePopElement(xmlRelaxNGValidCtxtPtr ctxt,
     int ret;
     xmlRegExecCtxtPtr exec;
 
-    if ((ctxt == NULL) || (ctxt->elem == NULL) || (elem == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1935]) {
+      if ((ctxt == (void *) 0 || ctxt -> elem == (void *) 0 || elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1935\n");
+      else
+        fprintf(stderr, "reached bug index 1935\n");
+    }
+    if ((!FIXREVERTER[1935] && (ctxt == (void *) 0 || ctxt -> elem == (void *) 0 || elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 #ifdef DEBUG_PROGRESSIVE
     xmlGenericError(xmlGenericErrorContext, "PopElem %s\n", elem->name);
 #endif
@@ -8492,15 +9636,45 @@ xmlRelaxNGValidateFullElement(xmlRelaxNGValidCtxtPtr ctxt,
     int ret;
     xmlRelaxNGValidStatePtr state;
 
-    if ((ctxt == NULL) || (ctxt->pdef == NULL) || (elem == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1936]) {
+      if ((ctxt == (void *) 0 || ctxt -> pdef == (void *) 0 || elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1936\n");
+      else
+        fprintf(stderr, "reached bug index 1936\n");
+    }
+    if ((!FIXREVERTER[1936] && (ctxt == (void *) 0 || ctxt -> pdef == (void *) 0 || elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 #ifdef DEBUG_PROGRESSIVE
     xmlGenericError(xmlGenericErrorContext, "FullElem %s\n", elem->name);
 #endif
     state = xmlRelaxNGNewValidState(ctxt, elem->parent);
-    if (state == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1937]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1937\n");
+      else
+        fprintf(stderr, "reached bug index 1937\n");
+    }
+    if ((!FIXREVERTER[1937] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     state->seq = elem;
     ctxt->state = state;
     ctxt->errNo = XML_RELAXNG_OK;
@@ -8574,18 +9748,48 @@ xmlRelaxNGNormalize(xmlRelaxNGValidCtxtPtr ctxt, const xmlChar * str)
     const xmlChar *tmp;
     int len;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1938]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1938\n");
+      else
+        fprintf(stderr, "reached bug index 1938\n");
+    }
+    if ((!FIXREVERTER[1938] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     tmp = str;
     while (*tmp != 0)
         tmp++;
     len = tmp - str;
 
     ret = (xmlChar *) xmlMallocAtomic((len + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1939]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1939\n");
+      else
+        fprintf(stderr, "reached bug index 1939\n");
+    }
+    if ((!FIXREVERTER[1939] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt, "validating\n");
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     p = ret;
     while (IS_BLANK_CH(*str))
         str++;
@@ -8624,9 +9828,24 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
     void *result = NULL;
     xmlRelaxNGDefinePtr cur;
 
-    if ((define == NULL) || (define->data == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1940]) {
+      if ((define == (void *) 0 || define -> data == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1940\n");
+      else
+        fprintf(stderr, "reached bug index 1940\n");
+    }
+    if ((!FIXREVERTER[1940] && (define == (void *) 0 || define -> data == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     lib = (xmlRelaxNGTypeLibraryPtr) define->data;
     if (lib->check != NULL) {
         if ((define->attrs != NULL) &&
@@ -8640,8 +9859,25 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
         ret = -1;
     if (ret < 0) {
         VALID_ERR2(XML_RELAXNG_ERR_TYPE, define->name);
-        if ((result != NULL) && (lib != NULL) && (lib->freef != NULL))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1941]) {
+          fprintf(stderr, "reached bug index 1941\n");
+        }
+        if ((FIXREVERTER[1941] && (result != (void *) 0 && lib != (void *) 0 )) || (!FIXREVERTER[1941] && (result != (void *) 0 && lib != (void *) 0 && lib -> freef != (void *) 0 ))
+        #else
+        if (result != (void *) 0 && lib != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(lib -> freef != (void *) 0 ))
+              fprintf(stderr, "triggered bug index 1941\n");
+            #endif
             lib->freef(lib->data, result);
+            #ifdef FRCOV
+            }}
+            #endif
         return (-1);
     } else if (ret == 1) {
         ret = 0;
@@ -8656,12 +9892,42 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
         if (lib->facet != NULL) {
             tmp = lib->facet(lib->data, define->name, cur->name,
                              cur->value, value, result);
-            if (tmp != 0)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1942]) {
+              if ((tmp != 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1942\n");
+              else
+                fprintf(stderr, "reached bug index 1942\n");
+            }
+            if ((!FIXREVERTER[1942] && (tmp != 0 ))
+            #else
+            if (0
+            #endif
+            )
                 ret = -1;
+                #ifdef FRCOV
+                }
+                #endif
         }
         cur = cur->next;
     }
-    if ((ret == 0) && (define->content != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1943]) {
+      fprintf(stderr, "reached bug index 1943\n");
+    }
+    if ((FIXREVERTER[1943] && (ret == 0 )) || (!FIXREVERTER[1943] && (ret == 0 && define -> content != (void *) 0 ))
+    #else
+    if (ret == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(define -> content != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1943\n");
+      #endif
+    
         const xmlChar *oldvalue, *oldendvalue;
 
         oldvalue = ctxt->state->value;
@@ -8672,8 +9938,28 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
         ctxt->state->value = (xmlChar *) oldvalue;
         ctxt->state->endvalue = (xmlChar *) oldendvalue;
     }
-    if ((result != NULL) && (lib != NULL) && (lib->freef != NULL))
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1944]) {
+      fprintf(stderr, "reached bug index 1944\n");
+    }
+    if ((FIXREVERTER[1944] && (result != (void *) 0 && lib != (void *) 0 )) || (!FIXREVERTER[1944] && (result != (void *) 0 && lib != (void *) 0 && lib -> freef != (void *) 0 ))
+    #else
+    if (result != (void *) 0 && lib != (void *) 0 
+    #endif
+    )
+        
+        #ifdef FRCOV
+        {if (!(lib -> freef != (void *) 0 ))
+          fprintf(stderr, "triggered bug index 1944\n");
+        #endif
         lib->freef(lib->data, result);
+        #ifdef FRCOV
+        }}
+        #endif
     return (ret);
 }
 
@@ -8724,8 +10010,23 @@ xmlRelaxNGValidateValueList(xmlRelaxNGValidCtxtPtr ctxt,
 
     while (defines != NULL) {
         ret = xmlRelaxNGValidateValue(ctxt, defines);
-        if (ret != 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1945]) {
+          if ((ret != 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1945\n");
+          else
+            fprintf(stderr, "reached bug index 1945\n");
+        }
+        if ((!FIXREVERTER[1945] && (ret != 0 ))
+        #else
+        if (0
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
         defines = defines->next;
     }
     return (ret);
@@ -8825,9 +10126,24 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                 oldvalue = ctxt->state->value;
                 while (list != NULL) {
                     ret = xmlRelaxNGValidateValue(ctxt, list);
-                    if (ret == 0) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1946]) {
+                      if ((ret == 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1946\n");
+                      else
+                        fprintf(stderr, "reached bug index 1946\n");
+                    }
+                    if ((!FIXREVERTER[1946] && (ret == 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ctxt->state->value = oldvalue;
                     list = list->next;
                 }
@@ -8856,10 +10172,25 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                 if (val == NULL) {
                     val = xmlStrdup(BAD_CAST "");
                 }
-                if (val == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1947]) {
+                  if ((val == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1947\n");
+                  else
+                    fprintf(stderr, "reached bug index 1947\n");
+                }
+                if ((!FIXREVERTER[1947] && (val == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     VALID_ERR(XML_RELAXNG_ERR_NOSTATE);
                     return (-1);
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 cur = val;
                 while (*cur != 0) {
                     if (IS_BLANK_CH(*cur)) {
@@ -8890,7 +10221,19 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                     if (ctxt->state->value == ctxt->state->endvalue)
                         ctxt->state->value = NULL;
                     ret = xmlRelaxNGValidateValue(ctxt, list);
-                    if (ret != 0) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1948]) {
+                      if ((ret != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1948\n");
+                      else
+                        fprintf(stderr, "reached bug index 1948\n");
+                    }
+                    if ((!FIXREVERTER[1948] && (ret != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 #ifdef DEBUG_LIST
                         xmlGenericError(xmlGenericErrorContext,
                                         "Failed to validate value: '%s' with %d rule\n",
@@ -8898,6 +10241,9 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
 #endif
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
 #ifdef DEBUG_LIST
                     nb_values++;
 #endif
@@ -8917,9 +10263,24 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
             }
         case XML_RELAXNG_ONEORMORE:
             ret = xmlRelaxNGValidateValueList(ctxt, define->content);
-            if (ret != 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1949]) {
+              if ((ret != 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1949\n");
+              else
+                fprintf(stderr, "reached bug index 1949\n");
+            }
+            if ((!FIXREVERTER[1949] && (ret != 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
             /* Falls through. */
         case XML_RELAXNG_ZEROORMORE:{
                 xmlChar *cur, *temp;
@@ -8938,11 +10299,26 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                     temp = cur;
                     ret =
                         xmlRelaxNGValidateValueList(ctxt, define->content);
-                    if (ret != 0) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1950]) {
+                      if ((ret != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1950\n");
+                      else
+                        fprintf(stderr, "reached bug index 1950\n");
+                    }
+                    if ((!FIXREVERTER[1950] && (ret != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         ctxt->state->value = temp;
                         ret = 0;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     cur = ctxt->state->value;
                 }
                 ctxt->flags = oldflags;
@@ -9037,8 +10413,23 @@ xmlRelaxNGValidateValueContent(xmlRelaxNGValidCtxtPtr ctxt,
 
     while (defines != NULL) {
         ret = xmlRelaxNGValidateValue(ctxt, defines);
-        if (ret != 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1951]) {
+          if ((ret != 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1951\n");
+          else
+            fprintf(stderr, "reached bug index 1951\n");
+        }
+        if ((!FIXREVERTER[1951] && (ret != 0 ))
+        #else
+        if (0
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
         defines = defines->next;
     }
     return (ret);
@@ -9074,8 +10465,23 @@ xmlRelaxNGAttributeMatch(xmlRelaxNGValidCtxtPtr ctxt,
                 return (0);
         }
     }
-    if (define->nameClass == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1952]) {
+      if ((define -> nameClass == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1952\n");
+      else
+        fprintf(stderr, "reached bug index 1952\n");
+    }
+    if ((!FIXREVERTER[1952] && (define -> nameClass == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
     define = define->nameClass;
     if (define->type == XML_RELAXNG_EXCEPT) {
         xmlRelaxNGDefinePtr list;
@@ -9280,8 +10686,23 @@ xmlRelaxNGNodeMatchesList(xmlNodePtr node, xmlRelaxNGDefinePtr * list)
     xmlRelaxNGDefinePtr cur;
     int i = 0, tmp;
 
-    if ((node == NULL) || (list == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1958]) {
+      if ((node == (void *) 0 || list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1958\n");
+      else
+        fprintf(stderr, "reached bug index 1958\n");
+    }
+    if ((!FIXREVERTER[1958] && (node == (void *) 0 || list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = list[i++];
     while (cur != NULL) {
@@ -9370,16 +10791,46 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
      * pertaining to each group
      */
     list = (xmlNodePtr *) xmlMalloc(nbgroups * sizeof(xmlNodePtr));
-    if (list == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1960]) {
+      if ((list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1960\n");
+      else
+        fprintf(stderr, "reached bug index 1960\n");
+    }
+    if ((!FIXREVERTER[1960] && (list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt, "validating\n");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(list, 0, nbgroups * sizeof(xmlNodePtr));
     lasts = (xmlNodePtr *) xmlMalloc(nbgroups * sizeof(xmlNodePtr));
-    if (lasts == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1961]) {
+      if ((lasts == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1961\n");
+      else
+        fprintf(stderr, "reached bug index 1961\n");
+    }
+    if ((!FIXREVERTER[1961] && (lasts == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt, "validating\n");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(lasts, 0, nbgroups * sizeof(xmlNodePtr));
 
     /*
@@ -9403,18 +10854,48 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
                 if (cur->ns != NULL) {
                     tmp = xmlHashLookup2(partitions->triage, cur->name,
                                          cur->ns->href);
-                    if (tmp == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1962]) {
+                      if ((tmp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1962\n");
+                      else
+                        fprintf(stderr, "reached bug index 1962\n");
+                    }
+                    if ((!FIXREVERTER[1962] && (tmp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         tmp = xmlHashLookup2(partitions->triage,
                                              BAD_CAST "#any",
                                              cur->ns->href);
+                                             #ifdef FRCOV
+                                             }
+                                             #endif
                 } else
                     tmp =
                         xmlHashLookup2(partitions->triage, cur->name,
                                        NULL);
-                if (tmp == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1963]) {
+                  if ((tmp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1963\n");
+                  else
+                    fprintf(stderr, "reached bug index 1963\n");
+                }
+                if ((!FIXREVERTER[1963] && (tmp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     tmp =
                         xmlHashLookup2(partitions->triage, BAD_CAST "#any",
                                        NULL);
+                                       #ifdef FRCOV
+                                       }
+                                       #endif
             }
 
             if (tmp == NULL) {
@@ -9430,8 +10911,23 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
         } else {
             for (i = 0; i < nbgroups; i++) {
                 group = partitions->groups[i];
-                if (group == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1964]) {
+                  if ((group == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1964\n");
+                  else
+                    fprintf(stderr, "reached bug index 1964\n");
+                }
+                if ((!FIXREVERTER[1964] && (group == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     continue;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 if (xmlRelaxNGNodeMatchesList(cur, group->defs))
                     break;
             }
@@ -9439,9 +10935,24 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
         /*
          * We break as soon as an element not matched is found
          */
-        if (i >= nbgroups) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1965]) {
+          if ((i >= nbgroups ) && !(0))
+            fprintf(stderr, "triggered bug index 1965\n");
+          else
+            fprintf(stderr, "reached bug index 1965\n");
+        }
+        if ((!FIXREVERTER[1965] && (i >= nbgroups ))
+        #else
+        if (0
+        #endif
+        ) {
             break;
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (lasts[i] != NULL) {
             lasts[i]->next = cur;
             lasts[i] = cur;
@@ -9464,10 +10975,25 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
     oldstate = ctxt->state;
     for (i = 0; i < nbgroups; i++) {
         ctxt->state = xmlRelaxNGCopyValidState(ctxt, oldstate);
-	if (ctxt->state == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1966]) {
+	  if ((ctxt -> state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1966\n");
+	  else
+	    fprintf(stderr, "reached bug index 1966\n");
+	}
+	if ((!FIXREVERTER[1966] && (ctxt -> state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ret = -1;
 	    break;
 	}
+	#ifdef FRCOV
+	}
+	#endif
         group = partitions->groups[i];
         if (lasts[i] != NULL) {
             last = lasts[i]->next;
@@ -9475,8 +11001,23 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
         }
         ctxt->state->seq = list[i];
         ret = xmlRelaxNGValidateDefinition(ctxt, group->rule);
-        if (ret != 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1967]) {
+          if ((ret != 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1967\n");
+          else
+            fprintf(stderr, "reached bug index 1967\n");
+        }
+        if ((!FIXREVERTER[1967] && (ret != 0 ))
+        #else
+        if (0
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
         if (ctxt->state != NULL) {
             cur = ctxt->state->seq;
             cur = xmlRelaxNGSkipIgnored(ctxt, cur);
@@ -9624,16 +11165,46 @@ xmlRelaxNGValidateDefinitionList(xmlRelaxNGValidCtxtPtr ctxt,
     int ret = 0, res;
 
 
-    if (defines == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1969]) {
+      if ((defines == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1969\n");
+      else
+        fprintf(stderr, "reached bug index 1969\n");
+    }
+    if ((!FIXREVERTER[1969] && (defines == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         VALID_ERR2(XML_RELAXNG_ERR_INTERNAL,
                    BAD_CAST "NULL definition list");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (defines != NULL) {
         if ((ctxt->state != NULL) || (ctxt->states != NULL)) {
             res = xmlRelaxNGValidateDefinition(ctxt, defines);
-            if (res < 0)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1970]) {
+              if ((res < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1970\n");
+              else
+                fprintf(stderr, "reached bug index 1970\n");
+            }
+            if ((!FIXREVERTER[1970] && (res < 0 ))
+            #else
+            if (0
+            #endif
+            )
                 ret = -1;
+                #ifdef FRCOV
+                }
+                #endif
         } else {
             VALID_ERR(XML_RELAXNG_ERR_NOSTATE);
             return (-1);
@@ -9686,8 +11257,23 @@ xmlRelaxNGElementMatch(xmlRelaxNGValidCtxtPtr ctxt,
         return (0);
     }
 
-    if (define->nameClass == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1971]) {
+      if ((define -> nameClass == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1971\n");
+      else
+        fprintf(stderr, "reached bug index 1971\n");
+    }
+    if ((!FIXREVERTER[1971] && (define -> nameClass == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
 
     define = define->nameClass;
     if (define->type == XML_RELAXNG_EXCEPT) {
@@ -9701,16 +11287,76 @@ xmlRelaxNGElementMatch(xmlRelaxNGValidCtxtPtr ctxt,
         list = define->content;
         while (list != NULL) {
             ret = xmlRelaxNGElementMatch(ctxt, list, elem);
-            if (ret == 1) {
-                if (ctxt != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1973]) {
+              if ((ret == 1 ) && !(0))
+                fprintf(stderr, "triggered bug index 1973\n");
+              else
+                fprintf(stderr, "reached bug index 1973\n");
+            }
+            if ((!FIXREVERTER[1973] && (ret == 1 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1972]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 1972\n");
+                  else
+                    fprintf(stderr, "reached bug index 1972\n");
+                }
+                if ((!FIXREVERTER[1972] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (0);
             }
-            if (ret < 0) {
-                if (ctxt != NULL)
+            #ifdef FRCOV
+            }
+            #endif
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1975]) {
+              if ((ret < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1975\n");
+              else
+                fprintf(stderr, "reached bug index 1975\n");
+            }
+            if ((!FIXREVERTER[1975] && (ret < 0 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1974]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 1974\n");
+                  else
+                    fprintf(stderr, "reached bug index 1974\n");
+                }
+                if ((!FIXREVERTER[1974] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             list = list->next;
         }
         ret = 1;
@@ -9728,16 +11374,76 @@ xmlRelaxNGElementMatch(xmlRelaxNGValidCtxtPtr ctxt,
         list = define->nameClass;
         while (list != NULL) {
             ret = xmlRelaxNGElementMatch(ctxt, list, elem);
-            if (ret == 1) {
-                if (ctxt != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1977]) {
+              if ((ret == 1 ) && !(0))
+                fprintf(stderr, "triggered bug index 1977\n");
+              else
+                fprintf(stderr, "reached bug index 1977\n");
+            }
+            if ((!FIXREVERTER[1977] && (ret == 1 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1976]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 1976\n");
+                  else
+                    fprintf(stderr, "reached bug index 1976\n");
+                }
+                if ((!FIXREVERTER[1976] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (1);
             }
-            if (ret < 0) {
-                if (ctxt != NULL)
+            #ifdef FRCOV
+            }
+            #endif
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1979]) {
+              if ((ret < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1979\n");
+              else
+                fprintf(stderr, "reached bug index 1979\n");
+            }
+            if ((!FIXREVERTER[1979] && (ret < 0 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1978]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 1978\n");
+                  else
+                    fprintf(stderr, "reached bug index 1978\n");
+                }
+                if ((!FIXREVERTER[1978] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             list = list->next;
         }
         if (ctxt != NULL) {
@@ -9784,8 +11490,23 @@ xmlRelaxNGBestState(xmlRelaxNGValidCtxtPtr ctxt)
 
     for (i = 0; i < ctxt->states->nbState; i++) {
         state = ctxt->states->tabState[i];
-        if (state == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1980]) {
+          if ((state == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1980\n");
+          else
+            fprintf(stderr, "reached bug index 1980\n");
+        }
+        if ((!FIXREVERTER[1980] && (state == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             continue;
+            #ifdef FRCOV
+            }
+            #endif
         if (state->seq != NULL) {
             if ((best == -1) || (value > 100000)) {
                 value = 100000;
@@ -9883,10 +11604,25 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
     int ret = 0, i, tmp, oldflags, errNr;
     xmlRelaxNGValidStatePtr oldstate = NULL, state;
 
-    if (define == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1981]) {
+      if ((define == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1981\n");
+      else
+        fprintf(stderr, "reached bug index 1981\n");
+    }
+    if ((!FIXREVERTER[1981] && (define == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         VALID_ERR(XML_RELAXNG_ERR_NODEFINE);
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (ctxt->state != NULL) {
         node = ctxt->state->seq;
@@ -9964,12 +11700,27 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
             }
 
             ret = xmlRelaxNGElementMatch(ctxt, define, node);
-            if (ret <= 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1982]) {
+              if ((ret <= 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1982\n");
+              else
+                fprintf(stderr, "reached bug index 1982\n");
+            }
+            if ((!FIXREVERTER[1982] && (ret <= 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 ret = -1;
                 if ((ctxt->flags & FLAGS_IGNORABLE) == 0)
                     xmlRelaxNGDumpValidError(ctxt);
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
             ret = 0;
             if (ctxt->errNr != 0) {
                 if (ctxt->errNr > errNr)
@@ -9990,12 +11741,27 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 ctxt->flags -= FLAGS_MIXED_CONTENT;
             }
             state = xmlRelaxNGNewValidState(ctxt, node);
-            if (state == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1983]) {
+              if ((state == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1983\n");
+              else
+                fprintf(stderr, "reached bug index 1983\n");
+            }
+            if ((!FIXREVERTER[1983] && (state == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 ret = -1;
                 if ((ctxt->flags & FLAGS_IGNORABLE) == 0)
                     xmlRelaxNGDumpValidError(ctxt);
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             oldstate = ctxt->state;
             ctxt->state = state;
@@ -10028,8 +11794,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                                 "Validating content of '%s' : %d\n",
                                 define->name, tmp);
 #endif
-                if (tmp != 0)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1984]) {
+                  if ((tmp != 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1984\n");
+                  else
+                    fprintf(stderr, "reached bug index 1984\n");
+                }
+                if ((!FIXREVERTER[1984] && (tmp != 0 ))
+                #else
+                if (0
+                #endif
+                )
                     ret = -1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 if (ctxt->states != NULL) {
                     tmp = -1;
@@ -10065,8 +11846,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                     state = ctxt->state;
 		    if (ctxt->state != NULL)
 			ctxt->state->seq = nseq;
-                    if (ret == 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1985]) {
+                      if ((ret == 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1985\n");
+                      else
+                        fprintf(stderr, "reached bug index 1985\n");
+                    }
+                    if ((!FIXREVERTER[1985] && (ret == 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         ret = xmlRelaxNGValidateElementEnd(ctxt, 1);
+                        #ifdef FRCOV
+                        }
+                        #endif
                     xmlRelaxNGFreeValidState(ctxt, state);
                 }
             } else {
@@ -10119,8 +11915,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                         ret = -1;
                 } else {
                     state = ctxt->state;
-                    if (ret == 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1986]) {
+                      if ((ret == 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1986\n");
+                      else
+                        fprintf(stderr, "reached bug index 1986\n");
+                    }
+                    if ((!FIXREVERTER[1986] && (ret == 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         ret = xmlRelaxNGValidateElementEnd(ctxt, 1);
+                        #ifdef FRCOV
+                        }
+                        #endif
                     xmlRelaxNGFreeValidState(ctxt, state);
                 }
             }
@@ -10129,8 +11940,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
             }
             ctxt->flags = oldflags;
             ctxt->state = oldstate;
-            if (oldstate != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1987]) {
+              if ((oldstate != (void *) 0  ) && !(0))
+                fprintf(stderr, "triggered bug index 1987\n");
+              else
+                fprintf(stderr, "reached bug index 1987\n");
+            }
+            if ((!FIXREVERTER[1987] && (oldstate != (void *) 0  ))
+            #else
+            if (0
+            #endif
+            )
                 oldstate->seq = xmlRelaxNGSkipIgnored(ctxt, node->next);
+                #ifdef FRCOV
+                }
+                #endif
             if (ret != 0) {
                 if ((ctxt->flags & FLAGS_IGNORABLE) == 0) {
                     xmlRelaxNGDumpValidError(ctxt);
@@ -10204,9 +12030,24 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
         case XML_RELAXNG_ONEORMORE:
             errNr = ctxt->errNr;
             ret = xmlRelaxNGValidateDefinitionList(ctxt, define->content);
-            if (ret != 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1988]) {
+              if ((ret != 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1988\n");
+              else
+                fprintf(stderr, "reached bug index 1988\n");
+            }
+            if ((!FIXREVERTER[1988] && (ret != 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
             if (ctxt->errNr > errNr)
                 xmlRelaxNGPopErrors(ctxt, errNr);
             /* Falls through. */
@@ -10217,10 +12058,25 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
 
                 errNr = ctxt->errNr;
                 res = xmlRelaxNGNewStates(ctxt, 1);
-                if (res == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1989]) {
+                  if ((res == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1989\n");
+                  else
+                    fprintf(stderr, "reached bug index 1989\n");
+                }
+                if ((!FIXREVERTER[1989] && (res == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     ret = -1;
                     break;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 /*
                  * All the input states are also exit states
                  */
@@ -10325,10 +12181,25 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                                 xmlRelaxNGNewStates(ctxt,
                                                     res->nbState - base);
 			        states = ctxt->states;
-				if (states == NULL) {
+				
+				#ifdef FRCOV
+				{if (FIXREVERTER[1994]) {
+				  if ((states == (void *) 0 ) && !(0))
+				    fprintf(stderr, "triggered bug index 1994\n");
+				  else
+				    fprintf(stderr, "reached bug index 1994\n");
+				}
+				if ((!FIXREVERTER[1994] && (states == (void *) 0 ))
+				#else
+				if (0
+				#endif
+				) {
 				    progress = 0;
 				    break;
 				}
+				#ifdef FRCOV
+				}
+				#endif
                             }
                             states->nbState = 0;
                             for (i = base; i < res->nbState; i++)
@@ -10383,17 +12254,47 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                         if (node->ns != NULL) {
                             list = xmlHashLookup2(triage, node->name,
                                                   node->ns->href);
-                            if (list == NULL)
+                            
+                            #ifdef FRCOV
+                            {if (FIXREVERTER[1995]) {
+                              if ((list == (void *) 0 ) && !(0))
+                                fprintf(stderr, "triggered bug index 1995\n");
+                              else
+                                fprintf(stderr, "reached bug index 1995\n");
+                            }
+                            if ((!FIXREVERTER[1995] && (list == (void *) 0 ))
+                            #else
+                            if (0
+                            #endif
+                            )
                                 list =
                                     xmlHashLookup2(triage, BAD_CAST "#any",
                                                    node->ns->href);
+                                                   #ifdef FRCOV
+                                                   }
+                                                   #endif
                         } else
                             list =
                                 xmlHashLookup2(triage, node->name, NULL);
-                        if (list == NULL)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1996]) {
+                          if ((list == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1996\n");
+                          else
+                            fprintf(stderr, "reached bug index 1996\n");
+                        }
+                        if ((!FIXREVERTER[1996] && (list == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             list =
                                 xmlHashLookup2(triage, BAD_CAST "#any",
                                                NULL);
+                                               #ifdef FRCOV
+                                               }
+                                               #endif
                     }
                     if (list == NULL) {
                         ret = -1;
@@ -10495,11 +12396,26 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 }
                 if (content == NULL) {
                     content = xmlStrdup(BAD_CAST "");
-                    if (content == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1997]) {
+                      if ((content == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1997\n");
+                      else
+                        fprintf(stderr, "reached bug index 1997\n");
+                    }
+                    if ((!FIXREVERTER[1997] && (content == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlRngVErrMemory(ctxt, "validating\n");
                         ret = -1;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 ret = xmlRelaxNGValidateDatatype(ctxt, content, define,
                                                  ctxt->state->seq);
@@ -10538,11 +12454,26 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 }
                 if (content == NULL) {
                     content = xmlStrdup(BAD_CAST "");
-                    if (content == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1998]) {
+                      if ((content == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1998\n");
+                      else
+                        fprintf(stderr, "reached bug index 1998\n");
+                    }
+                    if ((!FIXREVERTER[1998] && (content == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlRngVErrMemory(ctxt, "validating\n");
                         ret = -1;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 oldvalue = ctxt->state->value;
                 ctxt->state->value = content;
@@ -10589,11 +12520,26 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 }
                 if (content == NULL) {
                     content = xmlStrdup(BAD_CAST "");
-                    if (content == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1999]) {
+                      if ((content == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1999\n");
+                      else
+                        fprintf(stderr, "reached bug index 1999\n");
+                    }
+                    if ((!FIXREVERTER[1999] && (content == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlRngVErrMemory(ctxt, "validating\n");
                         ret = -1;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 len = xmlStrlen(content);
                 oldvalue = ctxt->state->value;
@@ -10605,9 +12551,27 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 ctxt->state->endvalue = oldendvalue;
                 if (ret == -1) {
                     VALID_ERR(XML_RELAXNG_ERR_LIST);
-                } else if ((ret == 0) && (node != NULL)) {
+                } else 
+                #ifdef FRCOV
+                {if (FIXREVERTER[2000]) {
+                  fprintf(stderr, "reached bug index 2000\n");
+                }
+                if ((FIXREVERTER[2000] && (ret == 0 )) || (!FIXREVERTER[2000] && (ret == 0 && node != (void *) 0 ))
+                #else
+                if (ret == 0 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(node != (void *) 0 ))
+                    fprintf(stderr, "triggered bug index 2000\n");
+                  #endif
+                
                     ctxt->state->seq = node->next;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 if (content != NULL)
                     xmlFree(content);
                 break;
@@ -10652,10 +12616,28 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
     /*
      * We should NOT have both ctxt->state and ctxt->states
      */
-    if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2001]) {
+      fprintf(stderr, "reached bug index 2001\n");
+    }
+    if ((FIXREVERTER[2001] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[2001] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+    #else
+    if (ctxt -> state != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> states != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2001\n");
+      #endif
+    
         TODO xmlRelaxNGFreeValidState(ctxt, ctxt->state);
         ctxt->state = NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((ctxt->states == NULL) || (ctxt->states->nbState == 1)) {
         if (ctxt->states != NULL) {
@@ -10664,10 +12646,28 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
             ctxt->states = NULL;
         }
         ret = xmlRelaxNGValidateState(ctxt, define);
-        if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2002]) {
+          fprintf(stderr, "reached bug index 2002\n");
+        }
+        if ((FIXREVERTER[2002] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[2002] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+        #else
+        if (ctxt -> state != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(ctxt -> states != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 2002\n");
+          #endif
+        
             TODO xmlRelaxNGFreeValidState(ctxt, ctxt->state);
             ctxt->state = NULL;
         }
+        #ifdef FRCOV
+        }
+        #endif
         if ((ctxt->states != NULL) && (ctxt->states->nbState == 1)) {
             ctxt->state = ctxt->states->tabState[0];
             xmlRelaxNGFreeStates(ctxt, ctxt->states);
@@ -10689,10 +12689,28 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
         /*
          * We should NOT have both ctxt->state and ctxt->states
          */
-        if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2003]) {
+          fprintf(stderr, "reached bug index 2003\n");
+        }
+        if ((FIXREVERTER[2003] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[2003] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+        #else
+        if (ctxt -> state != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(ctxt -> states != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 2003\n");
+          #endif
+        
             TODO xmlRelaxNGFreeValidState(ctxt, ctxt->state);
             ctxt->state = NULL;
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (ret == 0) {
             if (ctxt->states == NULL) {
                 if (res != NULL) {
@@ -10755,10 +12773,28 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
             ctxt->states = NULL;
         }
     }
-    if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2004]) {
+      fprintf(stderr, "reached bug index 2004\n");
+    }
+    if ((FIXREVERTER[2004] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[2004] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+    #else
+    if (ctxt -> state != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> states != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2004\n");
+      #endif
+    
         TODO xmlRelaxNGFreeValidState(ctxt, ctxt->state);
         ctxt->state = NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (ret);
 }
 
@@ -10962,8 +12998,23 @@ xmlRelaxNGFreeValidCtxt(xmlRelaxNGValidCtxtPtr ctxt)
 {
     int k;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2012]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2012\n");
+      else
+        fprintf(stderr, "reached bug index 2012\n");
+    }
+    if ((!FIXREVERTER[2012] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->states != NULL)
         xmlRelaxNGFreeStates(NULL, ctxt->states);
     if (ctxt->freeState != NULL) {
diff --git a/result/HTML/53867.html b/result/HTML/53867.html
old mode 100644
new mode 100755
diff --git a/result/HTML/53867.html.err b/result/HTML/53867.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/53867.html.sax b/result/HTML/53867.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/758518-entity.html b/result/HTML/758518-entity.html
old mode 100644
new mode 100755
diff --git a/result/HTML/758518-entity.html.err b/result/HTML/758518-entity.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/758518-entity.html.sax b/result/HTML/758518-entity.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/758518-tag.html b/result/HTML/758518-tag.html
old mode 100644
new mode 100755
diff --git a/result/HTML/758518-tag.html.err b/result/HTML/758518-tag.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/758518-tag.html.sax b/result/HTML/758518-tag.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/758605.html b/result/HTML/758605.html
old mode 100644
new mode 100755
diff --git a/result/HTML/758605.html.err b/result/HTML/758605.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/758605.html.sax b/result/HTML/758605.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/758606.html b/result/HTML/758606.html
old mode 100644
new mode 100755
diff --git a/result/HTML/758606.html.err b/result/HTML/758606.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/758606.html.sax b/result/HTML/758606.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/758606_2.html b/result/HTML/758606_2.html
old mode 100644
new mode 100755
diff --git a/result/HTML/758606_2.html.err b/result/HTML/758606_2.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/758606_2.html.sax b/result/HTML/758606_2.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/Down.html b/result/HTML/Down.html
old mode 100644
new mode 100755
diff --git a/result/HTML/Down.html.err b/result/HTML/Down.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/Down.html.sax b/result/HTML/Down.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/attrents.html b/result/HTML/attrents.html
old mode 100644
new mode 100755
diff --git a/result/HTML/attrents.html.err b/result/HTML/attrents.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/attrents.html.sax b/result/HTML/attrents.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/autoclose.html b/result/HTML/autoclose.html
old mode 100644
new mode 100755
diff --git a/result/HTML/autoclose.html.err b/result/HTML/autoclose.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/autoclose.html.sax b/result/HTML/autoclose.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/autoclose2.html b/result/HTML/autoclose2.html
old mode 100644
new mode 100755
diff --git a/result/HTML/autoclose2.html.err b/result/HTML/autoclose2.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/autoclose2.html.sax b/result/HTML/autoclose2.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/autoclose3.html b/result/HTML/autoclose3.html
old mode 100644
new mode 100755
diff --git a/result/HTML/autoclose3.html.err b/result/HTML/autoclose3.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/autoclose3.html.sax b/result/HTML/autoclose3.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/cf_128.html b/result/HTML/cf_128.html
old mode 100644
new mode 100755
diff --git a/result/HTML/cf_128.html.err b/result/HTML/cf_128.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/cf_128.html.sax b/result/HTML/cf_128.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/doc2.htm b/result/HTML/doc2.htm
old mode 100644
new mode 100755
diff --git a/result/HTML/doc2.htm.err b/result/HTML/doc2.htm.err
old mode 100644
new mode 100755
diff --git a/result/HTML/doc2.htm.sax b/result/HTML/doc2.htm.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/doc3.htm b/result/HTML/doc3.htm
old mode 100644
new mode 100755
diff --git a/result/HTML/doc3.htm.err b/result/HTML/doc3.htm.err
old mode 100644
new mode 100755
diff --git a/result/HTML/doc3.htm.sax b/result/HTML/doc3.htm.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/entities.html b/result/HTML/entities.html
old mode 100644
new mode 100755
diff --git a/result/HTML/entities.html.err b/result/HTML/entities.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/entities.html.sax b/result/HTML/entities.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/entities2.html b/result/HTML/entities2.html
old mode 100644
new mode 100755
diff --git a/result/HTML/entities2.html.err b/result/HTML/entities2.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/entities2.html.sax b/result/HTML/entities2.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/fp40.htm b/result/HTML/fp40.htm
old mode 100644
new mode 100755
diff --git a/result/HTML/fp40.htm.err b/result/HTML/fp40.htm.err
old mode 100644
new mode 100755
diff --git a/result/HTML/fp40.htm.sax b/result/HTML/fp40.htm.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/html5_enc.html b/result/HTML/html5_enc.html
old mode 100644
new mode 100755
diff --git a/result/HTML/html5_enc.html.err b/result/HTML/html5_enc.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/html5_enc.html.sax b/result/HTML/html5_enc.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/liclose.html b/result/HTML/liclose.html
old mode 100644
new mode 100755
diff --git a/result/HTML/liclose.html.err b/result/HTML/liclose.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/liclose.html.sax b/result/HTML/liclose.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/lt.html b/result/HTML/lt.html
old mode 100644
new mode 100755
diff --git a/result/HTML/lt.html.err b/result/HTML/lt.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/lt.html.sax b/result/HTML/lt.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/noscript.html b/result/HTML/noscript.html
old mode 100644
new mode 100755
diff --git a/result/HTML/noscript.html.err b/result/HTML/noscript.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/noscript.html.sax b/result/HTML/noscript.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/pre.html b/result/HTML/pre.html
old mode 100644
new mode 100755
diff --git a/result/HTML/pre.html.err b/result/HTML/pre.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/pre.html.sax b/result/HTML/pre.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/python.html b/result/HTML/python.html
old mode 100644
new mode 100755
diff --git a/result/HTML/python.html.err b/result/HTML/python.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/python.html.sax b/result/HTML/python.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/reg1.html b/result/HTML/reg1.html
old mode 100644
new mode 100755
diff --git a/result/HTML/reg1.html.err b/result/HTML/reg1.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/reg1.html.sax b/result/HTML/reg1.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/reg2.html b/result/HTML/reg2.html
old mode 100644
new mode 100755
diff --git a/result/HTML/reg2.html.err b/result/HTML/reg2.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/reg2.html.sax b/result/HTML/reg2.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/reg3.html b/result/HTML/reg3.html
old mode 100644
new mode 100755
diff --git a/result/HTML/reg3.html.err b/result/HTML/reg3.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/reg3.html.sax b/result/HTML/reg3.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/reg4.html b/result/HTML/reg4.html
old mode 100644
new mode 100755
diff --git a/result/HTML/reg4.html.err b/result/HTML/reg4.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/reg4.html.sax b/result/HTML/reg4.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/repeat.html b/result/HTML/repeat.html
old mode 100644
new mode 100755
diff --git a/result/HTML/repeat.html.err b/result/HTML/repeat.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/repeat.html.sax b/result/HTML/repeat.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/script.html b/result/HTML/script.html
old mode 100644
new mode 100755
diff --git a/result/HTML/script.html.err b/result/HTML/script.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/script.html.sax b/result/HTML/script.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/script2.html b/result/HTML/script2.html
old mode 100644
new mode 100755
diff --git a/result/HTML/script2.html.err b/result/HTML/script2.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/script2.html.sax b/result/HTML/script2.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/test2.html b/result/HTML/test2.html
old mode 100644
new mode 100755
diff --git a/result/HTML/test2.html.err b/result/HTML/test2.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/test2.html.sax b/result/HTML/test2.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/test3.html b/result/HTML/test3.html
old mode 100644
new mode 100755
diff --git a/result/HTML/test3.html.err b/result/HTML/test3.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/test3.html.sax b/result/HTML/test3.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/utf8bug.html b/result/HTML/utf8bug.html
old mode 100644
new mode 100755
diff --git a/result/HTML/utf8bug.html.err b/result/HTML/utf8bug.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/utf8bug.html.sax b/result/HTML/utf8bug.html.sax
old mode 100644
new mode 100755
diff --git a/result/HTML/wired.html b/result/HTML/wired.html
old mode 100644
new mode 100755
diff --git a/result/HTML/wired.html.err b/result/HTML/wired.html.err
old mode 100644
new mode 100755
diff --git a/result/HTML/wired.html.sax b/result/HTML/wired.html.sax
old mode 100644
new mode 100755
diff --git a/result/SVG/4rects.xml b/result/SVG/4rects.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/a-valid.xml b/result/SVG/a-valid.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/a-wf.xml b/result/SVG/a-wf.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/bike-errors.xml b/result/SVG/bike-errors.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/bike.xml b/result/SVG/bike.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/circle.xml b/result/SVG/circle.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/defs.xml b/result/SVG/defs.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/desc.xml b/result/SVG/desc.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/ellipse.xml b/result/SVG/ellipse.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/flower2.xml b/result/SVG/flower2.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/gradient.xml b/result/SVG/gradient.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/group01.xml b/result/SVG/group01.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/group02.xml b/result/SVG/group02.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/group03.xml b/result/SVG/group03.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/image-valid.xml b/result/SVG/image-valid.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/image-wf.xml b/result/SVG/image-wf.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/lin-gradient.xml b/result/SVG/lin-gradient.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/marker.xml b/result/SVG/marker.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/mask.xml b/result/SVG/mask.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/mathswitch.xml b/result/SVG/mathswitch.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/parentns.xml b/result/SVG/parentns.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/path01.xml b/result/SVG/path01.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/path02.xml b/result/SVG/path02.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/patternfill.xml b/result/SVG/patternfill.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/polyline.xml b/result/SVG/polyline.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/private.xml b/result/SVG/private.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/rad-gradient.xml b/result/SVG/rad-gradient.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/rectangle.xml b/result/SVG/rectangle.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/richdesc.xml b/result/SVG/richdesc.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/script.xml b/result/SVG/script.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/structure01.xml b/result/SVG/structure01.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/style.xml b/result/SVG/style.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/switch.xml b/result/SVG/switch.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/symbol-use.xml b/result/SVG/symbol-use.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/template.xml b/result/SVG/template.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/text01.xml b/result/SVG/text01.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/text02.xml b/result/SVG/text02.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/text03.xml b/result/SVG/text03.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/toap01.xml b/result/SVG/toap01.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/toap02.xml b/result/SVG/toap02.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/transform.xml b/result/SVG/transform.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/trivial.xml b/result/SVG/trivial.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/twin-gradients.xml b/result/SVG/twin-gradients.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/v-template.xml b/result/SVG/v-template.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/viewport-nest.xml b/result/SVG/viewport-nest.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/viewport-transform.xml b/result/SVG/viewport-transform.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/viewport.xml b/result/SVG/viewport.xml
old mode 100644
new mode 100755
diff --git a/result/SVG/wf-template.xml b/result/SVG/wf-template.xml
old mode 100644
new mode 100755
diff --git a/result/URI/smith.uri b/result/URI/smith.uri
old mode 100644
new mode 100755
diff --git a/result/URI/uri.data b/result/URI/uri.data
old mode 100644
new mode 100755
diff --git a/result/VC/AttributeDefaultLegal b/result/VC/AttributeDefaultLegal
old mode 100644
new mode 100755
diff --git a/result/VC/AttributeDefaultLegal.rdr b/result/VC/AttributeDefaultLegal.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/AttributeNmtokens b/result/VC/AttributeNmtokens
old mode 100644
new mode 100755
diff --git a/result/VC/AttributeNmtokens.rdr b/result/VC/AttributeNmtokens.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/DuplicateType b/result/VC/DuplicateType
old mode 100644
new mode 100755
diff --git a/result/VC/DuplicateType.rdr b/result/VC/DuplicateType.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid b/result/VC/ElementValid
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid.rdr b/result/VC/ElementValid.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid2 b/result/VC/ElementValid2
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid2.rdr b/result/VC/ElementValid2.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid3 b/result/VC/ElementValid3
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid3.rdr b/result/VC/ElementValid3.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid4 b/result/VC/ElementValid4
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid4.rdr b/result/VC/ElementValid4.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid5 b/result/VC/ElementValid5
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid5.rdr b/result/VC/ElementValid5.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid6 b/result/VC/ElementValid6
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid6.rdr b/result/VC/ElementValid6.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid7 b/result/VC/ElementValid7
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid7.rdr b/result/VC/ElementValid7.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid8 b/result/VC/ElementValid8
old mode 100644
new mode 100755
diff --git a/result/VC/ElementValid8.rdr b/result/VC/ElementValid8.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/Enumeration b/result/VC/Enumeration
old mode 100644
new mode 100755
diff --git a/result/VC/Enumeration.rdr b/result/VC/Enumeration.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/NS1 b/result/VC/NS1
old mode 100644
new mode 100755
diff --git a/result/VC/NS1.rdr b/result/VC/NS1.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/NS2 b/result/VC/NS2
old mode 100644
new mode 100755
diff --git a/result/VC/NS2.rdr b/result/VC/NS2.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/NS3 b/result/VC/NS3
old mode 100644
new mode 100755
diff --git a/result/VC/NS3.rdr b/result/VC/NS3.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/OneID b/result/VC/OneID
old mode 100644
new mode 100755
diff --git a/result/VC/OneID.rdr b/result/VC/OneID.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/OneID2 b/result/VC/OneID2
old mode 100644
new mode 100755
diff --git a/result/VC/OneID2.rdr b/result/VC/OneID2.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/OneID3 b/result/VC/OneID3
old mode 100644
new mode 100755
diff --git a/result/VC/OneID3.rdr b/result/VC/OneID3.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/PENesting b/result/VC/PENesting
old mode 100644
new mode 100755
diff --git a/result/VC/PENesting.rdr b/result/VC/PENesting.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/PENesting2 b/result/VC/PENesting2
old mode 100644
new mode 100755
diff --git a/result/VC/PENesting2.rdr b/result/VC/PENesting2.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/UniqueElementTypeDeclaration b/result/VC/UniqueElementTypeDeclaration
old mode 100644
new mode 100755
diff --git a/result/VC/UniqueElementTypeDeclaration.rdr b/result/VC/UniqueElementTypeDeclaration.rdr
old mode 100644
new mode 100755
diff --git a/result/VC/UniqueElementTypeDeclaration2 b/result/VC/UniqueElementTypeDeclaration2
old mode 100644
new mode 100755
diff --git a/result/VC/UniqueElementTypeDeclaration2.rdr b/result/VC/UniqueElementTypeDeclaration2.rdr
old mode 100644
new mode 100755
diff --git a/result/XInclude/docids.xml b/result/XInclude/docids.xml
old mode 100644
new mode 100755
diff --git a/result/XInclude/docids.xml.err b/result/XInclude/docids.xml.err
old mode 100644
new mode 100755
diff --git a/result/XInclude/docids.xml.rdr b/result/XInclude/docids.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/XInclude/fallback.xml b/result/XInclude/fallback.xml
old mode 100644
new mode 100755
diff --git a/result/XInclude/fallback.xml.err b/result/XInclude/fallback.xml.err
old mode 100644
new mode 100755
diff --git a/result/XInclude/fallback.xml.rdr b/result/XInclude/fallback.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/XInclude/fallback2.xml b/result/XInclude/fallback2.xml
old mode 100644
new mode 100755
diff --git a/result/XInclude/fallback2.xml.err b/result/XInclude/fallback2.xml.err
old mode 100644
new mode 100755
diff --git a/result/XInclude/fallback2.xml.rdr b/result/XInclude/fallback2.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/XInclude/include.xml b/result/XInclude/include.xml
old mode 100644
new mode 100755
diff --git a/result/XInclude/include.xml.err b/result/XInclude/include.xml.err
old mode 100644
new mode 100755
diff --git a/result/XInclude/include.xml.rdr b/result/XInclude/include.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/XInclude/nodes.xml b/result/XInclude/nodes.xml
old mode 100644
new mode 100755
diff --git a/result/XInclude/nodes.xml.err b/result/XInclude/nodes.xml.err
old mode 100644
new mode 100755
diff --git a/result/XInclude/nodes.xml.rdr b/result/XInclude/nodes.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/XInclude/nodes2.xml b/result/XInclude/nodes2.xml
old mode 100644
new mode 100755
diff --git a/result/XInclude/nodes2.xml.err b/result/XInclude/nodes2.xml.err
old mode 100644
new mode 100755
diff --git a/result/XInclude/nodes2.xml.rdr b/result/XInclude/nodes2.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/XInclude/nodes3.xml b/result/XInclude/nodes3.xml
old mode 100644
new mode 100755
diff --git a/result/XInclude/nodes3.xml.err b/result/XInclude/nodes3.xml.err
old mode 100644
new mode 100755
diff --git a/result/XInclude/nodes3.xml.rdr b/result/XInclude/nodes3.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/XInclude/recursive.xml b/result/XInclude/recursive.xml
old mode 100644
new mode 100755
diff --git a/result/XInclude/recursive.xml.err b/result/XInclude/recursive.xml.err
old mode 100644
new mode 100755
diff --git a/result/XInclude/recursive.xml.rdr b/result/XInclude/recursive.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/XInclude/tstencoding.xml b/result/XInclude/tstencoding.xml
old mode 100644
new mode 100755
diff --git a/result/XInclude/tstencoding.xml.err b/result/XInclude/tstencoding.xml.err
old mode 100644
new mode 100755
diff --git a/result/XInclude/tstencoding.xml.rdr b/result/XInclude/tstencoding.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/XInclude/txtinclude.xml b/result/XInclude/txtinclude.xml
old mode 100644
new mode 100755
diff --git a/result/XInclude/txtinclude.xml.err b/result/XInclude/txtinclude.xml.err
old mode 100644
new mode 100755
diff --git a/result/XInclude/txtinclude.xml.rdr b/result/XInclude/txtinclude.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/XPath/expr/base b/result/XPath/expr/base
old mode 100644
new mode 100755
diff --git a/result/XPath/expr/compare b/result/XPath/expr/compare
old mode 100644
new mode 100755
diff --git a/result/XPath/expr/equality b/result/XPath/expr/equality
old mode 100644
new mode 100755
diff --git a/result/XPath/expr/floats b/result/XPath/expr/floats
old mode 100644
new mode 100755
diff --git a/result/XPath/expr/functions b/result/XPath/expr/functions
old mode 100644
new mode 100755
diff --git a/result/XPath/expr/strings b/result/XPath/expr/strings
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/chaptersbase b/result/XPath/tests/chaptersbase
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/chaptersprefol b/result/XPath/tests/chaptersprefol
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/idsimple b/result/XPath/tests/idsimple
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/langsimple b/result/XPath/tests/langsimple
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/mixedpat b/result/XPath/tests/mixedpat
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/nodespat b/result/XPath/tests/nodespat
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/nssimple b/result/XPath/tests/nssimple
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/simpleabbr b/result/XPath/tests/simpleabbr
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/simplebase b/result/XPath/tests/simplebase
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/strbase b/result/XPath/tests/strbase
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/usr1check b/result/XPath/tests/usr1check
old mode 100644
new mode 100755
diff --git a/result/XPath/tests/vidbase b/result/XPath/tests/vidbase
old mode 100644
new mode 100755
diff --git a/result/XPath/xptr/chapterschildseq b/result/XPath/xptr/chapterschildseq
old mode 100644
new mode 100755
diff --git a/result/XPath/xptr/chaptersparts b/result/XPath/xptr/chaptersparts
old mode 100644
new mode 100755
diff --git a/result/XPath/xptr/chaptersrange b/result/XPath/xptr/chaptersrange
old mode 100644
new mode 100755
diff --git a/result/XPath/xptr/strpoint b/result/XPath/xptr/strpoint
old mode 100644
new mode 100755
diff --git a/result/XPath/xptr/strrange b/result/XPath/xptr/strrange
old mode 100644
new mode 100755
diff --git a/result/XPath/xptr/strrange2 b/result/XPath/xptr/strrange2
old mode 100644
new mode 100755
diff --git a/result/XPath/xptr/strrange3 b/result/XPath/xptr/strrange3
old mode 100644
new mode 100755
diff --git a/result/XPath/xptr/vidbase b/result/XPath/xptr/vidbase
old mode 100644
new mode 100755
diff --git a/result/XPath/xptr/vidchildseq b/result/XPath/xptr/vidchildseq
old mode 100644
new mode 100755
diff --git a/result/XPath/xptr/viderror b/result/XPath/xptr/viderror
old mode 100644
new mode 100755
diff --git a/result/XPath/xptr/vidparts b/result/XPath/xptr/vidparts
old mode 100644
new mode 100755
diff --git a/result/att1 b/result/att1
old mode 100644
new mode 100755
diff --git a/result/att1.rde b/result/att1.rde
old mode 100644
new mode 100755
diff --git a/result/att1.rdr b/result/att1.rdr
old mode 100644
new mode 100755
diff --git a/result/att1.sax b/result/att1.sax
old mode 100644
new mode 100755
diff --git a/result/att1.sax2 b/result/att1.sax2
old mode 100644
new mode 100755
diff --git a/result/att10 b/result/att10
old mode 100644
new mode 100755
diff --git a/result/att10.rde b/result/att10.rde
old mode 100644
new mode 100755
diff --git a/result/att10.rdr b/result/att10.rdr
old mode 100644
new mode 100755
diff --git a/result/att10.sax b/result/att10.sax
old mode 100644
new mode 100755
diff --git a/result/att10.sax2 b/result/att10.sax2
old mode 100644
new mode 100755
diff --git a/result/att11 b/result/att11
old mode 100644
new mode 100755
diff --git a/result/att11.rde b/result/att11.rde
old mode 100644
new mode 100755
diff --git a/result/att11.rdr b/result/att11.rdr
old mode 100644
new mode 100755
diff --git a/result/att11.sax b/result/att11.sax
old mode 100644
new mode 100755
diff --git a/result/att11.sax2 b/result/att11.sax2
old mode 100644
new mode 100755
diff --git a/result/att2 b/result/att2
old mode 100644
new mode 100755
diff --git a/result/att2.rde b/result/att2.rde
old mode 100644
new mode 100755
diff --git a/result/att2.rdr b/result/att2.rdr
old mode 100644
new mode 100755
diff --git a/result/att2.sax b/result/att2.sax
old mode 100644
new mode 100755
diff --git a/result/att2.sax2 b/result/att2.sax2
old mode 100644
new mode 100755
diff --git a/result/att3 b/result/att3
old mode 100644
new mode 100755
diff --git a/result/att3.rde b/result/att3.rde
old mode 100644
new mode 100755
diff --git a/result/att3.rdr b/result/att3.rdr
old mode 100644
new mode 100755
diff --git a/result/att3.sax b/result/att3.sax
old mode 100644
new mode 100755
diff --git a/result/att3.sax2 b/result/att3.sax2
old mode 100644
new mode 100755
diff --git a/result/att4 b/result/att4
old mode 100644
new mode 100755
diff --git a/result/att4.rde b/result/att4.rde
old mode 100644
new mode 100755
diff --git a/result/att4.rdr b/result/att4.rdr
old mode 100644
new mode 100755
diff --git a/result/att4.sax b/result/att4.sax
old mode 100644
new mode 100755
diff --git a/result/att4.sax2 b/result/att4.sax2
old mode 100644
new mode 100755
diff --git a/result/att5 b/result/att5
old mode 100644
new mode 100755
diff --git a/result/att5.rde b/result/att5.rde
old mode 100644
new mode 100755
diff --git a/result/att5.rdr b/result/att5.rdr
old mode 100644
new mode 100755
diff --git a/result/att5.sax b/result/att5.sax
old mode 100644
new mode 100755
diff --git a/result/att5.sax2 b/result/att5.sax2
old mode 100644
new mode 100755
diff --git a/result/att6 b/result/att6
old mode 100644
new mode 100755
diff --git a/result/att6.rde b/result/att6.rde
old mode 100644
new mode 100755
diff --git a/result/att6.rdr b/result/att6.rdr
old mode 100644
new mode 100755
diff --git a/result/att6.sax b/result/att6.sax
old mode 100644
new mode 100755
diff --git a/result/att6.sax2 b/result/att6.sax2
old mode 100644
new mode 100755
diff --git a/result/att7 b/result/att7
old mode 100644
new mode 100755
diff --git a/result/att7.rde b/result/att7.rde
old mode 100644
new mode 100755
diff --git a/result/att7.rdr b/result/att7.rdr
old mode 100644
new mode 100755
diff --git a/result/att7.sax b/result/att7.sax
old mode 100644
new mode 100755
diff --git a/result/att7.sax2 b/result/att7.sax2
old mode 100644
new mode 100755
diff --git a/result/att8 b/result/att8
old mode 100644
new mode 100755
diff --git a/result/att8.rde b/result/att8.rde
old mode 100644
new mode 100755
diff --git a/result/att8.rdr b/result/att8.rdr
old mode 100644
new mode 100755
diff --git a/result/att8.sax b/result/att8.sax
old mode 100644
new mode 100755
diff --git a/result/att8.sax2 b/result/att8.sax2
old mode 100644
new mode 100755
diff --git a/result/att9 b/result/att9
old mode 100644
new mode 100755
diff --git a/result/att9.rde b/result/att9.rde
old mode 100644
new mode 100755
diff --git a/result/att9.rdr b/result/att9.rdr
old mode 100644
new mode 100755
diff --git a/result/att9.sax b/result/att9.sax
old mode 100644
new mode 100755
diff --git a/result/att9.sax2 b/result/att9.sax2
old mode 100644
new mode 100755
diff --git a/result/attrib.xml b/result/attrib.xml
old mode 100644
new mode 100755
diff --git a/result/attrib.xml.rde b/result/attrib.xml.rde
old mode 100644
new mode 100755
diff --git a/result/attrib.xml.rdr b/result/attrib.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/attrib.xml.sax b/result/attrib.xml.sax
old mode 100644
new mode 100755
diff --git a/result/attrib.xml.sax2 b/result/attrib.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/automata/a b/result/automata/a
old mode 100644
new mode 100755
diff --git a/result/automata/aba b/result/automata/aba
old mode 100644
new mode 100755
diff --git a/result/automata/abaa b/result/automata/abaa
old mode 100644
new mode 100755
diff --git a/result/automata/abba b/result/automata/abba
old mode 100644
new mode 100755
diff --git a/result/automata/po b/result/automata/po
old mode 100644
new mode 100755
diff --git a/result/badcomment.xml b/result/badcomment.xml
old mode 100644
new mode 100755
diff --git a/result/badcomment.xml.rde b/result/badcomment.xml.rde
old mode 100644
new mode 100755
diff --git a/result/badcomment.xml.rdr b/result/badcomment.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/badcomment.xml.sax b/result/badcomment.xml.sax
old mode 100644
new mode 100755
diff --git a/result/badcomment.xml.sax2 b/result/badcomment.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/bigentname.xml b/result/bigentname.xml
old mode 100644
new mode 100755
diff --git a/result/bigentname.xml.rde b/result/bigentname.xml.rde
old mode 100644
new mode 100755
diff --git a/result/bigentname.xml.rdr b/result/bigentname.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/bigentname.xml.sax b/result/bigentname.xml.sax
old mode 100644
new mode 100755
diff --git a/result/bigentname.xml.sax2 b/result/bigentname.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/bigname.xml b/result/bigname.xml
old mode 100644
new mode 100755
diff --git a/result/bigname.xml.rde b/result/bigname.xml.rde
old mode 100644
new mode 100755
diff --git a/result/bigname.xml.rdr b/result/bigname.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/bigname.xml.sax b/result/bigname.xml.sax
old mode 100644
new mode 100755
diff --git a/result/bigname.xml.sax2 b/result/bigname.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/bigname2.xml b/result/bigname2.xml
old mode 100644
new mode 100755
diff --git a/result/bigname2.xml.rde b/result/bigname2.xml.rde
old mode 100644
new mode 100755
diff --git a/result/bigname2.xml.rdr b/result/bigname2.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/bigname2.xml.sax b/result/bigname2.xml.sax
old mode 100644
new mode 100755
diff --git a/result/bigname2.xml.sax2 b/result/bigname2.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/example-1 b/result/c14n/1-1-without-comments/example-1
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/example-2 b/result/c14n/1-1-without-comments/example-2
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/example-3 b/result/c14n/1-1-without-comments/example-3
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/example-4 b/result/c14n/1-1-without-comments/example-4
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/example-5 b/result/c14n/1-1-without-comments/example-5
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/example-6 b/result/c14n/1-1-without-comments/example-6
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/example-7 b/result/c14n/1-1-without-comments/example-7
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/example-8 b/result/c14n/1-1-without-comments/example-8
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlbase-c14n11spec-102 b/result/c14n/1-1-without-comments/xmlbase-c14n11spec-102
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlbase-c14n11spec2-102 b/result/c14n/1-1-without-comments/xmlbase-c14n11spec2-102
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlbase-c14n11spec3-102 b/result/c14n/1-1-without-comments/xmlbase-c14n11spec3-102
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlbase-prop-1 b/result/c14n/1-1-without-comments/xmlbase-prop-1
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlbase-prop-2 b/result/c14n/1-1-without-comments/xmlbase-prop-2
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlbase-prop-3 b/result/c14n/1-1-without-comments/xmlbase-prop-3
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlbase-prop-4 b/result/c14n/1-1-without-comments/xmlbase-prop-4
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlbase-prop-5 b/result/c14n/1-1-without-comments/xmlbase-prop-5
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlbase-prop-6 b/result/c14n/1-1-without-comments/xmlbase-prop-6
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlbase-prop-7 b/result/c14n/1-1-without-comments/xmlbase-prop-7
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlid-prop-1 b/result/c14n/1-1-without-comments/xmlid-prop-1
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlid-prop-2 b/result/c14n/1-1-without-comments/xmlid-prop-2
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmllang-prop-1 b/result/c14n/1-1-without-comments/xmllang-prop-1
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmllang-prop-2 b/result/c14n/1-1-without-comments/xmllang-prop-2
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmllang-prop-3 b/result/c14n/1-1-without-comments/xmllang-prop-3
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmllang-prop-4 b/result/c14n/1-1-without-comments/xmllang-prop-4
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlspace-prop-1 b/result/c14n/1-1-without-comments/xmlspace-prop-1
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlspace-prop-2 b/result/c14n/1-1-without-comments/xmlspace-prop-2
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlspace-prop-3 b/result/c14n/1-1-without-comments/xmlspace-prop-3
old mode 100644
new mode 100755
diff --git a/result/c14n/1-1-without-comments/xmlspace-prop-4 b/result/c14n/1-1-without-comments/xmlspace-prop-4
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-09 b/result/c14n/exc-without-comments/merlin-c14n-two-09
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-10 b/result/c14n/exc-without-comments/merlin-c14n-two-10
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-11 b/result/c14n/exc-without-comments/merlin-c14n-two-11
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-12 b/result/c14n/exc-without-comments/merlin-c14n-two-12
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-13 b/result/c14n/exc-without-comments/merlin-c14n-two-13
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-14 b/result/c14n/exc-without-comments/merlin-c14n-two-14
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-15 b/result/c14n/exc-without-comments/merlin-c14n-two-15
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-16 b/result/c14n/exc-without-comments/merlin-c14n-two-16
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-17 b/result/c14n/exc-without-comments/merlin-c14n-two-17
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-18 b/result/c14n/exc-without-comments/merlin-c14n-two-18
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-19 b/result/c14n/exc-without-comments/merlin-c14n-two-19
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-20 b/result/c14n/exc-without-comments/merlin-c14n-two-20
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-21 b/result/c14n/exc-without-comments/merlin-c14n-two-21
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-22 b/result/c14n/exc-without-comments/merlin-c14n-two-22
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-23 b/result/c14n/exc-without-comments/merlin-c14n-two-23
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-24 b/result/c14n/exc-without-comments/merlin-c14n-two-24
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-25 b/result/c14n/exc-without-comments/merlin-c14n-two-25
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/merlin-c14n-two-26 b/result/c14n/exc-without-comments/merlin-c14n-two-26
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/test-0 b/result/c14n/exc-without-comments/test-0
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/test-1 b/result/c14n/exc-without-comments/test-1
old mode 100644
new mode 100755
diff --git a/result/c14n/exc-without-comments/test-2 b/result/c14n/exc-without-comments/test-2
old mode 100644
new mode 100755
diff --git a/result/c14n/with-comments/example-1 b/result/c14n/with-comments/example-1
old mode 100644
new mode 100755
diff --git a/result/c14n/with-comments/example-2 b/result/c14n/with-comments/example-2
old mode 100644
new mode 100755
diff --git a/result/c14n/with-comments/example-3 b/result/c14n/with-comments/example-3
old mode 100644
new mode 100755
diff --git a/result/c14n/with-comments/example-4 b/result/c14n/with-comments/example-4
old mode 100644
new mode 100755
diff --git a/result/c14n/with-comments/example-5 b/result/c14n/with-comments/example-5
old mode 100644
new mode 100755
diff --git a/result/c14n/with-comments/example-6 b/result/c14n/with-comments/example-6
old mode 100644
new mode 100755
diff --git a/result/c14n/with-comments/example-7 b/result/c14n/with-comments/example-7
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/example-1 b/result/c14n/without-comments/example-1
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/example-2 b/result/c14n/without-comments/example-2
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/example-3 b/result/c14n/without-comments/example-3
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/example-4 b/result/c14n/without-comments/example-4
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/example-5 b/result/c14n/without-comments/example-5
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/example-6 b/result/c14n/without-comments/example-6
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/example-7 b/result/c14n/without-comments/example-7
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/merlin-c14n-two-00 b/result/c14n/without-comments/merlin-c14n-two-00
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/merlin-c14n-two-01 b/result/c14n/without-comments/merlin-c14n-two-01
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/merlin-c14n-two-02 b/result/c14n/without-comments/merlin-c14n-two-02
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/merlin-c14n-two-03 b/result/c14n/without-comments/merlin-c14n-two-03
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/merlin-c14n-two-04 b/result/c14n/without-comments/merlin-c14n-two-04
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/merlin-c14n-two-05 b/result/c14n/without-comments/merlin-c14n-two-05
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/merlin-c14n-two-06 b/result/c14n/without-comments/merlin-c14n-two-06
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/merlin-c14n-two-07 b/result/c14n/without-comments/merlin-c14n-two-07
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/merlin-c14n-two-08 b/result/c14n/without-comments/merlin-c14n-two-08
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/test-0 b/result/c14n/without-comments/test-0
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/test-1 b/result/c14n/without-comments/test-1
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/test-2 b/result/c14n/without-comments/test-2
old mode 100644
new mode 100755
diff --git a/result/c14n/without-comments/test-3 b/result/c14n/without-comments/test-3
old mode 100644
new mode 100755
diff --git a/result/catalogs/catal b/result/catalogs/catal
old mode 100644
new mode 100755
diff --git a/result/catalogs/docbook b/result/catalogs/docbook
old mode 100644
new mode 100755
diff --git a/result/catalogs/mycatalog.empty b/result/catalogs/mycatalog.empty
old mode 100644
new mode 100755
diff --git a/result/catalogs/mycatalog.full b/result/catalogs/mycatalog.full
old mode 100644
new mode 100755
diff --git a/result/catalogs/registry b/result/catalogs/registry
old mode 100644
new mode 100755
diff --git a/result/catalogs/whites b/result/catalogs/whites
old mode 100644
new mode 100755
diff --git a/result/catalogs/whitex b/result/catalogs/whitex
old mode 100644
new mode 100755
diff --git a/result/cdata b/result/cdata
old mode 100644
new mode 100755
diff --git a/result/cdata-2-byte-UTF-8.xml b/result/cdata-2-byte-UTF-8.xml
old mode 100644
new mode 100755
diff --git a/result/cdata-2-byte-UTF-8.xml.rde b/result/cdata-2-byte-UTF-8.xml.rde
old mode 100644
new mode 100755
diff --git a/result/cdata-2-byte-UTF-8.xml.rdr b/result/cdata-2-byte-UTF-8.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/cdata-2-byte-UTF-8.xml.sax b/result/cdata-2-byte-UTF-8.xml.sax
old mode 100644
new mode 100755
diff --git a/result/cdata-2-byte-UTF-8.xml.sax2 b/result/cdata-2-byte-UTF-8.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/cdata-3-byte-UTF-8.xml b/result/cdata-3-byte-UTF-8.xml
old mode 100644
new mode 100755
diff --git a/result/cdata-3-byte-UTF-8.xml.rde b/result/cdata-3-byte-UTF-8.xml.rde
old mode 100644
new mode 100755
diff --git a/result/cdata-3-byte-UTF-8.xml.rdr b/result/cdata-3-byte-UTF-8.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/cdata-3-byte-UTF-8.xml.sax b/result/cdata-3-byte-UTF-8.xml.sax
old mode 100644
new mode 100755
diff --git a/result/cdata-3-byte-UTF-8.xml.sax2 b/result/cdata-3-byte-UTF-8.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/cdata-4-byte-UTF-8.xml b/result/cdata-4-byte-UTF-8.xml
old mode 100644
new mode 100755
diff --git a/result/cdata-4-byte-UTF-8.xml.rde b/result/cdata-4-byte-UTF-8.xml.rde
old mode 100644
new mode 100755
diff --git a/result/cdata-4-byte-UTF-8.xml.rdr b/result/cdata-4-byte-UTF-8.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/cdata-4-byte-UTF-8.xml.sax b/result/cdata-4-byte-UTF-8.xml.sax
old mode 100644
new mode 100755
diff --git a/result/cdata-4-byte-UTF-8.xml.sax2 b/result/cdata-4-byte-UTF-8.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/cdata.rde b/result/cdata.rde
old mode 100644
new mode 100755
diff --git a/result/cdata.rdr b/result/cdata.rdr
old mode 100644
new mode 100755
diff --git a/result/cdata.sax b/result/cdata.sax
old mode 100644
new mode 100755
diff --git a/result/cdata.sax2 b/result/cdata.sax2
old mode 100644
new mode 100755
diff --git a/result/cdata2 b/result/cdata2
old mode 100644
new mode 100755
diff --git a/result/cdata2.rde b/result/cdata2.rde
old mode 100644
new mode 100755
diff --git a/result/cdata2.rdr b/result/cdata2.rdr
old mode 100644
new mode 100755
diff --git a/result/cdata2.sax b/result/cdata2.sax
old mode 100644
new mode 100755
diff --git a/result/cdata2.sax2 b/result/cdata2.sax2
old mode 100644
new mode 100755
diff --git a/result/comment.xml b/result/comment.xml
old mode 100644
new mode 100755
diff --git a/result/comment.xml.rde b/result/comment.xml.rde
old mode 100644
new mode 100755
diff --git a/result/comment.xml.rdr b/result/comment.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/comment.xml.sax b/result/comment.xml.sax
old mode 100644
new mode 100755
diff --git a/result/comment.xml.sax2 b/result/comment.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/comment2.xml b/result/comment2.xml
old mode 100644
new mode 100755
diff --git a/result/comment2.xml.rde b/result/comment2.xml.rde
old mode 100644
new mode 100755
diff --git a/result/comment2.xml.rdr b/result/comment2.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/comment2.xml.sax b/result/comment2.xml.sax
old mode 100644
new mode 100755
diff --git a/result/comment2.xml.sax2 b/result/comment2.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/comment3.xml b/result/comment3.xml
old mode 100644
new mode 100755
diff --git a/result/comment3.xml.rde b/result/comment3.xml.rde
old mode 100644
new mode 100755
diff --git a/result/comment3.xml.rdr b/result/comment3.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/comment3.xml.sax b/result/comment3.xml.sax
old mode 100644
new mode 100755
diff --git a/result/comment3.xml.sax2 b/result/comment3.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/comment4.xml b/result/comment4.xml
old mode 100644
new mode 100755
diff --git a/result/comment4.xml.rde b/result/comment4.xml.rde
old mode 100644
new mode 100755
diff --git a/result/comment4.xml.rdr b/result/comment4.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/comment4.xml.sax b/result/comment4.xml.sax
old mode 100644
new mode 100755
diff --git a/result/comment4.xml.sax2 b/result/comment4.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/comment5.xml b/result/comment5.xml
old mode 100644
new mode 100755
diff --git a/result/comment5.xml.rde b/result/comment5.xml.rde
old mode 100644
new mode 100755
diff --git a/result/comment5.xml.rdr b/result/comment5.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/comment5.xml.sax b/result/comment5.xml.sax
old mode 100644
new mode 100755
diff --git a/result/comment5.xml.sax2 b/result/comment5.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/comment6.xml b/result/comment6.xml
old mode 100644
new mode 100755
diff --git a/result/comment6.xml.rde b/result/comment6.xml.rde
old mode 100644
new mode 100755
diff --git a/result/comment6.xml.rdr b/result/comment6.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/comment6.xml.sax b/result/comment6.xml.sax
old mode 100644
new mode 100755
diff --git a/result/comment6.xml.sax2 b/result/comment6.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/dav1 b/result/dav1
old mode 100644
new mode 100755
diff --git a/result/dav1.rde b/result/dav1.rde
old mode 100644
new mode 100755
diff --git a/result/dav1.rdr b/result/dav1.rdr
old mode 100644
new mode 100755
diff --git a/result/dav1.sax b/result/dav1.sax
old mode 100644
new mode 100755
diff --git a/result/dav1.sax2 b/result/dav1.sax2
old mode 100644
new mode 100755
diff --git a/result/dav10 b/result/dav10
old mode 100644
new mode 100755
diff --git a/result/dav10.rde b/result/dav10.rde
old mode 100644
new mode 100755
diff --git a/result/dav10.rdr b/result/dav10.rdr
old mode 100644
new mode 100755
diff --git a/result/dav10.sax b/result/dav10.sax
old mode 100644
new mode 100755
diff --git a/result/dav10.sax2 b/result/dav10.sax2
old mode 100644
new mode 100755
diff --git a/result/dav11 b/result/dav11
old mode 100644
new mode 100755
diff --git a/result/dav11.rde b/result/dav11.rde
old mode 100644
new mode 100755
diff --git a/result/dav11.rdr b/result/dav11.rdr
old mode 100644
new mode 100755
diff --git a/result/dav11.sax b/result/dav11.sax
old mode 100644
new mode 100755
diff --git a/result/dav11.sax2 b/result/dav11.sax2
old mode 100644
new mode 100755
diff --git a/result/dav12 b/result/dav12
old mode 100644
new mode 100755
diff --git a/result/dav12.rde b/result/dav12.rde
old mode 100644
new mode 100755
diff --git a/result/dav12.rdr b/result/dav12.rdr
old mode 100644
new mode 100755
diff --git a/result/dav12.sax b/result/dav12.sax
old mode 100644
new mode 100755
diff --git a/result/dav12.sax2 b/result/dav12.sax2
old mode 100644
new mode 100755
diff --git a/result/dav13 b/result/dav13
old mode 100644
new mode 100755
diff --git a/result/dav13.rde b/result/dav13.rde
old mode 100644
new mode 100755
diff --git a/result/dav13.rdr b/result/dav13.rdr
old mode 100644
new mode 100755
diff --git a/result/dav13.sax b/result/dav13.sax
old mode 100644
new mode 100755
diff --git a/result/dav13.sax2 b/result/dav13.sax2
old mode 100644
new mode 100755
diff --git a/result/dav15 b/result/dav15
old mode 100644
new mode 100755
diff --git a/result/dav15.rde b/result/dav15.rde
old mode 100644
new mode 100755
diff --git a/result/dav15.rdr b/result/dav15.rdr
old mode 100644
new mode 100755
diff --git a/result/dav15.sax b/result/dav15.sax
old mode 100644
new mode 100755
diff --git a/result/dav15.sax2 b/result/dav15.sax2
old mode 100644
new mode 100755
diff --git a/result/dav16 b/result/dav16
old mode 100644
new mode 100755
diff --git a/result/dav16.rde b/result/dav16.rde
old mode 100644
new mode 100755
diff --git a/result/dav16.rdr b/result/dav16.rdr
old mode 100644
new mode 100755
diff --git a/result/dav16.sax b/result/dav16.sax
old mode 100644
new mode 100755
diff --git a/result/dav16.sax2 b/result/dav16.sax2
old mode 100644
new mode 100755
diff --git a/result/dav17 b/result/dav17
old mode 100644
new mode 100755
diff --git a/result/dav17.rde b/result/dav17.rde
old mode 100644
new mode 100755
diff --git a/result/dav17.rdr b/result/dav17.rdr
old mode 100644
new mode 100755
diff --git a/result/dav17.sax b/result/dav17.sax
old mode 100644
new mode 100755
diff --git a/result/dav17.sax2 b/result/dav17.sax2
old mode 100644
new mode 100755
diff --git a/result/dav18 b/result/dav18
old mode 100644
new mode 100755
diff --git a/result/dav18.rde b/result/dav18.rde
old mode 100644
new mode 100755
diff --git a/result/dav18.rdr b/result/dav18.rdr
old mode 100644
new mode 100755
diff --git a/result/dav18.sax b/result/dav18.sax
old mode 100644
new mode 100755
diff --git a/result/dav18.sax2 b/result/dav18.sax2
old mode 100644
new mode 100755
diff --git a/result/dav19 b/result/dav19
old mode 100644
new mode 100755
diff --git a/result/dav19.rde b/result/dav19.rde
old mode 100644
new mode 100755
diff --git a/result/dav19.rdr b/result/dav19.rdr
old mode 100644
new mode 100755
diff --git a/result/dav19.sax b/result/dav19.sax
old mode 100644
new mode 100755
diff --git a/result/dav19.sax2 b/result/dav19.sax2
old mode 100644
new mode 100755
diff --git a/result/dav2 b/result/dav2
old mode 100644
new mode 100755
diff --git a/result/dav2.rde b/result/dav2.rde
old mode 100644
new mode 100755
diff --git a/result/dav2.rdr b/result/dav2.rdr
old mode 100644
new mode 100755
diff --git a/result/dav2.sax b/result/dav2.sax
old mode 100644
new mode 100755
diff --git a/result/dav2.sax2 b/result/dav2.sax2
old mode 100644
new mode 100755
diff --git a/result/dav3 b/result/dav3
old mode 100644
new mode 100755
diff --git a/result/dav3.rde b/result/dav3.rde
old mode 100644
new mode 100755
diff --git a/result/dav3.rdr b/result/dav3.rdr
old mode 100644
new mode 100755
diff --git a/result/dav3.sax b/result/dav3.sax
old mode 100644
new mode 100755
diff --git a/result/dav3.sax2 b/result/dav3.sax2
old mode 100644
new mode 100755
diff --git a/result/dav4 b/result/dav4
old mode 100644
new mode 100755
diff --git a/result/dav4.rde b/result/dav4.rde
old mode 100644
new mode 100755
diff --git a/result/dav4.rdr b/result/dav4.rdr
old mode 100644
new mode 100755
diff --git a/result/dav4.sax b/result/dav4.sax
old mode 100644
new mode 100755
diff --git a/result/dav4.sax2 b/result/dav4.sax2
old mode 100644
new mode 100755
diff --git a/result/dav5 b/result/dav5
old mode 100644
new mode 100755
diff --git a/result/dav5.rde b/result/dav5.rde
old mode 100644
new mode 100755
diff --git a/result/dav5.rdr b/result/dav5.rdr
old mode 100644
new mode 100755
diff --git a/result/dav5.sax b/result/dav5.sax
old mode 100644
new mode 100755
diff --git a/result/dav5.sax2 b/result/dav5.sax2
old mode 100644
new mode 100755
diff --git a/result/dav6 b/result/dav6
old mode 100644
new mode 100755
diff --git a/result/dav6.rde b/result/dav6.rde
old mode 100644
new mode 100755
diff --git a/result/dav6.rdr b/result/dav6.rdr
old mode 100644
new mode 100755
diff --git a/result/dav6.sax b/result/dav6.sax
old mode 100644
new mode 100755
diff --git a/result/dav6.sax2 b/result/dav6.sax2
old mode 100644
new mode 100755
diff --git a/result/dav7 b/result/dav7
old mode 100644
new mode 100755
diff --git a/result/dav7.rde b/result/dav7.rde
old mode 100644
new mode 100755
diff --git a/result/dav7.rdr b/result/dav7.rdr
old mode 100644
new mode 100755
diff --git a/result/dav7.sax b/result/dav7.sax
old mode 100644
new mode 100755
diff --git a/result/dav7.sax2 b/result/dav7.sax2
old mode 100644
new mode 100755
diff --git a/result/dav8 b/result/dav8
old mode 100644
new mode 100755
diff --git a/result/dav8.rde b/result/dav8.rde
old mode 100644
new mode 100755
diff --git a/result/dav8.rdr b/result/dav8.rdr
old mode 100644
new mode 100755
diff --git a/result/dav8.sax b/result/dav8.sax
old mode 100644
new mode 100755
diff --git a/result/dav8.sax2 b/result/dav8.sax2
old mode 100644
new mode 100755
diff --git a/result/dav9 b/result/dav9
old mode 100644
new mode 100755
diff --git a/result/dav9.rde b/result/dav9.rde
old mode 100644
new mode 100755
diff --git a/result/dav9.rdr b/result/dav9.rdr
old mode 100644
new mode 100755
diff --git a/result/dav9.sax b/result/dav9.sax
old mode 100644
new mode 100755
diff --git a/result/dav9.sax2 b/result/dav9.sax2
old mode 100644
new mode 100755
diff --git a/result/defattr.xml b/result/defattr.xml
old mode 100644
new mode 100755
diff --git a/result/defattr.xml.rde b/result/defattr.xml.rde
old mode 100644
new mode 100755
diff --git a/result/defattr.xml.rdr b/result/defattr.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/defattr.xml.sax b/result/defattr.xml.sax
old mode 100644
new mode 100755
diff --git a/result/defattr.xml.sax2 b/result/defattr.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/defattr2.xml b/result/defattr2.xml
old mode 100644
new mode 100755
diff --git a/result/defattr2.xml.rde b/result/defattr2.xml.rde
old mode 100644
new mode 100755
diff --git a/result/defattr2.xml.rdr b/result/defattr2.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/defattr2.xml.sax b/result/defattr2.xml.sax
old mode 100644
new mode 100755
diff --git a/result/defattr2.xml.sax2 b/result/defattr2.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/dia1 b/result/dia1
old mode 100644
new mode 100755
diff --git a/result/dia1.rde b/result/dia1.rde
old mode 100644
new mode 100755
diff --git a/result/dia1.rdr b/result/dia1.rdr
old mode 100644
new mode 100755
diff --git a/result/dia1.sax b/result/dia1.sax
old mode 100644
new mode 100755
diff --git a/result/dia1.sax2 b/result/dia1.sax2
old mode 100644
new mode 100755
diff --git a/result/dia2 b/result/dia2
old mode 100644
new mode 100755
diff --git a/result/dia2.rde b/result/dia2.rde
old mode 100644
new mode 100755
diff --git a/result/dia2.rdr b/result/dia2.rdr
old mode 100644
new mode 100755
diff --git a/result/dia2.sax b/result/dia2.sax
old mode 100644
new mode 100755
diff --git a/result/dia2.sax2 b/result/dia2.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd1 b/result/dtd1
old mode 100644
new mode 100755
diff --git a/result/dtd1.rde b/result/dtd1.rde
old mode 100644
new mode 100755
diff --git a/result/dtd1.rdr b/result/dtd1.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd1.sax b/result/dtd1.sax
old mode 100644
new mode 100755
diff --git a/result/dtd1.sax2 b/result/dtd1.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd10 b/result/dtd10
old mode 100644
new mode 100755
diff --git a/result/dtd10.rde b/result/dtd10.rde
old mode 100644
new mode 100755
diff --git a/result/dtd10.rdr b/result/dtd10.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd10.sax b/result/dtd10.sax
old mode 100644
new mode 100755
diff --git a/result/dtd10.sax2 b/result/dtd10.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd11 b/result/dtd11
old mode 100644
new mode 100755
diff --git a/result/dtd11.rde b/result/dtd11.rde
old mode 100644
new mode 100755
diff --git a/result/dtd11.rdr b/result/dtd11.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd11.sax b/result/dtd11.sax
old mode 100644
new mode 100755
diff --git a/result/dtd11.sax2 b/result/dtd11.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd12 b/result/dtd12
old mode 100644
new mode 100755
diff --git a/result/dtd12.rde b/result/dtd12.rde
old mode 100644
new mode 100755
diff --git a/result/dtd12.rdr b/result/dtd12.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd12.sax b/result/dtd12.sax
old mode 100644
new mode 100755
diff --git a/result/dtd12.sax2 b/result/dtd12.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd13 b/result/dtd13
old mode 100644
new mode 100755
diff --git a/result/dtd13.rde b/result/dtd13.rde
old mode 100644
new mode 100755
diff --git a/result/dtd13.rdr b/result/dtd13.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd13.sax b/result/dtd13.sax
old mode 100644
new mode 100755
diff --git a/result/dtd13.sax2 b/result/dtd13.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd2 b/result/dtd2
old mode 100644
new mode 100755
diff --git a/result/dtd2.rde b/result/dtd2.rde
old mode 100644
new mode 100755
diff --git a/result/dtd2.rdr b/result/dtd2.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd2.sax b/result/dtd2.sax
old mode 100644
new mode 100755
diff --git a/result/dtd2.sax2 b/result/dtd2.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd3 b/result/dtd3
old mode 100644
new mode 100755
diff --git a/result/dtd3.rde b/result/dtd3.rde
old mode 100644
new mode 100755
diff --git a/result/dtd3.rdr b/result/dtd3.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd3.sax b/result/dtd3.sax
old mode 100644
new mode 100755
diff --git a/result/dtd3.sax2 b/result/dtd3.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd4 b/result/dtd4
old mode 100644
new mode 100755
diff --git a/result/dtd4.rde b/result/dtd4.rde
old mode 100644
new mode 100755
diff --git a/result/dtd4.rdr b/result/dtd4.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd4.sax b/result/dtd4.sax
old mode 100644
new mode 100755
diff --git a/result/dtd4.sax2 b/result/dtd4.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd5 b/result/dtd5
old mode 100644
new mode 100755
diff --git a/result/dtd5.rde b/result/dtd5.rde
old mode 100644
new mode 100755
diff --git a/result/dtd5.rdr b/result/dtd5.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd5.sax b/result/dtd5.sax
old mode 100644
new mode 100755
diff --git a/result/dtd5.sax2 b/result/dtd5.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd6 b/result/dtd6
old mode 100644
new mode 100755
diff --git a/result/dtd6.rde b/result/dtd6.rde
old mode 100644
new mode 100755
diff --git a/result/dtd6.rdr b/result/dtd6.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd6.sax b/result/dtd6.sax
old mode 100644
new mode 100755
diff --git a/result/dtd6.sax2 b/result/dtd6.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd7 b/result/dtd7
old mode 100644
new mode 100755
diff --git a/result/dtd7.rde b/result/dtd7.rde
old mode 100644
new mode 100755
diff --git a/result/dtd7.rdr b/result/dtd7.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd7.sax b/result/dtd7.sax
old mode 100644
new mode 100755
diff --git a/result/dtd7.sax2 b/result/dtd7.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd8 b/result/dtd8
old mode 100644
new mode 100755
diff --git a/result/dtd8.rde b/result/dtd8.rde
old mode 100644
new mode 100755
diff --git a/result/dtd8.rdr b/result/dtd8.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd8.sax b/result/dtd8.sax
old mode 100644
new mode 100755
diff --git a/result/dtd8.sax2 b/result/dtd8.sax2
old mode 100644
new mode 100755
diff --git a/result/dtd9 b/result/dtd9
old mode 100644
new mode 100755
diff --git a/result/dtd9.rde b/result/dtd9.rde
old mode 100644
new mode 100755
diff --git a/result/dtd9.rdr b/result/dtd9.rdr
old mode 100644
new mode 100755
diff --git a/result/dtd9.sax b/result/dtd9.sax
old mode 100644
new mode 100755
diff --git a/result/dtd9.sax2 b/result/dtd9.sax2
old mode 100644
new mode 100755
diff --git a/result/ebcdic_566012.xml b/result/ebcdic_566012.xml
old mode 100644
new mode 100755
diff --git a/result/ebcdic_566012.xml.rde b/result/ebcdic_566012.xml.rde
old mode 100644
new mode 100755
diff --git a/result/ebcdic_566012.xml.rdr b/result/ebcdic_566012.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/ebcdic_566012.xml.sax b/result/ebcdic_566012.xml.sax
old mode 100644
new mode 100755
diff --git a/result/ebcdic_566012.xml.sax2 b/result/ebcdic_566012.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/emptycdata.xml b/result/emptycdata.xml
old mode 100644
new mode 100755
diff --git a/result/emptycdata.xml.rde b/result/emptycdata.xml.rde
old mode 100644
new mode 100755
diff --git a/result/emptycdata.xml.rdr b/result/emptycdata.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/emptycdata.xml.sax b/result/emptycdata.xml.sax
old mode 100644
new mode 100755
diff --git a/result/emptycdata.xml.sax2 b/result/emptycdata.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/ent1 b/result/ent1
old mode 100644
new mode 100755
diff --git a/result/ent1.rde b/result/ent1.rde
old mode 100644
new mode 100755
diff --git a/result/ent1.rdr b/result/ent1.rdr
old mode 100644
new mode 100755
diff --git a/result/ent1.sax b/result/ent1.sax
old mode 100644
new mode 100755
diff --git a/result/ent1.sax2 b/result/ent1.sax2
old mode 100644
new mode 100755
diff --git a/result/ent10 b/result/ent10
old mode 100644
new mode 100755
diff --git a/result/ent10.rde b/result/ent10.rde
old mode 100644
new mode 100755
diff --git a/result/ent10.rdr b/result/ent10.rdr
old mode 100644
new mode 100755
diff --git a/result/ent10.sax b/result/ent10.sax
old mode 100644
new mode 100755
diff --git a/result/ent10.sax2 b/result/ent10.sax2
old mode 100644
new mode 100755
diff --git a/result/ent11 b/result/ent11
old mode 100644
new mode 100755
diff --git a/result/ent11.rde b/result/ent11.rde
old mode 100644
new mode 100755
diff --git a/result/ent11.rdr b/result/ent11.rdr
old mode 100644
new mode 100755
diff --git a/result/ent11.sax b/result/ent11.sax
old mode 100644
new mode 100755
diff --git a/result/ent11.sax2 b/result/ent11.sax2
old mode 100644
new mode 100755
diff --git a/result/ent12 b/result/ent12
old mode 100644
new mode 100755
diff --git a/result/ent12.rde b/result/ent12.rde
old mode 100644
new mode 100755
diff --git a/result/ent12.rdr b/result/ent12.rdr
old mode 100644
new mode 100755
diff --git a/result/ent12.sax b/result/ent12.sax
old mode 100644
new mode 100755
diff --git a/result/ent12.sax2 b/result/ent12.sax2
old mode 100644
new mode 100755
diff --git a/result/ent13 b/result/ent13
old mode 100644
new mode 100755
diff --git a/result/ent13.rde b/result/ent13.rde
old mode 100644
new mode 100755
diff --git a/result/ent13.rdr b/result/ent13.rdr
old mode 100644
new mode 100755
diff --git a/result/ent13.sax b/result/ent13.sax
old mode 100644
new mode 100755
diff --git a/result/ent13.sax2 b/result/ent13.sax2
old mode 100644
new mode 100755
diff --git a/result/ent2 b/result/ent2
old mode 100644
new mode 100755
diff --git a/result/ent2.rde b/result/ent2.rde
old mode 100644
new mode 100755
diff --git a/result/ent2.rdr b/result/ent2.rdr
old mode 100644
new mode 100755
diff --git a/result/ent2.sax b/result/ent2.sax
old mode 100644
new mode 100755
diff --git a/result/ent2.sax2 b/result/ent2.sax2
old mode 100644
new mode 100755
diff --git a/result/ent3 b/result/ent3
old mode 100644
new mode 100755
diff --git a/result/ent3.rde b/result/ent3.rde
old mode 100644
new mode 100755
diff --git a/result/ent3.rdr b/result/ent3.rdr
old mode 100644
new mode 100755
diff --git a/result/ent3.sax b/result/ent3.sax
old mode 100644
new mode 100755
diff --git a/result/ent3.sax2 b/result/ent3.sax2
old mode 100644
new mode 100755
diff --git a/result/ent4 b/result/ent4
old mode 100644
new mode 100755
diff --git a/result/ent4.rde b/result/ent4.rde
old mode 100644
new mode 100755
diff --git a/result/ent4.rdr b/result/ent4.rdr
old mode 100644
new mode 100755
diff --git a/result/ent4.sax b/result/ent4.sax
old mode 100644
new mode 100755
diff --git a/result/ent4.sax2 b/result/ent4.sax2
old mode 100644
new mode 100755
diff --git a/result/ent5 b/result/ent5
old mode 100644
new mode 100755
diff --git a/result/ent5.rde b/result/ent5.rde
old mode 100644
new mode 100755
diff --git a/result/ent5.rdr b/result/ent5.rdr
old mode 100644
new mode 100755
diff --git a/result/ent5.sax b/result/ent5.sax
old mode 100644
new mode 100755
diff --git a/result/ent5.sax2 b/result/ent5.sax2
old mode 100644
new mode 100755
diff --git a/result/ent6 b/result/ent6
old mode 100644
new mode 100755
diff --git a/result/ent6.rde b/result/ent6.rde
old mode 100644
new mode 100755
diff --git a/result/ent6.rdr b/result/ent6.rdr
old mode 100644
new mode 100755
diff --git a/result/ent6.sax b/result/ent6.sax
old mode 100644
new mode 100755
diff --git a/result/ent6.sax2 b/result/ent6.sax2
old mode 100644
new mode 100755
diff --git a/result/ent7 b/result/ent7
old mode 100644
new mode 100755
diff --git a/result/ent7.rde b/result/ent7.rde
old mode 100644
new mode 100755
diff --git a/result/ent7.rdr b/result/ent7.rdr
old mode 100644
new mode 100755
diff --git a/result/ent7.sax b/result/ent7.sax
old mode 100644
new mode 100755
diff --git a/result/ent7.sax2 b/result/ent7.sax2
old mode 100644
new mode 100755
diff --git a/result/ent8 b/result/ent8
old mode 100644
new mode 100755
diff --git a/result/ent8.rde b/result/ent8.rde
old mode 100644
new mode 100755
diff --git a/result/ent8.rdr b/result/ent8.rdr
old mode 100644
new mode 100755
diff --git a/result/ent8.sax b/result/ent8.sax
old mode 100644
new mode 100755
diff --git a/result/ent8.sax2 b/result/ent8.sax2
old mode 100644
new mode 100755
diff --git a/result/ent9 b/result/ent9
old mode 100644
new mode 100755
diff --git a/result/ent9.rde b/result/ent9.rde
old mode 100644
new mode 100755
diff --git a/result/ent9.rdr b/result/ent9.rdr
old mode 100644
new mode 100755
diff --git a/result/ent9.sax b/result/ent9.sax
old mode 100644
new mode 100755
diff --git a/result/ent9.sax2 b/result/ent9.sax2
old mode 100644
new mode 100755
diff --git a/result/ent_738805.xml b/result/ent_738805.xml
old mode 100644
new mode 100755
diff --git a/result/ent_738805.xml.rde b/result/ent_738805.xml.rde
old mode 100644
new mode 100755
diff --git a/result/ent_738805.xml.rdr b/result/ent_738805.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/ent_738805.xml.sax b/result/ent_738805.xml.sax
old mode 100644
new mode 100755
diff --git a/result/ent_738805.xml.sax2 b/result/ent_738805.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/errors/754946.xml b/result/errors/754946.xml
old mode 100644
new mode 100755
diff --git a/result/errors/754946.xml.err b/result/errors/754946.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/754946.xml.str b/result/errors/754946.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/754947.xml b/result/errors/754947.xml
old mode 100644
new mode 100755
diff --git a/result/errors/754947.xml.err b/result/errors/754947.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/754947.xml.str b/result/errors/754947.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/758588.xml b/result/errors/758588.xml
old mode 100644
new mode 100755
diff --git a/result/errors/758588.xml.err b/result/errors/758588.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/758588.xml.str b/result/errors/758588.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/759020.xml b/result/errors/759020.xml
old mode 100644
new mode 100755
diff --git a/result/errors/759020.xml.err b/result/errors/759020.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/759020.xml.str b/result/errors/759020.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/759398.xml b/result/errors/759398.xml
old mode 100644
new mode 100755
diff --git a/result/errors/759398.xml.err b/result/errors/759398.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/759398.xml.str b/result/errors/759398.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/759573-2.xml b/result/errors/759573-2.xml
old mode 100644
new mode 100755
diff --git a/result/errors/759573-2.xml.err b/result/errors/759573-2.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/759573-2.xml.str b/result/errors/759573-2.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/759573.xml b/result/errors/759573.xml
old mode 100644
new mode 100755
diff --git a/result/errors/759573.xml.err b/result/errors/759573.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/759573.xml.str b/result/errors/759573.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/759579.xml b/result/errors/759579.xml
old mode 100644
new mode 100755
diff --git a/result/errors/759579.xml.err b/result/errors/759579.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/759579.xml.str b/result/errors/759579.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/attr1.xml b/result/errors/attr1.xml
old mode 100644
new mode 100755
diff --git a/result/errors/attr1.xml.err b/result/errors/attr1.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/attr1.xml.str b/result/errors/attr1.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/attr2.xml b/result/errors/attr2.xml
old mode 100644
new mode 100755
diff --git a/result/errors/attr2.xml.err b/result/errors/attr2.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/attr2.xml.str b/result/errors/attr2.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/attr3.xml b/result/errors/attr3.xml
old mode 100644
new mode 100755
diff --git a/result/errors/attr3.xml.err b/result/errors/attr3.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/attr3.xml.str b/result/errors/attr3.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/attr4.xml b/result/errors/attr4.xml
old mode 100644
new mode 100755
diff --git a/result/errors/attr4.xml.err b/result/errors/attr4.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/attr4.xml.str b/result/errors/attr4.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/cdata.xml b/result/errors/cdata.xml
old mode 100644
new mode 100755
diff --git a/result/errors/cdata.xml.err b/result/errors/cdata.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/cdata.xml.str b/result/errors/cdata.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/charref1.xml b/result/errors/charref1.xml
old mode 100644
new mode 100755
diff --git a/result/errors/charref1.xml.err b/result/errors/charref1.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/charref1.xml.str b/result/errors/charref1.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/comment1.xml b/result/errors/comment1.xml
old mode 100644
new mode 100755
diff --git a/result/errors/comment1.xml.err b/result/errors/comment1.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/comment1.xml.str b/result/errors/comment1.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/content1.xml b/result/errors/content1.xml
old mode 100644
new mode 100755
diff --git a/result/errors/content1.xml.err b/result/errors/content1.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/content1.xml.str b/result/errors/content1.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/extparsedent.xml b/result/errors/extparsedent.xml
old mode 100644
new mode 100755
diff --git a/result/errors/extparsedent.xml.err b/result/errors/extparsedent.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/extparsedent.xml.str b/result/errors/extparsedent.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/name.xml b/result/errors/name.xml
old mode 100644
new mode 100755
diff --git a/result/errors/name.xml.err b/result/errors/name.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/name.xml.str b/result/errors/name.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors/name2.xml b/result/errors/name2.xml
old mode 100644
new mode 100755
diff --git a/result/errors/name2.xml.err b/result/errors/name2.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors/name2.xml.str b/result/errors/name2.xml.str
old mode 100644
new mode 100755
diff --git a/result/errors10/781205.xml b/result/errors10/781205.xml
old mode 100644
new mode 100755
diff --git a/result/errors10/781205.xml.err b/result/errors10/781205.xml.err
old mode 100644
new mode 100755
diff --git a/result/errors10/781361.xml b/result/errors10/781361.xml
old mode 100644
new mode 100755
diff --git a/result/errors10/781361.xml.err b/result/errors10/781361.xml.err
old mode 100644
new mode 100755
diff --git a/result/eve.xml b/result/eve.xml
old mode 100644
new mode 100755
diff --git a/result/eve.xml.rde b/result/eve.xml.rde
old mode 100644
new mode 100755
diff --git a/result/eve.xml.rdr b/result/eve.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/eve.xml.sax b/result/eve.xml.sax
old mode 100644
new mode 100755
diff --git a/result/eve.xml.sax2 b/result/eve.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/example.dtd b/result/example.dtd
old mode 100644
new mode 100755
diff --git a/result/expr/base b/result/expr/base
old mode 100644
new mode 100755
diff --git a/result/icu_parse_test.xml b/result/icu_parse_test.xml
old mode 100644
new mode 100755
diff --git a/result/icu_parse_test.xml.rde b/result/icu_parse_test.xml.rde
old mode 100644
new mode 100755
diff --git a/result/icu_parse_test.xml.rdr b/result/icu_parse_test.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/icu_parse_test.xml.sax b/result/icu_parse_test.xml.sax
old mode 100644
new mode 100755
diff --git a/result/icu_parse_test.xml.sax2 b/result/icu_parse_test.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/intsubset.xml b/result/intsubset.xml
old mode 100644
new mode 100755
diff --git a/result/intsubset.xml.rde b/result/intsubset.xml.rde
old mode 100644
new mode 100755
diff --git a/result/intsubset.xml.rdr b/result/intsubset.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/intsubset.xml.sax b/result/intsubset.xml.sax
old mode 100644
new mode 100755
diff --git a/result/intsubset.xml.sax2 b/result/intsubset.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/intsubset2.xml b/result/intsubset2.xml
old mode 100644
new mode 100755
diff --git a/result/intsubset2.xml.rde b/result/intsubset2.xml.rde
old mode 100644
new mode 100755
diff --git a/result/intsubset2.xml.rdr b/result/intsubset2.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/intsubset2.xml.sax b/result/intsubset2.xml.sax
old mode 100644
new mode 100755
diff --git a/result/intsubset2.xml.sax2 b/result/intsubset2.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/isolat1 b/result/isolat1
old mode 100644
new mode 100755
diff --git a/result/isolat1.rde b/result/isolat1.rde
old mode 100644
new mode 100755
diff --git a/result/isolat1.rdr b/result/isolat1.rdr
old mode 100644
new mode 100755
diff --git a/result/isolat1.sax b/result/isolat1.sax
old mode 100644
new mode 100755
diff --git a/result/isolat1.sax2 b/result/isolat1.sax2
old mode 100644
new mode 100755
diff --git a/result/isolat2 b/result/isolat2
old mode 100644
new mode 100755
diff --git a/result/isolat2.rde b/result/isolat2.rde
old mode 100644
new mode 100755
diff --git a/result/isolat2.rdr b/result/isolat2.rdr
old mode 100644
new mode 100755
diff --git a/result/isolat2.sax b/result/isolat2.sax
old mode 100644
new mode 100755
diff --git a/result/isolat2.sax2 b/result/isolat2.sax2
old mode 100644
new mode 100755
diff --git a/result/isolat3 b/result/isolat3
old mode 100644
new mode 100755
diff --git a/result/isolat3.rde b/result/isolat3.rde
old mode 100644
new mode 100755
diff --git a/result/isolat3.rdr b/result/isolat3.rdr
old mode 100644
new mode 100755
diff --git a/result/isolat3.sax b/result/isolat3.sax
old mode 100644
new mode 100755
diff --git a/result/isolat3.sax2 b/result/isolat3.sax2
old mode 100644
new mode 100755
diff --git a/result/japancrlf.xml b/result/japancrlf.xml
old mode 100644
new mode 100755
diff --git a/result/japancrlf.xml.rde b/result/japancrlf.xml.rde
old mode 100644
new mode 100755
diff --git a/result/japancrlf.xml.rdr b/result/japancrlf.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/japancrlf.xml.sax b/result/japancrlf.xml.sax
old mode 100644
new mode 100755
diff --git a/result/japancrlf.xml.sax2 b/result/japancrlf.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_0.xml b/result/namespaces/err_0.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_0.xml.err b/result/namespaces/err_0.xml.err
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_1.xml b/result/namespaces/err_1.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_1.xml.err b/result/namespaces/err_1.xml.err
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_10.xml b/result/namespaces/err_10.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_10.xml.err b/result/namespaces/err_10.xml.err
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_11.xml b/result/namespaces/err_11.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_11.xml.err b/result/namespaces/err_11.xml.err
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_2.xml b/result/namespaces/err_2.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_2.xml.err b/result/namespaces/err_2.xml.err
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_3.xml b/result/namespaces/err_3.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_3.xml.err b/result/namespaces/err_3.xml.err
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_4.xml b/result/namespaces/err_4.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_4.xml.err b/result/namespaces/err_4.xml.err
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_5.xml b/result/namespaces/err_5.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_5.xml.err b/result/namespaces/err_5.xml.err
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_6.xml b/result/namespaces/err_6.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_6.xml.err b/result/namespaces/err_6.xml.err
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_7.xml b/result/namespaces/err_7.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_7.xml.err b/result/namespaces/err_7.xml.err
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_8.xml b/result/namespaces/err_8.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_8.xml.err b/result/namespaces/err_8.xml.err
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_9.xml b/result/namespaces/err_9.xml
old mode 100644
new mode 100755
diff --git a/result/namespaces/err_9.xml.err b/result/namespaces/err_9.xml.err
old mode 100644
new mode 100755
diff --git a/result/noent/att1 b/result/noent/att1
old mode 100644
new mode 100755
diff --git a/result/noent/att1.sax2 b/result/noent/att1.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/att10 b/result/noent/att10
old mode 100644
new mode 100755
diff --git a/result/noent/att10.sax2 b/result/noent/att10.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/att11 b/result/noent/att11
old mode 100644
new mode 100755
diff --git a/result/noent/att11.sax2 b/result/noent/att11.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/att2 b/result/noent/att2
old mode 100644
new mode 100755
diff --git a/result/noent/att2.sax2 b/result/noent/att2.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/att3 b/result/noent/att3
old mode 100644
new mode 100755
diff --git a/result/noent/att3.sax2 b/result/noent/att3.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/att4 b/result/noent/att4
old mode 100644
new mode 100755
diff --git a/result/noent/att4.sax2 b/result/noent/att4.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/att5 b/result/noent/att5
old mode 100644
new mode 100755
diff --git a/result/noent/att5.sax2 b/result/noent/att5.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/att6 b/result/noent/att6
old mode 100644
new mode 100755
diff --git a/result/noent/att6.sax2 b/result/noent/att6.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/att7 b/result/noent/att7
old mode 100644
new mode 100755
diff --git a/result/noent/att7.sax2 b/result/noent/att7.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/att8 b/result/noent/att8
old mode 100644
new mode 100755
diff --git a/result/noent/att8.sax2 b/result/noent/att8.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/att9 b/result/noent/att9
old mode 100644
new mode 100755
diff --git a/result/noent/att9.sax2 b/result/noent/att9.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/attrib.xml b/result/noent/attrib.xml
old mode 100644
new mode 100755
diff --git a/result/noent/attrib.xml.sax2 b/result/noent/attrib.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/badcomment.xml b/result/noent/badcomment.xml
old mode 100644
new mode 100755
diff --git a/result/noent/badcomment.xml.sax2 b/result/noent/badcomment.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/bigentname.xml b/result/noent/bigentname.xml
old mode 100644
new mode 100755
diff --git a/result/noent/bigentname.xml.sax2 b/result/noent/bigentname.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/bigname.xml b/result/noent/bigname.xml
old mode 100644
new mode 100755
diff --git a/result/noent/bigname.xml.sax2 b/result/noent/bigname.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/bigname2.xml b/result/noent/bigname2.xml
old mode 100644
new mode 100755
diff --git a/result/noent/bigname2.xml.sax2 b/result/noent/bigname2.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/cdata b/result/noent/cdata
old mode 100644
new mode 100755
diff --git a/result/noent/cdata-2-byte-UTF-8.xml b/result/noent/cdata-2-byte-UTF-8.xml
old mode 100644
new mode 100755
diff --git a/result/noent/cdata-2-byte-UTF-8.xml.sax2 b/result/noent/cdata-2-byte-UTF-8.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/cdata-3-byte-UTF-8.xml b/result/noent/cdata-3-byte-UTF-8.xml
old mode 100644
new mode 100755
diff --git a/result/noent/cdata-3-byte-UTF-8.xml.sax2 b/result/noent/cdata-3-byte-UTF-8.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/cdata-4-byte-UTF-8.xml b/result/noent/cdata-4-byte-UTF-8.xml
old mode 100644
new mode 100755
diff --git a/result/noent/cdata-4-byte-UTF-8.xml.sax2 b/result/noent/cdata-4-byte-UTF-8.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/cdata.sax2 b/result/noent/cdata.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/cdata2 b/result/noent/cdata2
old mode 100644
new mode 100755
diff --git a/result/noent/cdata2.sax2 b/result/noent/cdata2.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/comment.xml b/result/noent/comment.xml
old mode 100644
new mode 100755
diff --git a/result/noent/comment.xml.sax2 b/result/noent/comment.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/comment2.xml b/result/noent/comment2.xml
old mode 100644
new mode 100755
diff --git a/result/noent/comment2.xml.sax2 b/result/noent/comment2.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/comment3.xml b/result/noent/comment3.xml
old mode 100644
new mode 100755
diff --git a/result/noent/comment3.xml.sax2 b/result/noent/comment3.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/comment4.xml b/result/noent/comment4.xml
old mode 100644
new mode 100755
diff --git a/result/noent/comment4.xml.sax2 b/result/noent/comment4.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/comment5.xml b/result/noent/comment5.xml
old mode 100644
new mode 100755
diff --git a/result/noent/comment5.xml.sax2 b/result/noent/comment5.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/comment6.xml b/result/noent/comment6.xml
old mode 100644
new mode 100755
diff --git a/result/noent/comment6.xml.sax2 b/result/noent/comment6.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav1 b/result/noent/dav1
old mode 100644
new mode 100755
diff --git a/result/noent/dav1.sax2 b/result/noent/dav1.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav10 b/result/noent/dav10
old mode 100644
new mode 100755
diff --git a/result/noent/dav10.sax2 b/result/noent/dav10.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav11 b/result/noent/dav11
old mode 100644
new mode 100755
diff --git a/result/noent/dav11.sax2 b/result/noent/dav11.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav12 b/result/noent/dav12
old mode 100644
new mode 100755
diff --git a/result/noent/dav12.sax2 b/result/noent/dav12.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav13 b/result/noent/dav13
old mode 100644
new mode 100755
diff --git a/result/noent/dav13.sax2 b/result/noent/dav13.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav15 b/result/noent/dav15
old mode 100644
new mode 100755
diff --git a/result/noent/dav15.sax2 b/result/noent/dav15.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav16 b/result/noent/dav16
old mode 100644
new mode 100755
diff --git a/result/noent/dav16.sax2 b/result/noent/dav16.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav17 b/result/noent/dav17
old mode 100644
new mode 100755
diff --git a/result/noent/dav17.sax2 b/result/noent/dav17.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav18 b/result/noent/dav18
old mode 100644
new mode 100755
diff --git a/result/noent/dav18.sax2 b/result/noent/dav18.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav19 b/result/noent/dav19
old mode 100644
new mode 100755
diff --git a/result/noent/dav19.sax2 b/result/noent/dav19.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav2 b/result/noent/dav2
old mode 100644
new mode 100755
diff --git a/result/noent/dav2.sax2 b/result/noent/dav2.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav3 b/result/noent/dav3
old mode 100644
new mode 100755
diff --git a/result/noent/dav3.sax2 b/result/noent/dav3.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav4 b/result/noent/dav4
old mode 100644
new mode 100755
diff --git a/result/noent/dav4.sax2 b/result/noent/dav4.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav5 b/result/noent/dav5
old mode 100644
new mode 100755
diff --git a/result/noent/dav5.sax2 b/result/noent/dav5.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav6 b/result/noent/dav6
old mode 100644
new mode 100755
diff --git a/result/noent/dav6.sax2 b/result/noent/dav6.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav7 b/result/noent/dav7
old mode 100644
new mode 100755
diff --git a/result/noent/dav7.sax2 b/result/noent/dav7.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav8 b/result/noent/dav8
old mode 100644
new mode 100755
diff --git a/result/noent/dav8.sax2 b/result/noent/dav8.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dav9 b/result/noent/dav9
old mode 100644
new mode 100755
diff --git a/result/noent/dav9.sax2 b/result/noent/dav9.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/defattr.xml b/result/noent/defattr.xml
old mode 100644
new mode 100755
diff --git a/result/noent/defattr.xml.sax2 b/result/noent/defattr.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/defattr2.xml b/result/noent/defattr2.xml
old mode 100644
new mode 100755
diff --git a/result/noent/defattr2.xml.sax2 b/result/noent/defattr2.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dia1 b/result/noent/dia1
old mode 100644
new mode 100755
diff --git a/result/noent/dia1.sax2 b/result/noent/dia1.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dia2 b/result/noent/dia2
old mode 100644
new mode 100755
diff --git a/result/noent/dia2.sax2 b/result/noent/dia2.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd1 b/result/noent/dtd1
old mode 100644
new mode 100755
diff --git a/result/noent/dtd1.sax2 b/result/noent/dtd1.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd10 b/result/noent/dtd10
old mode 100644
new mode 100755
diff --git a/result/noent/dtd10.sax2 b/result/noent/dtd10.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd11 b/result/noent/dtd11
old mode 100644
new mode 100755
diff --git a/result/noent/dtd11.sax2 b/result/noent/dtd11.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd12 b/result/noent/dtd12
old mode 100644
new mode 100755
diff --git a/result/noent/dtd12.sax2 b/result/noent/dtd12.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd13 b/result/noent/dtd13
old mode 100644
new mode 100755
diff --git a/result/noent/dtd13.sax2 b/result/noent/dtd13.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd2 b/result/noent/dtd2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd2.sax2 b/result/noent/dtd2.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd3 b/result/noent/dtd3
old mode 100644
new mode 100755
diff --git a/result/noent/dtd3.sax2 b/result/noent/dtd3.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd4 b/result/noent/dtd4
old mode 100644
new mode 100755
diff --git a/result/noent/dtd4.sax2 b/result/noent/dtd4.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd5 b/result/noent/dtd5
old mode 100644
new mode 100755
diff --git a/result/noent/dtd5.sax2 b/result/noent/dtd5.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd6 b/result/noent/dtd6
old mode 100644
new mode 100755
diff --git a/result/noent/dtd6.sax2 b/result/noent/dtd6.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd7 b/result/noent/dtd7
old mode 100644
new mode 100755
diff --git a/result/noent/dtd7.sax2 b/result/noent/dtd7.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd8 b/result/noent/dtd8
old mode 100644
new mode 100755
diff --git a/result/noent/dtd8.sax2 b/result/noent/dtd8.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/dtd9 b/result/noent/dtd9
old mode 100644
new mode 100755
diff --git a/result/noent/dtd9.sax2 b/result/noent/dtd9.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ebcdic_566012.xml b/result/noent/ebcdic_566012.xml
old mode 100644
new mode 100755
diff --git a/result/noent/ebcdic_566012.xml.sax2 b/result/noent/ebcdic_566012.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/emptycdata.xml b/result/noent/emptycdata.xml
old mode 100644
new mode 100755
diff --git a/result/noent/emptycdata.xml.sax2 b/result/noent/emptycdata.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent1 b/result/noent/ent1
old mode 100644
new mode 100755
diff --git a/result/noent/ent1.sax2 b/result/noent/ent1.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent10 b/result/noent/ent10
old mode 100644
new mode 100755
diff --git a/result/noent/ent10.sax2 b/result/noent/ent10.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent11 b/result/noent/ent11
old mode 100644
new mode 100755
diff --git a/result/noent/ent11.sax2 b/result/noent/ent11.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent12 b/result/noent/ent12
old mode 100644
new mode 100755
diff --git a/result/noent/ent12.sax2 b/result/noent/ent12.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent13 b/result/noent/ent13
old mode 100644
new mode 100755
diff --git a/result/noent/ent13.sax2 b/result/noent/ent13.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent2 b/result/noent/ent2
old mode 100644
new mode 100755
diff --git a/result/noent/ent2.sax2 b/result/noent/ent2.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent3 b/result/noent/ent3
old mode 100644
new mode 100755
diff --git a/result/noent/ent3.sax2 b/result/noent/ent3.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent4 b/result/noent/ent4
old mode 100644
new mode 100755
diff --git a/result/noent/ent4.sax2 b/result/noent/ent4.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent5 b/result/noent/ent5
old mode 100644
new mode 100755
diff --git a/result/noent/ent5.sax2 b/result/noent/ent5.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent6 b/result/noent/ent6
old mode 100644
new mode 100755
diff --git a/result/noent/ent6.sax2 b/result/noent/ent6.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent7 b/result/noent/ent7
old mode 100644
new mode 100755
diff --git a/result/noent/ent7.sax2 b/result/noent/ent7.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent8 b/result/noent/ent8
old mode 100644
new mode 100755
diff --git a/result/noent/ent8.sax2 b/result/noent/ent8.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent9 b/result/noent/ent9
old mode 100644
new mode 100755
diff --git a/result/noent/ent9.sax2 b/result/noent/ent9.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ent_738805.xml b/result/noent/ent_738805.xml
old mode 100644
new mode 100755
diff --git a/result/noent/ent_738805.xml.sax2 b/result/noent/ent_738805.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/eve.xml b/result/noent/eve.xml
old mode 100644
new mode 100755
diff --git a/result/noent/eve.xml.sax2 b/result/noent/eve.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/icu_parse_test.xml b/result/noent/icu_parse_test.xml
old mode 100644
new mode 100755
diff --git a/result/noent/icu_parse_test.xml.sax2 b/result/noent/icu_parse_test.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/intsubset.xml b/result/noent/intsubset.xml
old mode 100644
new mode 100755
diff --git a/result/noent/intsubset.xml.sax2 b/result/noent/intsubset.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/intsubset2.xml b/result/noent/intsubset2.xml
old mode 100644
new mode 100755
diff --git a/result/noent/intsubset2.xml.sax2 b/result/noent/intsubset2.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/isolat1 b/result/noent/isolat1
old mode 100644
new mode 100755
diff --git a/result/noent/isolat1.sax2 b/result/noent/isolat1.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/isolat2 b/result/noent/isolat2
old mode 100644
new mode 100755
diff --git a/result/noent/isolat2.sax2 b/result/noent/isolat2.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/isolat3 b/result/noent/isolat3
old mode 100644
new mode 100755
diff --git a/result/noent/isolat3.sax2 b/result/noent/isolat3.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/japancrlf.xml b/result/noent/japancrlf.xml
old mode 100644
new mode 100755
diff --git a/result/noent/japancrlf.xml.sax2 b/result/noent/japancrlf.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ns b/result/noent/ns
old mode 100644
new mode 100755
diff --git a/result/noent/ns.sax2 b/result/noent/ns.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ns2 b/result/noent/ns2
old mode 100644
new mode 100755
diff --git a/result/noent/ns2.sax2 b/result/noent/ns2.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ns3 b/result/noent/ns3
old mode 100644
new mode 100755
diff --git a/result/noent/ns3.sax2 b/result/noent/ns3.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ns4 b/result/noent/ns4
old mode 100644
new mode 100755
diff --git a/result/noent/ns4.sax2 b/result/noent/ns4.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ns5 b/result/noent/ns5
old mode 100644
new mode 100755
diff --git a/result/noent/ns5.sax2 b/result/noent/ns5.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ns6 b/result/noent/ns6
old mode 100644
new mode 100755
diff --git a/result/noent/ns6.sax2 b/result/noent/ns6.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/ns7 b/result/noent/ns7
old mode 100644
new mode 100755
diff --git a/result/noent/ns7.sax2 b/result/noent/ns7.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/nsclean.xml b/result/noent/nsclean.xml
old mode 100644
new mode 100755
diff --git a/result/noent/nsclean.xml.sax2 b/result/noent/nsclean.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/p3p b/result/noent/p3p
old mode 100644
new mode 100755
diff --git a/result/noent/p3p.sax2 b/result/noent/p3p.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/pi.xml b/result/noent/pi.xml
old mode 100644
new mode 100755
diff --git a/result/noent/pi.xml.sax2 b/result/noent/pi.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/pi2.xml b/result/noent/pi2.xml
old mode 100644
new mode 100755
diff --git a/result/noent/pi2.xml.sax2 b/result/noent/pi2.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/rdf1 b/result/noent/rdf1
old mode 100644
new mode 100755
diff --git a/result/noent/rdf1.sax2 b/result/noent/rdf1.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/rdf2 b/result/noent/rdf2
old mode 100644
new mode 100755
diff --git a/result/noent/rdf2.sax2 b/result/noent/rdf2.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/slashdot.rdf b/result/noent/slashdot.rdf
old mode 100644
new mode 100755
diff --git a/result/noent/slashdot.rdf.sax2 b/result/noent/slashdot.rdf.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/slashdot.xml b/result/noent/slashdot.xml
old mode 100644
new mode 100755
diff --git a/result/noent/slashdot.xml.sax2 b/result/noent/slashdot.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/slashdot16.xml b/result/noent/slashdot16.xml
old mode 100644
new mode 100755
diff --git a/result/noent/slashdot16.xml.sax2 b/result/noent/slashdot16.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/svg1 b/result/noent/svg1
old mode 100644
new mode 100755
diff --git a/result/noent/svg1.sax2 b/result/noent/svg1.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/svg2 b/result/noent/svg2
old mode 100644
new mode 100755
diff --git a/result/noent/svg2.sax2 b/result/noent/svg2.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/svg3 b/result/noent/svg3
old mode 100644
new mode 100755
diff --git a/result/noent/svg3.sax2 b/result/noent/svg3.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/title.xml b/result/noent/title.xml
old mode 100644
new mode 100755
diff --git a/result/noent/title.xml.sax2 b/result/noent/title.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/tstblanks.xml b/result/noent/tstblanks.xml
old mode 100644
new mode 100755
diff --git a/result/noent/tstblanks.xml.sax2 b/result/noent/tstblanks.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/utf16bebom.xml b/result/noent/utf16bebom.xml
old mode 100644
new mode 100755
diff --git a/result/noent/utf16bebom.xml.sax2 b/result/noent/utf16bebom.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/utf16bom.xml b/result/noent/utf16bom.xml
old mode 100644
new mode 100755
diff --git a/result/noent/utf16bom.xml.sax2 b/result/noent/utf16bom.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/utf16lebom.xml b/result/noent/utf16lebom.xml
old mode 100644
new mode 100755
diff --git a/result/noent/utf16lebom.xml.sax2 b/result/noent/utf16lebom.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/utf8bom.xml b/result/noent/utf8bom.xml
old mode 100644
new mode 100755
diff --git a/result/noent/utf8bom.xml.sax2 b/result/noent/utf8bom.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/wap.xml b/result/noent/wap.xml
old mode 100644
new mode 100755
diff --git a/result/noent/wap.xml.sax2 b/result/noent/wap.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/winblanks.xml b/result/noent/winblanks.xml
old mode 100644
new mode 100755
diff --git a/result/noent/winblanks.xml.sax2 b/result/noent/winblanks.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/wml.xml b/result/noent/wml.xml
old mode 100644
new mode 100755
diff --git a/result/noent/wml.xml.sax2 b/result/noent/wml.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/xhtml1 b/result/noent/xhtml1
old mode 100644
new mode 100755
diff --git a/result/noent/xhtml1.sax2 b/result/noent/xhtml1.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/xhtmlcomp b/result/noent/xhtmlcomp
old mode 100644
new mode 100755
diff --git a/result/noent/xhtmlcomp.sax2 b/result/noent/xhtmlcomp.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/xml1 b/result/noent/xml1
old mode 100644
new mode 100755
diff --git a/result/noent/xml1.sax2 b/result/noent/xml1.sax2
old mode 100644
new mode 100755
diff --git a/result/noent/xml2 b/result/noent/xml2
old mode 100644
new mode 100755
diff --git a/result/noent/xml2.sax2 b/result/noent/xml2.sax2
old mode 100644
new mode 100755
diff --git a/result/ns b/result/ns
old mode 100644
new mode 100755
diff --git a/result/ns.rde b/result/ns.rde
old mode 100644
new mode 100755
diff --git a/result/ns.rdr b/result/ns.rdr
old mode 100644
new mode 100755
diff --git a/result/ns.sax b/result/ns.sax
old mode 100644
new mode 100755
diff --git a/result/ns.sax2 b/result/ns.sax2
old mode 100644
new mode 100755
diff --git a/result/ns2 b/result/ns2
old mode 100644
new mode 100755
diff --git a/result/ns2.rde b/result/ns2.rde
old mode 100644
new mode 100755
diff --git a/result/ns2.rdr b/result/ns2.rdr
old mode 100644
new mode 100755
diff --git a/result/ns2.sax b/result/ns2.sax
old mode 100644
new mode 100755
diff --git a/result/ns2.sax2 b/result/ns2.sax2
old mode 100644
new mode 100755
diff --git a/result/ns3 b/result/ns3
old mode 100644
new mode 100755
diff --git a/result/ns3.rde b/result/ns3.rde
old mode 100644
new mode 100755
diff --git a/result/ns3.rdr b/result/ns3.rdr
old mode 100644
new mode 100755
diff --git a/result/ns3.sax b/result/ns3.sax
old mode 100644
new mode 100755
diff --git a/result/ns3.sax2 b/result/ns3.sax2
old mode 100644
new mode 100755
diff --git a/result/ns4 b/result/ns4
old mode 100644
new mode 100755
diff --git a/result/ns4.rde b/result/ns4.rde
old mode 100644
new mode 100755
diff --git a/result/ns4.rdr b/result/ns4.rdr
old mode 100644
new mode 100755
diff --git a/result/ns4.sax b/result/ns4.sax
old mode 100644
new mode 100755
diff --git a/result/ns4.sax2 b/result/ns4.sax2
old mode 100644
new mode 100755
diff --git a/result/ns5 b/result/ns5
old mode 100644
new mode 100755
diff --git a/result/ns5.rde b/result/ns5.rde
old mode 100644
new mode 100755
diff --git a/result/ns5.rdr b/result/ns5.rdr
old mode 100644
new mode 100755
diff --git a/result/ns5.sax b/result/ns5.sax
old mode 100644
new mode 100755
diff --git a/result/ns5.sax2 b/result/ns5.sax2
old mode 100644
new mode 100755
diff --git a/result/ns6 b/result/ns6
old mode 100644
new mode 100755
diff --git a/result/ns6.rde b/result/ns6.rde
old mode 100644
new mode 100755
diff --git a/result/ns6.rdr b/result/ns6.rdr
old mode 100644
new mode 100755
diff --git a/result/ns6.sax b/result/ns6.sax
old mode 100644
new mode 100755
diff --git a/result/ns6.sax2 b/result/ns6.sax2
old mode 100644
new mode 100755
diff --git a/result/ns7 b/result/ns7
old mode 100644
new mode 100755
diff --git a/result/ns7.rde b/result/ns7.rde
old mode 100644
new mode 100755
diff --git a/result/ns7.rdr b/result/ns7.rdr
old mode 100644
new mode 100755
diff --git a/result/ns7.sax b/result/ns7.sax
old mode 100644
new mode 100755
diff --git a/result/ns7.sax2 b/result/ns7.sax2
old mode 100644
new mode 100755
diff --git a/result/nsclean.xml b/result/nsclean.xml
old mode 100644
new mode 100755
diff --git a/result/nsclean.xml.rde b/result/nsclean.xml.rde
old mode 100644
new mode 100755
diff --git a/result/nsclean.xml.rdr b/result/nsclean.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/nsclean.xml.sax b/result/nsclean.xml.sax
old mode 100644
new mode 100755
diff --git a/result/nsclean.xml.sax2 b/result/nsclean.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/p3p b/result/p3p
old mode 100644
new mode 100755
diff --git a/result/p3p.rde b/result/p3p.rde
old mode 100644
new mode 100755
diff --git a/result/p3p.rdr b/result/p3p.rdr
old mode 100644
new mode 100755
diff --git a/result/p3p.sax b/result/p3p.sax
old mode 100644
new mode 100755
diff --git a/result/p3p.sax2 b/result/p3p.sax2
old mode 100644
new mode 100755
diff --git a/result/pattern/conj b/result/pattern/conj
old mode 100644
new mode 100755
diff --git a/result/pattern/multiple b/result/pattern/multiple
old mode 100644
new mode 100755
diff --git a/result/pattern/namespaces b/result/pattern/namespaces
old mode 100644
new mode 100755
diff --git a/result/pattern/simple b/result/pattern/simple
old mode 100644
new mode 100755
diff --git a/result/pi.xml b/result/pi.xml
old mode 100644
new mode 100755
diff --git a/result/pi.xml.rde b/result/pi.xml.rde
old mode 100644
new mode 100755
diff --git a/result/pi.xml.rdr b/result/pi.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/pi.xml.sax b/result/pi.xml.sax
old mode 100644
new mode 100755
diff --git a/result/pi.xml.sax2 b/result/pi.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/pi2.xml b/result/pi2.xml
old mode 100644
new mode 100755
diff --git a/result/pi2.xml.rde b/result/pi2.xml.rde
old mode 100644
new mode 100755
diff --git a/result/pi2.xml.rdr b/result/pi2.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/pi2.xml.sax b/result/pi2.xml.sax
old mode 100644
new mode 100755
diff --git a/result/pi2.xml.sax2 b/result/pi2.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/rdf1 b/result/rdf1
old mode 100644
new mode 100755
diff --git a/result/rdf1.rde b/result/rdf1.rde
old mode 100644
new mode 100755
diff --git a/result/rdf1.rdr b/result/rdf1.rdr
old mode 100644
new mode 100755
diff --git a/result/rdf1.sax b/result/rdf1.sax
old mode 100644
new mode 100755
diff --git a/result/rdf1.sax2 b/result/rdf1.sax2
old mode 100644
new mode 100755
diff --git a/result/rdf2 b/result/rdf2
old mode 100644
new mode 100755
diff --git a/result/rdf2.rde b/result/rdf2.rde
old mode 100644
new mode 100755
diff --git a/result/rdf2.rdr b/result/rdf2.rdr
old mode 100644
new mode 100755
diff --git a/result/rdf2.sax b/result/rdf2.sax
old mode 100644
new mode 100755
diff --git a/result/rdf2.sax2 b/result/rdf2.sax2
old mode 100644
new mode 100755
diff --git a/result/regexp/branch b/result/regexp/branch
old mode 100644
new mode 100755
diff --git a/result/regexp/bug316338 b/result/regexp/bug316338
old mode 100644
new mode 100755
diff --git a/result/regexp/bug420596 b/result/regexp/bug420596
old mode 100644
new mode 100755
diff --git a/result/regexp/bug649244 b/result/regexp/bug649244
old mode 100644
new mode 100755
diff --git a/result/regexp/content b/result/regexp/content
old mode 100644
new mode 100755
diff --git a/result/regexp/hard b/result/regexp/hard
old mode 100644
new mode 100755
diff --git a/result/regexp/ncname b/result/regexp/ncname
old mode 100644
new mode 100755
diff --git a/result/regexp/ranges b/result/regexp/ranges
old mode 100644
new mode 100755
diff --git a/result/regexp/ranges2 b/result/regexp/ranges2
old mode 100644
new mode 100755
diff --git a/result/regexp/xpath b/result/regexp/xpath
old mode 100644
new mode 100755
diff --git a/result/relaxng/302836_0 b/result/relaxng/302836_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/302836_0.err b/result/relaxng/302836_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/302836_err b/result/relaxng/302836_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/302836_valid b/result/relaxng/302836_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/307377_0 b/result/relaxng/307377_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/307377_0.err b/result/relaxng/307377_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/307377_1 b/result/relaxng/307377_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/307377_1.err b/result/relaxng/307377_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/307377_2 b/result/relaxng/307377_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/307377_2.err b/result/relaxng/307377_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/307377_err b/result/relaxng/307377_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/307377_valid b/result/relaxng/307377_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/492317_0 b/result/relaxng/492317_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/492317_0.err b/result/relaxng/492317_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/492317_1 b/result/relaxng/492317_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/492317_1.err b/result/relaxng/492317_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/492317_2 b/result/relaxng/492317_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/492317_2.err b/result/relaxng/492317_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/492317_err b/result/relaxng/492317_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/492317_valid b/result/relaxng/492317_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_0 b/result/relaxng/558452_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_0.err b/result/relaxng/558452_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_1 b/result/relaxng/558452_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_1.err b/result/relaxng/558452_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_2 b/result/relaxng/558452_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_2.err b/result/relaxng/558452_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_3 b/result/relaxng/558452_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_3.err b/result/relaxng/558452_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_4 b/result/relaxng/558452_4
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_4.err b/result/relaxng/558452_4.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_err b/result/relaxng/558452_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/558452_valid b/result/relaxng/558452_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/565219_0 b/result/relaxng/565219_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/565219_0.err b/result/relaxng/565219_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/565219_1 b/result/relaxng/565219_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/565219_1.err b/result/relaxng/565219_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/565219_2 b/result/relaxng/565219_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/565219_2.err b/result/relaxng/565219_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/565219_err b/result/relaxng/565219_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/565219_valid b/result/relaxng/565219_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/595792-ext_err b/result/relaxng/595792-ext_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/595792-ext_valid b/result/relaxng/595792-ext_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/595792_0 b/result/relaxng/595792_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/595792_0.err b/result/relaxng/595792_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/595792_err b/result/relaxng/595792_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/595792_valid b/result/relaxng/595792_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/710744_1 b/result/relaxng/710744_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/710744_1.err b/result/relaxng/710744_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/710744_2 b/result/relaxng/710744_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/710744_2.err b/result/relaxng/710744_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/710744_err b/result/relaxng/710744_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/710744_valid b/result/relaxng/710744_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/OpenDocumentSub_0 b/result/relaxng/OpenDocumentSub_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/OpenDocumentSub_0.err b/result/relaxng/OpenDocumentSub_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/OpenDocumentSub_err b/result/relaxng/OpenDocumentSub_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/OpenDocumentSub_valid b/result/relaxng/OpenDocumentSub_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/addressBook_err b/result/relaxng/addressBook_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/addressBook_valid b/result/relaxng/addressBook_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/ambig_name-class2_err b/result/relaxng/ambig_name-class2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/ambig_name-class2_valid b/result/relaxng/ambig_name-class2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/ambig_name-class_err b/result/relaxng/ambig_name-class_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/ambig_name-class_valid b/result/relaxng/ambig_name-class_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/anyName0_0 b/result/relaxng/anyName0_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/anyName0_0.err b/result/relaxng/anyName0_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/anyName0_err b/result/relaxng/anyName0_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/anyName0_valid b/result/relaxng/anyName0_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_0 b/result/relaxng/choice0_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_0.err b/result/relaxng/choice0_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_1 b/result/relaxng/choice0_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_1.err b/result/relaxng/choice0_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_2 b/result/relaxng/choice0_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_2.err b/result/relaxng/choice0_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_3 b/result/relaxng/choice0_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_3.err b/result/relaxng/choice0_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_4 b/result/relaxng/choice0_4
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_4.err b/result/relaxng/choice0_4.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_5 b/result/relaxng/choice0_5
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_5.err b/result/relaxng/choice0_5.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_6 b/result/relaxng/choice0_6
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_6.err b/result/relaxng/choice0_6.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_7 b/result/relaxng/choice0_7
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_7.err b/result/relaxng/choice0_7.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_8 b/result/relaxng/choice0_8
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_8.err b/result/relaxng/choice0_8.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_err b/result/relaxng/choice0_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/choice0_valid b/result/relaxng/choice0_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/compare0_0 b/result/relaxng/compare0_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/compare0_0.err b/result/relaxng/compare0_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/compare0_err b/result/relaxng/compare0_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/compare0_valid b/result/relaxng/compare0_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/comps_0 b/result/relaxng/comps_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/comps_0.err b/result/relaxng/comps_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/comps_err b/result/relaxng/comps_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/comps_valid b/result/relaxng/comps_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/demo2_err b/result/relaxng/demo2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/demo2_valid b/result/relaxng/demo2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/demo3_err b/result/relaxng/demo3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/demo3_valid b/result/relaxng/demo3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/demo_err b/result/relaxng/demo_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/demo_valid b/result/relaxng/demo_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/docbook_0 b/result/relaxng/docbook_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/docbook_0.err b/result/relaxng/docbook_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/docbook_err b/result/relaxng/docbook_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/docbook_valid b/result/relaxng/docbook_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/empty0_0 b/result/relaxng/empty0_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/empty0_0.err b/result/relaxng/empty0_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/empty0_err b/result/relaxng/empty0_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/empty0_valid b/result/relaxng/empty0_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/empty1_0 b/result/relaxng/empty1_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/empty1_0.err b/result/relaxng/empty1_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/empty1_1 b/result/relaxng/empty1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/empty1_1.err b/result/relaxng/empty1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/empty1_err b/result/relaxng/empty1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/empty1_valid b/result/relaxng/empty1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/include0_0 b/result/relaxng/include0_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/include0_0.err b/result/relaxng/include0_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/include0_err b/result/relaxng/include0_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/include0_valid b/result/relaxng/include0_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/include1_0 b/result/relaxng/include1_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/include1_0.err b/result/relaxng/include1_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/include1_err b/result/relaxng/include1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/include1_valid b/result/relaxng/include1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/inline2_err b/result/relaxng/inline2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/inline2_valid b/result/relaxng/inline2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/inline3_err b/result/relaxng/inline3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/inline3_valid b/result/relaxng/inline3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/inline_err b/result/relaxng/inline_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/inline_valid b/result/relaxng/inline_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/interleave0_0_err b/result/relaxng/interleave0_0_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/interleave0_0_valid b/result/relaxng/interleave0_0_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/interleave1_0_err b/result/relaxng/interleave1_0_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/interleave1_0_valid b/result/relaxng/interleave1_0_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/libvirt_0 b/result/relaxng/libvirt_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/libvirt_0.err b/result/relaxng/libvirt_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/libvirt_err b/result/relaxng/libvirt_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/libvirt_valid b/result/relaxng/libvirt_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/list_0 b/result/relaxng/list_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/list_0.err b/result/relaxng/list_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/list_1 b/result/relaxng/list_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/list_1.err b/result/relaxng/list_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/list_err b/result/relaxng/list_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/list_valid b/result/relaxng/list_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/pattern1_err b/result/relaxng/pattern1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/pattern1_valid b/result/relaxng/pattern1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/pattern2_err b/result/relaxng/pattern2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/pattern2_valid b/result/relaxng/pattern2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/pattern3_1 b/result/relaxng/pattern3_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/pattern3_1.err b/result/relaxng/pattern3_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/pattern3_err b/result/relaxng/pattern3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/pattern3_valid b/result/relaxng/pattern3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/proofsystem_err b/result/relaxng/proofsystem_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/proofsystem_valid b/result/relaxng/proofsystem_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/rngbug-001_err b/result/relaxng/rngbug-001_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/rngbug-001_valid b/result/relaxng/rngbug-001_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/spec1_1 b/result/relaxng/spec1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/spec1_1.err b/result/relaxng/spec1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/spec1_err b/result/relaxng/spec1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/spec1_valid b/result/relaxng/spec1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/spec_0 b/result/relaxng/spec_0
old mode 100644
new mode 100755
diff --git a/result/relaxng/spec_0.err b/result/relaxng/spec_0.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/spec_err b/result/relaxng/spec_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/spec_valid b/result/relaxng/spec_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/table_err b/result/relaxng/table_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/table_valid b/result/relaxng/table_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_10_1 b/result/relaxng/tutor10_10_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_10_1.err b/result/relaxng/tutor10_10_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_10_err b/result/relaxng/tutor10_10_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_10_valid b/result/relaxng/tutor10_10_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_1 b/result/relaxng/tutor10_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_1.err b/result/relaxng/tutor10_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_2 b/result/relaxng/tutor10_1_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_2.err b/result/relaxng/tutor10_1_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_3 b/result/relaxng/tutor10_1_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_3.err b/result/relaxng/tutor10_1_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_4 b/result/relaxng/tutor10_1_4
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_4.err b/result/relaxng/tutor10_1_4.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_5 b/result/relaxng/tutor10_1_5
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_5.err b/result/relaxng/tutor10_1_5.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_6 b/result/relaxng/tutor10_1_6
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_6.err b/result/relaxng/tutor10_1_6.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_err b/result/relaxng/tutor10_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_1_valid b/result/relaxng/tutor10_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_2_1 b/result/relaxng/tutor10_2_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_2_1.err b/result/relaxng/tutor10_2_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_2_2 b/result/relaxng/tutor10_2_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_2_2.err b/result/relaxng/tutor10_2_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_2_3 b/result/relaxng/tutor10_2_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_2_3.err b/result/relaxng/tutor10_2_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_2_4 b/result/relaxng/tutor10_2_4
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_2_4.err b/result/relaxng/tutor10_2_4.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_2_err b/result/relaxng/tutor10_2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_2_valid b/result/relaxng/tutor10_2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_3_1 b/result/relaxng/tutor10_3_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_3_1.err b/result/relaxng/tutor10_3_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_3_err b/result/relaxng/tutor10_3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_3_valid b/result/relaxng/tutor10_3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_4_1 b/result/relaxng/tutor10_4_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_4_1.err b/result/relaxng/tutor10_4_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_4_err b/result/relaxng/tutor10_4_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_4_valid b/result/relaxng/tutor10_4_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_5_1 b/result/relaxng/tutor10_5_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_5_1.err b/result/relaxng/tutor10_5_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_5_err b/result/relaxng/tutor10_5_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_5_valid b/result/relaxng/tutor10_5_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_6_1 b/result/relaxng/tutor10_6_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_6_1.err b/result/relaxng/tutor10_6_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_6_err b/result/relaxng/tutor10_6_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_6_valid b/result/relaxng/tutor10_6_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_7_1 b/result/relaxng/tutor10_7_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_7_1.err b/result/relaxng/tutor10_7_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_7_2 b/result/relaxng/tutor10_7_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_7_2.err b/result/relaxng/tutor10_7_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_7_3 b/result/relaxng/tutor10_7_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_7_3.err b/result/relaxng/tutor10_7_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_7_err b/result/relaxng/tutor10_7_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_7_valid b/result/relaxng/tutor10_7_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_8_1 b/result/relaxng/tutor10_8_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_8_1.err b/result/relaxng/tutor10_8_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_8_2 b/result/relaxng/tutor10_8_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_8_2.err b/result/relaxng/tutor10_8_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_8_3 b/result/relaxng/tutor10_8_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_8_3.err b/result/relaxng/tutor10_8_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_8_err b/result/relaxng/tutor10_8_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_8_valid b/result/relaxng/tutor10_8_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_9_1 b/result/relaxng/tutor10_9_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_9_1.err b/result/relaxng/tutor10_9_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_9_err b/result/relaxng/tutor10_9_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor10_9_valid b/result/relaxng/tutor10_9_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_1_1 b/result/relaxng/tutor11_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_1_1.err b/result/relaxng/tutor11_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_1_2 b/result/relaxng/tutor11_1_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_1_2.err b/result/relaxng/tutor11_1_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_1_3 b/result/relaxng/tutor11_1_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_1_3.err b/result/relaxng/tutor11_1_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_1_err b/result/relaxng/tutor11_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_1_valid b/result/relaxng/tutor11_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_2_1 b/result/relaxng/tutor11_2_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_2_1.err b/result/relaxng/tutor11_2_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_2_2 b/result/relaxng/tutor11_2_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_2_2.err b/result/relaxng/tutor11_2_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_2_3 b/result/relaxng/tutor11_2_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_2_3.err b/result/relaxng/tutor11_2_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_2_err b/result/relaxng/tutor11_2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_2_valid b/result/relaxng/tutor11_2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_3_1 b/result/relaxng/tutor11_3_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_3_1.err b/result/relaxng/tutor11_3_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_3_err b/result/relaxng/tutor11_3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_3_valid b/result/relaxng/tutor11_3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_4_1 b/result/relaxng/tutor11_4_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_4_1.err b/result/relaxng/tutor11_4_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_4_err b/result/relaxng/tutor11_4_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor11_4_valid b/result/relaxng/tutor11_4_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor12_1_1 b/result/relaxng/tutor12_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor12_1_1.err b/result/relaxng/tutor12_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor12_1_err b/result/relaxng/tutor12_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor12_1_valid b/result/relaxng/tutor12_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor13_1_1 b/result/relaxng/tutor13_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor13_1_1.err b/result/relaxng/tutor13_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor13_1_err b/result/relaxng/tutor13_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor13_1_valid b/result/relaxng/tutor13_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor14_1_err b/result/relaxng/tutor14_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor14_1_valid b/result/relaxng/tutor14_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_1_1 b/result/relaxng/tutor1_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_1_1.err b/result/relaxng/tutor1_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_1_err b/result/relaxng/tutor1_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_1_valid b/result/relaxng/tutor1_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_2_1 b/result/relaxng/tutor1_2_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_2_1.err b/result/relaxng/tutor1_2_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_2_err b/result/relaxng/tutor1_2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_2_valid b/result/relaxng/tutor1_2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_3_1 b/result/relaxng/tutor1_3_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_3_1.err b/result/relaxng/tutor1_3_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_3_err b/result/relaxng/tutor1_3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_3_valid b/result/relaxng/tutor1_3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_4_1 b/result/relaxng/tutor1_4_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_4_1.err b/result/relaxng/tutor1_4_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_4_err b/result/relaxng/tutor1_4_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor1_4_valid b/result/relaxng/tutor1_4_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor2_1_1 b/result/relaxng/tutor2_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor2_1_1.err b/result/relaxng/tutor2_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor2_1_err b/result/relaxng/tutor2_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor2_1_valid b/result/relaxng/tutor2_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_1_1 b/result/relaxng/tutor3_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_1_1.err b/result/relaxng/tutor3_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_1_2 b/result/relaxng/tutor3_1_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_1_2.err b/result/relaxng/tutor3_1_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_1_err b/result/relaxng/tutor3_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_1_valid b/result/relaxng/tutor3_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_2_1 b/result/relaxng/tutor3_2_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_2_1.err b/result/relaxng/tutor3_2_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_2_err b/result/relaxng/tutor3_2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_2_valid b/result/relaxng/tutor3_2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_3_1 b/result/relaxng/tutor3_3_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_3_1.err b/result/relaxng/tutor3_3_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_3_err b/result/relaxng/tutor3_3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_3_valid b/result/relaxng/tutor3_3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_4_1 b/result/relaxng/tutor3_4_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_4_1.err b/result/relaxng/tutor3_4_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_4_err b/result/relaxng/tutor3_4_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_4_valid b/result/relaxng/tutor3_4_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_5_1 b/result/relaxng/tutor3_5_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_5_1.err b/result/relaxng/tutor3_5_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_5_2 b/result/relaxng/tutor3_5_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_5_2.err b/result/relaxng/tutor3_5_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_5_err b/result/relaxng/tutor3_5_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_5_valid b/result/relaxng/tutor3_5_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_6_1 b/result/relaxng/tutor3_6_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_6_1.err b/result/relaxng/tutor3_6_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_6_err b/result/relaxng/tutor3_6_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_6_valid b/result/relaxng/tutor3_6_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_7_1 b/result/relaxng/tutor3_7_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_7_1.err b/result/relaxng/tutor3_7_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_7_err b/result/relaxng/tutor3_7_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_7_valid b/result/relaxng/tutor3_7_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_8_1 b/result/relaxng/tutor3_8_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_8_1.err b/result/relaxng/tutor3_8_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_8_err b/result/relaxng/tutor3_8_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_8_valid b/result/relaxng/tutor3_8_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_9_1 b/result/relaxng/tutor3_9_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_9_1.err b/result/relaxng/tutor3_9_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_9_err b/result/relaxng/tutor3_9_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor3_9_valid b/result/relaxng/tutor3_9_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_1_1 b/result/relaxng/tutor4_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_1_1.err b/result/relaxng/tutor4_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_1_err b/result/relaxng/tutor4_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_1_valid b/result/relaxng/tutor4_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_2_1 b/result/relaxng/tutor4_2_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_2_1.err b/result/relaxng/tutor4_2_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_2_err b/result/relaxng/tutor4_2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_2_valid b/result/relaxng/tutor4_2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_1 b/result/relaxng/tutor4_3_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_1.err b/result/relaxng/tutor4_3_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_2 b/result/relaxng/tutor4_3_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_2.err b/result/relaxng/tutor4_3_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_3 b/result/relaxng/tutor4_3_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_3.err b/result/relaxng/tutor4_3_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_4 b/result/relaxng/tutor4_3_4
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_4.err b/result/relaxng/tutor4_3_4.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_5 b/result/relaxng/tutor4_3_5
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_5.err b/result/relaxng/tutor4_3_5.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_6 b/result/relaxng/tutor4_3_6
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_6.err b/result/relaxng/tutor4_3_6.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_err b/result/relaxng/tutor4_3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_3_valid b/result/relaxng/tutor4_3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_4_1 b/result/relaxng/tutor4_4_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_4_1.err b/result/relaxng/tutor4_4_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_4_err b/result/relaxng/tutor4_4_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor4_4_valid b/result/relaxng/tutor4_4_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_1_1 b/result/relaxng/tutor5_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_1_1.err b/result/relaxng/tutor5_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_1_err b/result/relaxng/tutor5_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_1_valid b/result/relaxng/tutor5_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_2_1 b/result/relaxng/tutor5_2_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_2_1.err b/result/relaxng/tutor5_2_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_2_err b/result/relaxng/tutor5_2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_2_valid b/result/relaxng/tutor5_2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_3_1 b/result/relaxng/tutor5_3_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_3_1.err b/result/relaxng/tutor5_3_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_3_err b/result/relaxng/tutor5_3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_3_valid b/result/relaxng/tutor5_3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_4_1 b/result/relaxng/tutor5_4_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_4_1.err b/result/relaxng/tutor5_4_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_4_err b/result/relaxng/tutor5_4_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_4_valid b/result/relaxng/tutor5_4_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_5_err b/result/relaxng/tutor5_5_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor5_5_valid b/result/relaxng/tutor5_5_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_1 b/result/relaxng/tutor6_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_1.err b/result/relaxng/tutor6_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_2 b/result/relaxng/tutor6_1_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_2.err b/result/relaxng/tutor6_1_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_3 b/result/relaxng/tutor6_1_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_3.err b/result/relaxng/tutor6_1_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_4 b/result/relaxng/tutor6_1_4
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_4.err b/result/relaxng/tutor6_1_4.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_5 b/result/relaxng/tutor6_1_5
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_5.err b/result/relaxng/tutor6_1_5.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_err b/result/relaxng/tutor6_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_1_valid b/result/relaxng/tutor6_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_2_1 b/result/relaxng/tutor6_2_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_2_1.err b/result/relaxng/tutor6_2_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_2_2 b/result/relaxng/tutor6_2_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_2_2.err b/result/relaxng/tutor6_2_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_2_3 b/result/relaxng/tutor6_2_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_2_3.err b/result/relaxng/tutor6_2_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_2_4 b/result/relaxng/tutor6_2_4
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_2_4.err b/result/relaxng/tutor6_2_4.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_2_err b/result/relaxng/tutor6_2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_2_valid b/result/relaxng/tutor6_2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_3_1 b/result/relaxng/tutor6_3_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_3_1.err b/result/relaxng/tutor6_3_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_3_err b/result/relaxng/tutor6_3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor6_3_valid b/result/relaxng/tutor6_3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_1_1 b/result/relaxng/tutor7_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_1_1.err b/result/relaxng/tutor7_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_1_2 b/result/relaxng/tutor7_1_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_1_2.err b/result/relaxng/tutor7_1_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_1_3 b/result/relaxng/tutor7_1_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_1_3.err b/result/relaxng/tutor7_1_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_1_4 b/result/relaxng/tutor7_1_4
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_1_4.err b/result/relaxng/tutor7_1_4.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_1_err b/result/relaxng/tutor7_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_1_valid b/result/relaxng/tutor7_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_2_1 b/result/relaxng/tutor7_2_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_2_1.err b/result/relaxng/tutor7_2_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_2_2 b/result/relaxng/tutor7_2_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_2_2.err b/result/relaxng/tutor7_2_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_2_3 b/result/relaxng/tutor7_2_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_2_3.err b/result/relaxng/tutor7_2_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_2_4 b/result/relaxng/tutor7_2_4
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_2_4.err b/result/relaxng/tutor7_2_4.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_2_err b/result/relaxng/tutor7_2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_2_valid b/result/relaxng/tutor7_2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_1 b/result/relaxng/tutor7_3_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_1.err b/result/relaxng/tutor7_3_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_2 b/result/relaxng/tutor7_3_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_2.err b/result/relaxng/tutor7_3_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_3 b/result/relaxng/tutor7_3_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_3.err b/result/relaxng/tutor7_3_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_4 b/result/relaxng/tutor7_3_4
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_4.err b/result/relaxng/tutor7_3_4.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_5 b/result/relaxng/tutor7_3_5
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_5.err b/result/relaxng/tutor7_3_5.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_err b/result/relaxng/tutor7_3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor7_3_valid b/result/relaxng/tutor7_3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_1_1 b/result/relaxng/tutor8_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_1_1.err b/result/relaxng/tutor8_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_1_2 b/result/relaxng/tutor8_1_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_1_2.err b/result/relaxng/tutor8_1_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_1_err b/result/relaxng/tutor8_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_1_valid b/result/relaxng/tutor8_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_1 b/result/relaxng/tutor8_2_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_1.err b/result/relaxng/tutor8_2_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_2 b/result/relaxng/tutor8_2_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_2.err b/result/relaxng/tutor8_2_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_3 b/result/relaxng/tutor8_2_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_3.err b/result/relaxng/tutor8_2_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_4 b/result/relaxng/tutor8_2_4
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_4.err b/result/relaxng/tutor8_2_4.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_5 b/result/relaxng/tutor8_2_5
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_5.err b/result/relaxng/tutor8_2_5.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_6 b/result/relaxng/tutor8_2_6
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_6.err b/result/relaxng/tutor8_2_6.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_err b/result/relaxng/tutor8_2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_2_valid b/result/relaxng/tutor8_2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_3_1 b/result/relaxng/tutor8_3_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_3_1.err b/result/relaxng/tutor8_3_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_3_err b/result/relaxng/tutor8_3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor8_3_valid b/result/relaxng/tutor8_3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_10_1 b/result/relaxng/tutor9_10_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_10_1.err b/result/relaxng/tutor9_10_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_10_err b/result/relaxng/tutor9_10_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_10_valid b/result/relaxng/tutor9_10_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_11_1 b/result/relaxng/tutor9_11_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_11_1.err b/result/relaxng/tutor9_11_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_11_err b/result/relaxng/tutor9_11_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_11_valid b/result/relaxng/tutor9_11_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_12_1 b/result/relaxng/tutor9_12_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_12_1.err b/result/relaxng/tutor9_12_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_12_err b/result/relaxng/tutor9_12_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_12_valid b/result/relaxng/tutor9_12_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_1_1 b/result/relaxng/tutor9_1_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_1_1.err b/result/relaxng/tutor9_1_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_1_err b/result/relaxng/tutor9_1_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_1_valid b/result/relaxng/tutor9_1_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_2_1 b/result/relaxng/tutor9_2_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_2_1.err b/result/relaxng/tutor9_2_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_2_2 b/result/relaxng/tutor9_2_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_2_2.err b/result/relaxng/tutor9_2_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_2_err b/result/relaxng/tutor9_2_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_2_valid b/result/relaxng/tutor9_2_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_3_1 b/result/relaxng/tutor9_3_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_3_1.err b/result/relaxng/tutor9_3_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_3_2 b/result/relaxng/tutor9_3_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_3_2.err b/result/relaxng/tutor9_3_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_3_err b/result/relaxng/tutor9_3_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_3_valid b/result/relaxng/tutor9_3_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_4_1 b/result/relaxng/tutor9_4_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_4_1.err b/result/relaxng/tutor9_4_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_4_2 b/result/relaxng/tutor9_4_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_4_2.err b/result/relaxng/tutor9_4_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_4_err b/result/relaxng/tutor9_4_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_4_valid b/result/relaxng/tutor9_4_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_5_1 b/result/relaxng/tutor9_5_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_5_1.err b/result/relaxng/tutor9_5_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_5_2 b/result/relaxng/tutor9_5_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_5_2.err b/result/relaxng/tutor9_5_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_5_3 b/result/relaxng/tutor9_5_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_5_3.err b/result/relaxng/tutor9_5_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_5_err b/result/relaxng/tutor9_5_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_5_valid b/result/relaxng/tutor9_5_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_6.rng b/result/relaxng/tutor9_6.rng
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_6_1 b/result/relaxng/tutor9_6_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_6_1.err b/result/relaxng/tutor9_6_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_6_2 b/result/relaxng/tutor9_6_2
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_6_2.err b/result/relaxng/tutor9_6_2.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_6_3 b/result/relaxng/tutor9_6_3
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_6_3.err b/result/relaxng/tutor9_6_3.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_6_err b/result/relaxng/tutor9_6_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_6_valid b/result/relaxng/tutor9_6_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_7_1 b/result/relaxng/tutor9_7_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_7_1.err b/result/relaxng/tutor9_7_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_7_err b/result/relaxng/tutor9_7_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_7_valid b/result/relaxng/tutor9_7_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_8_1 b/result/relaxng/tutor9_8_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_8_1.err b/result/relaxng/tutor9_8_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_8_err b/result/relaxng/tutor9_8_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_8_valid b/result/relaxng/tutor9_8_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_9_1 b/result/relaxng/tutor9_9_1
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_9_1.err b/result/relaxng/tutor9_9_1.err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_9_err b/result/relaxng/tutor9_9_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutor9_9_valid b/result/relaxng/tutor9_9_valid
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutorA_err b/result/relaxng/tutorA_err
old mode 100644
new mode 100755
diff --git a/result/relaxng/tutorA_valid b/result/relaxng/tutorA_valid
old mode 100644
new mode 100755
diff --git a/result/schemas/570702_0_0 b/result/schemas/570702_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/570702_0_0.err b/result/schemas/570702_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_0 b/result/schemas/579746_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_0.err b/result/schemas/579746_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_1 b/result/schemas/579746_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_1.err b/result/schemas/579746_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_2 b/result/schemas/579746_0_2
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_2.err b/result/schemas/579746_0_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_3 b/result/schemas/579746_0_3
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_3.err b/result/schemas/579746_0_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_4 b/result/schemas/579746_0_4
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_4.err b/result/schemas/579746_0_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_5 b/result/schemas/579746_0_5
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_0_5.err b/result/schemas/579746_0_5.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_0 b/result/schemas/579746_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_0.err b/result/schemas/579746_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_1 b/result/schemas/579746_1_1
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_1.err b/result/schemas/579746_1_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_2 b/result/schemas/579746_1_2
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_2.err b/result/schemas/579746_1_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_3 b/result/schemas/579746_1_3
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_3.err b/result/schemas/579746_1_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_4 b/result/schemas/579746_1_4
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_4.err b/result/schemas/579746_1_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_5 b/result/schemas/579746_1_5
old mode 100644
new mode 100755
diff --git a/result/schemas/579746_1_5.err b/result/schemas/579746_1_5.err
old mode 100644
new mode 100755
diff --git a/result/schemas/582887_0_0 b/result/schemas/582887_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/582887_0_0.err b/result/schemas/582887_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/582906-1_0_0 b/result/schemas/582906-1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/582906-1_0_0.err b/result/schemas/582906-1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/582906-2_0_0 b/result/schemas/582906-2_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/582906-2_0_0.err b/result/schemas/582906-2_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all1_0_0 b/result/schemas/all1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/all1_0_0.err b/result/schemas/all1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_0 b/result/schemas/all_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_0.err b/result/schemas/all_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_1 b/result/schemas/all_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_1.err b/result/schemas/all_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_2 b/result/schemas/all_0_2
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_2.err b/result/schemas/all_0_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_3 b/result/schemas/all_0_3
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_3.err b/result/schemas/all_0_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_4 b/result/schemas/all_0_4
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_4.err b/result/schemas/all_0_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_5 b/result/schemas/all_0_5
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_5.err b/result/schemas/all_0_5.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_6 b/result/schemas/all_0_6
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_6.err b/result/schemas/all_0_6.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_7 b/result/schemas/all_0_7
old mode 100644
new mode 100755
diff --git a/result/schemas/all_0_7.err b/result/schemas/all_0_7.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_0 b/result/schemas/all_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_0.err b/result/schemas/all_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_1 b/result/schemas/all_1_1
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_1.err b/result/schemas/all_1_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_2 b/result/schemas/all_1_2
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_2.err b/result/schemas/all_1_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_3 b/result/schemas/all_1_3
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_3.err b/result/schemas/all_1_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_4 b/result/schemas/all_1_4
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_4.err b/result/schemas/all_1_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_5 b/result/schemas/all_1_5
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_5.err b/result/schemas/all_1_5.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_6 b/result/schemas/all_1_6
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_6.err b/result/schemas/all_1_6.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_7 b/result/schemas/all_1_7
old mode 100644
new mode 100755
diff --git a/result/schemas/all_1_7.err b/result/schemas/all_1_7.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_0 b/result/schemas/all_2_0
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_0.err b/result/schemas/all_2_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_1 b/result/schemas/all_2_1
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_1.err b/result/schemas/all_2_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_2 b/result/schemas/all_2_2
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_2.err b/result/schemas/all_2_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_3 b/result/schemas/all_2_3
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_3.err b/result/schemas/all_2_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_4 b/result/schemas/all_2_4
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_4.err b/result/schemas/all_2_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_5 b/result/schemas/all_2_5
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_5.err b/result/schemas/all_2_5.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_6 b/result/schemas/all_2_6
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_6.err b/result/schemas/all_2_6.err
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_7 b/result/schemas/all_2_7
old mode 100644
new mode 100755
diff --git a/result/schemas/all_2_7.err b/result/schemas/all_2_7.err
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_0 b/result/schemas/allsg_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_0.err b/result/schemas/allsg_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_1 b/result/schemas/allsg_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_1.err b/result/schemas/allsg_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_2 b/result/schemas/allsg_0_2
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_2.err b/result/schemas/allsg_0_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_3 b/result/schemas/allsg_0_3
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_3.err b/result/schemas/allsg_0_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_4 b/result/schemas/allsg_0_4
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_4.err b/result/schemas/allsg_0_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_5 b/result/schemas/allsg_0_5
old mode 100644
new mode 100755
diff --git a/result/schemas/allsg_0_5.err b/result/schemas/allsg_0_5.err
old mode 100644
new mode 100755
diff --git a/result/schemas/annot-err_0_0 b/result/schemas/annot-err_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/annot-err_0_0.err b/result/schemas/annot-err_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any1_0_0 b/result/schemas/any1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/any1_0_0.err b/result/schemas/any1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any2_0_0 b/result/schemas/any2_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/any2_0_0.err b/result/schemas/any2_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any3_0_0 b/result/schemas/any3_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/any3_0_0.err b/result/schemas/any3_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any4_0_0 b/result/schemas/any4_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/any4_0_0.err b/result/schemas/any4_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_0 b/result/schemas/any5_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_0.err b/result/schemas/any5_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_1 b/result/schemas/any5_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_1.err b/result/schemas/any5_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_2 b/result/schemas/any5_0_2
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_2.err b/result/schemas/any5_0_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_3 b/result/schemas/any5_0_3
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_3.err b/result/schemas/any5_0_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_4 b/result/schemas/any5_0_4
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_4.err b/result/schemas/any5_0_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_5 b/result/schemas/any5_0_5
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_5.err b/result/schemas/any5_0_5.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_6 b/result/schemas/any5_0_6
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_0_6.err b/result/schemas/any5_0_6.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_0 b/result/schemas/any5_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_0.err b/result/schemas/any5_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_1 b/result/schemas/any5_1_1
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_1.err b/result/schemas/any5_1_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_2 b/result/schemas/any5_1_2
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_2.err b/result/schemas/any5_1_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_3 b/result/schemas/any5_1_3
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_3.err b/result/schemas/any5_1_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_4 b/result/schemas/any5_1_4
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_4.err b/result/schemas/any5_1_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_5 b/result/schemas/any5_1_5
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_5.err b/result/schemas/any5_1_5.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_6 b/result/schemas/any5_1_6
old mode 100644
new mode 100755
diff --git a/result/schemas/any5_1_6.err b/result/schemas/any5_1_6.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any6_1_0 b/result/schemas/any6_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/any6_1_0.err b/result/schemas/any6_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any6_2_0 b/result/schemas/any6_2_0
old mode 100644
new mode 100755
diff --git a/result/schemas/any6_2_0.err b/result/schemas/any6_2_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_1_0 b/result/schemas/any7_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_1_0.err b/result/schemas/any7_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_1_1 b/result/schemas/any7_1_1
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_1_1.err b/result/schemas/any7_1_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_1_2 b/result/schemas/any7_1_2
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_1_2.err b/result/schemas/any7_1_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_2_0 b/result/schemas/any7_2_0
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_2_0.err b/result/schemas/any7_2_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_2_1 b/result/schemas/any7_2_1
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_2_1.err b/result/schemas/any7_2_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_2_2 b/result/schemas/any7_2_2
old mode 100644
new mode 100755
diff --git a/result/schemas/any7_2_2.err b/result/schemas/any7_2_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/any8_1_0 b/result/schemas/any8_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/any8_1_0.err b/result/schemas/any8_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr-derive-errors1_0_0 b/result/schemas/anyAttr-derive-errors1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr-derive-errors1_0_0.err b/result/schemas/anyAttr-derive-errors1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr-derive1_0_0 b/result/schemas/anyAttr-derive1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr-derive1_0_0.err b/result/schemas/anyAttr-derive1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr-derive2_0_0 b/result/schemas/anyAttr-derive2_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr-derive2_0_0.err b/result/schemas/anyAttr-derive2_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr-processContents-err1_0_0 b/result/schemas/anyAttr-processContents-err1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr-processContents-err1_0_0.err b/result/schemas/anyAttr-processContents-err1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr-processContents1_0_0 b/result/schemas/anyAttr-processContents1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr-processContents1_0_0.err b/result/schemas/anyAttr-processContents1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr1_0_0 b/result/schemas/anyAttr1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/anyAttr1_0_0.err b/result/schemas/anyAttr1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/attr0_0_0 b/result/schemas/attr0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/attr0_0_0.err b/result/schemas/attr0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/attruse_0_0 b/result/schemas/attruse_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/attruse_0_0.err b/result/schemas/attruse_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/attruse_0_1 b/result/schemas/attruse_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/attruse_0_1.err b/result/schemas/attruse_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/attruse_0_2 b/result/schemas/attruse_0_2
old mode 100644
new mode 100755
diff --git a/result/schemas/attruse_0_2.err b/result/schemas/attruse_0_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug141312_0_0 b/result/schemas/bug141312_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug141312_0_0.err b/result/schemas/bug141312_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug141333_0_0 b/result/schemas/bug141333_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug141333_0_0.err b/result/schemas/bug141333_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug143951_0_0 b/result/schemas/bug143951_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug143951_0_0.err b/result/schemas/bug143951_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug145246_0_0 b/result/schemas/bug145246_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug145246_0_0.err b/result/schemas/bug145246_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug152470_1_1 b/result/schemas/bug152470_1_1
old mode 100644
new mode 100755
diff --git a/result/schemas/bug152470_1_1.err b/result/schemas/bug152470_1_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug167754_0_0 b/result/schemas/bug167754_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug167754_0_0.err b/result/schemas/bug167754_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug303566_1_1 b/result/schemas/bug303566_1_1
old mode 100644
new mode 100755
diff --git a/result/schemas/bug303566_1_1.err b/result/schemas/bug303566_1_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug306806_1_0 b/result/schemas/bug306806_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug306806_1_0.err b/result/schemas/bug306806_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug309338_1_0 b/result/schemas/bug309338_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug309338_1_0.err b/result/schemas/bug309338_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug310264_0_0 b/result/schemas/bug310264_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug310264_0_0.err b/result/schemas/bug310264_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug312957_1_0 b/result/schemas/bug312957_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug312957_1_0.err b/result/schemas/bug312957_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug313982_0_0 b/result/schemas/bug313982_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug313982_0_0.err b/result/schemas/bug313982_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug321475_1_0 b/result/schemas/bug321475_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug321475_1_0.err b/result/schemas/bug321475_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug322411_1_0 b/result/schemas/bug322411_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug322411_1_0.err b/result/schemas/bug322411_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug323510_1_0 b/result/schemas/bug323510_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug323510_1_0.err b/result/schemas/bug323510_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/bug455953_0_0 b/result/schemas/bug455953_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/bug455953_0_0.err b/result/schemas/bug455953_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/changelog093_1_0 b/result/schemas/changelog093_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/changelog093_1_0.err b/result/schemas/changelog093_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_0 b/result/schemas/choice_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_0.err b/result/schemas/choice_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_1 b/result/schemas/choice_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_1.err b/result/schemas/choice_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_2 b/result/schemas/choice_0_2
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_2.err b/result/schemas/choice_0_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_3 b/result/schemas/choice_0_3
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_3.err b/result/schemas/choice_0_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_4 b/result/schemas/choice_0_4
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_4.err b/result/schemas/choice_0_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_5 b/result/schemas/choice_0_5
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_5.err b/result/schemas/choice_0_5.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_6 b/result/schemas/choice_0_6
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_0_6.err b/result/schemas/choice_0_6.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_0 b/result/schemas/choice_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_0.err b/result/schemas/choice_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_1 b/result/schemas/choice_1_1
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_1.err b/result/schemas/choice_1_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_2 b/result/schemas/choice_1_2
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_2.err b/result/schemas/choice_1_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_3 b/result/schemas/choice_1_3
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_3.err b/result/schemas/choice_1_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_4 b/result/schemas/choice_1_4
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_4.err b/result/schemas/choice_1_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_5 b/result/schemas/choice_1_5
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_5.err b/result/schemas/choice_1_5.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_6 b/result/schemas/choice_1_6
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_1_6.err b/result/schemas/choice_1_6.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_0 b/result/schemas/choice_2_0
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_0.err b/result/schemas/choice_2_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_1 b/result/schemas/choice_2_1
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_1.err b/result/schemas/choice_2_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_2 b/result/schemas/choice_2_2
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_2.err b/result/schemas/choice_2_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_3 b/result/schemas/choice_2_3
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_3.err b/result/schemas/choice_2_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_4 b/result/schemas/choice_2_4
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_4.err b/result/schemas/choice_2_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_5 b/result/schemas/choice_2_5
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_5.err b/result/schemas/choice_2_5.err
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_6 b/result/schemas/choice_2_6
old mode 100644
new mode 100755
diff --git a/result/schemas/choice_2_6.err b/result/schemas/choice_2_6.err
old mode 100644
new mode 100755
diff --git a/result/schemas/complex-type-extension_0_0 b/result/schemas/complex-type-extension_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/complex-type-extension_0_0.err b/result/schemas/complex-type-extension_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/cos-ct-extends-1-3_0_0 b/result/schemas/cos-ct-extends-1-3_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/cos-ct-extends-1-3_0_0.err b/result/schemas/cos-ct-extends-1-3_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/cos-st-restricts-1-2-err_0_0 b/result/schemas/cos-st-restricts-1-2-err_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/cos-st-restricts-1-2-err_0_0.err b/result/schemas/cos-st-restricts-1-2-err_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ct-sc-nobase_0_0 b/result/schemas/ct-sc-nobase_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/ct-sc-nobase_0_0.err b/result/schemas/ct-sc-nobase_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/date_0_0 b/result/schemas/date_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/date_0_0.err b/result/schemas/date_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/decimal-1_1_0 b/result/schemas/decimal-1_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/decimal-1_1_0.err b/result/schemas/decimal-1_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/decimal-2_1_0 b/result/schemas/decimal-2_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/decimal-2_1_0.err b/result/schemas/decimal-2_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/decimal-3_1_0 b/result/schemas/decimal-3_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/decimal-3_1_0.err b/result/schemas/decimal-3_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/derivation-ok-extension-err_0_0 b/result/schemas/derivation-ok-extension-err_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/derivation-ok-extension-err_0_0.err b/result/schemas/derivation-ok-extension-err_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/derivation-ok-extension_0_0 b/result/schemas/derivation-ok-extension_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/derivation-ok-extension_0_0.err b/result/schemas/derivation-ok-extension_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/derivation-ok-restriction-2-1-1_0_0 b/result/schemas/derivation-ok-restriction-2-1-1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/derivation-ok-restriction-2-1-1_0_0.err b/result/schemas/derivation-ok-restriction-2-1-1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/derivation-ok-restriction-4-1-err_0_0 b/result/schemas/derivation-ok-restriction-4-1-err_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/derivation-ok-restriction-4-1-err_0_0.err b/result/schemas/derivation-ok-restriction-4-1-err_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/derivation-restriction-anyAttr_0_0 b/result/schemas/derivation-restriction-anyAttr_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/derivation-restriction-anyAttr_0_0.err b/result/schemas/derivation-restriction-anyAttr_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/deter0_0_0 b/result/schemas/deter0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/deter0_0_0.err b/result/schemas/deter0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/dur_0_0 b/result/schemas/dur_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/dur_0_0.err b/result/schemas/dur_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/elem0_0_0 b/result/schemas/elem0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/elem0_0_0.err b/result/schemas/elem0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/element-err_0_0 b/result/schemas/element-err_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/element-err_0_0.err b/result/schemas/element-err_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/element-minmax-err_0_0 b/result/schemas/element-minmax-err_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/element-minmax-err_0_0.err b/result/schemas/element-minmax-err_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/empty-value_1_0 b/result/schemas/empty-value_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/empty-value_1_0.err b/result/schemas/empty-value_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/empty-value_1_1 b/result/schemas/empty-value_1_1
old mode 100644
new mode 100755
diff --git a/result/schemas/empty-value_1_1.err b/result/schemas/empty-value_1_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/empty_0_0 b/result/schemas/empty_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/empty_0_0.err b/result/schemas/empty_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/empty_1_0 b/result/schemas/empty_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/empty_1_0.err b/result/schemas/empty_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/extension0_0_0 b/result/schemas/extension0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/extension0_0_0.err b/result/schemas/extension0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/extension1_0_0 b/result/schemas/extension1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/extension1_0_0.err b/result/schemas/extension1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/extension1_0_1 b/result/schemas/extension1_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/extension1_0_1.err b/result/schemas/extension1_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/extension1_0_2 b/result/schemas/extension1_0_2
old mode 100644
new mode 100755
diff --git a/result/schemas/extension1_0_2.err b/result/schemas/extension1_0_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/extension2_1_0 b/result/schemas/extension2_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/extension2_1_0.err b/result/schemas/extension2_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/facet-unionST-err1_0_0 b/result/schemas/facet-unionST-err1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/facet-unionST-err1_0_0.err b/result/schemas/facet-unionST-err1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/facet-whiteSpace_0_0 b/result/schemas/facet-whiteSpace_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/facet-whiteSpace_0_0.err b/result/schemas/facet-whiteSpace_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/group0_0_0 b/result/schemas/group0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/group0_0_0.err b/result/schemas/group0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/hexbinary_0_0 b/result/schemas/hexbinary_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/hexbinary_0_0.err b/result/schemas/hexbinary_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/hexbinary_0_1 b/result/schemas/hexbinary_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/hexbinary_0_1.err b/result/schemas/hexbinary_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/idc-keyref-err1_1_0 b/result/schemas/idc-keyref-err1_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/idc-keyref-err1_1_0.err b/result/schemas/idc-keyref-err1_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/import0_0_0 b/result/schemas/import0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/import0_0_0.err b/result/schemas/import0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/import1_0_0 b/result/schemas/import1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/import1_0_0.err b/result/schemas/import1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/import2_0_0 b/result/schemas/import2_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/import2_0_0.err b/result/schemas/import2_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/include1_0_0 b/result/schemas/include1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/include1_0_0.err b/result/schemas/include1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/include2_0_0 b/result/schemas/include2_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/include2_0_0.err b/result/schemas/include2_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/include3_0_0 b/result/schemas/include3_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/include3_0_0.err b/result/schemas/include3_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/issue40_0_0 b/result/schemas/issue40_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/issue40_0_0.err b/result/schemas/issue40_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/item_0_0 b/result/schemas/item_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/item_0_0.err b/result/schemas/item_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/item_1_0 b/result/schemas/item_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/item_1_0.err b/result/schemas/item_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/length1_0_0 b/result/schemas/length1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/length1_0_0.err b/result/schemas/length1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/length2_0_0 b/result/schemas/length2_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/length2_0_0.err b/result/schemas/length2_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/length3_0_0 b/result/schemas/length3_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/length3_0_0.err b/result/schemas/length3_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_0_0 b/result/schemas/list0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_0_0.err b/result/schemas/list0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_0_1 b/result/schemas/list0_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_0_1.err b/result/schemas/list0_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_0_2 b/result/schemas/list0_0_2
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_0_2.err b/result/schemas/list0_0_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_1_0 b/result/schemas/list0_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_1_0.err b/result/schemas/list0_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_1_1 b/result/schemas/list0_1_1
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_1_1.err b/result/schemas/list0_1_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_1_2 b/result/schemas/list0_1_2
old mode 100644
new mode 100755
diff --git a/result/schemas/list0_1_2.err b/result/schemas/list0_1_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/mixed0_0_0 b/result/schemas/mixed0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/mixed0_0_0.err b/result/schemas/mixed0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/mixed1_0_0 b/result/schemas/mixed1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/mixed1_0_0.err b/result/schemas/mixed1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_0_0 b/result/schemas/ns0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_0_0.err b/result/schemas/ns0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_0_1 b/result/schemas/ns0_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_0_1.err b/result/schemas/ns0_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_0_2 b/result/schemas/ns0_0_2
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_0_2.err b/result/schemas/ns0_0_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_0_3 b/result/schemas/ns0_0_3
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_0_3.err b/result/schemas/ns0_0_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_0_4 b/result/schemas/ns0_0_4
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_0_4.err b/result/schemas/ns0_0_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_1_0 b/result/schemas/ns0_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_1_0.err b/result/schemas/ns0_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_1_1 b/result/schemas/ns0_1_1
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_1_1.err b/result/schemas/ns0_1_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_1_2 b/result/schemas/ns0_1_2
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_1_2.err b/result/schemas/ns0_1_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_1_3 b/result/schemas/ns0_1_3
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_1_3.err b/result/schemas/ns0_1_3.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_1_4 b/result/schemas/ns0_1_4
old mode 100644
new mode 100755
diff --git a/result/schemas/ns0_1_4.err b/result/schemas/ns0_1_4.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns1_0_0 b/result/schemas/ns1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/ns1_0_0.err b/result/schemas/ns1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/ns2_0_0 b/result/schemas/ns2_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/ns2_0_0.err b/result/schemas/ns2_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/nvdcve_0_0 b/result/schemas/nvdcve_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/nvdcve_0_0.err b/result/schemas/nvdcve_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/po0_0_0 b/result/schemas/po0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/po0_0_0.err b/result/schemas/po0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/po1_0_0 b/result/schemas/po1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/po1_0_0.err b/result/schemas/po1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/poschargrp0_0_0 b/result/schemas/poschargrp0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/poschargrp0_0_0.err b/result/schemas/poschargrp0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/regexp-char-ref_0_0 b/result/schemas/regexp-char-ref_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/regexp-char-ref_0_0.err b/result/schemas/regexp-char-ref_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/regexp-char-ref_1_0 b/result/schemas/regexp-char-ref_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/regexp-char-ref_1_0.err b/result/schemas/regexp-char-ref_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/restrict-CT-attr-ref_0_0 b/result/schemas/restrict-CT-attr-ref_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/restrict-CT-attr-ref_0_0.err b/result/schemas/restrict-CT-attr-ref_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/restriction-attr1_0_0 b/result/schemas/restriction-attr1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/restriction-attr1_0_0.err b/result/schemas/restriction-attr1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/restriction-enum-1_1_0 b/result/schemas/restriction-enum-1_1_0
old mode 100644
new mode 100755
diff --git a/result/schemas/restriction-enum-1_1_0.err b/result/schemas/restriction-enum-1_1_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/restriction0_0_0 b/result/schemas/restriction0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/restriction0_0_0.err b/result/schemas/restriction0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/scc-no-xmlns_0_0 b/result/schemas/scc-no-xmlns_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/scc-no-xmlns_0_0.err b/result/schemas/scc-no-xmlns_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/scc-no-xsi_0_0 b/result/schemas/scc-no-xsi_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/scc-no-xsi_0_0.err b/result/schemas/scc-no-xsi_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/seq-dubl-elem1_0_0 b/result/schemas/seq-dubl-elem1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/seq-dubl-elem1_0_0.err b/result/schemas/seq-dubl-elem1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/seq0_0_0 b/result/schemas/seq0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/seq0_0_0.err b/result/schemas/seq0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute1_0_0 b/result/schemas/src-attribute1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute1_0_0.err b/result/schemas/src-attribute1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute2_0_0 b/result/schemas/src-attribute2_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute2_0_0.err b/result/schemas/src-attribute2_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute3-1_0_0 b/result/schemas/src-attribute3-1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute3-1_0_0.err b/result/schemas/src-attribute3-1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute3-2-form_0_0 b/result/schemas/src-attribute3-2-form_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute3-2-form_0_0.err b/result/schemas/src-attribute3-2-form_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute3-2-st_0_0 b/result/schemas/src-attribute3-2-st_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute3-2-st_0_0.err b/result/schemas/src-attribute3-2-st_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute3-2-type_0_0 b/result/schemas/src-attribute3-2-type_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute3-2-type_0_0.err b/result/schemas/src-attribute3-2-type_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute4_0_0 b/result/schemas/src-attribute4_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/src-attribute4_0_0.err b/result/schemas/src-attribute4_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/src-element1_0_0 b/result/schemas/src-element1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/src-element1_0_0.err b/result/schemas/src-element1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/src-element2-1_0_0 b/result/schemas/src-element2-1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/src-element2-1_0_0.err b/result/schemas/src-element2-1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/src-element2-2_0_0 b/result/schemas/src-element2-2_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/src-element2-2_0_0.err b/result/schemas/src-element2-2_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/src-element3_0_0 b/result/schemas/src-element3_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/src-element3_0_0.err b/result/schemas/src-element3_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/subst-group-1_0_1 b/result/schemas/subst-group-1_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/subst-group-1_0_1.err b/result/schemas/subst-group-1_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/union2_1_1 b/result/schemas/union2_1_1
old mode 100644
new mode 100755
diff --git a/result/schemas/union2_1_1.err b/result/schemas/union2_1_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/union_0_0 b/result/schemas/union_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/union_0_0.err b/result/schemas/union_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first0_0_0 b/result/schemas/vdv-first0_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first0_0_0.err b/result/schemas/vdv-first0_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first1_0_0 b/result/schemas/vdv-first1_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first1_0_0.err b/result/schemas/vdv-first1_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first2_0_0 b/result/schemas/vdv-first2_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first2_0_0.err b/result/schemas/vdv-first2_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first3_0_0 b/result/schemas/vdv-first3_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first3_0_0.err b/result/schemas/vdv-first3_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first4_0_0 b/result/schemas/vdv-first4_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first4_0_0.err b/result/schemas/vdv-first4_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first4_0_1 b/result/schemas/vdv-first4_0_1
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first4_0_1.err b/result/schemas/vdv-first4_0_1.err
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first4_0_2 b/result/schemas/vdv-first4_0_2
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first4_0_2.err b/result/schemas/vdv-first4_0_2.err
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first5_0_0 b/result/schemas/vdv-first5_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/vdv-first5_0_0.err b/result/schemas/vdv-first5_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/xsd-list-itemType_0_0 b/result/schemas/xsd-list-itemType_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/xsd-list-itemType_0_0.err b/result/schemas/xsd-list-itemType_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schemas/xsd-simpleType-varieties_0_0 b/result/schemas/xsd-simpleType-varieties_0_0
old mode 100644
new mode 100755
diff --git a/result/schemas/xsd-simpleType-varieties_0_0.err b/result/schemas/xsd-simpleType-varieties_0_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon10_0 b/result/schematron/zvon10_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon10_0.err b/result/schematron/zvon10_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon10_1 b/result/schematron/zvon10_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon10_1.err b/result/schematron/zvon10_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon11_0 b/result/schematron/zvon11_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon11_0.err b/result/schematron/zvon11_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon11_1 b/result/schematron/zvon11_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon11_1.err b/result/schematron/zvon11_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon11_2 b/result/schematron/zvon11_2
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon11_2.err b/result/schematron/zvon11_2.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon11_3 b/result/schematron/zvon11_3
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon11_3.err b/result/schematron/zvon11_3.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon12_0 b/result/schematron/zvon12_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon12_0.err b/result/schematron/zvon12_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon12_1 b/result/schematron/zvon12_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon12_1.err b/result/schematron/zvon12_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon12_2 b/result/schematron/zvon12_2
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon12_2.err b/result/schematron/zvon12_2.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon13_0 b/result/schematron/zvon13_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon13_0.err b/result/schematron/zvon13_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon13_1 b/result/schematron/zvon13_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon13_1.err b/result/schematron/zvon13_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon13_2 b/result/schematron/zvon13_2
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon13_2.err b/result/schematron/zvon13_2.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon14_0 b/result/schematron/zvon14_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon14_0.err b/result/schematron/zvon14_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon15_0 b/result/schematron/zvon15_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon15_0.err b/result/schematron/zvon15_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon1_0 b/result/schematron/zvon1_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon1_0.err b/result/schematron/zvon1_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon1_1 b/result/schematron/zvon1_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon1_1.err b/result/schematron/zvon1_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon2_0 b/result/schematron/zvon2_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon2_0.err b/result/schematron/zvon2_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon2_1 b/result/schematron/zvon2_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon2_1.err b/result/schematron/zvon2_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon2_2 b/result/schematron/zvon2_2
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon2_2.err b/result/schematron/zvon2_2.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon3_0 b/result/schematron/zvon3_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon3_0.err b/result/schematron/zvon3_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon4_0 b/result/schematron/zvon4_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon4_0.err b/result/schematron/zvon4_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon4_1 b/result/schematron/zvon4_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon4_1.err b/result/schematron/zvon4_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon5_0 b/result/schematron/zvon5_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon5_0.err b/result/schematron/zvon5_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon5_1 b/result/schematron/zvon5_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon5_1.err b/result/schematron/zvon5_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon5_2 b/result/schematron/zvon5_2
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon5_2.err b/result/schematron/zvon5_2.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon6_0 b/result/schematron/zvon6_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon6_0.err b/result/schematron/zvon6_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon6_1 b/result/schematron/zvon6_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon6_1.err b/result/schematron/zvon6_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon6_2 b/result/schematron/zvon6_2
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon6_2.err b/result/schematron/zvon6_2.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon7_0 b/result/schematron/zvon7_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon7_0.err b/result/schematron/zvon7_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon7_1 b/result/schematron/zvon7_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon7_1.err b/result/schematron/zvon7_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon7_2 b/result/schematron/zvon7_2
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon7_2.err b/result/schematron/zvon7_2.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon7_3 b/result/schematron/zvon7_3
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon7_3.err b/result/schematron/zvon7_3.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon7_4 b/result/schematron/zvon7_4
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon7_4.err b/result/schematron/zvon7_4.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon8_0 b/result/schematron/zvon8_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon8_0.err b/result/schematron/zvon8_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon8_1 b/result/schematron/zvon8_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon8_1.err b/result/schematron/zvon8_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon8_2 b/result/schematron/zvon8_2
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon8_2.err b/result/schematron/zvon8_2.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon9_0 b/result/schematron/zvon9_0
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon9_0.err b/result/schematron/zvon9_0.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon9_1 b/result/schematron/zvon9_1
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon9_1.err b/result/schematron/zvon9_1.err
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon9_2 b/result/schematron/zvon9_2
old mode 100644
new mode 100755
diff --git a/result/schematron/zvon9_2.err b/result/schematron/zvon9_2.err
old mode 100644
new mode 100755
diff --git a/result/scripts/base b/result/scripts/base
old mode 100644
new mode 100755
diff --git a/result/scripts/base.err b/result/scripts/base.err
old mode 100644
new mode 100755
diff --git a/result/scripts/base2 b/result/scripts/base2
old mode 100644
new mode 100755
diff --git a/result/scripts/base2.err b/result/scripts/base2.err
old mode 100644
new mode 100755
diff --git a/result/scripts/set1 b/result/scripts/set1
old mode 100644
new mode 100755
diff --git a/result/scripts/set1.err b/result/scripts/set1.err
old mode 100644
new mode 100755
diff --git a/result/scripts/set3 b/result/scripts/set3
old mode 100644
new mode 100755
diff --git a/result/scripts/set3.err b/result/scripts/set3.err
old mode 100644
new mode 100755
diff --git a/result/scripts/set4 b/result/scripts/set4
old mode 100644
new mode 100755
diff --git a/result/scripts/set4.err b/result/scripts/set4.err
old mode 100644
new mode 100755
diff --git a/result/slashdot.rdf b/result/slashdot.rdf
old mode 100644
new mode 100755
diff --git a/result/slashdot.rdf.rde b/result/slashdot.rdf.rde
old mode 100644
new mode 100755
diff --git a/result/slashdot.rdf.rdr b/result/slashdot.rdf.rdr
old mode 100644
new mode 100755
diff --git a/result/slashdot.rdf.sax b/result/slashdot.rdf.sax
old mode 100644
new mode 100755
diff --git a/result/slashdot.rdf.sax2 b/result/slashdot.rdf.sax2
old mode 100644
new mode 100755
diff --git a/result/slashdot.xml b/result/slashdot.xml
old mode 100644
new mode 100755
diff --git a/result/slashdot.xml.rde b/result/slashdot.xml.rde
old mode 100644
new mode 100755
diff --git a/result/slashdot.xml.rdr b/result/slashdot.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/slashdot.xml.sax b/result/slashdot.xml.sax
old mode 100644
new mode 100755
diff --git a/result/slashdot.xml.sax2 b/result/slashdot.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/slashdot16.xml b/result/slashdot16.xml
old mode 100644
new mode 100755
diff --git a/result/slashdot16.xml.rde b/result/slashdot16.xml.rde
old mode 100644
new mode 100755
diff --git a/result/slashdot16.xml.rdr b/result/slashdot16.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/slashdot16.xml.sax b/result/slashdot16.xml.sax
old mode 100644
new mode 100755
diff --git a/result/slashdot16.xml.sax2 b/result/slashdot16.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/svg1 b/result/svg1
old mode 100644
new mode 100755
diff --git a/result/svg1.rde b/result/svg1.rde
old mode 100644
new mode 100755
diff --git a/result/svg1.rdr b/result/svg1.rdr
old mode 100644
new mode 100755
diff --git a/result/svg1.sax b/result/svg1.sax
old mode 100644
new mode 100755
diff --git a/result/svg1.sax2 b/result/svg1.sax2
old mode 100644
new mode 100755
diff --git a/result/svg2 b/result/svg2
old mode 100644
new mode 100755
diff --git a/result/svg2.rde b/result/svg2.rde
old mode 100644
new mode 100755
diff --git a/result/svg2.rdr b/result/svg2.rdr
old mode 100644
new mode 100755
diff --git a/result/svg2.sax b/result/svg2.sax
old mode 100644
new mode 100755
diff --git a/result/svg2.sax2 b/result/svg2.sax2
old mode 100644
new mode 100755
diff --git a/result/svg3 b/result/svg3
old mode 100644
new mode 100755
diff --git a/result/svg3.rde b/result/svg3.rde
old mode 100644
new mode 100755
diff --git a/result/svg3.rdr b/result/svg3.rdr
old mode 100644
new mode 100755
diff --git a/result/svg3.sax b/result/svg3.sax
old mode 100644
new mode 100755
diff --git a/result/svg3.sax2 b/result/svg3.sax2
old mode 100644
new mode 100755
diff --git a/result/title.xml b/result/title.xml
old mode 100644
new mode 100755
diff --git a/result/title.xml.rde b/result/title.xml.rde
old mode 100644
new mode 100755
diff --git a/result/title.xml.rdr b/result/title.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/title.xml.sax b/result/title.xml.sax
old mode 100644
new mode 100755
diff --git a/result/title.xml.sax2 b/result/title.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/tstblanks.xml b/result/tstblanks.xml
old mode 100644
new mode 100755
diff --git a/result/tstblanks.xml.rde b/result/tstblanks.xml.rde
old mode 100644
new mode 100755
diff --git a/result/tstblanks.xml.rdr b/result/tstblanks.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/tstblanks.xml.sax b/result/tstblanks.xml.sax
old mode 100644
new mode 100755
diff --git a/result/tstblanks.xml.sax2 b/result/tstblanks.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/utf16bebom.xml b/result/utf16bebom.xml
old mode 100644
new mode 100755
diff --git a/result/utf16bebom.xml.rde b/result/utf16bebom.xml.rde
old mode 100644
new mode 100755
diff --git a/result/utf16bebom.xml.rdr b/result/utf16bebom.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/utf16bebom.xml.sax b/result/utf16bebom.xml.sax
old mode 100644
new mode 100755
diff --git a/result/utf16bebom.xml.sax2 b/result/utf16bebom.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/utf16bom.xml b/result/utf16bom.xml
old mode 100644
new mode 100755
diff --git a/result/utf16bom.xml.rde b/result/utf16bom.xml.rde
old mode 100644
new mode 100755
diff --git a/result/utf16bom.xml.rdr b/result/utf16bom.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/utf16bom.xml.sax b/result/utf16bom.xml.sax
old mode 100644
new mode 100755
diff --git a/result/utf16bom.xml.sax2 b/result/utf16bom.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/utf16lebom.xml b/result/utf16lebom.xml
old mode 100644
new mode 100755
diff --git a/result/utf16lebom.xml.rde b/result/utf16lebom.xml.rde
old mode 100644
new mode 100755
diff --git a/result/utf16lebom.xml.rdr b/result/utf16lebom.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/utf16lebom.xml.sax b/result/utf16lebom.xml.sax
old mode 100644
new mode 100755
diff --git a/result/utf16lebom.xml.sax2 b/result/utf16lebom.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/utf8bom.xml b/result/utf8bom.xml
old mode 100644
new mode 100755
diff --git a/result/utf8bom.xml.rde b/result/utf8bom.xml.rde
old mode 100644
new mode 100755
diff --git a/result/utf8bom.xml.rdr b/result/utf8bom.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/utf8bom.xml.sax b/result/utf8bom.xml.sax
old mode 100644
new mode 100755
diff --git a/result/utf8bom.xml.sax2 b/result/utf8bom.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/valid/127772.xml b/result/valid/127772.xml
old mode 100644
new mode 100755
diff --git a/result/valid/127772.xml.err b/result/valid/127772.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/127772.xml.err.rdr b/result/valid/127772.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/694228.xml b/result/valid/694228.xml
old mode 100644
new mode 100755
diff --git a/result/valid/694228.xml.err b/result/valid/694228.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/694228.xml.err.rdr b/result/valid/694228.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/737840.xml b/result/valid/737840.xml
old mode 100644
new mode 100755
diff --git a/result/valid/737840.xml.err b/result/valid/737840.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/737840.xml.err.rdr b/result/valid/737840.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/766956.xml b/result/valid/766956.xml
old mode 100644
new mode 100755
diff --git a/result/valid/766956.xml.err b/result/valid/766956.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/766956.xml.err.rdr b/result/valid/766956.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/781333.xml b/result/valid/781333.xml
old mode 100644
new mode 100755
diff --git a/result/valid/781333.xml.err b/result/valid/781333.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/781333.xml.err.rdr b/result/valid/781333.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/REC-xml-19980210.xml b/result/valid/REC-xml-19980210.xml
old mode 100644
new mode 100755
diff --git a/result/valid/REC-xml-19980210.xml.err b/result/valid/REC-xml-19980210.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/REC-xml-19980210.xml.err.rdr b/result/valid/REC-xml-19980210.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/UTF16Entity.xml b/result/valid/UTF16Entity.xml
old mode 100644
new mode 100755
diff --git a/result/valid/UTF16Entity.xml.err b/result/valid/UTF16Entity.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/UTF16Entity.xml.err.rdr b/result/valid/UTF16Entity.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/dia.xml b/result/valid/dia.xml
old mode 100644
new mode 100755
diff --git a/result/valid/dia.xml.err b/result/valid/dia.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/dia.xml.err.rdr b/result/valid/dia.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/id1.xml b/result/valid/id1.xml
old mode 100644
new mode 100755
diff --git a/result/valid/id1.xml.err b/result/valid/id1.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/id1.xml.err.rdr b/result/valid/id1.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/id2.xml b/result/valid/id2.xml
old mode 100644
new mode 100755
diff --git a/result/valid/id2.xml.err b/result/valid/id2.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/id2.xml.err.rdr b/result/valid/id2.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/id3.xml b/result/valid/id3.xml
old mode 100644
new mode 100755
diff --git a/result/valid/id3.xml.err b/result/valid/id3.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/id3.xml.err.rdr b/result/valid/id3.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/index.xml b/result/valid/index.xml
old mode 100644
new mode 100755
diff --git a/result/valid/index.xml.err b/result/valid/index.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/index.xml.err.rdr b/result/valid/index.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/mixed_ns.xml b/result/valid/mixed_ns.xml
old mode 100644
new mode 100755
diff --git a/result/valid/mixed_ns.xml.err b/result/valid/mixed_ns.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/mixed_ns.xml.err.rdr b/result/valid/mixed_ns.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/notes.xml b/result/valid/notes.xml
old mode 100644
new mode 100755
diff --git a/result/valid/notes.xml.err b/result/valid/notes.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/notes.xml.err.rdr b/result/valid/notes.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/ns.xml b/result/valid/ns.xml
old mode 100644
new mode 100755
diff --git a/result/valid/ns.xml.err b/result/valid/ns.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/ns.xml.err.rdr b/result/valid/ns.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/ns2.xml b/result/valid/ns2.xml
old mode 100644
new mode 100755
diff --git a/result/valid/ns2.xml.err b/result/valid/ns2.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/ns2.xml.err.rdr b/result/valid/ns2.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/objednavka.xml b/result/valid/objednavka.xml
old mode 100644
new mode 100755
diff --git a/result/valid/objednavka.xml.err b/result/valid/objednavka.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/objednavka.xml.err.rdr b/result/valid/objednavka.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/rss.xml b/result/valid/rss.xml
old mode 100644
new mode 100755
diff --git a/result/valid/rss.xml.err b/result/valid/rss.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/rss.xml.err.rdr b/result/valid/rss.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t10.xml b/result/valid/t10.xml
old mode 100644
new mode 100755
diff --git a/result/valid/t10.xml.err b/result/valid/t10.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/t10.xml.err.rdr b/result/valid/t10.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t11.xml b/result/valid/t11.xml
old mode 100644
new mode 100755
diff --git a/result/valid/t11.xml.err b/result/valid/t11.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/t11.xml.err.rdr b/result/valid/t11.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t4.dtd b/result/valid/t4.dtd
old mode 100644
new mode 100755
diff --git a/result/valid/t4.dtd.err b/result/valid/t4.dtd.err
old mode 100644
new mode 100755
diff --git a/result/valid/t4.dtd.err.rdr b/result/valid/t4.dtd.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t4.xml b/result/valid/t4.xml
old mode 100644
new mode 100755
diff --git a/result/valid/t4.xml.err b/result/valid/t4.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/t4.xml.err.rdr b/result/valid/t4.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t4a.dtd b/result/valid/t4a.dtd
old mode 100644
new mode 100755
diff --git a/result/valid/t4a.dtd.err b/result/valid/t4a.dtd.err
old mode 100644
new mode 100755
diff --git a/result/valid/t4a.dtd.err.rdr b/result/valid/t4a.dtd.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t4a.xml b/result/valid/t4a.xml
old mode 100644
new mode 100755
diff --git a/result/valid/t4a.xml.err b/result/valid/t4a.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/t4a.xml.err.rdr b/result/valid/t4a.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t6.dtd b/result/valid/t6.dtd
old mode 100644
new mode 100755
diff --git a/result/valid/t6.dtd.err b/result/valid/t6.dtd.err
old mode 100644
new mode 100755
diff --git a/result/valid/t6.dtd.err.rdr b/result/valid/t6.dtd.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t6.xml b/result/valid/t6.xml
old mode 100644
new mode 100755
diff --git a/result/valid/t6.xml.err b/result/valid/t6.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/t6.xml.err.rdr b/result/valid/t6.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t8.xml b/result/valid/t8.xml
old mode 100644
new mode 100755
diff --git a/result/valid/t8.xml.err b/result/valid/t8.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/t8.xml.err.rdr b/result/valid/t8.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t8a.xml b/result/valid/t8a.xml
old mode 100644
new mode 100755
diff --git a/result/valid/t8a.xml.err b/result/valid/t8a.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/t8a.xml.err.rdr b/result/valid/t8a.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t9.xml b/result/valid/t9.xml
old mode 100644
new mode 100755
diff --git a/result/valid/t9.xml.err b/result/valid/t9.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/t9.xml.err.rdr b/result/valid/t9.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/t9a.xml b/result/valid/t9a.xml
old mode 100644
new mode 100755
diff --git a/result/valid/t9a.xml.err b/result/valid/t9a.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/t9a.xml.err.rdr b/result/valid/t9a.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/xhtml1.xhtml b/result/valid/xhtml1.xhtml
old mode 100644
new mode 100755
diff --git a/result/valid/xhtml1.xhtml.err b/result/valid/xhtml1.xhtml.err
old mode 100644
new mode 100755
diff --git a/result/valid/xhtml1.xhtml.err.rdr b/result/valid/xhtml1.xhtml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/valid/xlink.xml b/result/valid/xlink.xml
old mode 100644
new mode 100755
diff --git a/result/valid/xlink.xml.err b/result/valid/xlink.xml.err
old mode 100644
new mode 100755
diff --git a/result/valid/xlink.xml.err.rdr b/result/valid/xlink.xml.err.rdr
old mode 100644
new mode 100755
diff --git a/result/wap.xml b/result/wap.xml
old mode 100644
new mode 100755
diff --git a/result/wap.xml.rde b/result/wap.xml.rde
old mode 100644
new mode 100755
diff --git a/result/wap.xml.rdr b/result/wap.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/wap.xml.sax b/result/wap.xml.sax
old mode 100644
new mode 100755
diff --git a/result/wap.xml.sax2 b/result/wap.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/winblanks.xml b/result/winblanks.xml
old mode 100644
new mode 100755
diff --git a/result/winblanks.xml.rde b/result/winblanks.xml.rde
old mode 100644
new mode 100755
diff --git a/result/winblanks.xml.rdr b/result/winblanks.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/winblanks.xml.sax b/result/winblanks.xml.sax
old mode 100644
new mode 100755
diff --git a/result/winblanks.xml.sax2 b/result/winblanks.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/wml.xml b/result/wml.xml
old mode 100644
new mode 100755
diff --git a/result/wml.xml.rde b/result/wml.xml.rde
old mode 100644
new mode 100755
diff --git a/result/wml.xml.rdr b/result/wml.xml.rdr
old mode 100644
new mode 100755
diff --git a/result/wml.xml.sax b/result/wml.xml.sax
old mode 100644
new mode 100755
diff --git a/result/wml.xml.sax2 b/result/wml.xml.sax2
old mode 100644
new mode 100755
diff --git a/result/xhtml1 b/result/xhtml1
old mode 100644
new mode 100755
diff --git a/result/xhtml1.rde b/result/xhtml1.rde
old mode 100644
new mode 100755
diff --git a/result/xhtml1.rdr b/result/xhtml1.rdr
old mode 100644
new mode 100755
diff --git a/result/xhtml1.sax b/result/xhtml1.sax
old mode 100644
new mode 100755
diff --git a/result/xhtml1.sax2 b/result/xhtml1.sax2
old mode 100644
new mode 100755
diff --git a/result/xhtmlcomp b/result/xhtmlcomp
old mode 100644
new mode 100755
diff --git a/result/xhtmlcomp.rde b/result/xhtmlcomp.rde
old mode 100644
new mode 100755
diff --git a/result/xhtmlcomp.rdr b/result/xhtmlcomp.rdr
old mode 100644
new mode 100755
diff --git a/result/xhtmlcomp.sax b/result/xhtmlcomp.sax
old mode 100644
new mode 100755
diff --git a/result/xhtmlcomp.sax2 b/result/xhtmlcomp.sax2
old mode 100644
new mode 100755
diff --git a/result/xml1 b/result/xml1
old mode 100644
new mode 100755
diff --git a/result/xml1.rde b/result/xml1.rde
old mode 100644
new mode 100755
diff --git a/result/xml1.rdr b/result/xml1.rdr
old mode 100644
new mode 100755
diff --git a/result/xml1.sax b/result/xml1.sax
old mode 100644
new mode 100755
diff --git a/result/xml1.sax2 b/result/xml1.sax2
old mode 100644
new mode 100755
diff --git a/result/xml2 b/result/xml2
old mode 100644
new mode 100755
diff --git a/result/xml2.rde b/result/xml2.rde
old mode 100644
new mode 100755
diff --git a/result/xml2.rdr b/result/xml2.rdr
old mode 100644
new mode 100755
diff --git a/result/xml2.sax b/result/xml2.sax
old mode 100644
new mode 100755
diff --git a/result/xml2.sax2 b/result/xml2.sax2
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_err1.xml b/result/xmlid/id_err1.xml
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_err1.xml.err b/result/xmlid/id_err1.xml.err
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_err2.xml b/result/xmlid/id_err2.xml
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_err2.xml.err b/result/xmlid/id_err2.xml.err
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_tst1.xml b/result/xmlid/id_tst1.xml
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_tst1.xml.err b/result/xmlid/id_tst1.xml.err
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_tst2.xml b/result/xmlid/id_tst2.xml
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_tst2.xml.err b/result/xmlid/id_tst2.xml.err
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_tst3.xml b/result/xmlid/id_tst3.xml
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_tst3.xml.err b/result/xmlid/id_tst3.xml.err
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_tst4.xml b/result/xmlid/id_tst4.xml
old mode 100644
new mode 100755
diff --git a/result/xmlid/id_tst4.xml.err b/result/xmlid/id_tst4.xml.err
old mode 100644
new mode 100755
diff --git a/rngparser.c b/rngparser.c
old mode 100644
new mode 100755
diff --git a/runsuite.c b/runsuite.c
old mode 100644
new mode 100755
diff --git a/runtest.c b/runtest.c
old mode 100644
new mode 100755
diff --git a/runxmlconf.c b/runxmlconf.c
old mode 100644
new mode 100755
diff --git a/save.h b/save.h
old mode 100644
new mode 100755
diff --git a/schematron.c b/schematron.c
old mode 100644
new mode 100755
diff --git a/test/HTML/53867.html b/test/HTML/53867.html
old mode 100644
new mode 100755
diff --git a/test/HTML/758518-entity.html b/test/HTML/758518-entity.html
old mode 100644
new mode 100755
diff --git a/test/HTML/758518-tag.html b/test/HTML/758518-tag.html
old mode 100644
new mode 100755
diff --git a/test/HTML/758605.html b/test/HTML/758605.html
old mode 100644
new mode 100755
diff --git a/test/HTML/758606.html b/test/HTML/758606.html
old mode 100644
new mode 100755
diff --git a/test/HTML/758606_2.html b/test/HTML/758606_2.html
old mode 100644
new mode 100755
diff --git a/test/HTML/Down.html b/test/HTML/Down.html
old mode 100644
new mode 100755
diff --git a/test/HTML/attrents.html b/test/HTML/attrents.html
old mode 100644
new mode 100755
diff --git a/test/HTML/autoclose.html b/test/HTML/autoclose.html
old mode 100644
new mode 100755
diff --git a/test/HTML/autoclose2.html b/test/HTML/autoclose2.html
old mode 100644
new mode 100755
diff --git a/test/HTML/autoclose3.html b/test/HTML/autoclose3.html
old mode 100644
new mode 100755
diff --git a/test/HTML/cf_128.html b/test/HTML/cf_128.html
old mode 100644
new mode 100755
diff --git a/test/HTML/doc2.htm b/test/HTML/doc2.htm
old mode 100644
new mode 100755
diff --git a/test/HTML/doc3.htm b/test/HTML/doc3.htm
old mode 100644
new mode 100755
diff --git a/test/HTML/entities.html b/test/HTML/entities.html
old mode 100644
new mode 100755
diff --git a/test/HTML/entities2.html b/test/HTML/entities2.html
old mode 100644
new mode 100755
diff --git a/test/HTML/fp40.htm b/test/HTML/fp40.htm
old mode 100644
new mode 100755
diff --git a/test/HTML/html5_enc.html b/test/HTML/html5_enc.html
old mode 100644
new mode 100755
diff --git a/test/HTML/liclose.html b/test/HTML/liclose.html
old mode 100644
new mode 100755
diff --git a/test/HTML/lt.html b/test/HTML/lt.html
old mode 100644
new mode 100755
diff --git a/test/HTML/noscript.html b/test/HTML/noscript.html
old mode 100644
new mode 100755
diff --git a/test/HTML/pre.html b/test/HTML/pre.html
old mode 100644
new mode 100755
diff --git a/test/HTML/python.html b/test/HTML/python.html
old mode 100644
new mode 100755
diff --git a/test/HTML/reg1.html b/test/HTML/reg1.html
old mode 100644
new mode 100755
diff --git a/test/HTML/reg2.html b/test/HTML/reg2.html
old mode 100644
new mode 100755
diff --git a/test/HTML/reg3.html b/test/HTML/reg3.html
old mode 100644
new mode 100755
diff --git a/test/HTML/reg4.html b/test/HTML/reg4.html
old mode 100644
new mode 100755
diff --git a/test/HTML/repeat.html b/test/HTML/repeat.html
old mode 100644
new mode 100755
diff --git a/test/HTML/script.html b/test/HTML/script.html
old mode 100644
new mode 100755
diff --git a/test/HTML/script2.html b/test/HTML/script2.html
old mode 100644
new mode 100755
diff --git a/test/HTML/test2.html b/test/HTML/test2.html
old mode 100644
new mode 100755
diff --git a/test/HTML/test3.html b/test/HTML/test3.html
old mode 100644
new mode 100755
diff --git a/test/HTML/utf8bug.html b/test/HTML/utf8bug.html
old mode 100644
new mode 100755
diff --git a/test/HTML/wired.html b/test/HTML/wired.html
old mode 100644
new mode 100755
diff --git a/test/SVG/4rects.xml b/test/SVG/4rects.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/a-valid.xml b/test/SVG/a-valid.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/a-wf.xml b/test/SVG/a-wf.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/bike.xml b/test/SVG/bike.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/circle.xml b/test/SVG/circle.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/defs.xml b/test/SVG/defs.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/desc.xml b/test/SVG/desc.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/ellipse.xml b/test/SVG/ellipse.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/flower2.xml b/test/SVG/flower2.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/gradient.xml b/test/SVG/gradient.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/group01.xml b/test/SVG/group01.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/group02.xml b/test/SVG/group02.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/group03.xml b/test/SVG/group03.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/image-valid.xml b/test/SVG/image-valid.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/image-wf.xml b/test/SVG/image-wf.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/lin-gradient.xml b/test/SVG/lin-gradient.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/marker.xml b/test/SVG/marker.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/mask.xml b/test/SVG/mask.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/mathswitch.xml b/test/SVG/mathswitch.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/parentns.xml b/test/SVG/parentns.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/path01.xml b/test/SVG/path01.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/path02.xml b/test/SVG/path02.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/patternfill.xml b/test/SVG/patternfill.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/polyline.xml b/test/SVG/polyline.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/private.xml b/test/SVG/private.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/rad-gradient.xml b/test/SVG/rad-gradient.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/rectangle.xml b/test/SVG/rectangle.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/richdesc.xml b/test/SVG/richdesc.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/script.xml b/test/SVG/script.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/structure01.xml b/test/SVG/structure01.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/style.xml b/test/SVG/style.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/switch.xml b/test/SVG/switch.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/symbol-use.xml b/test/SVG/symbol-use.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/template.xml b/test/SVG/template.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/text01.xml b/test/SVG/text01.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/text02.xml b/test/SVG/text02.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/text03.xml b/test/SVG/text03.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/toap01.xml b/test/SVG/toap01.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/toap02.xml b/test/SVG/toap02.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/transform.xml b/test/SVG/transform.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/trivial.xml b/test/SVG/trivial.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/twin-gradients.xml b/test/SVG/twin-gradients.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/v-template.xml b/test/SVG/v-template.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/viewport-nest.xml b/test/SVG/viewport-nest.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/viewport-transform.xml b/test/SVG/viewport-transform.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/viewport.xml b/test/SVG/viewport.xml
old mode 100644
new mode 100755
diff --git a/test/SVG/wf-template.xml b/test/SVG/wf-template.xml
old mode 100644
new mode 100755
diff --git a/test/URI/smith.uri b/test/URI/smith.uri
old mode 100644
new mode 100755
diff --git a/test/URI/uri.data b/test/URI/uri.data
old mode 100644
new mode 100755
diff --git a/test/VC/AttributeDefaultLegal b/test/VC/AttributeDefaultLegal
old mode 100644
new mode 100755
diff --git a/test/VC/AttributeNmtokens b/test/VC/AttributeNmtokens
old mode 100644
new mode 100755
diff --git a/test/VC/DuplicateType b/test/VC/DuplicateType
old mode 100644
new mode 100755
diff --git a/test/VC/ElementValid b/test/VC/ElementValid
old mode 100644
new mode 100755
diff --git a/test/VC/ElementValid2 b/test/VC/ElementValid2
old mode 100644
new mode 100755
diff --git a/test/VC/ElementValid3 b/test/VC/ElementValid3
old mode 100644
new mode 100755
diff --git a/test/VC/ElementValid4 b/test/VC/ElementValid4
old mode 100644
new mode 100755
diff --git a/test/VC/ElementValid5 b/test/VC/ElementValid5
old mode 100644
new mode 100755
diff --git a/test/VC/ElementValid6 b/test/VC/ElementValid6
old mode 100644
new mode 100755
diff --git a/test/VC/ElementValid7 b/test/VC/ElementValid7
old mode 100644
new mode 100755
diff --git a/test/VC/ElementValid8 b/test/VC/ElementValid8
old mode 100644
new mode 100755
diff --git a/test/VC/Enumeration b/test/VC/Enumeration
old mode 100644
new mode 100755
diff --git a/test/VC/NS1 b/test/VC/NS1
old mode 100644
new mode 100755
diff --git a/test/VC/NS2 b/test/VC/NS2
old mode 100644
new mode 100755
diff --git a/test/VC/NS3 b/test/VC/NS3
old mode 100644
new mode 100755
diff --git a/test/VC/OneID b/test/VC/OneID
old mode 100644
new mode 100755
diff --git a/test/VC/OneID2 b/test/VC/OneID2
old mode 100644
new mode 100755
diff --git a/test/VC/OneID3 b/test/VC/OneID3
old mode 100644
new mode 100755
diff --git a/test/VC/PENesting b/test/VC/PENesting
old mode 100644
new mode 100755
diff --git a/test/VC/PENesting2 b/test/VC/PENesting2
old mode 100644
new mode 100755
diff --git a/test/VC/UniqueElementTypeDeclaration b/test/VC/UniqueElementTypeDeclaration
old mode 100644
new mode 100755
diff --git a/test/VC/UniqueElementTypeDeclaration2 b/test/VC/UniqueElementTypeDeclaration2
old mode 100644
new mode 100755
diff --git a/test/VC/dtds/a.dtd b/test/VC/dtds/a.dtd
old mode 100644
new mode 100755
diff --git a/test/VC/dtds/doc.dtd b/test/VC/dtds/doc.dtd
old mode 100644
new mode 100755
diff --git a/test/VCM/21.xml b/test/VCM/21.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/AttributeNmtokens.xml b/test/VCM/AttributeNmtokens.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v1.xml b/test/VCM/v1.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v10.xml b/test/VCM/v10.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v11.xml b/test/VCM/v11.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v12.xml b/test/VCM/v12.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v13.xml b/test/VCM/v13.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v14.xml b/test/VCM/v14.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v15.xml b/test/VCM/v15.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v16.xml b/test/VCM/v16.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v17.xml b/test/VCM/v17.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v18.xml b/test/VCM/v18.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v19.xml b/test/VCM/v19.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v2.xml b/test/VCM/v2.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v20.xml b/test/VCM/v20.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v21.xml b/test/VCM/v21.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v22.xml b/test/VCM/v22.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v23.xml b/test/VCM/v23.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v24.xml b/test/VCM/v24.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v3.xml b/test/VCM/v3.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v4.xml b/test/VCM/v4.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v5.xml b/test/VCM/v5.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v6.xml b/test/VCM/v6.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v7.xml b/test/VCM/v7.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v8.xml b/test/VCM/v8.xml
old mode 100644
new mode 100755
diff --git a/test/VCM/v9.xml b/test/VCM/v9.xml
old mode 100644
new mode 100755
diff --git a/test/WFC/ElemTypeMatch b/test/WFC/ElemTypeMatch
old mode 100644
new mode 100755
diff --git a/test/WFC/EntityDeclared b/test/WFC/EntityDeclared
old mode 100644
new mode 100755
diff --git a/test/WFC/EntityDeclared2 b/test/WFC/EntityDeclared2
old mode 100644
new mode 100755
diff --git a/test/WFC/EntityDeclared3 b/test/WFC/EntityDeclared3
old mode 100644
new mode 100755
diff --git a/test/WFC/EntityDeclared4 b/test/WFC/EntityDeclared4
old mode 100644
new mode 100755
diff --git a/test/WFC/EntityDeclared5 b/test/WFC/EntityDeclared5
old mode 100644
new mode 100755
diff --git a/test/WFC/LegalCharacter b/test/WFC/LegalCharacter
old mode 100644
new mode 100755
diff --git a/test/WFC/NoExternalEntityRef b/test/WFC/NoExternalEntityRef
old mode 100644
new mode 100755
diff --git a/test/WFC/NoLtInAttValue b/test/WFC/NoLtInAttValue
old mode 100644
new mode 100755
diff --git a/test/WFC/NoRecursion b/test/WFC/NoRecursion
old mode 100644
new mode 100755
diff --git a/test/WFC/PEintsubset b/test/WFC/PEintsubset
old mode 100644
new mode 100755
diff --git a/test/WFC/UniqueAttSpec b/test/WFC/UniqueAttSpec
old mode 100644
new mode 100755
diff --git a/test/WFC/UniqueAttSpec2 b/test/WFC/UniqueAttSpec2
old mode 100644
new mode 100755
diff --git a/test/XInclude/docs/docids.xml b/test/XInclude/docs/docids.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/docs/fallback.xml b/test/XInclude/docs/fallback.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/docs/fallback2.xml b/test/XInclude/docs/fallback2.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/docs/include.xml b/test/XInclude/docs/include.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/docs/nodes.xml b/test/XInclude/docs/nodes.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/docs/nodes2.xml b/test/XInclude/docs/nodes2.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/docs/nodes3.xml b/test/XInclude/docs/nodes3.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/docs/recursive.xml b/test/XInclude/docs/recursive.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/docs/tstencoding.xml b/test/XInclude/docs/tstencoding.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/docs/txtinclude.xml b/test/XInclude/docs/txtinclude.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/ents/ids.xml b/test/XInclude/ents/ids.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/ents/inc.txt b/test/XInclude/ents/inc.txt
old mode 100644
new mode 100755
diff --git a/test/XInclude/ents/isolatin.txt b/test/XInclude/ents/isolatin.txt
old mode 100644
new mode 100755
diff --git a/test/XInclude/ents/something.txt b/test/XInclude/ents/something.txt
old mode 100644
new mode 100755
diff --git a/test/XInclude/ents/something.xml b/test/XInclude/ents/something.xml
old mode 100644
new mode 100755
diff --git a/test/XInclude/ents/sub-inc.ent b/test/XInclude/ents/sub-inc.ent
old mode 100644
new mode 100755
diff --git a/test/XPath/docs/chapters b/test/XPath/docs/chapters
old mode 100644
new mode 100755
diff --git a/test/XPath/docs/id b/test/XPath/docs/id
old mode 100644
new mode 100755
diff --git a/test/XPath/docs/lang b/test/XPath/docs/lang
old mode 100644
new mode 100755
diff --git a/test/XPath/docs/mixed b/test/XPath/docs/mixed
old mode 100644
new mode 100755
diff --git a/test/XPath/docs/nodes b/test/XPath/docs/nodes
old mode 100644
new mode 100755
diff --git a/test/XPath/docs/ns b/test/XPath/docs/ns
old mode 100644
new mode 100755
diff --git a/test/XPath/docs/simple b/test/XPath/docs/simple
old mode 100644
new mode 100755
diff --git a/test/XPath/docs/str b/test/XPath/docs/str
old mode 100644
new mode 100755
diff --git a/test/XPath/docs/usr1 b/test/XPath/docs/usr1
old mode 100644
new mode 100755
diff --git a/test/XPath/docs/vid b/test/XPath/docs/vid
old mode 100644
new mode 100755
diff --git a/test/XPath/expr/base b/test/XPath/expr/base
old mode 100644
new mode 100755
diff --git a/test/XPath/expr/compare b/test/XPath/expr/compare
old mode 100644
new mode 100755
diff --git a/test/XPath/expr/equality b/test/XPath/expr/equality
old mode 100644
new mode 100755
diff --git a/test/XPath/expr/floats b/test/XPath/expr/floats
old mode 100644
new mode 100755
diff --git a/test/XPath/expr/functions b/test/XPath/expr/functions
old mode 100644
new mode 100755
diff --git a/test/XPath/expr/strings b/test/XPath/expr/strings
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/chaptersbase b/test/XPath/tests/chaptersbase
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/chaptersprefol b/test/XPath/tests/chaptersprefol
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/idsimple b/test/XPath/tests/idsimple
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/langsimple b/test/XPath/tests/langsimple
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/mixedpat b/test/XPath/tests/mixedpat
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/nodespat b/test/XPath/tests/nodespat
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/nssimple b/test/XPath/tests/nssimple
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/simpleabbr b/test/XPath/tests/simpleabbr
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/simplebase b/test/XPath/tests/simplebase
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/strbase b/test/XPath/tests/strbase
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/usr1check b/test/XPath/tests/usr1check
old mode 100644
new mode 100755
diff --git a/test/XPath/tests/vidbase b/test/XPath/tests/vidbase
old mode 100644
new mode 100755
diff --git a/test/XPath/xptr/chapterschildseq b/test/XPath/xptr/chapterschildseq
old mode 100644
new mode 100755
diff --git a/test/XPath/xptr/chaptersparts b/test/XPath/xptr/chaptersparts
old mode 100644
new mode 100755
diff --git a/test/XPath/xptr/chaptersrange b/test/XPath/xptr/chaptersrange
old mode 100644
new mode 100755
diff --git a/test/XPath/xptr/strpoint b/test/XPath/xptr/strpoint
old mode 100644
new mode 100755
diff --git a/test/XPath/xptr/strrange b/test/XPath/xptr/strrange
old mode 100644
new mode 100755
diff --git a/test/XPath/xptr/strrange2 b/test/XPath/xptr/strrange2
old mode 100644
new mode 100755
diff --git a/test/XPath/xptr/strrange3 b/test/XPath/xptr/strrange3
old mode 100644
new mode 100755
diff --git a/test/XPath/xptr/vidbase b/test/XPath/xptr/vidbase
old mode 100644
new mode 100755
diff --git a/test/XPath/xptr/vidchildseq b/test/XPath/xptr/vidchildseq
old mode 100644
new mode 100755
diff --git a/test/XPath/xptr/viderror b/test/XPath/xptr/viderror
old mode 100644
new mode 100755
diff --git a/test/XPath/xptr/vidparts b/test/XPath/xptr/vidparts
old mode 100644
new mode 100755
diff --git a/test/att1 b/test/att1
old mode 100644
new mode 100755
diff --git a/test/att10 b/test/att10
old mode 100644
new mode 100755
diff --git a/test/att11 b/test/att11
old mode 100644
new mode 100755
diff --git a/test/att2 b/test/att2
old mode 100644
new mode 100755
diff --git a/test/att3 b/test/att3
old mode 100644
new mode 100755
diff --git a/test/att4 b/test/att4
old mode 100644
new mode 100755
diff --git a/test/att5 b/test/att5
old mode 100644
new mode 100755
diff --git a/test/att6 b/test/att6
old mode 100644
new mode 100755
diff --git a/test/att7 b/test/att7
old mode 100644
new mode 100755
diff --git a/test/att8 b/test/att8
old mode 100644
new mode 100755
diff --git a/test/att9 b/test/att9
old mode 100644
new mode 100755
diff --git a/test/attrib.xml b/test/attrib.xml
old mode 100644
new mode 100755
diff --git a/test/automata/a b/test/automata/a
old mode 100644
new mode 100755
diff --git a/test/automata/aba b/test/automata/aba
old mode 100644
new mode 100755
diff --git a/test/automata/abaa b/test/automata/abaa
old mode 100644
new mode 100755
diff --git a/test/automata/abba b/test/automata/abba
old mode 100644
new mode 100755
diff --git a/test/automata/po b/test/automata/po
old mode 100644
new mode 100755
diff --git a/test/badcomment.xml b/test/badcomment.xml
old mode 100644
new mode 100755
diff --git a/test/bigentname.xml b/test/bigentname.xml
old mode 100644
new mode 100755
diff --git a/test/bigname.xml b/test/bigname.xml
old mode 100644
new mode 100755
diff --git a/test/bigname2.xml b/test/bigname2.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/doc.dtd b/test/c14n/1-1-without-comments/doc.dtd
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/example-1.xml b/test/c14n/1-1-without-comments/example-1.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/example-2.xml b/test/c14n/1-1-without-comments/example-2.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/example-3.xml b/test/c14n/1-1-without-comments/example-3.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/example-4.xml b/test/c14n/1-1-without-comments/example-4.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/example-5.xml b/test/c14n/1-1-without-comments/example-5.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/example-6.xml b/test/c14n/1-1-without-comments/example-6.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/example-7.xml b/test/c14n/1-1-without-comments/example-7.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/example-7.xpath b/test/c14n/1-1-without-comments/example-7.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/example-8.xml b/test/c14n/1-1-without-comments/example-8.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/example-8.xpath b/test/c14n/1-1-without-comments/example-8.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/world.txt b/test/c14n/1-1-without-comments/world.txt
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-c14n11spec-102.xml b/test/c14n/1-1-without-comments/xmlbase-c14n11spec-102.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-c14n11spec-102.xpath b/test/c14n/1-1-without-comments/xmlbase-c14n11spec-102.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-c14n11spec2-102.xml b/test/c14n/1-1-without-comments/xmlbase-c14n11spec2-102.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-c14n11spec2-102.xpath b/test/c14n/1-1-without-comments/xmlbase-c14n11spec2-102.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-c14n11spec3-102.xml b/test/c14n/1-1-without-comments/xmlbase-c14n11spec3-102.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-c14n11spec3-102.xpath b/test/c14n/1-1-without-comments/xmlbase-c14n11spec3-102.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-1.xml b/test/c14n/1-1-without-comments/xmlbase-prop-1.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-1.xpath b/test/c14n/1-1-without-comments/xmlbase-prop-1.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-2.xml b/test/c14n/1-1-without-comments/xmlbase-prop-2.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-2.xpath b/test/c14n/1-1-without-comments/xmlbase-prop-2.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-3.xml b/test/c14n/1-1-without-comments/xmlbase-prop-3.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-3.xpath b/test/c14n/1-1-without-comments/xmlbase-prop-3.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-4.xml b/test/c14n/1-1-without-comments/xmlbase-prop-4.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-4.xpath b/test/c14n/1-1-without-comments/xmlbase-prop-4.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-5.xml b/test/c14n/1-1-without-comments/xmlbase-prop-5.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-5.xpath b/test/c14n/1-1-without-comments/xmlbase-prop-5.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-6.xml b/test/c14n/1-1-without-comments/xmlbase-prop-6.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-6.xpath b/test/c14n/1-1-without-comments/xmlbase-prop-6.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-7.xml b/test/c14n/1-1-without-comments/xmlbase-prop-7.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlbase-prop-7.xpath b/test/c14n/1-1-without-comments/xmlbase-prop-7.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlid-prop-1.xml b/test/c14n/1-1-without-comments/xmlid-prop-1.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlid-prop-1.xpath b/test/c14n/1-1-without-comments/xmlid-prop-1.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlid-prop-2.xml b/test/c14n/1-1-without-comments/xmlid-prop-2.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlid-prop-2.xpath b/test/c14n/1-1-without-comments/xmlid-prop-2.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmllang-prop-1.xml b/test/c14n/1-1-without-comments/xmllang-prop-1.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmllang-prop-1.xpath b/test/c14n/1-1-without-comments/xmllang-prop-1.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmllang-prop-2.xml b/test/c14n/1-1-without-comments/xmllang-prop-2.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmllang-prop-2.xpath b/test/c14n/1-1-without-comments/xmllang-prop-2.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmllang-prop-3.xml b/test/c14n/1-1-without-comments/xmllang-prop-3.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmllang-prop-3.xpath b/test/c14n/1-1-without-comments/xmllang-prop-3.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmllang-prop-4.xml b/test/c14n/1-1-without-comments/xmllang-prop-4.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmllang-prop-4.xpath b/test/c14n/1-1-without-comments/xmllang-prop-4.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlspace-prop-1.xml b/test/c14n/1-1-without-comments/xmlspace-prop-1.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlspace-prop-1.xpath b/test/c14n/1-1-without-comments/xmlspace-prop-1.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlspace-prop-2.xml b/test/c14n/1-1-without-comments/xmlspace-prop-2.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlspace-prop-2.xpath b/test/c14n/1-1-without-comments/xmlspace-prop-2.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlspace-prop-3.xml b/test/c14n/1-1-without-comments/xmlspace-prop-3.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlspace-prop-3.xpath b/test/c14n/1-1-without-comments/xmlspace-prop-3.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlspace-prop-4.xml b/test/c14n/1-1-without-comments/xmlspace-prop-4.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/1-1-without-comments/xmlspace-prop-4.xpath b/test/c14n/1-1-without-comments/xmlspace-prop-4.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-09.xml b/test/c14n/exc-without-comments/merlin-c14n-two-09.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-09.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-09.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-10.xml b/test/c14n/exc-without-comments/merlin-c14n-two-10.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-10.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-10.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-11.xml b/test/c14n/exc-without-comments/merlin-c14n-two-11.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-11.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-11.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-12.xml b/test/c14n/exc-without-comments/merlin-c14n-two-12.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-12.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-12.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-13.xml b/test/c14n/exc-without-comments/merlin-c14n-two-13.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-13.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-13.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-14.xml b/test/c14n/exc-without-comments/merlin-c14n-two-14.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-14.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-14.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-15.xml b/test/c14n/exc-without-comments/merlin-c14n-two-15.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-15.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-15.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-16.xml b/test/c14n/exc-without-comments/merlin-c14n-two-16.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-16.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-16.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-17.xml b/test/c14n/exc-without-comments/merlin-c14n-two-17.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-17.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-17.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-18.ns b/test/c14n/exc-without-comments/merlin-c14n-two-18.ns
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-18.xml b/test/c14n/exc-without-comments/merlin-c14n-two-18.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-18.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-18.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-19.ns b/test/c14n/exc-without-comments/merlin-c14n-two-19.ns
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-19.xml b/test/c14n/exc-without-comments/merlin-c14n-two-19.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-19.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-19.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-20.ns b/test/c14n/exc-without-comments/merlin-c14n-two-20.ns
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-20.xml b/test/c14n/exc-without-comments/merlin-c14n-two-20.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-20.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-20.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-21.ns b/test/c14n/exc-without-comments/merlin-c14n-two-21.ns
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-21.xml b/test/c14n/exc-without-comments/merlin-c14n-two-21.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-21.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-21.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-22.ns b/test/c14n/exc-without-comments/merlin-c14n-two-22.ns
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-22.xml b/test/c14n/exc-without-comments/merlin-c14n-two-22.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-22.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-22.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-23.ns b/test/c14n/exc-without-comments/merlin-c14n-two-23.ns
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-23.xml b/test/c14n/exc-without-comments/merlin-c14n-two-23.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-23.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-23.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-24.ns b/test/c14n/exc-without-comments/merlin-c14n-two-24.ns
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-24.xml b/test/c14n/exc-without-comments/merlin-c14n-two-24.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-24.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-24.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-25.ns b/test/c14n/exc-without-comments/merlin-c14n-two-25.ns
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-25.xml b/test/c14n/exc-without-comments/merlin-c14n-two-25.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-25.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-25.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-26.ns b/test/c14n/exc-without-comments/merlin-c14n-two-26.ns
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-26.xml b/test/c14n/exc-without-comments/merlin-c14n-two-26.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/merlin-c14n-two-26.xpath b/test/c14n/exc-without-comments/merlin-c14n-two-26.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/test-0.xml b/test/c14n/exc-without-comments/test-0.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/test-0.xpath b/test/c14n/exc-without-comments/test-0.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/test-1.ns b/test/c14n/exc-without-comments/test-1.ns
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/test-1.xml b/test/c14n/exc-without-comments/test-1.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/test-1.xpath b/test/c14n/exc-without-comments/test-1.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/test-2.xml b/test/c14n/exc-without-comments/test-2.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/exc-without-comments/test-2.xpath b/test/c14n/exc-without-comments/test-2.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/with-comments/doc.dtd b/test/c14n/with-comments/doc.dtd
old mode 100644
new mode 100755
diff --git a/test/c14n/with-comments/example-1.xml b/test/c14n/with-comments/example-1.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/with-comments/example-2.xml b/test/c14n/with-comments/example-2.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/with-comments/example-3.xml b/test/c14n/with-comments/example-3.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/with-comments/example-4.xml b/test/c14n/with-comments/example-4.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/with-comments/example-5.xml b/test/c14n/with-comments/example-5.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/with-comments/example-6.xml b/test/c14n/with-comments/example-6.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/with-comments/example-7.xml b/test/c14n/with-comments/example-7.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/with-comments/example-7.xpath b/test/c14n/with-comments/example-7.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/with-comments/world.txt b/test/c14n/with-comments/world.txt
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/doc.dtd b/test/c14n/without-comments/doc.dtd
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/example-1.xml b/test/c14n/without-comments/example-1.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/example-2.xml b/test/c14n/without-comments/example-2.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/example-3.xml b/test/c14n/without-comments/example-3.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/example-4.xml b/test/c14n/without-comments/example-4.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/example-5.xml b/test/c14n/without-comments/example-5.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/example-6.xml b/test/c14n/without-comments/example-6.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/example-7.xml b/test/c14n/without-comments/example-7.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/example-7.xpath b/test/c14n/without-comments/example-7.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-00.xml b/test/c14n/without-comments/merlin-c14n-two-00.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-00.xpath b/test/c14n/without-comments/merlin-c14n-two-00.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-01.xml b/test/c14n/without-comments/merlin-c14n-two-01.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-01.xpath b/test/c14n/without-comments/merlin-c14n-two-01.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-02.xml b/test/c14n/without-comments/merlin-c14n-two-02.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-02.xpath b/test/c14n/without-comments/merlin-c14n-two-02.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-03.xml b/test/c14n/without-comments/merlin-c14n-two-03.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-03.xpath b/test/c14n/without-comments/merlin-c14n-two-03.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-04.xml b/test/c14n/without-comments/merlin-c14n-two-04.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-04.xpath b/test/c14n/without-comments/merlin-c14n-two-04.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-05.xml b/test/c14n/without-comments/merlin-c14n-two-05.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-05.xpath b/test/c14n/without-comments/merlin-c14n-two-05.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-06.xml b/test/c14n/without-comments/merlin-c14n-two-06.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-06.xpath b/test/c14n/without-comments/merlin-c14n-two-06.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-07.xml b/test/c14n/without-comments/merlin-c14n-two-07.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-07.xpath b/test/c14n/without-comments/merlin-c14n-two-07.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-08.xml b/test/c14n/without-comments/merlin-c14n-two-08.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/merlin-c14n-two-08.xpath b/test/c14n/without-comments/merlin-c14n-two-08.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/test-0.xml b/test/c14n/without-comments/test-0.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/test-0.xpath b/test/c14n/without-comments/test-0.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/test-1.xml b/test/c14n/without-comments/test-1.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/test-1.xpath b/test/c14n/without-comments/test-1.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/test-2.xml b/test/c14n/without-comments/test-2.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/test-2.xpath b/test/c14n/without-comments/test-2.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/test-3.xml b/test/c14n/without-comments/test-3.xml
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/test-3.xpath b/test/c14n/without-comments/test-3.xpath
old mode 100644
new mode 100755
diff --git a/test/c14n/without-comments/world.txt b/test/c14n/without-comments/world.txt
old mode 100644
new mode 100755
diff --git a/test/catalogs/catal.script b/test/catalogs/catal.script
old mode 100644
new mode 100755
diff --git a/test/catalogs/catal.sgml b/test/catalogs/catal.sgml
old mode 100644
new mode 100755
diff --git a/test/catalogs/catal1.sgml b/test/catalogs/catal1.sgml
old mode 100644
new mode 100755
diff --git a/test/catalogs/catal2.sgml b/test/catalogs/catal2.sgml
old mode 100644
new mode 100755
diff --git a/test/catalogs/catal3.sgml b/test/catalogs/catal3.sgml
old mode 100644
new mode 100755
diff --git a/test/catalogs/docbook.script b/test/catalogs/docbook.script
old mode 100644
new mode 100755
diff --git a/test/catalogs/docbook.xml b/test/catalogs/docbook.xml
old mode 100644
new mode 100755
diff --git a/test/catalogs/registry.script b/test/catalogs/registry.script
old mode 100644
new mode 100755
diff --git a/test/catalogs/registry.xml b/test/catalogs/registry.xml
old mode 100644
new mode 100755
diff --git a/test/catalogs/stylesheet.xml b/test/catalogs/stylesheet.xml
old mode 100644
new mode 100755
diff --git a/test/catalogs/whites.script b/test/catalogs/whites.script
old mode 100644
new mode 100755
diff --git a/test/catalogs/whites.sgml b/test/catalogs/whites.sgml
old mode 100644
new mode 100755
diff --git a/test/catalogs/whitex.script b/test/catalogs/whitex.script
old mode 100644
new mode 100755
diff --git a/test/catalogs/whitex.xml b/test/catalogs/whitex.xml
old mode 100644
new mode 100755
diff --git a/test/cdata b/test/cdata
old mode 100644
new mode 100755
diff --git a/test/cdata-2-byte-UTF-8.xml b/test/cdata-2-byte-UTF-8.xml
old mode 100644
new mode 100755
diff --git a/test/cdata-3-byte-UTF-8.xml b/test/cdata-3-byte-UTF-8.xml
old mode 100644
new mode 100755
diff --git a/test/cdata-4-byte-UTF-8.xml b/test/cdata-4-byte-UTF-8.xml
old mode 100644
new mode 100755
diff --git a/test/cdata2 b/test/cdata2
old mode 100644
new mode 100755
diff --git a/test/comment.xml b/test/comment.xml
old mode 100644
new mode 100755
diff --git a/test/comment2.xml b/test/comment2.xml
old mode 100644
new mode 100755
diff --git a/test/comment3.xml b/test/comment3.xml
old mode 100644
new mode 100755
diff --git a/test/comment4.xml b/test/comment4.xml
old mode 100644
new mode 100755
diff --git a/test/comment5.xml b/test/comment5.xml
old mode 100644
new mode 100755
diff --git a/test/comment6.xml b/test/comment6.xml
old mode 100644
new mode 100755
diff --git a/test/dav1 b/test/dav1
old mode 100644
new mode 100755
diff --git a/test/dav10 b/test/dav10
old mode 100644
new mode 100755
diff --git a/test/dav11 b/test/dav11
old mode 100644
new mode 100755
diff --git a/test/dav12 b/test/dav12
old mode 100644
new mode 100755
diff --git a/test/dav13 b/test/dav13
old mode 100644
new mode 100755
diff --git a/test/dav15 b/test/dav15
old mode 100644
new mode 100755
diff --git a/test/dav16 b/test/dav16
old mode 100644
new mode 100755
diff --git a/test/dav17 b/test/dav17
old mode 100644
new mode 100755
diff --git a/test/dav18 b/test/dav18
old mode 100644
new mode 100755
diff --git a/test/dav19 b/test/dav19
old mode 100644
new mode 100755
diff --git a/test/dav2 b/test/dav2
old mode 100644
new mode 100755
diff --git a/test/dav3 b/test/dav3
old mode 100644
new mode 100755
diff --git a/test/dav4 b/test/dav4
old mode 100644
new mode 100755
diff --git a/test/dav5 b/test/dav5
old mode 100644
new mode 100755
diff --git a/test/dav6 b/test/dav6
old mode 100644
new mode 100755
diff --git a/test/dav7 b/test/dav7
old mode 100644
new mode 100755
diff --git a/test/dav8 b/test/dav8
old mode 100644
new mode 100755
diff --git a/test/dav9 b/test/dav9
old mode 100644
new mode 100755
diff --git a/test/defattr.xml b/test/defattr.xml
old mode 100644
new mode 100755
diff --git a/test/defattr2.xml b/test/defattr2.xml
old mode 100644
new mode 100755
diff --git a/test/dia1 b/test/dia1
old mode 100644
new mode 100755
diff --git a/test/dia2 b/test/dia2
old mode 100644
new mode 100755
diff --git a/test/dtd1 b/test/dtd1
old mode 100644
new mode 100755
diff --git a/test/dtd10 b/test/dtd10
old mode 100644
new mode 100755
diff --git a/test/dtd11 b/test/dtd11
old mode 100644
new mode 100755
diff --git a/test/dtd12 b/test/dtd12
old mode 100644
new mode 100755
diff --git a/test/dtd13 b/test/dtd13
old mode 100644
new mode 100755
diff --git a/test/dtd2 b/test/dtd2
old mode 100644
new mode 100755
diff --git a/test/dtd3 b/test/dtd3
old mode 100644
new mode 100755
diff --git a/test/dtd4 b/test/dtd4
old mode 100644
new mode 100755
diff --git a/test/dtd5 b/test/dtd5
old mode 100644
new mode 100755
diff --git a/test/dtd6 b/test/dtd6
old mode 100644
new mode 100755
diff --git a/test/dtd7 b/test/dtd7
old mode 100644
new mode 100755
diff --git a/test/dtd8 b/test/dtd8
old mode 100644
new mode 100755
diff --git a/test/dtd9 b/test/dtd9
old mode 100644
new mode 100755
diff --git a/test/dtds/eve.dtd b/test/dtds/eve.dtd
old mode 100644
new mode 100755
diff --git a/test/ebcdic_566012.xml b/test/ebcdic_566012.xml
old mode 100644
new mode 100755
diff --git a/test/emptycdata.xml b/test/emptycdata.xml
old mode 100644
new mode 100755
diff --git a/test/ent1 b/test/ent1
old mode 100644
new mode 100755
diff --git a/test/ent10 b/test/ent10
old mode 100644
new mode 100755
diff --git a/test/ent11 b/test/ent11
old mode 100644
new mode 100755
diff --git a/test/ent12 b/test/ent12
old mode 100644
new mode 100755
diff --git a/test/ent13 b/test/ent13
old mode 100644
new mode 100755
diff --git a/test/ent2 b/test/ent2
old mode 100644
new mode 100755
diff --git a/test/ent3 b/test/ent3
old mode 100644
new mode 100755
diff --git a/test/ent4 b/test/ent4
old mode 100644
new mode 100755
diff --git a/test/ent5 b/test/ent5
old mode 100644
new mode 100755
diff --git a/test/ent6 b/test/ent6
old mode 100644
new mode 100755
diff --git a/test/ent7 b/test/ent7
old mode 100644
new mode 100755
diff --git a/test/ent8 b/test/ent8
old mode 100644
new mode 100755
diff --git a/test/ent9 b/test/ent9
old mode 100644
new mode 100755
diff --git a/test/ent_738805.xml b/test/ent_738805.xml
old mode 100644
new mode 100755
diff --git a/test/errors/754946.xml b/test/errors/754946.xml
old mode 100644
new mode 100755
diff --git a/test/errors/754947.xml b/test/errors/754947.xml
old mode 100644
new mode 100755
diff --git a/test/errors/758588.xml b/test/errors/758588.xml
old mode 100644
new mode 100755
diff --git a/test/errors/759020.xml b/test/errors/759020.xml
old mode 100644
new mode 100755
diff --git a/test/errors/759398.xml b/test/errors/759398.xml
old mode 100644
new mode 100755
diff --git a/test/errors/759573-2.xml b/test/errors/759573-2.xml
old mode 100644
new mode 100755
diff --git a/test/errors/759573.xml b/test/errors/759573.xml
old mode 100644
new mode 100755
diff --git a/test/errors/759579.xml b/test/errors/759579.xml
old mode 100644
new mode 100755
diff --git a/test/errors/attr1.xml b/test/errors/attr1.xml
old mode 100644
new mode 100755
diff --git a/test/errors/attr2.xml b/test/errors/attr2.xml
old mode 100644
new mode 100755
diff --git a/test/errors/attr3.xml b/test/errors/attr3.xml
old mode 100644
new mode 100755
diff --git a/test/errors/attr4.xml b/test/errors/attr4.xml
old mode 100644
new mode 100755
diff --git a/test/errors/cdata.xml b/test/errors/cdata.xml
old mode 100644
new mode 100755
diff --git a/test/errors/charref1.xml b/test/errors/charref1.xml
old mode 100644
new mode 100755
diff --git a/test/errors/comment1.xml b/test/errors/comment1.xml
old mode 100644
new mode 100755
diff --git a/test/errors/content1.xml b/test/errors/content1.xml
old mode 100644
new mode 100755
diff --git a/test/errors/dtd13 b/test/errors/dtd13
old mode 100644
new mode 100755
diff --git a/test/errors/extparsedent.xml b/test/errors/extparsedent.xml
old mode 100644
new mode 100755
diff --git a/test/errors/name.xml b/test/errors/name.xml
old mode 100644
new mode 100755
diff --git a/test/errors/name2.xml b/test/errors/name2.xml
old mode 100644
new mode 100755
diff --git a/test/errors10/781205.xml b/test/errors10/781205.xml
old mode 100644
new mode 100755
diff --git a/test/errors10/781361.xml b/test/errors10/781361.xml
old mode 100644
new mode 100755
diff --git a/test/eve.xml b/test/eve.xml
old mode 100644
new mode 100755
diff --git a/test/expr/base b/test/expr/base
old mode 100644
new mode 100755
diff --git a/test/icu_parse_test.xml b/test/icu_parse_test.xml
old mode 100644
new mode 100755
diff --git a/test/intsubset.xml b/test/intsubset.xml
old mode 100644
new mode 100755
diff --git a/test/intsubset2.xml b/test/intsubset2.xml
old mode 100644
new mode 100755
diff --git a/test/isolat1 b/test/isolat1
old mode 100644
new mode 100755
diff --git a/test/isolat2 b/test/isolat2
old mode 100644
new mode 100755
diff --git a/test/isolat3 b/test/isolat3
old mode 100644
new mode 100755
diff --git a/test/japancrlf.xml b/test/japancrlf.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_0.xml b/test/namespaces/err_0.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_1.xml b/test/namespaces/err_1.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_10.xml b/test/namespaces/err_10.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_11.xml b/test/namespaces/err_11.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_2.xml b/test/namespaces/err_2.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_3.xml b/test/namespaces/err_3.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_4.xml b/test/namespaces/err_4.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_5.xml b/test/namespaces/err_5.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_6.xml b/test/namespaces/err_6.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_7.xml b/test/namespaces/err_7.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_8.xml b/test/namespaces/err_8.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/err_9.xml b/test/namespaces/err_9.xml
old mode 100644
new mode 100755
diff --git a/test/namespaces/reconcile/tests-to-c.xsl b/test/namespaces/reconcile/tests-to-c.xsl
old mode 100644
new mode 100755
diff --git a/test/namespaces/reconcile/tests.xml b/test/namespaces/reconcile/tests.xml
old mode 100644
new mode 100755
diff --git a/test/ns b/test/ns
old mode 100644
new mode 100755
diff --git a/test/ns2 b/test/ns2
old mode 100644
new mode 100755
diff --git a/test/ns3 b/test/ns3
old mode 100644
new mode 100755
diff --git a/test/ns4 b/test/ns4
old mode 100644
new mode 100755
diff --git a/test/ns5 b/test/ns5
old mode 100644
new mode 100755
diff --git a/test/ns6 b/test/ns6
old mode 100644
new mode 100755
diff --git a/test/ns7 b/test/ns7
old mode 100644
new mode 100755
diff --git a/test/nsclean.xml b/test/nsclean.xml
old mode 100644
new mode 100755
diff --git a/test/p3p b/test/p3p
old mode 100644
new mode 100755
diff --git a/test/pattern/conj.pat b/test/pattern/conj.pat
old mode 100644
new mode 100755
diff --git a/test/pattern/conj.xml b/test/pattern/conj.xml
old mode 100644
new mode 100755
diff --git a/test/pattern/multiple.pat b/test/pattern/multiple.pat
old mode 100644
new mode 100755
diff --git a/test/pattern/multiple.xml b/test/pattern/multiple.xml
old mode 100644
new mode 100755
diff --git a/test/pattern/namespaces.pat b/test/pattern/namespaces.pat
old mode 100644
new mode 100755
diff --git a/test/pattern/namespaces.xml b/test/pattern/namespaces.xml
old mode 100644
new mode 100755
diff --git a/test/pattern/simple.pat b/test/pattern/simple.pat
old mode 100644
new mode 100755
diff --git a/test/pattern/simple.xml b/test/pattern/simple.xml
old mode 100644
new mode 100755
diff --git a/test/pi.xml b/test/pi.xml
old mode 100644
new mode 100755
diff --git a/test/pi2.xml b/test/pi2.xml
old mode 100644
new mode 100755
diff --git a/test/rdf1 b/test/rdf1
old mode 100644
new mode 100755
diff --git a/test/rdf2 b/test/rdf2
old mode 100644
new mode 100755
diff --git a/test/recurse/good.xml b/test/recurse/good.xml
old mode 100644
new mode 100755
diff --git a/test/recurse/goodattr.xml b/test/recurse/goodattr.xml
old mode 100644
new mode 100755
diff --git a/test/recurse/lol1.xml b/test/recurse/lol1.xml
old mode 100644
new mode 100755
diff --git a/test/recurse/lol2.xml b/test/recurse/lol2.xml
old mode 100644
new mode 100755
diff --git a/test/recurse/lol3.dtd b/test/recurse/lol3.dtd
old mode 100644
new mode 100755
diff --git a/test/recurse/lol3.xml b/test/recurse/lol3.xml
old mode 100644
new mode 100755
diff --git a/test/recurse/lol4.patch b/test/recurse/lol4.patch
old mode 100644
new mode 100755
diff --git a/test/recurse/lol4.xml b/test/recurse/lol4.xml
old mode 100644
new mode 100755
diff --git a/test/recurse/lol5.xml b/test/recurse/lol5.xml
old mode 100644
new mode 100755
diff --git a/test/recurse/lol6.xml b/test/recurse/lol6.xml
old mode 100644
new mode 100755
diff --git a/test/regexp/branch b/test/regexp/branch
old mode 100644
new mode 100755
diff --git a/test/regexp/bug316338 b/test/regexp/bug316338
old mode 100644
new mode 100755
diff --git a/test/regexp/bug420596 b/test/regexp/bug420596
old mode 100644
new mode 100755
diff --git a/test/regexp/bug649244 b/test/regexp/bug649244
old mode 100644
new mode 100755
diff --git a/test/regexp/content b/test/regexp/content
old mode 100644
new mode 100755
diff --git a/test/regexp/hard b/test/regexp/hard
old mode 100644
new mode 100755
diff --git a/test/regexp/ncname b/test/regexp/ncname
old mode 100644
new mode 100755
diff --git a/test/regexp/ranges b/test/regexp/ranges
old mode 100644
new mode 100755
diff --git a/test/regexp/ranges2 b/test/regexp/ranges2
old mode 100644
new mode 100755
diff --git a/test/regexp/xpath b/test/regexp/xpath
old mode 100644
new mode 100755
diff --git a/test/relaxng/302836.rng b/test/relaxng/302836.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/302836_0.xml b/test/relaxng/302836_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/307377.rng b/test/relaxng/307377.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/307377_0.xml b/test/relaxng/307377_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/307377_1.xml b/test/relaxng/307377_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/307377_2.xml b/test/relaxng/307377_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/492317.rng b/test/relaxng/492317.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/492317_0.xml b/test/relaxng/492317_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/492317_1.xml b/test/relaxng/492317_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/492317_2.xml b/test/relaxng/492317_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/558452.rng b/test/relaxng/558452.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/558452_0.xml b/test/relaxng/558452_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/558452_1.xml b/test/relaxng/558452_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/558452_2.xml b/test/relaxng/558452_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/558452_3.xml b/test/relaxng/558452_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/558452_4.xml b/test/relaxng/558452_4.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/565219.rng b/test/relaxng/565219.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/565219_0.xml b/test/relaxng/565219_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/565219_1.xml b/test/relaxng/565219_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/565219_2.xml b/test/relaxng/565219_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/595792-ext.rng b/test/relaxng/595792-ext.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/595792.rng b/test/relaxng/595792.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/595792_0.xml b/test/relaxng/595792_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/710744.rng b/test/relaxng/710744.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/710744_1.xml b/test/relaxng/710744_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/710744_2.xml b/test/relaxng/710744_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/OASIS/spectest.xml b/test/relaxng/OASIS/spectest.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/OpenDocumentSub.rng b/test/relaxng/OpenDocumentSub.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/OpenDocumentSub_0.xml b/test/relaxng/OpenDocumentSub_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/addressBook.rng b/test/relaxng/addressBook.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/ambig_name-class.rng b/test/relaxng/ambig_name-class.rng
deleted file mode 120000
index 08533d39..00000000
--- a/test/relaxng/ambig_name-class.rng
+++ /dev/null
@@ -1 +0,0 @@
-tutorA.rng
\ No newline at end of file
diff --git a/test/relaxng/ambig_name-class.rng b/test/relaxng/ambig_name-class.rng
new file mode 100755
index 00000000..b9ef4e17
--- /dev/null
+++ b/test/relaxng/ambig_name-class.rng
@@ -0,0 +1,334 @@
+<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
+  ns="http://relaxng.org/ns/structure/1.0"
+  xmlns="http://relaxng.org/ns/structure/1.0">
+
+  <start>
+    <ref name="pattern"/>
+  </start>
+
+  <define name="pattern">
+    <choice>
+      <element name="element">
+        <choice>
+          <attribute name="name">
+            <data type="QName"/>
+          </attribute>
+          <ref name="open-name-class"/>
+        </choice>
+        <ref name="common-atts"/>
+        <ref name="open-patterns"/>
+      </element>
+      <element name="attribute">
+        <ref name="common-atts"/>
+        <choice>
+          <attribute name="name">
+            <data type="QName"/>
+          </attribute>
+          <ref name="open-name-class"/>
+        </choice>
+        <interleave>
+          <ref name="other"/>
+          <optional>
+            <ref name="pattern"/>
+          </optional>
+        </interleave>
+      </element>
+      <element name="group">
+        <ref name="common-atts"/>
+        <ref name="open-patterns"/>
+      </element>
+      <element name="interleave">
+        <ref name="common-atts"/>
+        <ref name="open-patterns"/>
+      </element>
+      <element name="choice">
+        <ref name="common-atts"/>
+        <ref name="open-patterns"/>
+      </element>
+      <element name="optional">
+        <ref name="common-atts"/>
+        <ref name="open-patterns"/>
+      </element>
+      <element name="zeroOrMore">
+        <ref name="common-atts"/>
+        <ref name="open-patterns"/>
+      </element>
+      <element name="oneOrMore">
+        <ref name="common-atts"/>
+        <ref name="open-patterns"/>
+      </element>
+      <element name="list">
+        <ref name="common-atts"/>
+        <ref name="open-patterns"/>
+      </element>
+      <element name="mixed">
+        <ref name="common-atts"/>
+        <ref name="open-patterns"/>
+      </element>
+      <element name="ref">
+        <attribute name="name">
+          <data type="NCName"/>
+        </attribute>
+        <ref name="common-atts"/>
+        <ref name="other"/>
+      </element>
+      <element name="parentRef">
+        <attribute name="name">
+          <data type="NCName"/>
+        </attribute>
+        <ref name="common-atts"/>
+        <ref name="other"/>
+      </element>
+      <element name="empty">
+        <ref name="common-atts"/>
+        <ref name="other"/>
+      </element>
+      <element name="text">
+        <ref name="common-atts"/>
+        <ref name="other"/>
+      </element>
+      <element name="value">
+        <optional>
+          <attribute name="type">
+            <data type="NCName"/>
+          </attribute>
+        </optional>
+        <ref name="common-atts"/>
+        <text/>
+      </element>
+      <element name="data">
+        <attribute name="type">
+          <data type="NCName"/>
+        </attribute>
+        <ref name="common-atts"/>
+        <interleave>
+          <ref name="other"/>
+          <group>
+            <zeroOrMore>
+              <element name="param">
+                <attribute name="name">
+                  <data type="NCName"/>
+                </attribute>
+                <ref name="common-atts"/>
+                <text/>
+              </element>
+            </zeroOrMore>
+            <optional>
+              <element name="except">
+                <ref name="common-atts"/>
+                <ref name="open-patterns"/>
+              </element>
+            </optional>
+          </group>
+        </interleave>
+      </element>
+      <element name="notAllowed">
+        <ref name="common-atts"/>
+        <ref name="other"/>
+      </element>
+      <element name="externalRef">
+        <attribute name="href">
+          <data type="anyURI"/>
+        </attribute>
+        <ref name="common-atts"/>
+        <ref name="other"/>
+      </element>
+      <element name="grammar">
+        <ref name="common-atts"/>
+        <ref name="grammar-content"/>
+      </element>
+    </choice>
+  </define>
+
+  <define name="grammar-content">
+    <interleave>
+      <ref name="other"/>
+      <zeroOrMore>
+        <choice>
+          <ref name="start-element"/>
+          <ref name="define-element"/>
+          <element name="div">
+            <ref name="common-atts"/>
+            <ref name="grammar-content"/>
+          </element>
+          <element name="include">
+            <attribute name="href">
+              <data type="anyURI"/>
+            </attribute>
+            <ref name="common-atts"/>
+            <ref name="include-content"/>
+          </element>
+        </choice>
+      </zeroOrMore>
+    </interleave>
+  </define>
+
+  <define name="include-content">
+    <interleave>
+      <ref name="other"/>
+      <zeroOrMore>
+        <choice>
+          <ref name="start-element"/>
+          <ref name="define-element"/>
+          <element name="div">
+            <ref name="common-atts"/>
+            <ref name="include-content"/>
+          </element>
+        </choice>
+      </zeroOrMore>
+    </interleave>
+  </define>
+
+  <define name="start-element">
+    <element name="start">
+      <ref name="combine-att"/>
+      <ref name="common-atts"/>
+      <ref name="open-pattern"/>
+    </element>
+  </define>
+
+  <define name="define-element">
+    <element name="define">
+      <attribute name="name">
+        <data type="NCName"/>
+      </attribute>
+      <ref name="combine-att"/>
+      <ref name="common-atts"/>
+      <ref name="open-patterns"/>
+    </element>
+  </define>
+
+  <define name="combine-att">
+    <optional>
+      <attribute name="combine">
+        <choice>
+          <value>choice</value>
+          <value>interleave</value>
+        </choice>
+      </attribute>
+    </optional>
+  </define>
+
+  <define name="open-patterns">
+    <interleave>
+      <ref name="other"/>
+      <oneOrMore>
+        <ref name="pattern"/>
+      </oneOrMore>
+    </interleave>
+  </define>
+
+  <define name="open-pattern">
+    <interleave>
+      <ref name="other"/>
+      <ref name="pattern"/>
+    </interleave>
+  </define>
+
+  <define name="name-class">
+    <choice>
+      <element name="name">
+        <ref name="common-atts"/>
+        <data type="QName"/>
+      </element>
+      <element name="anyName">
+        <ref name="common-atts"/>
+        <ref name="except-name-class"/>
+      </element>
+      <element name="nsName">
+        <ref name="common-atts"/>
+        <ref name="except-name-class"/>
+      </element>
+      <element name="choice">
+        <ref name="common-atts"/>
+        <ref name="open-name-classes"/>
+      </element>
+    </choice>
+  </define>
+
+  <define name="except-name-class">
+    <interleave>
+      <ref name="other"/>
+      <optional>
+        <element name="except">
+          <ref name="open-name-classes"/>
+        </element>
+      </optional>
+    </interleave>
+  </define>
+
+  <define name="open-name-classes">
+    <interleave>
+      <ref name="other"/>
+      <oneOrMore>
+        <ref name="name-class"/>
+      </oneOrMore>
+    </interleave>
+  </define>
+
+  <define name="open-name-class">
+    <interleave>
+      <ref name="other"/>
+      <ref name="name-class"/>
+    </interleave>
+  </define>
+
+  <define name="common-atts">
+    <optional>
+      <attribute name="ns"/>
+    </optional>
+    <optional>
+      <attribute name="datatypeLibrary">
+        <data type="anyURI"/>
+      </attribute>
+    </optional>
+    <zeroOrMore>
+      <attribute>
+        <anyName>
+          <except>
+            <nsName/>
+            <nsName ns=""/>
+          </except>
+        </anyName>
+      </attribute>
+    </zeroOrMore>
+  </define>
+
+  <define name="other">
+    <zeroOrMore>
+      <element>
+        <anyName>
+          <except>
+            <nsName/>
+          </except>
+        </anyName>
+        <zeroOrMore>
+          <choice>
+            <attribute>
+              <anyName/>
+            </attribute>
+            <text/>
+            <ref name="any"/>
+          </choice>
+        </zeroOrMore>
+      </element>
+    </zeroOrMore>
+  </define>
+
+  <define name="any">
+    <element>
+      <anyName/>
+      <zeroOrMore>
+        <choice>
+          <attribute>
+            <anyName/>
+          </attribute>
+          <text/>
+          <ref name="any"/>
+        </choice>
+      </zeroOrMore>
+    </element>
+  </define>
+
+</grammar>
+
diff --git a/test/relaxng/ambig_name-class.xml b/test/relaxng/ambig_name-class.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/ambig_name-class2.rng b/test/relaxng/ambig_name-class2.rng
deleted file mode 120000
index 6cc955c1..00000000
--- a/test/relaxng/ambig_name-class2.rng
+++ /dev/null
@@ -1 +0,0 @@
-ambig_name-class.xml
\ No newline at end of file
diff --git a/test/relaxng/ambig_name-class2.rng b/test/relaxng/ambig_name-class2.rng
new file mode 100755
index 00000000..de673f2e
--- /dev/null
+++ b/test/relaxng/ambig_name-class2.rng
@@ -0,0 +1,16 @@
+<grammar xmlns="http://relaxng.org/ns/structure/1.0" >
+  <start>
+    <element name="foo">
+      <attribute>
+        <choice>
+          <name>alpha</name>
+          <name>bravo</name>
+        </choice>
+        <choice>
+          <value>none</value>
+          <value>all</value>
+        </choice>
+      </attribute>
+    </element>
+  </start>
+</grammar>
diff --git a/test/relaxng/ambig_name-class2.xml b/test/relaxng/ambig_name-class2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/anyName0.rng b/test/relaxng/anyName0.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/anyName0_0.xml b/test/relaxng/anyName0_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/choice0.rng b/test/relaxng/choice0.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/choice0_0.xml b/test/relaxng/choice0_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/choice0_1.xml b/test/relaxng/choice0_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/choice0_2.xml b/test/relaxng/choice0_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/choice0_3.xml b/test/relaxng/choice0_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/choice0_4.xml b/test/relaxng/choice0_4.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/choice0_5.xml b/test/relaxng/choice0_5.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/choice0_6.xml b/test/relaxng/choice0_6.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/choice0_7.xml b/test/relaxng/choice0_7.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/choice0_8.xml b/test/relaxng/choice0_8.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/compare0.rng b/test/relaxng/compare0.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/compare0_0.xml b/test/relaxng/compare0_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/comps.rng b/test/relaxng/comps.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/comps_0.xml b/test/relaxng/comps_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/demo.rng b/test/relaxng/demo.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/demo.xml b/test/relaxng/demo.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/demo2.rng b/test/relaxng/demo2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/demo3.rng b/test/relaxng/demo3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/docbook.rng b/test/relaxng/docbook.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/docbook_0.xml b/test/relaxng/docbook_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/empty0.rng b/test/relaxng/empty0.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/empty0_0.xml b/test/relaxng/empty0_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/empty1.rng b/test/relaxng/empty1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/empty1_0.xml b/test/relaxng/empty1_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/empty1_1.xml b/test/relaxng/empty1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/include0.inc b/test/relaxng/include0.inc
old mode 100644
new mode 100755
diff --git a/test/relaxng/include0.rng b/test/relaxng/include0.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/include0_0.xml b/test/relaxng/include0_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/include1-0.inc b/test/relaxng/include1-0.inc
old mode 100644
new mode 100755
diff --git a/test/relaxng/include1-1.inc b/test/relaxng/include1-1.inc
old mode 100644
new mode 100755
diff --git a/test/relaxng/include1.rng b/test/relaxng/include1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/include1_0.xml b/test/relaxng/include1_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/inline.rng b/test/relaxng/inline.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/inline2.rng b/test/relaxng/inline2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/inline3.rng b/test/relaxng/inline3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/interleave0_0.rng b/test/relaxng/interleave0_0.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/interleave1_0.rng b/test/relaxng/interleave1_0.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/libvirt.rng b/test/relaxng/libvirt.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/libvirt_0.xml b/test/relaxng/libvirt_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/list.rng b/test/relaxng/list.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/list_0.xml b/test/relaxng/list_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/list_1.xml b/test/relaxng/list_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/pattern1.rng b/test/relaxng/pattern1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/pattern2.rng b/test/relaxng/pattern2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/pattern3.rng b/test/relaxng/pattern3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/pattern3_1.xml b/test/relaxng/pattern3_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/proofsystem.rng b/test/relaxng/proofsystem.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/rngbug-001.ext b/test/relaxng/rngbug-001.ext
old mode 100644
new mode 100755
diff --git a/test/relaxng/rngbug-001.rng b/test/relaxng/rngbug-001.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/rngbug-001.xml b/test/relaxng/rngbug-001.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/spec.rng b/test/relaxng/spec.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/spec1.rng b/test/relaxng/spec1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/spec1_1.xml b/test/relaxng/spec1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/spec_0.xml b/test/relaxng/spec_0.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/table.rng b/test/relaxng/table.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/testsuite.xml b/test/relaxng/testsuite.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_1.rng b/test/relaxng/tutor10_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_10.rng b/test/relaxng/tutor10_10.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_10_1.xml b/test/relaxng/tutor10_10_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_1_1.xml b/test/relaxng/tutor10_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_1_2.xml b/test/relaxng/tutor10_1_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_1_3.xml b/test/relaxng/tutor10_1_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_1_4.xml b/test/relaxng/tutor10_1_4.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_1_5.xml b/test/relaxng/tutor10_1_5.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_1_6.xml b/test/relaxng/tutor10_1_6.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_2.rng b/test/relaxng/tutor10_2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_2_1.xml b/test/relaxng/tutor10_2_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_2_2.xml b/test/relaxng/tutor10_2_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_2_3.xml b/test/relaxng/tutor10_2_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_2_4.xml b/test/relaxng/tutor10_2_4.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_3.rng b/test/relaxng/tutor10_3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_3_1.xml b/test/relaxng/tutor10_3_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_4.rng b/test/relaxng/tutor10_4.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_4_1.xml b/test/relaxng/tutor10_4_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_5.rng b/test/relaxng/tutor10_5.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_5_1.xml b/test/relaxng/tutor10_5_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_6.rng b/test/relaxng/tutor10_6.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_6_1.xml b/test/relaxng/tutor10_6_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_7.rng b/test/relaxng/tutor10_7.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_7_1.xml b/test/relaxng/tutor10_7_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_7_2.xml b/test/relaxng/tutor10_7_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_7_3.xml b/test/relaxng/tutor10_7_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_8.rng b/test/relaxng/tutor10_8.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_8_1.xml b/test/relaxng/tutor10_8_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_8_2.xml b/test/relaxng/tutor10_8_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_8_3.xml b/test/relaxng/tutor10_8_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_9.rng b/test/relaxng/tutor10_9.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor10_9_1.xml b/test/relaxng/tutor10_9_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_1.rng b/test/relaxng/tutor11_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_1_1.xml b/test/relaxng/tutor11_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_1_2.xml b/test/relaxng/tutor11_1_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_1_3.xml b/test/relaxng/tutor11_1_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_2.rng b/test/relaxng/tutor11_2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_2_1.xml b/test/relaxng/tutor11_2_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_2_2.xml b/test/relaxng/tutor11_2_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_2_3.xml b/test/relaxng/tutor11_2_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_3.rng b/test/relaxng/tutor11_3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_3_1.xml b/test/relaxng/tutor11_3_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_4.rng b/test/relaxng/tutor11_4.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor11_4_1.xml b/test/relaxng/tutor11_4_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor12_1.rng b/test/relaxng/tutor12_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor12_1_1.xml b/test/relaxng/tutor12_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor13_1.rng b/test/relaxng/tutor13_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor13_1_1.xml b/test/relaxng/tutor13_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor14_1.rng b/test/relaxng/tutor14_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor1_1.rng b/test/relaxng/tutor1_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor1_1_1.xml b/test/relaxng/tutor1_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor1_2.rng b/test/relaxng/tutor1_2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor1_2_1.xml b/test/relaxng/tutor1_2_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor1_3.rng b/test/relaxng/tutor1_3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor1_3_1.xml b/test/relaxng/tutor1_3_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor1_4.rng b/test/relaxng/tutor1_4.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor1_4_1.xml b/test/relaxng/tutor1_4_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor2_1.rng b/test/relaxng/tutor2_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor2_1_1.xml b/test/relaxng/tutor2_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_1.rng b/test/relaxng/tutor3_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_1_1.xml b/test/relaxng/tutor3_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_1_2.xml b/test/relaxng/tutor3_1_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_2.rng b/test/relaxng/tutor3_2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_2_1.xml b/test/relaxng/tutor3_2_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_3.rng b/test/relaxng/tutor3_3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_3_1.xml b/test/relaxng/tutor3_3_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_4.rng b/test/relaxng/tutor3_4.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_4_1.xml b/test/relaxng/tutor3_4_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_5.rng b/test/relaxng/tutor3_5.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_5_1.xml b/test/relaxng/tutor3_5_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_5_2.xml b/test/relaxng/tutor3_5_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_6.rng b/test/relaxng/tutor3_6.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_6_1.xml b/test/relaxng/tutor3_6_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_7.rng b/test/relaxng/tutor3_7.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_7_1.xml b/test/relaxng/tutor3_7_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_8.rng b/test/relaxng/tutor3_8.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_8_1.xml b/test/relaxng/tutor3_8_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_9.rng b/test/relaxng/tutor3_9.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor3_9_1.xml b/test/relaxng/tutor3_9_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_1.rng b/test/relaxng/tutor4_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_1_1.xml b/test/relaxng/tutor4_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_2.rng b/test/relaxng/tutor4_2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_2_1.xml b/test/relaxng/tutor4_2_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_3.rng b/test/relaxng/tutor4_3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_3_1.xml b/test/relaxng/tutor4_3_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_3_2.xml b/test/relaxng/tutor4_3_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_3_3.xml b/test/relaxng/tutor4_3_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_3_4.xml b/test/relaxng/tutor4_3_4.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_3_5.xml b/test/relaxng/tutor4_3_5.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_3_6.xml b/test/relaxng/tutor4_3_6.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_4.rng b/test/relaxng/tutor4_4.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor4_4_1.xml b/test/relaxng/tutor4_4_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor5_1.rng b/test/relaxng/tutor5_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor5_1_1.xml b/test/relaxng/tutor5_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor5_2.rng b/test/relaxng/tutor5_2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor5_2_1.xml b/test/relaxng/tutor5_2_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor5_3.rng b/test/relaxng/tutor5_3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor5_3_1.xml b/test/relaxng/tutor5_3_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor5_4.rng b/test/relaxng/tutor5_4.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor5_4_1.xml b/test/relaxng/tutor5_4_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor5_5.rng b/test/relaxng/tutor5_5.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_1.rng b/test/relaxng/tutor6_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_1_1.xml b/test/relaxng/tutor6_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_1_2.xml b/test/relaxng/tutor6_1_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_1_3.xml b/test/relaxng/tutor6_1_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_1_4.xml b/test/relaxng/tutor6_1_4.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_1_5.xml b/test/relaxng/tutor6_1_5.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_2.rng b/test/relaxng/tutor6_2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_2_1.xml b/test/relaxng/tutor6_2_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_2_2.xml b/test/relaxng/tutor6_2_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_2_3.xml b/test/relaxng/tutor6_2_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_2_4.xml b/test/relaxng/tutor6_2_4.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_3.rng b/test/relaxng/tutor6_3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor6_3_1.xml b/test/relaxng/tutor6_3_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_1.rng b/test/relaxng/tutor7_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_1_1.xml b/test/relaxng/tutor7_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_1_2.xml b/test/relaxng/tutor7_1_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_1_3.xml b/test/relaxng/tutor7_1_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_1_4.xml b/test/relaxng/tutor7_1_4.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_2.rng b/test/relaxng/tutor7_2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_2_1.xml b/test/relaxng/tutor7_2_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_2_2.xml b/test/relaxng/tutor7_2_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_2_3.xml b/test/relaxng/tutor7_2_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_2_4.xml b/test/relaxng/tutor7_2_4.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_3.rng b/test/relaxng/tutor7_3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_3_1.xml b/test/relaxng/tutor7_3_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_3_2.xml b/test/relaxng/tutor7_3_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_3_3.xml b/test/relaxng/tutor7_3_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_3_4.xml b/test/relaxng/tutor7_3_4.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor7_3_5.xml b/test/relaxng/tutor7_3_5.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_1.rng b/test/relaxng/tutor8_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_1_1.xml b/test/relaxng/tutor8_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_1_2.xml b/test/relaxng/tutor8_1_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_2.rng b/test/relaxng/tutor8_2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_2_1.xml b/test/relaxng/tutor8_2_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_2_2.xml b/test/relaxng/tutor8_2_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_2_3.xml b/test/relaxng/tutor8_2_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_2_4.xml b/test/relaxng/tutor8_2_4.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_2_5.xml b/test/relaxng/tutor8_2_5.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_2_6.xml b/test/relaxng/tutor8_2_6.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_3.rng b/test/relaxng/tutor8_3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor8_3_1.xml b/test/relaxng/tutor8_3_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_1.rng b/test/relaxng/tutor9_1.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_10.rng b/test/relaxng/tutor9_10.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_10_1.xml b/test/relaxng/tutor9_10_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_11.rng b/test/relaxng/tutor9_11.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_11_1.xml b/test/relaxng/tutor9_11_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_12.rng b/test/relaxng/tutor9_12.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_12_1.xml b/test/relaxng/tutor9_12_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_1_1.xml b/test/relaxng/tutor9_1_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_2.rng b/test/relaxng/tutor9_2.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_2_1.xml b/test/relaxng/tutor9_2_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_2_2.xml b/test/relaxng/tutor9_2_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_3.rng b/test/relaxng/tutor9_3.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_3_1.xml b/test/relaxng/tutor9_3_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_3_2.xml b/test/relaxng/tutor9_3_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_4.rng b/test/relaxng/tutor9_4.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_4_1.xml b/test/relaxng/tutor9_4_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_4_2.xml b/test/relaxng/tutor9_4_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_5.rng b/test/relaxng/tutor9_5.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_5_1.xml b/test/relaxng/tutor9_5_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_5_2.xml b/test/relaxng/tutor9_5_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_5_3.xml b/test/relaxng/tutor9_5_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_6.rng b/test/relaxng/tutor9_6.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_6_1.xml b/test/relaxng/tutor9_6_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_6_2.xml b/test/relaxng/tutor9_6_2.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_6_3.xml b/test/relaxng/tutor9_6_3.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_7.rng b/test/relaxng/tutor9_7.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_7_1.xml b/test/relaxng/tutor9_7_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_8.rng b/test/relaxng/tutor9_8.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_8_1.xml b/test/relaxng/tutor9_8_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_9.rng b/test/relaxng/tutor9_9.rng
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutor9_9_1.xml b/test/relaxng/tutor9_9_1.xml
old mode 100644
new mode 100755
diff --git a/test/relaxng/tutorA.rng b/test/relaxng/tutorA.rng
old mode 100644
new mode 100755
diff --git a/test/schemas/570702_0.xml b/test/schemas/570702_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/570702_0.xsd b/test/schemas/570702_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/579746_0.xml b/test/schemas/579746_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/579746_0.xsd b/test/schemas/579746_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/579746_1.xml b/test/schemas/579746_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/579746_1.xsd b/test/schemas/579746_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/579746_2.xml b/test/schemas/579746_2.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/579746_3.xml b/test/schemas/579746_3.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/579746_4.xml b/test/schemas/579746_4.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/579746_5.xml b/test/schemas/579746_5.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/582887-attribute.xsd b/test/schemas/582887-attribute.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582887-common.xsd b/test/schemas/582887-common.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582887-element.xsd b/test/schemas/582887-element.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582887_0.xml b/test/schemas/582887_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/582887_0.xsd b/test/schemas/582887_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-1-common.xsd b/test/schemas/582906-1-common.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-1-prog1.xsd b/test/schemas/582906-1-prog1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-1-prog2-include.xsd b/test/schemas/582906-1-prog2-include.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-1-prog2.xsd b/test/schemas/582906-1-prog2.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-1_0.xml b/test/schemas/582906-1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-1_0.xsd b/test/schemas/582906-1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-2-common.xsd b/test/schemas/582906-2-common.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-2-prog1.xsd b/test/schemas/582906-2-prog1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-2-prog2-include.xsd b/test/schemas/582906-2-prog2-include.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-2-prog2.xsd b/test/schemas/582906-2-prog2.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-2_0.xml b/test/schemas/582906-2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/582906-2_0.xsd b/test/schemas/582906-2_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/all.xsd b/test/schemas/all.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/all1_0.xml b/test/schemas/all1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/all1_0.xsd b/test/schemas/all1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/all_0.xml b/test/schemas/all_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/all_0.xsd b/test/schemas/all_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/all_1.xml b/test/schemas/all_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/all_1.xsd b/test/schemas/all_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/all_2.xml b/test/schemas/all_2.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/all_2.xsd b/test/schemas/all_2.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/all_3.xml b/test/schemas/all_3.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/all_4.xml b/test/schemas/all_4.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/all_5.xml b/test/schemas/all_5.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/all_6.xml b/test/schemas/all_6.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/all_7.xml b/test/schemas/all_7.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/allsg_0.xml b/test/schemas/allsg_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/allsg_0.xsd b/test/schemas/allsg_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/allsg_1.xml b/test/schemas/allsg_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/allsg_2.xml b/test/schemas/allsg_2.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/allsg_3.xml b/test/schemas/allsg_3.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/allsg_4.xml b/test/schemas/allsg_4.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/allsg_5.xml b/test/schemas/allsg_5.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/annot-err_0.xml b/test/schemas/annot-err_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/annot-err_0.xsd b/test/schemas/annot-err_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/any1_0.xml b/test/schemas/any1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any1_0.xsd b/test/schemas/any1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/any2_0.xml b/test/schemas/any2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any2_0.xsd b/test/schemas/any2_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/any3_0.xml b/test/schemas/any3_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any3_0.xsd b/test/schemas/any3_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/any4_0.xml b/test/schemas/any4_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any4_0.xsd b/test/schemas/any4_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/any5_0.xml b/test/schemas/any5_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any5_0.xsd b/test/schemas/any5_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/any5_1.xml b/test/schemas/any5_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any5_1.xsd b/test/schemas/any5_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/any5_2.xml b/test/schemas/any5_2.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any5_3.xml b/test/schemas/any5_3.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any5_4.xml b/test/schemas/any5_4.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any5_5.xml b/test/schemas/any5_5.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any5_6.xml b/test/schemas/any5_6.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any6_0.xml b/test/schemas/any6_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any6_1.xsd b/test/schemas/any6_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/any6_2.xsd b/test/schemas/any6_2.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/any7_0.xml b/test/schemas/any7_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any7_1.xml b/test/schemas/any7_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any7_1.xsd b/test/schemas/any7_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/any7_2.xml b/test/schemas/any7_2.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any7_2.xsd b/test/schemas/any7_2.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/any8_0.xml b/test/schemas/any8_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/any8_1.xsd b/test/schemas/any8_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr-derive-errors1_0.xml b/test/schemas/anyAttr-derive-errors1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr-derive-errors1_0.xsd b/test/schemas/anyAttr-derive-errors1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr-derive1_0.xml b/test/schemas/anyAttr-derive1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr-derive1_0.xsd b/test/schemas/anyAttr-derive1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr-derive2_0.xml b/test/schemas/anyAttr-derive2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr-derive2_0.xsd b/test/schemas/anyAttr-derive2_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr-errors1_0.xml b/test/schemas/anyAttr-errors1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr-processContents-err1_0.xml b/test/schemas/anyAttr-processContents-err1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr-processContents-err1_0.xsd b/test/schemas/anyAttr-processContents-err1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr-processContents1_0.xml b/test/schemas/anyAttr-processContents1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr-processContents1_0.xsd b/test/schemas/anyAttr-processContents1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr.importA.1_0.xsd b/test/schemas/anyAttr.importA.1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr.importB.1_0.xsd b/test/schemas/anyAttr.importB.1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr1_0.xml b/test/schemas/anyAttr1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/anyAttr1_0.xsd b/test/schemas/anyAttr1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/attr0_0.xml b/test/schemas/attr0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/attr0_0.xsd b/test/schemas/attr0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/attruse_0_0.xml b/test/schemas/attruse_0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/attruse_0_0.xsd b/test/schemas/attruse_0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/attruse_0_1.xml b/test/schemas/attruse_0_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/attruse_0_2.xml b/test/schemas/attruse_0_2.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug141312_0.xml b/test/schemas/bug141312_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug141312_0.xsd b/test/schemas/bug141312_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug141333.xml b/test/schemas/bug141333.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug141333.xsd b/test/schemas/bug141333.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug141333_0.xml b/test/schemas/bug141333_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug141333_0.xsd b/test/schemas/bug141333_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug143951.imp b/test/schemas/bug143951.imp
old mode 100644
new mode 100755
diff --git a/test/schemas/bug143951_0.xml b/test/schemas/bug143951_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug143951_0.xsd b/test/schemas/bug143951_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug145246.xsd.imp b/test/schemas/bug145246.xsd.imp
old mode 100644
new mode 100755
diff --git a/test/schemas/bug145246_0.xml b/test/schemas/bug145246_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug145246_0.xsd b/test/schemas/bug145246_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug152470_1.xml b/test/schemas/bug152470_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug152470_1.xsd b/test/schemas/bug152470_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug167754_0.xml b/test/schemas/bug167754_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug167754_0.xsd b/test/schemas/bug167754_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug303566_1.xml b/test/schemas/bug303566_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug303566_1.xsd b/test/schemas/bug303566_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug306806_0.xml b/test/schemas/bug306806_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug306806_1.xsd b/test/schemas/bug306806_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug309338_0.xml b/test/schemas/bug309338_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug309338_1.xsd b/test/schemas/bug309338_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug310264_0.xml b/test/schemas/bug310264_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug310264_0.xsd b/test/schemas/bug310264_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug312957_0.xml b/test/schemas/bug312957_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug312957_1.xsd b/test/schemas/bug312957_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug313982_0.xml b/test/schemas/bug313982_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug313982_0.xsd b/test/schemas/bug313982_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug321475_0.xml b/test/schemas/bug321475_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug321475_1.xsd b/test/schemas/bug321475_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug322411_0.xml b/test/schemas/bug322411_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug322411_1.xsd b/test/schemas/bug322411_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug323510_0.xml b/test/schemas/bug323510_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug323510_1.xsd b/test/schemas/bug323510_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/bug455953_0.xml b/test/schemas/bug455953_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/bug455953_0.xsd b/test/schemas/bug455953_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/changelog093_0.xml b/test/schemas/changelog093_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/changelog093_1.xsd b/test/schemas/changelog093_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/choice_0.xml b/test/schemas/choice_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/choice_0.xsd b/test/schemas/choice_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/choice_1.xml b/test/schemas/choice_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/choice_1.xsd b/test/schemas/choice_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/choice_2.xml b/test/schemas/choice_2.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/choice_2.xsd b/test/schemas/choice_2.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/choice_3.xml b/test/schemas/choice_3.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/choice_4.xml b/test/schemas/choice_4.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/choice_5.xml b/test/schemas/choice_5.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/choice_6.xml b/test/schemas/choice_6.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/complex-type-extension_0.xml b/test/schemas/complex-type-extension_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/complex-type-extension_0.xsd b/test/schemas/complex-type-extension_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/cos-ct-extends-1-3_0.xml b/test/schemas/cos-ct-extends-1-3_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/cos-ct-extends-1-3_0.xsd b/test/schemas/cos-ct-extends-1-3_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/cos-st-restricts-1-2-err_0.xml b/test/schemas/cos-st-restricts-1-2-err_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/cos-st-restricts-1-2-err_0.xsd b/test/schemas/cos-st-restricts-1-2-err_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/ct-sc-nobase_0.xml b/test/schemas/ct-sc-nobase_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/ct-sc-nobase_0.xsd b/test/schemas/ct-sc-nobase_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/date_0.xml b/test/schemas/date_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/date_0.xsd b/test/schemas/date_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/decimal-1.xml b/test/schemas/decimal-1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/decimal-1.xsd b/test/schemas/decimal-1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/decimal-1_0.xml b/test/schemas/decimal-1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/decimal-1_1.xsd b/test/schemas/decimal-1_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/decimal-2_0.xml b/test/schemas/decimal-2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/decimal-2_1.xsd b/test/schemas/decimal-2_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/decimal-3_0.xml b/test/schemas/decimal-3_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/decimal-3_1.xsd b/test/schemas/decimal-3_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-ok-extension-err_0.xml b/test/schemas/derivation-ok-extension-err_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-ok-extension-err_0.xsd b/test/schemas/derivation-ok-extension-err_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-ok-extension_0.xml b/test/schemas/derivation-ok-extension_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-ok-extension_0.xsd b/test/schemas/derivation-ok-extension_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-ok-restriction-2-1-1_0.xml b/test/schemas/derivation-ok-restriction-2-1-1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-ok-restriction-2-1-1_0.xsd b/test/schemas/derivation-ok-restriction-2-1-1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-ok-restriction-4-1-err_0.xml b/test/schemas/derivation-ok-restriction-4-1-err_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-ok-restriction-4-1-err_0.xsd b/test/schemas/derivation-ok-restriction-4-1-err_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-restriction-anyAttr_0.xml b/test/schemas/derivation-restriction-anyAttr_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-restriction-anyAttr_0.xsd b/test/schemas/derivation-restriction-anyAttr_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-restriction-anyType.xml b/test/schemas/derivation-restriction-anyType.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/derivation-restriction-anyType.xsd b/test/schemas/derivation-restriction-anyType.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/deter0_0.xml b/test/schemas/deter0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/deter0_0.xsd b/test/schemas/deter0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/dur_0.xml b/test/schemas/dur_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/dur_0.xsd b/test/schemas/dur_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/elem0_0.xml b/test/schemas/elem0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/elem0_0.xsd b/test/schemas/elem0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/element-err_0.xml b/test/schemas/element-err_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/element-err_0.xsd b/test/schemas/element-err_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/element-minmax-err_0.xml b/test/schemas/element-minmax-err_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/element-minmax-err_0.xsd b/test/schemas/element-minmax-err_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/empty-value_0.xml b/test/schemas/empty-value_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/empty-value_1.xml b/test/schemas/empty-value_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/empty-value_1.xsd b/test/schemas/empty-value_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/empty_0.xml b/test/schemas/empty_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/empty_0.xsd b/test/schemas/empty_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/empty_1.xsd b/test/schemas/empty_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/extension0_0.xml b/test/schemas/extension0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/extension0_0.xsd b/test/schemas/extension0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/extension1_0.xml b/test/schemas/extension1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/extension1_0.xsd b/test/schemas/extension1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/extension1_1.xml b/test/schemas/extension1_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/extension1_2.xml b/test/schemas/extension1_2.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/extension2_0.xml b/test/schemas/extension2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/extension2_1.xsd b/test/schemas/extension2_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/facet-unionST-err1_0.xml b/test/schemas/facet-unionST-err1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/facet-unionST-err1_0.xsd b/test/schemas/facet-unionST-err1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/facet-whiteSpace_0.xml b/test/schemas/facet-whiteSpace_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/facet-whiteSpace_0.xsd b/test/schemas/facet-whiteSpace_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/group0_0.xml b/test/schemas/group0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/group0_0.xsd b/test/schemas/group0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/hexbinary_0.xml b/test/schemas/hexbinary_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/hexbinary_0.xsd b/test/schemas/hexbinary_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/hexbinary_1.xml b/test/schemas/hexbinary_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/idc-keyref-err1_0.xml b/test/schemas/idc-keyref-err1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/idc-keyref-err1_1.xsd b/test/schemas/idc-keyref-err1_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/import-455953.xsd b/test/schemas/import-455953.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/import-bad-1_0.imp b/test/schemas/import-bad-1_0.imp
old mode 100644
new mode 100755
diff --git a/test/schemas/import0_0.imp b/test/schemas/import0_0.imp
old mode 100644
new mode 100755
diff --git a/test/schemas/import0_0.xml b/test/schemas/import0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/import0_0.xsd b/test/schemas/import0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/import1_0.imp b/test/schemas/import1_0.imp
old mode 100644
new mode 100755
diff --git a/test/schemas/import1_0.xml b/test/schemas/import1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/import1_0.xsd b/test/schemas/import1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/import1_0b.imp b/test/schemas/import1_0b.imp
old mode 100644
new mode 100755
diff --git a/test/schemas/import2_0.imp b/test/schemas/import2_0.imp
old mode 100644
new mode 100755
diff --git a/test/schemas/import2_0.xml b/test/schemas/import2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/import2_0.xsd b/test/schemas/import2_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/include1_0.inc b/test/schemas/include1_0.inc
old mode 100644
new mode 100755
diff --git a/test/schemas/include1_0.xml b/test/schemas/include1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/include1_0.xsd b/test/schemas/include1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/include2_0.inc b/test/schemas/include2_0.inc
old mode 100644
new mode 100755
diff --git a/test/schemas/include2_0.xml b/test/schemas/include2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/include2_0.xsd b/test/schemas/include2_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/include3_0.inc b/test/schemas/include3_0.inc
old mode 100644
new mode 100755
diff --git a/test/schemas/include3_0.xml b/test/schemas/include3_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/include3_0.xsd b/test/schemas/include3_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/issue40_0.xml b/test/schemas/issue40_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/issue40_0.xsd b/test/schemas/issue40_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/item_0.xml b/test/schemas/item_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/item_0.xsd b/test/schemas/item_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/item_1.xsd b/test/schemas/item_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/length1_0.xml b/test/schemas/length1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/length1_0.xsd b/test/schemas/length1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/length2_0.xml b/test/schemas/length2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/length2_0.xsd b/test/schemas/length2_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/length3_0.xml b/test/schemas/length3_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/length3_0.xsd b/test/schemas/length3_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/list0_0.xml b/test/schemas/list0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/list0_0.xsd b/test/schemas/list0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/list0_1.xml b/test/schemas/list0_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/list0_1.xsd b/test/schemas/list0_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/list0_2.xml b/test/schemas/list0_2.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/mixed0_0.xml b/test/schemas/mixed0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/mixed0_0.xsd b/test/schemas/mixed0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/mixed1_0.xml b/test/schemas/mixed1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/mixed1_0.xsd b/test/schemas/mixed1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/ns0_0.xml b/test/schemas/ns0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/ns0_0.xsd b/test/schemas/ns0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/ns0_1.xml b/test/schemas/ns0_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/ns0_1.xsd b/test/schemas/ns0_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/ns0_2.xml b/test/schemas/ns0_2.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/ns0_3.xml b/test/schemas/ns0_3.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/ns0_4.xml b/test/schemas/ns0_4.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/ns1_0.xml b/test/schemas/ns1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/ns1_0.xsd b/test/schemas/ns1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/ns2_0.xml b/test/schemas/ns2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/ns2_0.xsd b/test/schemas/ns2_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/nvdcve_0.xml b/test/schemas/nvdcve_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/nvdcve_0.xsd b/test/schemas/nvdcve_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/po0_0.xml b/test/schemas/po0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/po0_0.xsd b/test/schemas/po0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/po1_0.xml b/test/schemas/po1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/po1_0.xsd b/test/schemas/po1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/poschargrp0_0.xml b/test/schemas/poschargrp0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/poschargrp0_0.xsd b/test/schemas/poschargrp0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/regexp-char-ref_0.xml b/test/schemas/regexp-char-ref_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/regexp-char-ref_0.xsd b/test/schemas/regexp-char-ref_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/regexp-char-ref_1.xsd b/test/schemas/regexp-char-ref_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/restrict-CT-attr-ref_0.xml b/test/schemas/restrict-CT-attr-ref_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/restrict-CT-attr-ref_0.xsd b/test/schemas/restrict-CT-attr-ref_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/restriction-attr1_0.xml b/test/schemas/restriction-attr1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/restriction-attr1_0.xsd b/test/schemas/restriction-attr1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/restriction-enum-1_0.xml b/test/schemas/restriction-enum-1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/restriction-enum-1_1.xsd b/test/schemas/restriction-enum-1_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/restriction0_0.xml b/test/schemas/restriction0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/restriction0_0.xsd b/test/schemas/restriction0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/scc-no-xmlns_0.xml b/test/schemas/scc-no-xmlns_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/scc-no-xmlns_0.xsd b/test/schemas/scc-no-xmlns_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/scc-no-xsi_0.xml b/test/schemas/scc-no-xsi_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/scc-no-xsi_0.xsd b/test/schemas/scc-no-xsi_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/seq-dubl-elem1_0.xml b/test/schemas/seq-dubl-elem1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/seq-dubl-elem1_0.xsd b/test/schemas/seq-dubl-elem1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/seq0_0.xml b/test/schemas/seq0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/seq0_0.xsd b/test/schemas/seq0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute1_0.xml b/test/schemas/src-attribute1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute1_0.xsd b/test/schemas/src-attribute1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute2_0.xml b/test/schemas/src-attribute2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute2_0.xsd b/test/schemas/src-attribute2_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute3-1_0.xml b/test/schemas/src-attribute3-1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute3-1_0.xsd b/test/schemas/src-attribute3-1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute3-2-form_0.xml b/test/schemas/src-attribute3-2-form_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute3-2-form_0.xsd b/test/schemas/src-attribute3-2-form_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute3-2-st_0.xml b/test/schemas/src-attribute3-2-st_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute3-2-st_0.xsd b/test/schemas/src-attribute3-2-st_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute3-2-type_0.xml b/test/schemas/src-attribute3-2-type_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute3-2-type_0.xsd b/test/schemas/src-attribute3-2-type_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute4_0.xml b/test/schemas/src-attribute4_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/src-attribute4_0.xsd b/test/schemas/src-attribute4_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/src-element1_0.xml b/test/schemas/src-element1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/src-element1_0.xsd b/test/schemas/src-element1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/src-element2-1_0.xml b/test/schemas/src-element2-1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/src-element2-1_0.xsd b/test/schemas/src-element2-1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/src-element2-2_0.xml b/test/schemas/src-element2-2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/src-element2-2_0.xsd b/test/schemas/src-element2-2_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/src-element3_0.xml b/test/schemas/src-element3_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/src-element3_0.xsd b/test/schemas/src-element3_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/subst-group-1_0.xsd b/test/schemas/subst-group-1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/subst-group-1_1.xml b/test/schemas/subst-group-1_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/union2_1.xml b/test/schemas/union2_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/union2_1.xsd b/test/schemas/union2_1.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/union_0_0.xml b/test/schemas/union_0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/union_0_0.xsd b/test/schemas/union_0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-complexTypes.xsd b/test/schemas/vdv-complexTypes.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first0_0.xml b/test/schemas/vdv-first0_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first0_0.xsd b/test/schemas/vdv-first0_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first1_0.xml b/test/schemas/vdv-first1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first1_0.xsd b/test/schemas/vdv-first1_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first2_0.xml b/test/schemas/vdv-first2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first2_0.xsd b/test/schemas/vdv-first2_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first3_0.xml b/test/schemas/vdv-first3_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first3_0.xsd b/test/schemas/vdv-first3_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first4_0.xml b/test/schemas/vdv-first4_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first4_0.xsd b/test/schemas/vdv-first4_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first4_1.xml b/test/schemas/vdv-first4_1.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first4_2.xml b/test/schemas/vdv-first4_2.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first5_0.xml b/test/schemas/vdv-first5_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-first5_0.xsd b/test/schemas/vdv-first5_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/vdv-simpleTypes.xsd b/test/schemas/vdv-simpleTypes.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/xml.xsd b/test/schemas/xml.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/xsd-list-itemType_0.xml b/test/schemas/xsd-list-itemType_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/xsd-list-itemType_0.xsd b/test/schemas/xsd-list-itemType_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schemas/xsd-simpleType-varieties_0.xml b/test/schemas/xsd-simpleType-varieties_0.xml
old mode 100644
new mode 100755
diff --git a/test/schemas/xsd-simpleType-varieties_0.xsd b/test/schemas/xsd-simpleType-varieties_0.xsd
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon1.sct b/test/schematron/zvon1.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon10.sct b/test/schematron/zvon10.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon10_0.xml b/test/schematron/zvon10_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon10_1.xml b/test/schematron/zvon10_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon11.sct b/test/schematron/zvon11.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon11_0.xml b/test/schematron/zvon11_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon11_1.xml b/test/schematron/zvon11_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon11_2.xml b/test/schematron/zvon11_2.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon11_3.xml b/test/schematron/zvon11_3.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon12.sct b/test/schematron/zvon12.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon12_0.xml b/test/schematron/zvon12_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon12_1.xml b/test/schematron/zvon12_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon12_2.xml b/test/schematron/zvon12_2.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon13.sct b/test/schematron/zvon13.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon13_0.xml b/test/schematron/zvon13_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon13_1.xml b/test/schematron/zvon13_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon13_2.xml b/test/schematron/zvon13_2.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon14.sct b/test/schematron/zvon14.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon14_0.xml b/test/schematron/zvon14_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon15.sct b/test/schematron/zvon15.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon15_0.xml b/test/schematron/zvon15_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon1_0.xml b/test/schematron/zvon1_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon1_1.xml b/test/schematron/zvon1_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon2.sct b/test/schematron/zvon2.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon2_0.xml b/test/schematron/zvon2_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon2_1.xml b/test/schematron/zvon2_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon2_2.xml b/test/schematron/zvon2_2.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon3.sct b/test/schematron/zvon3.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon3_0.xml b/test/schematron/zvon3_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon4.sct b/test/schematron/zvon4.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon4_0.xml b/test/schematron/zvon4_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon4_1.xml b/test/schematron/zvon4_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon5.sct b/test/schematron/zvon5.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon5_0.xml b/test/schematron/zvon5_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon5_1.xml b/test/schematron/zvon5_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon5_2.xml b/test/schematron/zvon5_2.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon6.sct b/test/schematron/zvon6.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon6_0.xml b/test/schematron/zvon6_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon6_1.xml b/test/schematron/zvon6_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon6_2.xml b/test/schematron/zvon6_2.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon7.sct b/test/schematron/zvon7.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon7_0.xml b/test/schematron/zvon7_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon7_1.xml b/test/schematron/zvon7_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon7_2.xml b/test/schematron/zvon7_2.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon7_3.xml b/test/schematron/zvon7_3.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon7_4.xml b/test/schematron/zvon7_4.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon8.sct b/test/schematron/zvon8.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon8_0.xml b/test/schematron/zvon8_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon8_1.xml b/test/schematron/zvon8_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon8_2.xml b/test/schematron/zvon8_2.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon9.sct b/test/schematron/zvon9.sct
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon9_0.xml b/test/schematron/zvon9_0.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon9_1.xml b/test/schematron/zvon9_1.xml
old mode 100644
new mode 100755
diff --git a/test/schematron/zvon9_2.xml b/test/schematron/zvon9_2.xml
old mode 100644
new mode 100755
diff --git a/test/scripts/base.script b/test/scripts/base.script
old mode 100644
new mode 100755
diff --git a/test/scripts/base.xml b/test/scripts/base.xml
old mode 100644
new mode 100755
diff --git a/test/scripts/base2.script b/test/scripts/base2.script
old mode 100644
new mode 100755
diff --git a/test/scripts/base2.xml b/test/scripts/base2.xml
old mode 100644
new mode 100755
diff --git a/test/scripts/set1.script b/test/scripts/set1.script
old mode 100644
new mode 100755
diff --git a/test/scripts/set1.xml b/test/scripts/set1.xml
old mode 100644
new mode 100755
diff --git a/test/scripts/set3.script b/test/scripts/set3.script
old mode 100644
new mode 100755
diff --git a/test/scripts/set3.xml b/test/scripts/set3.xml
old mode 100644
new mode 100755
diff --git a/test/scripts/set4.script b/test/scripts/set4.script
old mode 100644
new mode 100755
diff --git a/test/scripts/set4.xml b/test/scripts/set4.xml
old mode 100644
new mode 100755
diff --git a/test/slashdot.rdf b/test/slashdot.rdf
old mode 100644
new mode 100755
diff --git a/test/slashdot.xml b/test/slashdot.xml
old mode 100644
new mode 100755
diff --git a/test/slashdot16.xml b/test/slashdot16.xml
old mode 100644
new mode 100755
diff --git a/test/svg1 b/test/svg1
old mode 100644
new mode 100755
diff --git a/test/svg2 b/test/svg2
old mode 100644
new mode 100755
diff --git a/test/svg3 b/test/svg3
old mode 100644
new mode 100755
diff --git a/test/threads/a.example.org.xml b/test/threads/a.example.org.xml
old mode 100644
new mode 100755
diff --git a/test/threads/a/a.dtd b/test/threads/a/a.dtd
old mode 100644
new mode 100755
diff --git a/test/threads/abc.dtd b/test/threads/abc.dtd
old mode 100644
new mode 100755
diff --git a/test/threads/abc.xml b/test/threads/abc.xml
old mode 100644
new mode 100755
diff --git a/test/threads/acb.dtd b/test/threads/acb.dtd
old mode 100644
new mode 100755
diff --git a/test/threads/acb.xml b/test/threads/acb.xml
old mode 100644
new mode 100755
diff --git a/test/threads/b.example.org.xml b/test/threads/b.example.org.xml
old mode 100644
new mode 100755
diff --git a/test/threads/b/b.dtd b/test/threads/b/b.dtd
old mode 100644
new mode 100755
diff --git a/test/threads/bac.dtd b/test/threads/bac.dtd
old mode 100644
new mode 100755
diff --git a/test/threads/bac.xml b/test/threads/bac.xml
old mode 100644
new mode 100755
diff --git a/test/threads/bca.dtd b/test/threads/bca.dtd
old mode 100644
new mode 100755
diff --git a/test/threads/bca.xml b/test/threads/bca.xml
old mode 100644
new mode 100755
diff --git a/test/threads/c.example.org.xml b/test/threads/c.example.org.xml
old mode 100644
new mode 100755
diff --git a/test/threads/c/c.dtd b/test/threads/c/c.dtd
old mode 100644
new mode 100755
diff --git a/test/threads/cab.dtd b/test/threads/cab.dtd
old mode 100644
new mode 100755
diff --git a/test/threads/cab.xml b/test/threads/cab.xml
old mode 100644
new mode 100755
diff --git a/test/threads/cba.dtd b/test/threads/cba.dtd
old mode 100644
new mode 100755
diff --git a/test/threads/cba.xml b/test/threads/cba.xml
old mode 100644
new mode 100755
diff --git a/test/threads/complex.xml b/test/threads/complex.xml
old mode 100644
new mode 100755
diff --git a/test/threads/example.org.xml b/test/threads/example.org.xml
old mode 100644
new mode 100755
diff --git a/test/threads/invalid.xml b/test/threads/invalid.xml
old mode 100644
new mode 100755
diff --git a/test/title.xml b/test/title.xml
old mode 100644
new mode 100755
diff --git a/test/tstblanks.xml b/test/tstblanks.xml
old mode 100644
new mode 100755
diff --git a/test/utf16bebom.xml b/test/utf16bebom.xml
old mode 100644
new mode 100755
diff --git a/test/utf16bom.xml b/test/utf16bom.xml
old mode 100644
new mode 100755
diff --git a/test/utf16lebom.xml b/test/utf16lebom.xml
old mode 100644
new mode 100755
diff --git a/test/utf8bom.xml b/test/utf8bom.xml
old mode 100644
new mode 100755
diff --git a/test/valid/127772.xml b/test/valid/127772.xml
old mode 100644
new mode 100755
diff --git a/test/valid/694228.xml b/test/valid/694228.xml
old mode 100644
new mode 100755
diff --git a/test/valid/737840.xml b/test/valid/737840.xml
old mode 100644
new mode 100755
diff --git a/test/valid/766956.xml b/test/valid/766956.xml
old mode 100644
new mode 100755
diff --git a/test/valid/781333.xml b/test/valid/781333.xml
old mode 100644
new mode 100755
diff --git a/test/valid/REC-xml-19980210.xml b/test/valid/REC-xml-19980210.xml
old mode 100644
new mode 100755
diff --git a/test/valid/UTF16Entity.xml b/test/valid/UTF16Entity.xml
old mode 100644
new mode 100755
diff --git a/test/valid/dia.xml b/test/valid/dia.xml
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/127772.dtd b/test/valid/dtds/127772.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/694228.dtd b/test/valid/dtds/694228.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/737840.ent b/test/valid/dtds/737840.ent
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/766956.dtd b/test/valid/dtds/766956.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/NewsMLv1.0.dtd b/test/valid/dtds/NewsMLv1.0.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/destfoo.ent b/test/valid/dtds/destfoo.ent
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/external.ent b/test/valid/dtds/external.ent
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/external2.ent b/test/valid/dtds/external2.ent
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/nitf-2-5.dtd b/test/valid/dtds/nitf-2-5.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/notes.dtd b/test/valid/dtds/notes.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/objednavka.dtd b/test/valid/dtds/objednavka.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/spec.dtd b/test/valid/dtds/spec.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/utf16b.ent b/test/valid/dtds/utf16b.ent
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/utf16l.ent b/test/valid/dtds/utf16l.ent
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/xhtml-lat1.ent b/test/valid/dtds/xhtml-lat1.ent
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/xhtml-special.ent b/test/valid/dtds/xhtml-special.ent
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/xhtml-symbol.ent b/test/valid/dtds/xhtml-symbol.ent
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/xhtml.cat b/test/valid/dtds/xhtml.cat
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/xhtml1-frameset.dtd b/test/valid/dtds/xhtml1-frameset.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/xhtml1-strict.dtd b/test/valid/dtds/xhtml1-strict.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/xhtml1-transitional.dtd b/test/valid/dtds/xhtml1-transitional.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/xhtml1.dcl b/test/valid/dtds/xhtml1.dcl
old mode 100644
new mode 100755
diff --git a/test/valid/dtds/xmlspec.dtd b/test/valid/dtds/xmlspec.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/id1.xml b/test/valid/id1.xml
old mode 100644
new mode 100755
diff --git a/test/valid/id2.xml b/test/valid/id2.xml
old mode 100644
new mode 100755
diff --git a/test/valid/id3.xml b/test/valid/id3.xml
old mode 100644
new mode 100755
diff --git a/test/valid/index.xml b/test/valid/index.xml
old mode 100644
new mode 100755
diff --git a/test/valid/mixed_ns.xml b/test/valid/mixed_ns.xml
old mode 100644
new mode 100755
diff --git a/test/valid/notes.xml b/test/valid/notes.xml
old mode 100644
new mode 100755
diff --git a/test/valid/ns.xml b/test/valid/ns.xml
old mode 100644
new mode 100755
diff --git a/test/valid/ns2.xml b/test/valid/ns2.xml
old mode 100644
new mode 100755
diff --git a/test/valid/objednavka.xml b/test/valid/objednavka.xml
old mode 100644
new mode 100755
diff --git a/test/valid/rss.xml b/test/valid/rss.xml
old mode 100644
new mode 100755
diff --git a/test/valid/t10.xml b/test/valid/t10.xml
old mode 100644
new mode 100755
diff --git a/test/valid/t11.xml b/test/valid/t11.xml
old mode 100644
new mode 100755
diff --git a/test/valid/t4.dtd b/test/valid/t4.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/t4.xml b/test/valid/t4.xml
old mode 100644
new mode 100755
diff --git a/test/valid/t4a.dtd b/test/valid/t4a.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/t4a.xml b/test/valid/t4a.xml
old mode 100644
new mode 100755
diff --git a/test/valid/t6.dtd b/test/valid/t6.dtd
old mode 100644
new mode 100755
diff --git a/test/valid/t6.xml b/test/valid/t6.xml
old mode 100644
new mode 100755
diff --git a/test/valid/t8.xml b/test/valid/t8.xml
old mode 100644
new mode 100755
diff --git a/test/valid/t8a.xml b/test/valid/t8a.xml
old mode 100644
new mode 100755
diff --git a/test/valid/t9.xml b/test/valid/t9.xml
old mode 100644
new mode 100755
diff --git a/test/valid/t9a.xml b/test/valid/t9a.xml
old mode 100644
new mode 100755
diff --git a/test/valid/xhtml1.xhtml b/test/valid/xhtml1.xhtml
old mode 100644
new mode 100755
diff --git a/test/valid/xlink.xml b/test/valid/xlink.xml
old mode 100644
new mode 100755
diff --git a/test/wap.xml b/test/wap.xml
old mode 100644
new mode 100755
diff --git a/test/warning/ent8 b/test/warning/ent8
old mode 100644
new mode 100755
diff --git a/test/warning/ent9 b/test/warning/ent9
old mode 100644
new mode 100755
diff --git a/test/winblanks.xml b/test/winblanks.xml
old mode 100644
new mode 100755
diff --git a/test/wml.xml b/test/wml.xml
old mode 100644
new mode 100755
diff --git a/test/xhtml1 b/test/xhtml1
old mode 100644
new mode 100755
diff --git a/test/xhtmlcomp b/test/xhtmlcomp
old mode 100644
new mode 100755
diff --git a/test/xml1 b/test/xml1
old mode 100644
new mode 100755
diff --git a/test/xml2 b/test/xml2
old mode 100644
new mode 100755
diff --git a/test/xmlid/id_err1.xml b/test/xmlid/id_err1.xml
old mode 100644
new mode 100755
diff --git a/test/xmlid/id_err2.xml b/test/xmlid/id_err2.xml
old mode 100644
new mode 100755
diff --git a/test/xmlid/id_tst1.xml b/test/xmlid/id_tst1.xml
old mode 100644
new mode 100755
diff --git a/test/xmlid/id_tst2.xml b/test/xmlid/id_tst2.xml
old mode 100644
new mode 100755
diff --git a/test/xmlid/id_tst3.xml b/test/xmlid/id_tst3.xml
old mode 100644
new mode 100755
diff --git a/test/xmlid/id_tst4.xml b/test/xmlid/id_tst4.xml
old mode 100644
new mode 100755
diff --git a/test/xsdtest/xsdtest.xml b/test/xsdtest/xsdtest.xml
old mode 100644
new mode 100755
diff --git a/test/xsdtest/xsdtest.xsl b/test/xsdtest/xsdtest.xsl
old mode 100644
new mode 100755
diff --git a/test/xsdtest/xsdtestsuite.xml b/test/xsdtest/xsdtestsuite.xml
old mode 100644
new mode 100755
diff --git a/testAutomata.c b/testAutomata.c
old mode 100644
new mode 100755
diff --git a/testC14N.c b/testC14N.c
old mode 100644
new mode 100755
diff --git a/testHTML.c b/testHTML.c
old mode 100644
new mode 100755
diff --git a/testModule.c b/testModule.c
old mode 100644
new mode 100755
diff --git a/testOOM.c b/testOOM.c
old mode 100644
new mode 100755
diff --git a/testOOMlib.c b/testOOMlib.c
old mode 100644
new mode 100755
diff --git a/testOOMlib.h b/testOOMlib.h
old mode 100644
new mode 100755
diff --git a/testReader.c b/testReader.c
old mode 100644
new mode 100755
diff --git a/testRegexp.c b/testRegexp.c
old mode 100644
new mode 100755
diff --git a/testRelax.c b/testRelax.c
old mode 100644
new mode 100755
diff --git a/testSAX.c b/testSAX.c
old mode 100644
new mode 100755
diff --git a/testSchemas.c b/testSchemas.c
old mode 100644
new mode 100755
diff --git a/testThreads.c b/testThreads.c
old mode 100644
new mode 100755
diff --git a/testURI.c b/testURI.c
old mode 100644
new mode 100755
diff --git a/testXPath.c b/testXPath.c
old mode 100644
new mode 100755
diff --git a/testapi.c b/testapi.c
old mode 100644
new mode 100755
diff --git a/testchar.c b/testchar.c
old mode 100644
new mode 100755
diff --git a/testdict.c b/testdict.c
old mode 100644
new mode 100755
diff --git a/testdso.c b/testdso.c
old mode 100644
new mode 100755
diff --git a/testlimits.c b/testlimits.c
old mode 100644
new mode 100755
diff --git a/testrecurse.c b/testrecurse.c
old mode 100644
new mode 100755
diff --git a/threads.c b/threads.c
old mode 100644
new mode 100755
diff --git a/timsort.h b/timsort.h
old mode 100644
new mode 100755
diff --git a/tree.c b/tree.c
old mode 100644
new mode 100755
index 47813267..e539ac19
--- a/tree.c
+++ b/tree.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * tree.c : implementation of access function for an XML tree.
  *
@@ -225,18 +229,63 @@ xmlBuildQName(const xmlChar *ncname, const xmlChar *prefix,
     int lenn, lenp;
     xmlChar *ret;
 
-    if (ncname == NULL) return(NULL);
-    if (prefix == NULL) return((xmlChar *) ncname);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1061]) {
+      if ((ncname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1061\n");
+      else
+        fprintf(stderr, "reached bug index 1061\n");
+    }
+    if ((!FIXREVERTER[1061] && (ncname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1062]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1062\n");
+      else
+        fprintf(stderr, "reached bug index 1062\n");
+    }
+    if ((!FIXREVERTER[1062] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return((xmlChar *) ncname);
+    #ifdef FRCOV
+    }
+    #endif
 
     lenn = strlen((char *) ncname);
     lenp = strlen((char *) prefix);
 
     if ((memory == NULL) || (len < lenn + lenp + 2)) {
 	ret = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (ret == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1063]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1063\n");
+	  else
+	    fprintf(stderr, "reached bug index 1063\n");
+	}
+	if ((!FIXREVERTER[1063] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlTreeErrMemory("building QName");
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
 	ret = memory;
     }
@@ -269,9 +318,39 @@ xmlSplitQName2(const xmlChar *name, xmlChar **prefix) {
     int len = 0;
     xmlChar *ret = NULL;
 
-    if (prefix == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1064]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1064\n");
+      else
+        fprintf(stderr, "reached bug index 1064\n");
+    }
+    if ((!FIXREVERTER[1064] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     *prefix = NULL;
-    if (name == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1065]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1065\n");
+      else
+        fprintf(stderr, "reached bug index 1065\n");
+    }
+    if ((!FIXREVERTER[1065] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifndef XML_XML_NAMESPACE
     /* xml: prefix is not really a namespace */
@@ -300,7 +379,19 @@ xmlSplitQName2(const xmlChar *name, xmlChar **prefix) {
 	return(NULL);
     }
     ret = xmlStrdup(&name[len + 1]);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1066]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1066\n");
+      else
+        fprintf(stderr, "reached bug index 1066\n");
+    }
+    if ((!FIXREVERTER[1066] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("QName split");
 	if (*prefix != NULL) {
 	    xmlFree(*prefix);
@@ -308,6 +399,9 @@ xmlSplitQName2(const xmlChar *name, xmlChar **prefix) {
 	}
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(ret);
 }
@@ -328,8 +422,38 @@ const xmlChar *
 xmlSplitQName3(const xmlChar *name, int *len) {
     int l = 0;
 
-    if (name == NULL) return(NULL);
-    if (len == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1067]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1067\n");
+      else
+        fprintf(stderr, "reached bug index 1067\n");
+    }
+    if ((!FIXREVERTER[1067] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1068]) {
+      if ((len == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1068\n");
+      else
+        fprintf(stderr, "reached bug index 1068\n");
+    }
+    if ((!FIXREVERTER[1068] && (len == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /* nasty but valid */
     if (name[0] == ':')
@@ -374,8 +498,23 @@ xmlValidateNCName(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1069]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1069\n");
+      else
+        fprintf(stderr, "reached bug index 1069\n");
+    }
+    if ((!FIXREVERTER[1069] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * First quick algorithm for ASCII range
@@ -448,8 +587,23 @@ xmlValidateQName(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1071]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1071\n");
+      else
+        fprintf(stderr, "reached bug index 1071\n");
+    }
+    if ((!FIXREVERTER[1071] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * First quick algorithm for ASCII range
      */
@@ -546,8 +700,23 @@ xmlValidateName(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1073]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1073\n");
+      else
+        fprintf(stderr, "reached bug index 1073\n");
+    }
+    if ((!FIXREVERTER[1073] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * First quick algorithm for ASCII range
      */
@@ -615,8 +784,23 @@ xmlValidateNMToken(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1075]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1075\n");
+      else
+        fprintf(stderr, "reached bug index 1075\n");
+    }
+    if ((!FIXREVERTER[1075] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * First quick algorithm for ASCII range
      */
@@ -755,17 +939,62 @@ xmlNewNs(xmlNodePtr node, const xmlChar *href, const xmlChar *prefix) {
      * Allocate a new Namespace and fill the fields.
      */
     cur = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1077]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1077\n");
+      else
+        fprintf(stderr, "reached bug index 1077\n");
+    }
+    if ((!FIXREVERTER[1077] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building namespace");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNs));
     cur->type = XML_LOCAL_NAMESPACE;
 
-    if (href != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1078]) {
+      if ((href != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1078\n");
+      else
+        fprintf(stderr, "reached bug index 1078\n");
+    }
+    if ((!FIXREVERTER[1078] && (href != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->href = xmlStrdup(href);
-    if (prefix != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1079]) {
+      if ((prefix != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1079\n");
+      else
+        fprintf(stderr, "reached bug index 1079\n");
+    }
+    if ((!FIXREVERTER[1079] && (prefix != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->prefix = xmlStrdup(prefix);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Add it at the end to preserve parsing order ...
@@ -805,13 +1034,28 @@ xmlNewNs(xmlNodePtr node, const xmlChar *href, const xmlChar *prefix) {
  */
 void
 xmlSetNs(xmlNodePtr node, xmlNsPtr ns) {
-    if (node == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1080]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1080\n");
+      else
+        fprintf(stderr, "reached bug index 1080\n");
+    }
+    if ((!FIXREVERTER[1080] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlSetNs: node == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((node->type == XML_ELEMENT_NODE) ||
         (node->type == XML_ATTRIBUTE_NODE))
 	node->ns = ns;
@@ -825,13 +1069,28 @@ xmlSetNs(xmlNodePtr node, xmlNsPtr ns) {
  */
 void
 xmlFreeNs(xmlNsPtr cur) {
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1081]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1081\n");
+      else
+        fprintf(stderr, "reached bug index 1081\n");
+    }
+    if ((!FIXREVERTER[1081] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlFreeNs : ns == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (cur->href != NULL) xmlFree((char *) cur->href);
     if (cur->prefix != NULL) xmlFree((char *) cur->prefix);
     xmlFree(cur);
@@ -846,13 +1105,28 @@ xmlFreeNs(xmlNsPtr cur) {
 void
 xmlFreeNsList(xmlNsPtr cur) {
     xmlNsPtr next;
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1082]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1082\n");
+      else
+        fprintf(stderr, "reached bug index 1082\n");
+    }
+    if ((!FIXREVERTER[1082] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlFreeNsList : ns == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (cur != NULL) {
         next = cur->next;
         xmlFreeNs(cur);
@@ -891,21 +1165,96 @@ xmlNewDtd(xmlDocPtr doc, const xmlChar *name,
      * Allocate a new DTD and fill the fields.
      */
     cur = (xmlDtdPtr) xmlMalloc(sizeof(xmlDtd));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1083]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1083\n");
+      else
+        fprintf(stderr, "reached bug index 1083\n");
+    }
+    if ((!FIXREVERTER[1083] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building DTD");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0 , sizeof(xmlDtd));
     cur->type = XML_DTD_NODE;
 
-    if (name != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1084]) {
+      if ((name != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1084\n");
+      else
+        fprintf(stderr, "reached bug index 1084\n");
+    }
+    if ((!FIXREVERTER[1084] && (name != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->name = xmlStrdup(name);
-    if (ExternalID != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1085]) {
+      if ((ExternalID != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1085\n");
+      else
+        fprintf(stderr, "reached bug index 1085\n");
+    }
+    if ((!FIXREVERTER[1085] && (ExternalID != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->ExternalID = xmlStrdup(ExternalID);
-    if (SystemID != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1086]) {
+      if ((SystemID != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1086\n");
+      else
+        fprintf(stderr, "reached bug index 1086\n");
+    }
+    if ((!FIXREVERTER[1086] && (SystemID != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->SystemID = xmlStrdup(SystemID);
-    if (doc != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1087]) {
+      if ((doc != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1087\n");
+      else
+        fprintf(stderr, "reached bug index 1087\n");
+    }
+    if ((!FIXREVERTER[1087] && (doc != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	doc->extSubset = cur;
+	#ifdef FRCOV
+	}
+	#endif
     cur->doc = doc;
 
     if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
@@ -925,8 +1274,23 @@ xmlDtdPtr
 xmlGetIntSubset(const xmlDoc *doc) {
     xmlNodePtr cur;
 
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1088]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1088\n");
+      else
+        fprintf(stderr, "reached bug index 1088\n");
+    }
+    if ((!FIXREVERTER[1088] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     cur = doc->children;
     while (cur != NULL) {
 	if (cur->type == XML_DTD_NODE)
@@ -965,20 +1329,50 @@ xmlCreateIntSubset(xmlDocPtr doc, const xmlChar *name,
      * Allocate a new DTD and fill the fields.
      */
     cur = (xmlDtdPtr) xmlMalloc(sizeof(xmlDtd));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1089]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1089\n");
+      else
+        fprintf(stderr, "reached bug index 1089\n");
+    }
+    if ((!FIXREVERTER[1089] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building internal subset");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlDtd));
     cur->type = XML_DTD_NODE;
 
     if (name != NULL) {
 	cur->name = xmlStrdup(name);
-	if (cur->name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1090]) {
+	  if ((cur -> name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1090\n");
+	  else
+	    fprintf(stderr, "reached bug index 1090\n");
+	}
+	if ((!FIXREVERTER[1090] && (cur -> name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlTreeErrMemory("building internal subset");
 	    xmlFree(cur);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     if (ExternalID != NULL) {
 	cur->ExternalID = xmlStrdup(ExternalID);
@@ -1104,10 +1498,40 @@ void
 xmlFreeDtd(xmlDtdPtr cur) {
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1091]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1091\n");
+      else
+        fprintf(stderr, "reached bug index 1091\n");
+    }
+    if ((!FIXREVERTER[1091] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return;
     }
-    if (cur->doc != NULL) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1092]) {
+      if ((cur -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1092\n");
+      else
+        fprintf(stderr, "reached bug index 1092\n");
+    }
+    if ((!FIXREVERTER[1092] && (cur -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
 	xmlDeregisterNodeDefaultValue((xmlNodePtr)cur);
@@ -1162,26 +1586,71 @@ xmlDocPtr
 xmlNewDoc(const xmlChar *version) {
     xmlDocPtr cur;
 
-    if (version == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1093]) {
+      if ((version == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1093\n");
+      else
+        fprintf(stderr, "reached bug index 1093\n");
+    }
+    if ((!FIXREVERTER[1093] && (version == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	version = (const xmlChar *) "1.0";
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Allocate a new document and fill the fields.
      */
     cur = (xmlDocPtr) xmlMalloc(sizeof(xmlDoc));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1094]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1094\n");
+      else
+        fprintf(stderr, "reached bug index 1094\n");
+    }
+    if ((!FIXREVERTER[1094] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building doc");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlDoc));
     cur->type = XML_DOCUMENT_NODE;
 
     cur->version = xmlStrdup(version);
-    if (cur->version == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1095]) {
+      if ((cur -> version == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1095\n");
+      else
+        fprintf(stderr, "reached bug index 1095\n");
+    }
+    if ((!FIXREVERTER[1095] && (cur -> version == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building doc");
 	xmlFree(cur);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur->standalone = -1;
     cur->compression = -1; /* not initialized */
     cur->doc = cur;
@@ -1210,20 +1679,50 @@ xmlFreeDoc(xmlDocPtr cur) {
     xmlDtdPtr extSubset, intSubset;
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1096]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1096\n");
+      else
+        fprintf(stderr, "reached bug index 1096\n");
+    }
+    if ((!FIXREVERTER[1096] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlFreeDoc : document == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef LIBXML_DEBUG_RUNTIME
 #ifdef LIBXML_DEBUG_ENABLED
     xmlDebugCheckDocument(stderr, cur);
 #endif
 #endif
 
-    if (cur != NULL) dict = cur->dict;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1097]) {
+      if ((cur != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1097\n");
+      else
+        fprintf(stderr, "reached bug index 1097\n");
+    }
+    if ((!FIXREVERTER[1097] && (cur != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) dict = cur->dict;
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
 	xmlDeregisterNodeDefaultValue((xmlNodePtr)cur);
@@ -1237,8 +1736,23 @@ xmlFreeDoc(xmlDocPtr cur) {
     cur->refs = NULL;
     extSubset = cur->extSubset;
     intSubset = cur->intSubset;
-    if (intSubset == extSubset)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1098]) {
+      if ((intSubset == extSubset ) && !(0))
+        fprintf(stderr, "triggered bug index 1098\n");
+      else
+        fprintf(stderr, "reached bug index 1098\n");
+    }
+    if ((!FIXREVERTER[1098] && (intSubset == extSubset ))
+    #else
+    if (0
+    #endif
+    )
 	extSubset = NULL;
+	#ifdef FRCOV
+	}
+	#endif
     if (extSubset != NULL) {
 	xmlUnlinkNode((xmlNodePtr) cur->extSubset);
 	cur->extSubset = NULL;
@@ -1281,10 +1795,40 @@ xmlStringLenGetNodeList(const xmlDoc *doc, const xmlChar *value, int len) {
     xmlEntityPtr ent;
     xmlBufPtr buf;
 
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1099]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1099\n");
+      else
+        fprintf(stderr, "reached bug index 1099\n");
+    }
+    if ((!FIXREVERTER[1099] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     buf = xmlBufCreateSize(0);
-    if (buf == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1100]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1100\n");
+      else
+        fprintf(stderr, "reached bug index 1100\n");
+    }
+    if ((!FIXREVERTER[1100] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     xmlBufSetAllocationScheme(buf, XML_BUFFER_ALLOC_HYBRID);
 
     q = cur;
@@ -1383,10 +1927,25 @@ xmlStringLenGetNodeList(const xmlDoc *doc, const xmlChar *value, int len) {
 			 */
 			if (!xmlBufIsEmpty(buf)) {
 			    node = xmlNewDocText(doc, NULL);
-			    if (node == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[1101]) {
+			      if ((node == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 1101\n");
+			      else
+			        fprintf(stderr, "reached bug index 1101\n");
+			    }
+			    if ((!FIXREVERTER[1101] && (node == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 				if (val != NULL) xmlFree(val);
 				goto out;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 			    node->content = xmlBufDetach(buf);
 
 			    if (last == NULL) {
@@ -1455,7 +2014,22 @@ xmlStringLenGetNodeList(const xmlDoc *doc, const xmlChar *value, int len) {
 
     if (!xmlBufIsEmpty(buf)) {
 	node = xmlNewDocText(doc, NULL);
-	if (node == NULL) goto out;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1102]) {
+	  if ((node == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1102\n");
+	  else
+	    fprintf(stderr, "reached bug index 1102\n");
+	}
+	if ((!FIXREVERTER[1102] && (node == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto out;
+	#ifdef FRCOV
+	}
+	#endif
 	node->content = xmlBufDetach(buf);
 
 	if (last == NULL) {
@@ -1491,10 +2065,40 @@ xmlStringGetNodeList(const xmlDoc *doc, const xmlChar *value) {
     xmlEntityPtr ent;
     xmlBufPtr buf;
 
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1103]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1103\n");
+      else
+        fprintf(stderr, "reached bug index 1103\n");
+    }
+    if ((!FIXREVERTER[1103] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     buf = xmlBufCreateSize(0);
-    if (buf == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1104]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1104\n");
+      else
+        fprintf(stderr, "reached bug index 1104\n");
+    }
+    if ((!FIXREVERTER[1104] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     xmlBufSetAllocationScheme(buf, XML_BUFFER_ALLOC_HYBRID);
 
     q = cur;
@@ -1680,8 +2284,23 @@ xmlNodeListGetString(xmlDocPtr doc, const xmlNode *list, int inLine)
     xmlEntityPtr ent;
     int attr;
 
-    if (list == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1105]) {
+      if ((list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1105\n");
+      else
+        fprintf(stderr, "reached bug index 1105\n");
+    }
+    if ((!FIXREVERTER[1105] && (list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if ((list->parent != NULL) && (list->parent->type == XML_ATTRIBUTE_NODE))
         attr = 1;
     else
@@ -1853,7 +2472,19 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
      * Allocate a new property and fill the fields.
      */
     cur = (xmlAttrPtr) xmlMalloc(sizeof(xmlAttr));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1107]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1107\n");
+      else
+        fprintf(stderr, "reached bug index 1107\n");
+    }
+    if ((!FIXREVERTER[1107] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if ((eatname == 1) &&
 	    ((node == NULL) || (node->doc == NULL) ||
 	     (!(xmlDictOwns(node->doc->dict, name)))))
@@ -1861,6 +2492,9 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
         xmlTreeErrMemory("building attribute");
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlAttr));
     cur->type = XML_ATTRIBUTE_NODE;
 
@@ -1885,16 +2519,46 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
         if(!xmlCheckUTF8(value)) {
             xmlTreeErr(XML_TREE_NOT_UTF8, (xmlNodePtr) doc,
                        NULL);
-            if (doc != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1108]) {
+              if ((doc != (void *) 0  ) && !(0))
+                fprintf(stderr, "triggered bug index 1108\n");
+              else
+                fprintf(stderr, "reached bug index 1108\n");
+            }
+            if ((!FIXREVERTER[1108] && (doc != (void *) 0  ))
+            #else
+            if (0
+            #endif
+            )
                 doc->encoding = xmlStrdup(BAD_CAST "ISO-8859-1");
+                #ifdef FRCOV
+                }
+                #endif
         }
         cur->children = xmlNewDocText(doc, value);
         cur->last = NULL;
         tmp = cur->children;
         while (tmp != NULL) {
             tmp->parent = (xmlNodePtr) cur;
-            if (tmp->next == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1109]) {
+              if ((tmp -> next == (void *) 0  ) && !(0))
+                fprintf(stderr, "triggered bug index 1109\n");
+              else
+                fprintf(stderr, "reached bug index 1109\n");
+            }
+            if ((!FIXREVERTER[1109] && (tmp -> next == (void *) 0  ))
+            #else
+            if (0
+            #endif
+            )
                 cur->last = tmp;
+                #ifdef FRCOV
+                }
+                #endif
             tmp = tmp->next;
         }
     }
@@ -1938,13 +2602,28 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
 xmlAttrPtr
 xmlNewProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value) {
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1110]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1110\n");
+      else
+        fprintf(stderr, "reached bug index 1110\n");
+    }
+    if ((!FIXREVERTER[1110] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewProp : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 	return xmlNewPropInternal(node, NULL, name, value, 0);
 }
@@ -1964,13 +2643,28 @@ xmlAttrPtr
 xmlNewNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name,
            const xmlChar *value) {
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1111]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1111\n");
+      else
+        fprintf(stderr, "reached bug index 1111\n");
+    }
+    if ((!FIXREVERTER[1111] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewNsProp : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return xmlNewPropInternal(node, ns, name, value, 0);
 }
@@ -2013,22 +2707,52 @@ xmlAttrPtr
 xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value) {
     xmlAttrPtr cur;
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1113]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1113\n");
+      else
+        fprintf(stderr, "reached bug index 1113\n");
+    }
+    if ((!FIXREVERTER[1113] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewDocProp : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Allocate a new property and fill the fields.
      */
     cur = (xmlAttrPtr) xmlMalloc(sizeof(xmlAttr));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1114]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1114\n");
+      else
+        fprintf(stderr, "reached bug index 1114\n");
+    }
+    if ((!FIXREVERTER[1114] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building attribute");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlAttr));
     cur->type = XML_ATTRIBUTE_NODE;
 
@@ -2046,8 +2770,23 @@ xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value) {
 	tmp = cur->children;
 	while (tmp != NULL) {
 	    tmp->parent = (xmlNodePtr) cur;
-	    if (tmp->next == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1115]) {
+	      if ((tmp -> next == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 1115\n");
+	      else
+	        fprintf(stderr, "reached bug index 1115\n");
+	    }
+	    if ((!FIXREVERTER[1115] && (tmp -> next == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		cur->last = tmp;
+		#ifdef FRCOV
+		}
+		#endif
 	    tmp = tmp->next;
 	}
     }
@@ -2066,7 +2805,22 @@ xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value) {
 void
 xmlFreePropList(xmlAttrPtr cur) {
     xmlAttrPtr next;
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1116]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1116\n");
+      else
+        fprintf(stderr, "reached bug index 1116\n");
+    }
+    if ((!FIXREVERTER[1116] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     while (cur != NULL) {
         next = cur->next;
         xmlFreeProp(cur);
@@ -2083,9 +2837,39 @@ xmlFreePropList(xmlAttrPtr cur) {
 void
 xmlFreeProp(xmlAttrPtr cur) {
     xmlDictPtr dict = NULL;
-    if (cur == NULL) return;
-
-    if (cur->doc != NULL) dict = cur->doc->dict;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1117]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1117\n");
+      else
+        fprintf(stderr, "reached bug index 1117\n");
+    }
+    if ((!FIXREVERTER[1117] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1118]) {
+      if ((cur -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1118\n");
+      else
+        fprintf(stderr, "reached bug index 1118\n");
+    }
+    if ((!FIXREVERTER[1118] && (cur -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
 	xmlDeregisterNodeDefaultValue((xmlNodePtr)cur);
@@ -2111,20 +2895,50 @@ xmlFreeProp(xmlAttrPtr cur) {
 int
 xmlRemoveProp(xmlAttrPtr cur) {
     xmlAttrPtr tmp;
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1119]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1119\n");
+      else
+        fprintf(stderr, "reached bug index 1119\n");
+    }
+    if ((!FIXREVERTER[1119] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlRemoveProp : cur == NULL\n");
 #endif
 	return(-1);
     }
-    if (cur->parent == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1120]) {
+      if ((cur -> parent == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1120\n");
+      else
+        fprintf(stderr, "reached bug index 1120\n");
+    }
+    if ((!FIXREVERTER[1120] && (cur -> parent == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlRemoveProp : cur->parent == NULL\n");
 #endif
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     tmp = cur->parent->properties;
     if (tmp == cur) {
         cur->parent->properties = cur->next;
@@ -2163,22 +2977,52 @@ xmlNodePtr
 xmlNewDocPI(xmlDocPtr doc, const xmlChar *name, const xmlChar *content) {
     xmlNodePtr cur;
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1121]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1121\n");
+      else
+        fprintf(stderr, "reached bug index 1121\n");
+    }
+    if ((!FIXREVERTER[1121] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewPI : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1122]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1122\n");
+      else
+        fprintf(stderr, "reached bug index 1122\n");
+    }
+    if ((!FIXREVERTER[1122] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building PI");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_PI_NODE;
 
@@ -2225,22 +3069,52 @@ xmlNodePtr
 xmlNewNode(xmlNsPtr ns, const xmlChar *name) {
     xmlNodePtr cur;
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1123]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1123\n");
+      else
+        fprintf(stderr, "reached bug index 1123\n");
+    }
+    if ((!FIXREVERTER[1123] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewNode : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1124]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1124\n");
+      else
+        fprintf(stderr, "reached bug index 1124\n");
+    }
+    if ((!FIXREVERTER[1124] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building node");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_ELEMENT_NODE;
 
@@ -2279,11 +3153,26 @@ xmlNewNodeEatName(xmlNsPtr ns, xmlChar *name) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1126]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1126\n");
+      else
+        fprintf(stderr, "reached bug index 1126\n");
+    }
+    if ((!FIXREVERTER[1126] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building node");
 	/* we can't check here that name comes from the doc dictionary */
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_ELEMENT_NODE;
 
@@ -2443,10 +3332,25 @@ xmlNewText(const xmlChar *content) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1128]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1128\n");
+      else
+        fprintf(stderr, "reached bug index 1128\n");
+    }
+    if ((!FIXREVERTER[1128] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building text");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_TEXT_NODE;
 
@@ -2554,17 +3458,47 @@ xmlNodePtr
 xmlNewCharRef(xmlDocPtr doc, const xmlChar *name) {
     xmlNodePtr cur;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1132]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1132\n");
+      else
+        fprintf(stderr, "reached bug index 1132\n");
+    }
+    if ((!FIXREVERTER[1132] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1133]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1133\n");
+      else
+        fprintf(stderr, "reached bug index 1133\n");
+    }
+    if ((!FIXREVERTER[1133] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building character reference");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_ENTITY_REF_NODE;
 
@@ -2598,17 +3532,47 @@ xmlNewReference(const xmlDoc *doc, const xmlChar *name) {
     xmlNodePtr cur;
     xmlEntityPtr ent;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1134]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1134\n");
+      else
+        fprintf(stderr, "reached bug index 1134\n");
+    }
+    if ((!FIXREVERTER[1134] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1135]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1135\n");
+      else
+        fprintf(stderr, "reached bug index 1135\n");
+    }
+    if ((!FIXREVERTER[1135] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building reference");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_ENTITY_REF_NODE;
 
@@ -2654,7 +3618,22 @@ xmlNewDocText(const xmlDoc *doc, const xmlChar *content) {
     xmlNodePtr cur;
 
     cur = xmlNewText(content);
-    if (cur != NULL) cur->doc = (xmlDoc *)doc;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1136]) {
+      if ((cur != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1136\n");
+      else
+        fprintf(stderr, "reached bug index 1136\n");
+    }
+    if ((!FIXREVERTER[1136] && (cur != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    ) cur->doc = (xmlDoc *)doc;
+    #ifdef FRCOV
+    }
+    #endif
     return(cur);
 }
 
@@ -2674,10 +3653,25 @@ xmlNewTextLen(const xmlChar *content, int len) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1137]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1137\n");
+      else
+        fprintf(stderr, "reached bug index 1137\n");
+    }
+    if ((!FIXREVERTER[1137] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building text");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_TEXT_NODE;
 
@@ -2725,10 +3719,25 @@ xmlNewComment(const xmlChar *content) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1139]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1139\n");
+      else
+        fprintf(stderr, "reached bug index 1139\n");
+    }
+    if ((!FIXREVERTER[1139] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building comment");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_COMMENT_NODE;
 
@@ -2759,10 +3768,25 @@ xmlNewCDataBlock(xmlDocPtr doc, const xmlChar *content, int len) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1140]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1140\n");
+      else
+        fprintf(stderr, "reached bug index 1140\n");
+    }
+    if ((!FIXREVERTER[1140] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building CDATA");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_CDATA_SECTION_NODE;
     cur->doc = doc;
@@ -2789,7 +3813,22 @@ xmlNewDocComment(xmlDocPtr doc, const xmlChar *content) {
     xmlNodePtr cur;
 
     cur = xmlNewComment(content);
-    if (cur != NULL) cur->doc = doc;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1141]) {
+      if ((cur != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1141\n");
+      else
+        fprintf(stderr, "reached bug index 1141\n");
+    }
+    if ((!FIXREVERTER[1141] && (cur != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    ) cur->doc = doc;
+    #ifdef FRCOV
+    }
+    #endif
     return(cur);
 }
 
@@ -3220,8 +4259,23 @@ xmlAddSibling(xmlNodePtr cur, xmlNodePtr elem) {
     elem->next = NULL;
     elem->parent = parent;
     cur->next = elem;
-    if (parent != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1145]) {
+      if ((parent != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1145\n");
+      else
+        fprintf(stderr, "reached bug index 1145\n");
+    }
+    if ((!FIXREVERTER[1145] && (parent != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	parent->last = elem;
+	#ifdef FRCOV
+	}
+	#endif
 
     return(elem);
 }
@@ -3281,10 +4335,25 @@ xmlAddChildList(xmlNodePtr parent, xmlNodePtr cur) {
 	    /*
 	     * if it's the only child, nothing more to be done.
 	     */
-	    if (cur->next == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1146]) {
+	      if ((cur -> next == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1146\n");
+	      else
+	        fprintf(stderr, "reached bug index 1146\n");
+	    }
+	    if ((!FIXREVERTER[1146] && (cur -> next == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFreeNode(cur);
 		return(parent->last);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    prev = cur;
 	    cur = cur->next;
 	    xmlFreeNode(prev);
@@ -3668,7 +4737,22 @@ xmlFreeNodeList(xmlNodePtr cur) {
     xmlDictPtr dict = NULL;
     size_t depth = 0;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1152]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1152\n");
+      else
+        fprintf(stderr, "reached bug index 1152\n");
+    }
+    if ((!FIXREVERTER[1152] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (cur->type == XML_NAMESPACE_DECL) {
 	xmlFreeNsList((xmlNsPtr) cur);
 	return;
@@ -3681,7 +4765,22 @@ xmlFreeNodeList(xmlNodePtr cur) {
 	xmlFreeDoc((xmlDocPtr) cur);
 	return;
     }
-    if (cur->doc != NULL) dict = cur->doc->dict;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1153]) {
+      if ((cur -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1153\n");
+      else
+        fprintf(stderr, "reached bug index 1153\n");
+    }
+    if ((!FIXREVERTER[1153] && (cur -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
     while (1) {
         while ((cur->children != NULL) &&
                (cur->type != XML_DTD_NODE) &&
@@ -3731,8 +4830,23 @@ xmlFreeNodeList(xmlNodePtr cur) {
         if (next != NULL) {
 	    cur = next;
         } else {
-            if ((depth == 0) || (parent == NULL))
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1154]) {
+              if ((parent == (void *) 0 ) && !(depth == 0 ))
+                fprintf(stderr, "triggered bug index 1154\n");
+              else
+                fprintf(stderr, "reached bug index 1154\n");
+            }
+            if ((FIXREVERTER[1154] && (depth == 0 )) || (!FIXREVERTER[1154] && (depth == 0 || parent == (void *) 0 ))
+            #else
+            if (depth == 0 
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
             depth -= 1;
             cur = parent;
             cur->children = NULL;
@@ -3751,7 +4865,22 @@ void
 xmlFreeNode(xmlNodePtr cur) {
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1155]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1155\n");
+      else
+        fprintf(stderr, "reached bug index 1155\n");
+    }
+    if ((!FIXREVERTER[1155] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /* use xmlFreeDtd for DTD nodes */
     if (cur->type == XML_DTD_NODE) {
@@ -3770,7 +4899,22 @@ xmlFreeNode(xmlNodePtr cur) {
     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
 	xmlDeregisterNodeDefaultValue(cur);
 
-    if (cur->doc != NULL) dict = cur->doc->dict;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1156]) {
+      if ((cur -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1156\n");
+      else
+        fprintf(stderr, "reached bug index 1156\n");
+    }
+    if ((!FIXREVERTER[1156] && (cur -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (cur->type == XML_ENTITY_DECL) {
         xmlEntityPtr ent = (xmlEntityPtr) cur;
@@ -3824,13 +4968,28 @@ xmlFreeNode(xmlNodePtr cur) {
  */
 void
 xmlUnlinkNode(xmlNodePtr cur) {
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1157]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1157\n");
+      else
+        fprintf(stderr, "reached bug index 1157\n");
+    }
+    if ((!FIXREVERTER[1157] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlUnlinkNode : node == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (cur->type == XML_NAMESPACE_DECL)
         return;
     if (cur->type == XML_DTD_NODE) {
@@ -3874,8 +5033,23 @@ xmlUnlinkNode(xmlNodePtr cur) {
 	} else {
 	    if (parent->children == cur)
 		parent->children = cur->next;
-	    if (parent->last == cur)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1159]) {
+	      if ((parent -> last == cur  ) && !(0))
+	        fprintf(stderr, "triggered bug index 1159\n");
+	      else
+	        fprintf(stderr, "reached bug index 1159\n");
+	    }
+	    if ((!FIXREVERTER[1159] && (parent -> last == cur  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		parent->last = cur->prev;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	cur->parent = NULL;
     }
@@ -3974,7 +5148,22 @@ xmlNsPtr
 xmlCopyNamespace(xmlNsPtr cur) {
     xmlNsPtr ret;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1160]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1160\n");
+      else
+        fprintf(stderr, "reached bug index 1160\n");
+    }
+    if ((!FIXREVERTER[1160] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     switch (cur->type) {
 	case XML_LOCAL_NAMESPACE:
 	    ret = xmlNewNs(NULL, cur->href, cur->prefix);
@@ -4022,7 +5211,22 @@ static xmlAttrPtr
 xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
     xmlAttrPtr ret;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1161]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1161\n");
+      else
+        fprintf(stderr, "reached bug index 1161\n");
+    }
+    if ((!FIXREVERTER[1161] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if ((target != NULL) && (target->type != XML_ELEMENT_NODE))
         return(NULL);
     if (target != NULL)
@@ -4035,7 +5239,22 @@ xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
 	ret = xmlNewDocProp(cur->children->doc, cur->name, NULL);
     else
 	ret = xmlNewDocProp(NULL, cur->name, NULL);
-    if (ret == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1162]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1162\n");
+      else
+        fprintf(stderr, "reached bug index 1162\n");
+    }
+    if ((!FIXREVERTER[1162] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret->parent = target;
 
     if ((cur->ns != NULL) && (target != NULL)) {
@@ -4092,8 +5311,23 @@ xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
 	tmp = ret->children;
 	while (tmp != NULL) {
 	    /* tmp->parent = (xmlNodePtr)ret; */
-	    if (tmp->next == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1163]) {
+	      if ((tmp -> next == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 1163\n");
+	      else
+	        fprintf(stderr, "reached bug index 1163\n");
+	    }
+	    if ((!FIXREVERTER[1163] && (tmp -> next == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        ret->last = tmp;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    tmp = tmp->next;
 	}
     }
@@ -4148,8 +5382,23 @@ xmlCopyPropList(xmlNodePtr target, xmlAttrPtr cur) {
         return(NULL);
     while (cur != NULL) {
         q = xmlCopyProp(target, cur);
-	if (q == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1164]) {
+	  if ((q == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1164\n");
+	  else
+	    fprintf(stderr, "reached bug index 1164\n");
+	}
+	if ((!FIXREVERTER[1164] && (q == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (p == NULL) {
 	    ret = p = q;
 	} else {
@@ -4186,7 +5435,22 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
                   int extended) {
     xmlNodePtr ret;
 
-    if (node == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1165]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1165\n");
+      else
+        fprintf(stderr, "reached bug index 1165\n");
+    }
+    if ((!FIXREVERTER[1165] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     switch (node->type) {
         case XML_TEXT_NODE:
         case XML_CDATA_SECTION_NODE:
@@ -4225,10 +5489,25 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
      * Allocate a new node and fill the fields.
      */
     ret = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1166]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1166\n");
+      else
+        fprintf(stderr, "reached bug index 1166\n");
+    }
+    if ((!FIXREVERTER[1166] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("copying node");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlNode));
     ret->type = node->type;
 
@@ -4321,10 +5600,28 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
             ret->children = node->children;
 	}
 	ret->last = ret->children;
-    } else if ((node->children != NULL) && (extended != 2)) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[1167]) {
+      fprintf(stderr, "reached bug index 1167\n");
+    }
+    if ((FIXREVERTER[1167] && (extended != 2 )) || (!FIXREVERTER[1167] && (node -> children != (void *) 0 && extended != 2 ))
+    #else
+    if (extended != 2 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(node -> children != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1167\n");
+      #endif
+    
         ret->children = xmlStaticCopyNodeList(node->children, doc, ret);
 	UPDATE_LAST_CHILD_AND_PARENT(ret)
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 out:
     /* if parent != NULL we already registered the node above */
@@ -4342,13 +5639,43 @@ xmlStaticCopyNodeList(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent) {
     while (node != NULL) {
 #ifdef LIBXML_TREE_ENABLED
 	if (node->type == XML_DTD_NODE ) {
-	    if (doc == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1168]) {
+	      if ((doc == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1168\n");
+	      else
+	        fprintf(stderr, "reached bug index 1168\n");
+	    }
+	    if ((!FIXREVERTER[1168] && (doc == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		node = node->next;
 		continue;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (doc->intSubset == NULL) {
 		q = (xmlNodePtr) xmlCopyDtd( (xmlDtdPtr) node );
-		if (q == NULL) return(NULL);
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1169]) {
+		  if ((q == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1169\n");
+		  else
+		    fprintf(stderr, "reached bug index 1169\n");
+		}
+		if ((!FIXREVERTER[1169] && (q == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 		q->doc = doc;
 		q->parent = parent;
 		doc->intSubset = (xmlDtdPtr) q;
@@ -4360,7 +5687,22 @@ xmlStaticCopyNodeList(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent) {
 	} else
 #endif /* LIBXML_TREE_ENABLED */
 	    q = xmlStaticCopyNode(node, doc, parent, 1);
-	if (q == NULL) return(NULL);
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1170]) {
+	  if ((q == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1170\n");
+	  else
+	    fprintf(stderr, "reached bug index 1170\n");
+	}
+	if ((!FIXREVERTER[1170] && (q == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 	if (ret == NULL) {
 	    q->prev = NULL;
 	    ret = p = q;
@@ -4456,24 +5798,129 @@ xmlCopyDtd(xmlDtdPtr dtd) {
     xmlDtdPtr ret;
     xmlNodePtr cur, p = NULL, q;
 
-    if (dtd == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1171]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1171\n");
+      else
+        fprintf(stderr, "reached bug index 1171\n");
+    }
+    if ((!FIXREVERTER[1171] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlNewDtd(NULL, dtd->name, dtd->ExternalID, dtd->SystemID);
-    if (ret == NULL) return(NULL);
-    if (dtd->entities != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1172]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1172\n");
+      else
+        fprintf(stderr, "reached bug index 1172\n");
+    }
+    if ((!FIXREVERTER[1172] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1173]) {
+      if ((dtd -> entities != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1173\n");
+      else
+        fprintf(stderr, "reached bug index 1173\n");
+    }
+    if ((!FIXREVERTER[1173] && (dtd -> entities != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->entities = (void *) xmlCopyEntitiesTable(
 	                    (xmlEntitiesTablePtr) dtd->entities);
-    if (dtd->notations != NULL)
+	                    #ifdef FRCOV
+	                    }
+	                    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1174]) {
+      if ((dtd -> notations != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1174\n");
+      else
+        fprintf(stderr, "reached bug index 1174\n");
+    }
+    if ((!FIXREVERTER[1174] && (dtd -> notations != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->notations = (void *) xmlCopyNotationTable(
 	                    (xmlNotationTablePtr) dtd->notations);
-    if (dtd->elements != NULL)
+	                    #ifdef FRCOV
+	                    }
+	                    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1175]) {
+      if ((dtd -> elements != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1175\n");
+      else
+        fprintf(stderr, "reached bug index 1175\n");
+    }
+    if ((!FIXREVERTER[1175] && (dtd -> elements != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->elements = (void *) xmlCopyElementTable(
 	                    (xmlElementTablePtr) dtd->elements);
-    if (dtd->attributes != NULL)
+	                    #ifdef FRCOV
+	                    }
+	                    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1176]) {
+      if ((dtd -> attributes != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1176\n");
+      else
+        fprintf(stderr, "reached bug index 1176\n");
+    }
+    if ((!FIXREVERTER[1176] && (dtd -> attributes != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->attributes = (void *) xmlCopyAttributeTable(
 	                    (xmlAttributeTablePtr) dtd->attributes);
-    if (dtd->pentities != NULL)
+	                    #ifdef FRCOV
+	                    }
+	                    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1177]) {
+      if ((dtd -> pentities != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1177\n");
+      else
+        fprintf(stderr, "reached bug index 1177\n");
+    }
+    if ((!FIXREVERTER[1177] && (dtd -> pentities != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ret->pentities = (void *) xmlCopyEntitiesTable(
 			    (xmlEntitiesTablePtr) dtd->pentities);
+			    #ifdef FRCOV
+			    }
+			    #endif
 
     cur = dtd->children;
     while (cur != NULL) {
@@ -4507,10 +5954,25 @@ xmlCopyDtd(xmlDtdPtr dtd) {
 	    q = xmlCopyNode(cur, 0);
 	}
 
-	if (q == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1178]) {
+	  if ((q == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1178\n");
+	  else
+	    fprintf(stderr, "reached bug index 1178\n");
+	}
+	if ((!FIXREVERTER[1178] && (q == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    cur = cur->next;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	if (p == NULL)
 	    ret->children = q;
@@ -4544,15 +6006,90 @@ xmlDocPtr
 xmlCopyDoc(xmlDocPtr doc, int recursive) {
     xmlDocPtr ret;
 
-    if (doc == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1179]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1179\n");
+      else
+        fprintf(stderr, "reached bug index 1179\n");
+    }
+    if ((!FIXREVERTER[1179] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlNewDoc(doc->version);
-    if (ret == NULL) return(NULL);
-    if (doc->name != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1180]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1180\n");
+      else
+        fprintf(stderr, "reached bug index 1180\n");
+    }
+    if ((!FIXREVERTER[1180] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1181]) {
+      if ((doc -> name != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1181\n");
+      else
+        fprintf(stderr, "reached bug index 1181\n");
+    }
+    if ((!FIXREVERTER[1181] && (doc -> name != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->name = xmlMemStrdup(doc->name);
-    if (doc->encoding != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1182]) {
+      if ((doc -> encoding != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1182\n");
+      else
+        fprintf(stderr, "reached bug index 1182\n");
+    }
+    if ((!FIXREVERTER[1182] && (doc -> encoding != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->encoding = xmlStrdup(doc->encoding);
-    if (doc->URL != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1183]) {
+      if ((doc -> URL != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1183\n");
+      else
+        fprintf(stderr, "reached bug index 1183\n");
+    }
+    if ((!FIXREVERTER[1183] && (doc -> URL != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->URL = xmlStrdup(doc->URL);
+        #ifdef FRCOV
+        }
+        #endif
     ret->charset = doc->charset;
     ret->compression = doc->compression;
     ret->standalone = doc->standalone;
@@ -4563,16 +6100,46 @@ xmlCopyDoc(xmlDocPtr doc, int recursive) {
 #ifdef LIBXML_TREE_ENABLED
     if (doc->intSubset != NULL) {
         ret->intSubset = xmlCopyDtd(doc->intSubset);
-	if (ret->intSubset == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1184]) {
+	  if ((ret -> intSubset == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1184\n");
+	  else
+	    fprintf(stderr, "reached bug index 1184\n");
+	}
+	if ((!FIXREVERTER[1184] && (ret -> intSubset == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFreeDoc(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	xmlSetTreeDoc((xmlNodePtr)ret->intSubset, ret);
 	ret->intSubset->parent = ret;
     }
 #endif
-    if (doc->oldNs != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1185]) {
+      if ((doc -> oldNs != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1185\n");
+      else
+        fprintf(stderr, "reached bug index 1185\n");
+    }
+    if ((!FIXREVERTER[1185] && (doc -> oldNs != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->oldNs = xmlCopyNamespaceList(doc->oldNs);
+        #ifdef FRCOV
+        }
+        #endif
     if (doc->children != NULL) {
 	xmlNodePtr tmp;
 
@@ -4581,8 +6148,23 @@ xmlCopyDoc(xmlDocPtr doc, int recursive) {
 	ret->last = NULL;
 	tmp = ret->children;
 	while (tmp != NULL) {
-	    if (tmp->next == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1186]) {
+	      if ((tmp -> next == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 1186\n");
+	      else
+	        fprintf(stderr, "reached bug index 1186\n");
+	    }
+	    if ((!FIXREVERTER[1186] && (tmp -> next == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        ret->last = tmp;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    tmp = tmp->next;
 	}
     }
@@ -4628,8 +6210,23 @@ xmlGetLineNoInternal(const xmlNode *node, int depth)
 	        result = xmlGetLineNoInternal(node->children, depth + 1);
 	    else if (node->next != NULL)
 	        result = xmlGetLineNoInternal(node->next, depth + 1);
-	    else if (node->prev != NULL)
+	    else 
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1188]) {
+	      if ((node -> prev != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1188\n");
+	      else
+	        fprintf(stderr, "reached bug index 1188\n");
+	    }
+	    if ((!FIXREVERTER[1188] && (node -> prev != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        result = xmlGetLineNoInternal(node->prev, depth + 1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
 	if ((result == -1) || (result == 65535))
 	    result = (long) node->line;
@@ -4922,7 +6519,22 @@ xmlNodePtr
 xmlDocGetRootElement(const xmlDoc *doc) {
     xmlNodePtr ret;
 
-    if (doc == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1197]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1197\n");
+      else
+        fprintf(stderr, "reached bug index 1197\n");
+    }
+    if ((!FIXREVERTER[1197] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = doc->children;
     while (ret != NULL) {
 	if (ret->type == XML_ELEMENT_NODE)
@@ -5214,7 +6826,22 @@ xmlNodeSetBase(xmlNodePtr cur, const xmlChar* uri) {
     xmlNsPtr ns;
     xmlChar* fixed;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1206]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1206\n");
+      else
+        fprintf(stderr, "reached bug index 1206\n");
+    }
+    if ((!FIXREVERTER[1206] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     switch(cur->type) {
         case XML_TEXT_NODE:
         case XML_CDATA_SECTION_NODE:
@@ -5254,8 +6881,23 @@ xmlNodeSetBase(xmlNodePtr cur, const xmlChar* uri) {
     }
 
     ns = xmlSearchNsByHref(cur->doc, cur, XML_XML_NAMESPACE);
-    if (ns == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1207]) {
+      if ((ns == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1207\n");
+      else
+        fprintf(stderr, "reached bug index 1207\n");
+    }
+    if ((!FIXREVERTER[1207] && (ns == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     fixed = xmlPathToURI(uri);
     if (fixed != NULL) {
 	xmlSetNsProp(cur, ns, BAD_CAST "base", fixed);
@@ -5292,10 +6934,39 @@ xmlNodeGetBase(const xmlDoc *doc, const xmlNode *cur) {
         return(NULL);
     if ((cur != NULL) && (cur->type == XML_NAMESPACE_DECL))
         return(NULL);
-    if (doc == NULL) doc = cur->doc;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1208]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1208\n");
+      else
+        fprintf(stderr, "reached bug index 1208\n");
+    }
+    if ((!FIXREVERTER[1208] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) doc = cur->doc;
+    #ifdef FRCOV
+    }
+    #endif
     if ((doc != NULL) && (doc->type == XML_HTML_DOCUMENT_NODE)) {
         cur = doc->children;
-	while ((cur != NULL) && (cur->name != NULL)) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1209])
+	  fprintf(stderr, "reached bug index 1209\n");
+	while ((FIXREVERTER[1209] && (cur != (void *) 0 )) || (!FIXREVERTER[1209] && (cur != (void *) 0 && cur -> name != (void *) 0 ))
+	#else
+	while (cur != (void *) 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(cur -> name != (void *) 0 ))
+	    fprintf(stderr, "triggered bug index 1209\n");
+	  #endif
+	
 	    if (cur->type != XML_ELEMENT_NODE) {
 	        cur = cur->next;
 		continue;
@@ -5313,6 +6984,9 @@ xmlNodeGetBase(const xmlDoc *doc, const xmlNode *cur) {
 	    }
 	    cur = cur->next;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	return(NULL);
     }
     while (cur != NULL) {
@@ -5346,8 +7020,23 @@ xmlNodeGetBase(const xmlDoc *doc, const xmlNode *cur) {
 	cur = cur->parent;
     }
     if ((doc != NULL) && (doc->URL != NULL)) {
-	if (oldbase == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1210]) {
+	  if ((oldbase == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1210\n");
+	  else
+	    fprintf(stderr, "reached bug index 1210\n");
+	}
+	if ((!FIXREVERTER[1210] && (oldbase == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(xmlStrdup(doc->URL));
+	    #ifdef FRCOV
+	    }
+	    #endif
 	newbase = xmlBuildURI(oldbase, doc->URL);
 	xmlFree(oldbase);
 	return(newbase);
@@ -5399,7 +7088,22 @@ xmlNodeBufGetContent(xmlBufferPtr buffer, const xmlNode *cur)
 int
 xmlBufGetNodeContent(xmlBufPtr buf, const xmlNode *cur)
 {
-    if ((cur == NULL) || (buf == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1213]) {
+      if ((cur == (void *) 0 || buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1213\n");
+      else
+        fprintf(stderr, "reached bug index 1213\n");
+    }
+    if ((!FIXREVERTER[1213] && (cur == (void *) 0 || buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     switch (cur->type) {
         case XML_CDATA_SECTION_NODE:
         case XML_TEXT_NODE:
@@ -5441,8 +7145,23 @@ xmlBufGetNodeContent(xmlBufPtr buf, const xmlNode *cur)
 
                     do {
                         tmp = tmp->parent;
-                        if (tmp == NULL)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1214]) {
+                          if ((tmp == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1214\n");
+                          else
+                            fprintf(stderr, "reached bug index 1214\n");
+                        }
+                        if ((!FIXREVERTER[1214] && (tmp == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             break;
+                            #ifdef FRCOV
+                            }
+                            #endif
                         if (tmp == cur) {
                             tmp = NULL;
                             break;
@@ -5478,8 +7197,23 @@ xmlBufGetNodeContent(xmlBufPtr buf, const xmlNode *cur)
 
                 /* lookup entity declaration */
                 ent = xmlGetDocEntity(cur->doc, cur->name);
-                if (ent == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1215]) {
+                  if ((ent == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1215\n");
+                  else
+                    fprintf(stderr, "reached bug index 1215\n");
+                }
+                if ((!FIXREVERTER[1215] && (ent == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return(-1);
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 /* an entity content can be any "well balanced chunk",
                  * i.e. the result of the content [43] production:
@@ -5540,8 +7274,23 @@ xmlBufGetNodeContent(xmlBufPtr buf, const xmlNode *cur)
 xmlChar *
 xmlNodeGetContent(const xmlNode *cur)
 {
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1216]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1216\n");
+      else
+        fprintf(stderr, "reached bug index 1216\n");
+    }
+    if ((!FIXREVERTER[1216] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     switch (cur->type) {
         case XML_DOCUMENT_FRAG_NODE:
         case XML_ELEMENT_NODE:{
@@ -5549,8 +7298,23 @@ xmlNodeGetContent(const xmlNode *cur)
                 xmlChar *ret;
 
                 buf = xmlBufCreateSize(64);
-                if (buf == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1217]) {
+                  if ((buf == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1217\n");
+                  else
+                    fprintf(stderr, "reached bug index 1217\n");
+                }
+                if ((!FIXREVERTER[1217] && (buf == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return (NULL);
+                    #ifdef FRCOV
+                    }
+                    #endif
 		xmlBufGetNodeContent(buf, cur);
                 ret = xmlBufDetach(buf);
                 xmlBufFree(buf);
@@ -5570,12 +7334,42 @@ xmlNodeGetContent(const xmlNode *cur)
 
                 /* lookup entity declaration */
                 ent = xmlGetDocEntity(cur->doc, cur->name);
-                if (ent == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1218]) {
+                  if ((ent == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1218\n");
+                  else
+                    fprintf(stderr, "reached bug index 1218\n");
+                }
+                if ((!FIXREVERTER[1218] && (ent == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return (NULL);
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 buf = xmlBufCreate();
-                if (buf == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1219]) {
+                  if ((buf == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1219\n");
+                  else
+                    fprintf(stderr, "reached bug index 1219\n");
+                }
+                if ((!FIXREVERTER[1219] && (buf == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return (NULL);
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 xmlBufGetNodeContent(buf, cur);
 
@@ -5599,8 +7393,23 @@ xmlNodeGetContent(const xmlNode *cur)
 	    xmlChar *ret;
 
 	    buf = xmlBufCreate();
-	    if (buf == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1220]) {
+	      if ((buf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1220\n");
+	      else
+	        fprintf(stderr, "reached bug index 1220\n");
+	    }
+	    if ((!FIXREVERTER[1220] && (buf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (NULL);
+		#ifdef FRCOV
+		}
+		#endif
 
 	    xmlBufGetNodeContent(buf, (xmlNodePtr) cur);
 
@@ -5644,13 +7453,28 @@ xmlNodeGetContent(const xmlNode *cur)
  */
 void
 xmlNodeSetContent(xmlNodePtr cur, const xmlChar *content) {
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1221]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1221\n");
+      else
+        fprintf(stderr, "reached bug index 1221\n");
+    }
+    if ((!FIXREVERTER[1221] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNodeSetContent : node == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     switch (cur->type) {
         case XML_DOCUMENT_FRAG_NODE:
         case XML_ELEMENT_NODE:
@@ -5795,14 +7619,44 @@ xmlNodeSetContentLen(xmlNodePtr cur, const xmlChar *content, int len) {
  */
 void
 xmlNodeAddContentLen(xmlNodePtr cur, const xmlChar *content, int len) {
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1223]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1223\n");
+      else
+        fprintf(stderr, "reached bug index 1223\n");
+    }
+    if ((!FIXREVERTER[1223] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNodeAddContentLen : node == NULL\n");
 #endif
 	return;
     }
-    if (len <= 0) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1224]) {
+      if ((len <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1224\n");
+      else
+        fprintf(stderr, "reached bug index 1224\n");
+    }
+    if ((!FIXREVERTER[1224] && (len <= 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     switch (cur->type) {
         case XML_DOCUMENT_FRAG_NODE:
         case XML_ELEMENT_NODE: {
@@ -5872,14 +7726,44 @@ void
 xmlNodeAddContent(xmlNodePtr cur, const xmlChar *content) {
     int len;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1225]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1225\n");
+      else
+        fprintf(stderr, "reached bug index 1225\n");
+    }
+    if ((!FIXREVERTER[1225] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNodeAddContent : node == NULL\n");
 #endif
 	return;
     }
-    if (content == NULL) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1226]) {
+      if ((content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1226\n");
+      else
+        fprintf(stderr, "reached bug index 1226\n");
+    }
+    if ((!FIXREVERTER[1226] && (content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     len = xmlStrlen(content);
     xmlNodeAddContentLen(cur, content, len);
 }
@@ -5894,8 +7778,38 @@ xmlNodeAddContent(xmlNodePtr cur, const xmlChar *content) {
  */
 xmlNodePtr
 xmlTextMerge(xmlNodePtr first, xmlNodePtr second) {
-    if (first == NULL) return(second);
-    if (second == NULL) return(first);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1227]) {
+      if ((first == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1227\n");
+      else
+        fprintf(stderr, "reached bug index 1227\n");
+    }
+    if ((!FIXREVERTER[1227] && (first == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(second);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1228]) {
+      if ((second == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1228\n");
+      else
+        fprintf(stderr, "reached bug index 1228\n");
+    }
+    if ((!FIXREVERTER[1228] && (second == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(first);
+    #ifdef FRCOV
+    }
+    #endif
     if (first->type != XML_TEXT_NODE) return(first);
     if (second->type != XML_TEXT_NODE) return(first);
     if (second->name != first->name)
@@ -5937,10 +7851,25 @@ xmlGetNsList(const xmlDoc *doc ATTRIBUTE_UNUSED, const xmlNode *node)
                     ret =
                         (xmlNsPtr *) xmlMalloc((maxns + 1) *
                                                sizeof(xmlNsPtr));
-                    if (ret == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1229]) {
+                      if ((ret == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1229\n");
+                      else
+                        fprintf(stderr, "reached bug index 1229\n");
+                    }
+                    if ((!FIXREVERTER[1229] && (ret == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 			xmlTreeErrMemory("getting namespace list");
                         return (NULL);
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret[nbns] = NULL;
                 }
                 for (i = 0; i < nbns; i++) {
@@ -5955,10 +7884,25 @@ xmlGetNsList(const xmlDoc *doc ATTRIBUTE_UNUSED, const xmlNode *node)
                                                       (maxns +
                                                        1) *
                                                       sizeof(xmlNsPtr));
-                        if (ret == NULL) {
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1230]) {
+                          if ((ret == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1230\n");
+                          else
+                            fprintf(stderr, "reached bug index 1230\n");
+                        }
+                        if ((!FIXREVERTER[1230] && (ret == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        ) {
 			    xmlTreeErrMemory("getting namespace list");
                             return (NULL);
                         }
+                        #ifdef FRCOV
+                        }
+                        #endif
                     }
                     ret[nbns++] = cur;
                     ret[nbns] = NULL;
@@ -5984,18 +7928,48 @@ xmlGetNsList(const xmlDoc *doc ATTRIBUTE_UNUSED, const xmlNode *node)
 static xmlNsPtr
 xmlTreeEnsureXMLDecl(xmlDocPtr doc)
 {
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1231]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1231\n");
+      else
+        fprintf(stderr, "reached bug index 1231\n");
+    }
+    if ((!FIXREVERTER[1231] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (doc->oldNs != NULL)
 	return (doc->oldNs);
     {
 	xmlNsPtr ns;
 	ns = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));
-	if (ns == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1232]) {
+	  if ((ns == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1232\n");
+	  else
+	    fprintf(stderr, "reached bug index 1232\n");
+	}
+	if ((!FIXREVERTER[1232] && (ns == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlTreeErrMemory(
 		"allocating the XML namespace");
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(ns, 0, sizeof(xmlNs));
 	ns->type = XML_LOCAL_NAMESPACE;
 	ns->href = xmlStrdup(XML_XML_NAMESPACE);
@@ -6037,10 +8011,25 @@ xmlSearchNs(xmlDocPtr doc, xmlNodePtr node, const xmlChar *nameSpace) {
 	     * node element.
 	     */
 	    cur = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));
-	    if (cur == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1233]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1233\n");
+	      else
+	        fprintf(stderr, "reached bug index 1233\n");
+	    }
+	    if ((!FIXREVERTER[1233] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlTreeErrMemory("searching namespace");
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memset(cur, 0, sizeof(xmlNs));
 	    cur->type = XML_LOCAL_NAMESPACE;
 	    cur->href = xmlStrdup(XML_XML_NAMESPACE);
@@ -6051,8 +8040,23 @@ xmlSearchNs(xmlDocPtr doc, xmlNodePtr node, const xmlChar *nameSpace) {
 	}
 	if (doc == NULL) {
 	    doc = node->doc;
-	    if (doc == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1234]) {
+	      if ((doc == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1234\n");
+	      else
+	        fprintf(stderr, "reached bug index 1234\n");
+	    }
+	    if ((!FIXREVERTER[1234] && (doc == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	/*
 	* Return the XML namespace declaration held by the doc.
@@ -6170,10 +8174,25 @@ xmlSearchNsByHref(xmlDocPtr doc, xmlNodePtr node, const xmlChar * href)
              * node element.
              */
             cur = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));
-            if (cur == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1235]) {
+              if ((cur == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1235\n");
+              else
+                fprintf(stderr, "reached bug index 1235\n");
+            }
+            if ((!FIXREVERTER[1235] && (cur == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
 		xmlTreeErrMemory("searching namespace");
                 return (NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
             memset(cur, 0, sizeof(xmlNs));
             cur->type = XML_LOCAL_NAMESPACE;
             cur->href = xmlStrdup(XML_XML_NAMESPACE);
@@ -6184,8 +8203,23 @@ xmlSearchNsByHref(xmlDocPtr doc, xmlNodePtr node, const xmlChar * href)
         }
 	if (doc == NULL) {
 	    doc = node->doc;
-	    if (doc == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1236]) {
+	      if ((doc == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1236\n");
+	      else
+	        fprintf(stderr, "reached bug index 1236\n");
+	    }
+	    if ((!FIXREVERTER[1236] && (doc == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	/*
 	* Return the XML namespace declaration held by the doc.
@@ -6549,8 +8583,23 @@ xmlGetPropNodeInternal(const xmlNode *node, const xmlChar *name,
 	    tmpstr = xmlStrdup(node->ns->prefix);
 	    tmpstr = xmlStrcat(tmpstr, BAD_CAST ":");
 	    tmpstr = xmlStrcat(tmpstr, node->name);
-	    if (tmpstr == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1249]) {
+	      if ((tmpstr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1249\n");
+	      else
+	        fprintf(stderr, "reached bug index 1249\n");
+	    }
+	    if ((!FIXREVERTER[1249] && (tmpstr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    elemQName = tmpstr;
 	} else
 	    elemQName = (xmlChar *) node->name;
@@ -6572,11 +8621,26 @@ xmlGetPropNodeInternal(const xmlNode *node, const xmlChar *name,
 	    * ns-decls corresponding to @nsName.
 	    */
 	    nsList = xmlGetNsList(node->doc, node);
-	    if (nsList == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1250]) {
+	      if ((nsList == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1250\n");
+	      else
+	        fprintf(stderr, "reached bug index 1250\n");
+	    }
+	    if ((!FIXREVERTER[1250] && (nsList == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if (tmpstr != NULL)
 		    xmlFree(tmpstr);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    cur = nsList;
 	    while (*cur != NULL) {
 		if (xmlStrEqual((*cur)->href, nsName)) {
@@ -6610,8 +8674,23 @@ xmlGetPropNodeInternal(const xmlNode *node, const xmlChar *name,
 static xmlChar*
 xmlGetPropNodeValueInternal(const xmlAttr *prop)
 {
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1251]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1251\n");
+      else
+        fprintf(stderr, "reached bug index 1251\n");
+    }
+    if ((!FIXREVERTER[1251] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (prop->type == XML_ATTRIBUTE_NODE) {
 	/*
 	* Note that we return at least the empty string.
@@ -6735,8 +8814,23 @@ xmlGetProp(const xmlNode *node, const xmlChar *name) {
     xmlAttrPtr prop;
 
     prop = xmlHasProp(node, name);
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1252]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1252\n");
+      else
+        fprintf(stderr, "reached bug index 1252\n");
+    }
+    if ((!FIXREVERTER[1252] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlGetPropNodeValueInternal(prop));
 }
 
@@ -6760,8 +8854,23 @@ xmlGetNoNsProp(const xmlNode *node, const xmlChar *name) {
     xmlAttrPtr prop;
 
     prop = xmlGetPropNodeInternal(node, name, NULL, xmlCheckDTD);
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1253]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1253\n");
+      else
+        fprintf(stderr, "reached bug index 1253\n");
+    }
+    if ((!FIXREVERTER[1253] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlGetPropNodeValueInternal(prop));
 }
 
@@ -6785,8 +8894,23 @@ xmlGetNsProp(const xmlNode *node, const xmlChar *name, const xmlChar *nameSpace)
     xmlAttrPtr prop;
 
     prop = xmlGetPropNodeInternal(node, name, nameSpace, xmlCheckDTD);
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1254]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1254\n");
+      else
+        fprintf(stderr, "reached bug index 1254\n");
+    }
+    if ((!FIXREVERTER[1254] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlGetPropNodeValueInternal(prop));
 }
 
@@ -6921,8 +9045,23 @@ xmlSetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name,
 	    tmp = prop->children;
 	    while (tmp != NULL) {
 		tmp->parent = (xmlNodePtr) prop;
-		if (tmp->next == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1257]) {
+		  if ((tmp -> next == (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 1257\n");
+		  else
+		    fprintf(stderr, "reached bug index 1257\n");
+		}
+		if ((!FIXREVERTER[1257] && (tmp -> next == (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    prop->last = tmp;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		tmp = tmp->next;
 	    }
 	}
@@ -6947,7 +9086,22 @@ xmlSetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name,
  */
 int
 xmlNodeIsText(const xmlNode *node) {
-    if (node == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1258]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1258\n");
+      else
+        fprintf(stderr, "reached bug index 1258\n");
+    }
+    if ((!FIXREVERTER[1258] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (node->type == XML_TEXT_NODE) return(1);
     return(0);
@@ -6965,12 +9119,42 @@ xmlNodeIsText(const xmlNode *node) {
 int
 xmlIsBlankNode(const xmlNode *node) {
     const xmlChar *cur;
-    if (node == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1259]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1259\n");
+      else
+        fprintf(stderr, "reached bug index 1259\n");
+    }
+    if ((!FIXREVERTER[1259] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((node->type != XML_TEXT_NODE) &&
         (node->type != XML_CDATA_SECTION_NODE))
 	return(0);
-    if (node->content == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1260]) {
+      if ((node -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1260\n");
+      else
+        fprintf(stderr, "reached bug index 1260\n");
+    }
+    if ((!FIXREVERTER[1260] && (node -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
     cur = node->content;
     while (*cur != 0) {
 	if (!IS_BLANK_CH(*cur)) return(0);
@@ -6993,7 +9177,22 @@ xmlIsBlankNode(const xmlNode *node) {
 
 int
 xmlTextConcat(xmlNodePtr node, const xmlChar *content, int len) {
-    if (node == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1261]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1261\n");
+      else
+        fprintf(stderr, "reached bug index 1261\n");
+    }
+    if ((!FIXREVERTER[1261] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((node->type != XML_TEXT_NODE) &&
         (node->type != XML_CDATA_SECTION_NODE) &&
@@ -7014,8 +9213,23 @@ xmlTextConcat(xmlNodePtr node, const xmlChar *content, int len) {
         node->content = xmlStrncat(node->content, content, len);
     }
     node->properties = NULL;
-    if (node->content == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1262]) {
+      if ((node -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1262\n");
+      else
+        fprintf(stderr, "reached bug index 1262\n");
+    }
+    if ((!FIXREVERTER[1262] && (node -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     return(0);
 }
 
@@ -7036,19 +9250,49 @@ xmlBufferCreate(void) {
     xmlBufferPtr ret;
 
     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1263]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1263\n");
+      else
+        fprintf(stderr, "reached bug index 1263\n");
+    }
+    if ((!FIXREVERTER[1263] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("creating buffer");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->use = 0;
     ret->size = xmlDefaultBufferSize;
     ret->alloc = xmlBufferAllocScheme;
     ret->content = (xmlChar *) xmlMallocAtomic(ret->size * sizeof(xmlChar));
-    if (ret->content == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1264]) {
+      if ((ret -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1264\n");
+      else
+        fprintf(stderr, "reached bug index 1264\n");
+    }
+    if ((!FIXREVERTER[1264] && (ret -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("creating buffer");
 	xmlFree(ret);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->content[0] = 0;
     ret->contentIO = NULL;
     return(ret);
@@ -7180,13 +9424,28 @@ xmlBufferSetAllocationScheme(xmlBufferPtr buf,
  */
 void
 xmlBufferFree(xmlBufferPtr buf) {
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1271]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1271\n");
+      else
+        fprintf(stderr, "reached bug index 1271\n");
+    }
+    if ((!FIXREVERTER[1271] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_BUFFER
         xmlGenericError(xmlGenericErrorContext,
 		"xmlBufferFree: buf == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((buf->alloc == XML_BUFFER_ALLOC_IO) &&
         (buf->contentIO != NULL)) {
@@ -7408,14 +9667,44 @@ xmlBufferResize(xmlBufferPtr buf, unsigned int size)
     xmlChar* rebuf = NULL;
     size_t start_buf;
 
-    if (buf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1284]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1284\n");
+      else
+        fprintf(stderr, "reached bug index 1284\n");
+    }
+    if ((!FIXREVERTER[1284] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);
 
     /* Don't resize if we don't have to */
-    if (size < buf->size)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1285]) {
+      if ((size < buf -> size ) && !(0))
+        fprintf(stderr, "triggered bug index 1285\n");
+      else
+        fprintf(stderr, "reached bug index 1285\n");
+    }
+    if ((!FIXREVERTER[1285] && (size < buf -> size ))
+    #else
+    if (0
+    #endif
+    )
         return 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* figure out new size */
     switch (buf->alloc){
@@ -7465,10 +9754,25 @@ xmlBufferResize(xmlBufferPtr buf, unsigned int size)
 	    buf->size += start_buf;
 	} else {
 	    rebuf = (xmlChar *) xmlRealloc(buf->contentIO, start_buf + newSize);
-	    if (rebuf == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1286]) {
+	      if ((rebuf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1286\n");
+	      else
+	        fprintf(stderr, "reached bug index 1286\n");
+	    }
+	    if ((!FIXREVERTER[1286] && (rebuf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlTreeErrMemory("growing buffer");
 		return 0;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf->contentIO = rebuf;
 	    buf->content = rebuf + start_buf;
 	}
@@ -7490,10 +9794,25 @@ xmlBufferResize(xmlBufferPtr buf, unsigned int size)
 		rebuf[buf->use] = 0;
 	    }
 	}
-	if (rebuf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1287]) {
+	  if ((rebuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1287\n");
+	  else
+	    fprintf(stderr, "reached bug index 1287\n");
+	}
+	if ((!FIXREVERTER[1287] && (rebuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlTreeErrMemory("growing buffer");
 	    return 0;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	buf->content = rebuf;
     }
     buf->size = newSize;
@@ -7517,9 +9836,24 @@ int
 xmlBufferAdd(xmlBufferPtr buf, const xmlChar *str, int len) {
     unsigned int needSize;
 
-    if ((str == NULL) || (buf == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1288]) {
+      if ((str == (void *) 0 || buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1288\n");
+      else
+        fprintf(stderr, "reached bug index 1288\n");
+    }
+    if ((!FIXREVERTER[1288] && (str == (void *) 0 || buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return -1;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;
     if (len < -1) {
 #ifdef DEBUG_BUFFER
@@ -7528,13 +9862,73 @@ xmlBufferAdd(xmlBufferPtr buf, const xmlChar *str, int len) {
 #endif
 	return -1;
     }
-    if (len == 0) return 0;
-
-    if (len < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1289]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1289\n");
+      else
+        fprintf(stderr, "reached bug index 1289\n");
+    }
+    if ((!FIXREVERTER[1289] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1290]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1290\n");
+      else
+        fprintf(stderr, "reached bug index 1290\n");
+    }
+    if ((!FIXREVERTER[1290] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
         len = xmlStrlen(str);
-
-    if (len < 0) return -1;
-    if (len == 0) return 0;
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1291]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1291\n");
+      else
+        fprintf(stderr, "reached bug index 1291\n");
+    }
+    if ((!FIXREVERTER[1291] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1292]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1292\n");
+      else
+        fprintf(stderr, "reached bug index 1292\n");
+    }
+    if ((!FIXREVERTER[1292] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
 
     needSize = buf->use + len + 2;
     if (needSize > buf->size){
diff --git a/trio.c b/trio.c
old mode 100644
new mode 100755
diff --git a/trio.h b/trio.h
old mode 100644
new mode 100755
diff --git a/triodef.h b/triodef.h
old mode 100644
new mode 100755
diff --git a/trionan.c b/trionan.c
old mode 100644
new mode 100755
diff --git a/trionan.h b/trionan.h
old mode 100644
new mode 100755
diff --git a/triop.h b/triop.h
old mode 100644
new mode 100755
diff --git a/triostr.c b/triostr.c
old mode 100644
new mode 100755
diff --git a/triostr.h b/triostr.h
old mode 100644
new mode 100755
diff --git a/uri.c b/uri.c
old mode 100644
new mode 100755
index 9772aafa..de21f348
--- a/uri.c
+++ b/uri.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /**
  * uri.c: set of generic URI related routines
  *
@@ -208,8 +212,23 @@ static int
 xmlParse3986Scheme(xmlURIPtr uri, const char **str) {
     const char *cur;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3724]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3724\n");
+      else
+        fprintf(stderr, "reached bug index 3724\n");
+    }
+    if ((!FIXREVERTER[3724] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     cur = *str;
     if (!ISA_ALPHA(cur))
@@ -245,8 +264,23 @@ xmlParse3986Fragment(xmlURIPtr uri, const char **str)
 {
     const char *cur;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3725]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3725\n");
+      else
+        fprintf(stderr, "reached bug index 3725\n");
+    }
+    if ((!FIXREVERTER[3725] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = *str;
 
@@ -282,8 +316,23 @@ xmlParse3986Query(xmlURIPtr uri, const char **str)
 {
     const char *cur;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3726]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3726\n");
+      else
+        fprintf(stderr, "reached bug index 3726\n");
+    }
+    if ((!FIXREVERTER[3726] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = *str;
 
@@ -330,13 +379,43 @@ xmlParse3986Port(xmlURIPtr uri, const char **str)
     if (ISA_DIGIT(cur)) {
 	while (ISA_DIGIT(cur)) {
 	    port = port * 10 + (*cur - '0');
-            if (port > 99999999)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3727]) {
+              if ((port > 99999999 ) && !(0))
+                fprintf(stderr, "triggered bug index 3727\n");
+              else
+                fprintf(stderr, "reached bug index 3727\n");
+            }
+            if ((!FIXREVERTER[3727] && (port > 99999999 ))
+            #else
+            if (0
+            #endif
+            )
                 port = 99999999;
+                #ifdef FRCOV
+                }
+                #endif
 
 	    cur++;
 	}
-	if (uri != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3728]) {
+	  if ((uri != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3728\n");
+	  else
+	    fprintf(stderr, "reached bug index 3728\n");
+	}
+	if ((!FIXREVERTER[3728] && (uri != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    uri->port = port;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	*str = cur;
 	return(0);
     }
@@ -762,8 +841,23 @@ xmlParse3986HierPart(xmlURIPtr uri, const char **str)
         cur += 2;
 	ret = xmlParse3986Authority(uri, &cur);
 	if (ret != 0) return(ret);
-	if (uri->server == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3738]) {
+	  if ((uri -> server == (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3738\n");
+	  else
+	    fprintf(stderr, "reached bug index 3738\n");
+	}
+	if ((!FIXREVERTER[3738] && (uri -> server == (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    uri->port = -1;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ret = xmlParse3986PathAbEmpty(uri, &cur);
 	if (ret != 0) return(ret);
 	*str = cur;
@@ -900,8 +994,23 @@ static int
 xmlParse3986URIReference(xmlURIPtr uri, const char *str) {
     int ret;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3752]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3752\n");
+      else
+        fprintf(stderr, "reached bug index 3752\n");
+    }
+    if ((!FIXREVERTER[3752] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     xmlCleanURI(uri);
 
     /*
@@ -935,8 +1044,23 @@ xmlParseURI(const char *str) {
     xmlURIPtr uri;
     int ret;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3754]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3754\n");
+      else
+        fprintf(stderr, "reached bug index 3754\n");
+    }
+    if ((!FIXREVERTER[3754] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     uri = xmlCreateURI();
     if (uri != NULL) {
 	ret = xmlParse3986URIReference(uri, str);
@@ -981,8 +1105,23 @@ xmlParseURIRaw(const char *str, int raw) {
     xmlURIPtr uri;
     int ret;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3755]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3755\n");
+      else
+        fprintf(stderr, "reached bug index 3755\n");
+    }
+    if ((!FIXREVERTER[3755] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     uri = xmlCreateURI();
     if (uri != NULL) {
         if (raw) {
@@ -1015,10 +1154,25 @@ xmlCreateURI(void) {
     xmlURIPtr ret;
 
     ret = (xmlURIPtr) xmlMalloc(sizeof(xmlURI));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3756]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3756\n");
+      else
+        fprintf(stderr, "reached bug index 3756\n");
+    }
+    if ((!FIXREVERTER[3756] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlURIErrMemory("creating URI structure\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlURI));
     return(ret);
 }
@@ -1040,10 +1194,25 @@ xmlSaveUriRealloc(xmlChar *ret, int *max) {
     }
     tmp = *max * 2;
     temp = (xmlChar *) xmlRealloc(ret, (tmp + 1));
-    if (temp == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3757]) {
+      if ((temp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3757\n");
+      else
+        fprintf(stderr, "reached bug index 3757\n");
+    }
+    if ((!FIXREVERTER[3757] && (temp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlURIErrMemory("saving URI\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     *max = tmp;
     return(temp);
 }
@@ -1064,15 +1233,45 @@ xmlSaveUri(xmlURIPtr uri) {
     int len;
     int max;
 
-    if (uri == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3758]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3758\n");
+      else
+        fprintf(stderr, "reached bug index 3758\n");
+    }
+    if ((!FIXREVERTER[3758] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
 
     max = 80;
     ret = (xmlChar *) xmlMallocAtomic((max + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3759]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3759\n");
+      else
+        fprintf(stderr, "reached bug index 3759\n");
+    }
+    if ((!FIXREVERTER[3759] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlURIErrMemory("saving URI\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     len = 0;
 
     if (uri->scheme != NULL) {
@@ -1080,14 +1279,44 @@ xmlSaveUri(xmlURIPtr uri) {
 	while (*p != 0) {
 	    if (len >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3760]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3760\n");
+                  else
+                    fprintf(stderr, "reached bug index 3760\n");
+                }
+                if ((!FIXREVERTER[3760] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
 		ret = temp;
 	    }
 	    ret[len++] = *p++;
 	}
 	if (len >= max) {
             temp = xmlSaveUriRealloc(ret, &max);
-            if (temp == NULL) goto mem_error;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3761]) {
+              if ((temp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3761\n");
+              else
+                fprintf(stderr, "reached bug index 3761\n");
+            }
+            if ((!FIXREVERTER[3761] && (temp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
             ret = temp;
 	}
 	ret[len++] = ':';
@@ -1097,7 +1326,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	while (*p != 0) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3762]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3762\n");
+                  else
+                    fprintf(stderr, "reached bug index 3762\n");
+                }
+                if ((!FIXREVERTER[3762] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    if (IS_RESERVED(*(p)) || IS_UNRESERVED(*(p)))
@@ -1114,7 +1358,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	if ((uri->server != NULL) || (uri->port == -1)) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3763]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3763\n");
+                  else
+                    fprintf(stderr, "reached bug index 3763\n");
+                }
+                if ((!FIXREVERTER[3763] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '/';
@@ -1124,7 +1383,22 @@ xmlSaveUri(xmlURIPtr uri) {
 		while (*p != 0) {
 		    if (len + 3 >= max) {
                         temp = xmlSaveUriRealloc(ret, &max);
-                        if (temp == NULL) goto mem_error;
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[3764]) {
+                          if ((temp == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 3764\n");
+                          else
+                            fprintf(stderr, "reached bug index 3764\n");
+                        }
+                        if ((!FIXREVERTER[3764] && (temp == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        ) goto mem_error;
+                        #ifdef FRCOV
+                        }
+                        #endif
                         ret = temp;
 		    }
 		    if ((IS_UNRESERVED(*(p))) ||
@@ -1143,7 +1417,22 @@ xmlSaveUri(xmlURIPtr uri) {
 		}
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3765]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3765\n");
+                      else
+                        fprintf(stderr, "reached bug index 3765\n");
+                    }
+                    if ((!FIXREVERTER[3765] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		ret[len++] = '@';
@@ -1153,7 +1442,22 @@ xmlSaveUri(xmlURIPtr uri) {
 		while (*p != 0) {
 		    if (len >= max) {
 			temp = xmlSaveUriRealloc(ret, &max);
-			if (temp == NULL) goto mem_error;
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3766]) {
+			  if ((temp == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 3766\n");
+			  else
+			    fprintf(stderr, "reached bug index 3766\n");
+			}
+			if ((!FIXREVERTER[3766] && (temp == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) goto mem_error;
+			#ifdef FRCOV
+			}
+			#endif
 			ret = temp;
 		    }
 		    ret[len++] = *p++;
@@ -1161,7 +1465,22 @@ xmlSaveUri(xmlURIPtr uri) {
 		if (uri->port > 0) {
 		    if (len + 10 >= max) {
 			temp = xmlSaveUriRealloc(ret, &max);
-			if (temp == NULL) goto mem_error;
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3767]) {
+			  if ((temp == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 3767\n");
+			  else
+			    fprintf(stderr, "reached bug index 3767\n");
+			}
+			if ((!FIXREVERTER[3767] && (temp == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) goto mem_error;
+			#ifdef FRCOV
+			}
+			#endif
 			ret = temp;
 		    }
 		    len += snprintf((char *) &ret[len], max - len, ":%d", uri->port);
@@ -1170,7 +1489,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	} else if (uri->authority != NULL) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3768]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3768\n");
+                  else
+                    fprintf(stderr, "reached bug index 3768\n");
+                }
+                if ((!FIXREVERTER[3768] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '/';
@@ -1179,7 +1513,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3769]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3769\n");
+                      else
+                        fprintf(stderr, "reached bug index 3769\n");
+                    }
+                    if ((!FIXREVERTER[3769] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		if ((IS_UNRESERVED(*(p))) ||
@@ -1198,7 +1547,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	} else if (uri->scheme != NULL) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3770]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3770\n");
+                  else
+                    fprintf(stderr, "reached bug index 3770\n");
+                }
+                if ((!FIXREVERTER[3770] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	}
@@ -1216,7 +1580,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	        (xmlStrEqual(BAD_CAST uri->scheme, BAD_CAST "file"))) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3771]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3771\n");
+                      else
+                        fprintf(stderr, "reached bug index 3771\n");
+                    }
+                    if ((!FIXREVERTER[3771] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		ret[len++] = *p++;
@@ -1226,7 +1605,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3772]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3772\n");
+                      else
+                        fprintf(stderr, "reached bug index 3772\n");
+                    }
+                    if ((!FIXREVERTER[3772] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		if ((IS_UNRESERVED(*(p))) || ((*(p) == '/')) ||
@@ -1246,7 +1640,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	if (uri->query_raw != NULL) {
 	    if (len + 1 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3773]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3773\n");
+                  else
+                    fprintf(stderr, "reached bug index 3773\n");
+                }
+                if ((!FIXREVERTER[3773] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '?';
@@ -1254,7 +1663,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 1 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3774]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3774\n");
+                      else
+                        fprintf(stderr, "reached bug index 3774\n");
+                    }
+                    if ((!FIXREVERTER[3774] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		ret[len++] = *p++;
@@ -1262,7 +1686,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	} else if (uri->query != NULL) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3775]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3775\n");
+                  else
+                    fprintf(stderr, "reached bug index 3775\n");
+                }
+                if ((!FIXREVERTER[3775] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '?';
@@ -1270,7 +1709,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3776]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3776\n");
+                      else
+                        fprintf(stderr, "reached bug index 3776\n");
+                    }
+                    if ((!FIXREVERTER[3776] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		if ((IS_UNRESERVED(*(p))) || (IS_RESERVED(*(p))))
@@ -1288,7 +1742,22 @@ xmlSaveUri(xmlURIPtr uri) {
     if (uri->fragment != NULL) {
 	if (len + 3 >= max) {
             temp = xmlSaveUriRealloc(ret, &max);
-            if (temp == NULL) goto mem_error;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3777]) {
+              if ((temp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3777\n");
+              else
+                fprintf(stderr, "reached bug index 3777\n");
+            }
+            if ((!FIXREVERTER[3777] && (temp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
             ret = temp;
 	}
 	ret[len++] = '#';
@@ -1296,7 +1765,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	while (*p != 0) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3778]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3778\n");
+                  else
+                    fprintf(stderr, "reached bug index 3778\n");
+                }
+                if ((!FIXREVERTER[3778] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    if ((IS_UNRESERVED(*(p))) || (IS_RESERVED(*(p))))
@@ -1312,7 +1796,22 @@ xmlSaveUri(xmlURIPtr uri) {
     }
     if (len >= max) {
         temp = xmlSaveUriRealloc(ret, &max);
-        if (temp == NULL) goto mem_error;
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3779]) {
+          if ((temp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3779\n");
+          else
+            fprintf(stderr, "reached bug index 3779\n");
+        }
+        if ((!FIXREVERTER[3779] && (temp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
         ret = temp;
     }
     ret[len] = 0;
@@ -1349,7 +1848,22 @@ xmlPrintURI(FILE *stream, xmlURIPtr uri) {
  */
 static void
 xmlCleanURI(xmlURIPtr uri) {
-    if (uri == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3780]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3780\n");
+      else
+        fprintf(stderr, "reached bug index 3780\n");
+    }
+    if ((!FIXREVERTER[3780] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (uri->scheme != NULL) xmlFree(uri->scheme);
     uri->scheme = NULL;
@@ -1379,7 +1893,22 @@ xmlCleanURI(xmlURIPtr uri) {
  */
 void
 xmlFreeURI(xmlURIPtr uri) {
-    if (uri == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3781]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3781\n");
+      else
+        fprintf(stderr, "reached bug index 3781\n");
+    }
+    if ((!FIXREVERTER[3781] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (uri->scheme != NULL) xmlFree(uri->scheme);
     if (uri->server != NULL) xmlFree(uri->server);
@@ -1414,8 +1943,23 @@ int
 xmlNormalizeURIPath(char *path) {
     char *cur, *out;
 
-    if (path == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3782]) {
+      if ((path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3782\n");
+      else
+        fprintf(stderr, "reached bug index 3782\n");
+    }
+    if ((!FIXREVERTER[3782] && (path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     /* Skip all initial "/" chars.  We want to get to the beginning of the
      * first non-empty segment.
@@ -1615,17 +2159,47 @@ xmlURIUnescapeString(const char *str, int len, char *target) {
     char *ret, *out;
     const char *in;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3783]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3783\n");
+      else
+        fprintf(stderr, "reached bug index 3783\n");
+    }
+    if ((!FIXREVERTER[3783] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (len <= 0) len = strlen(str);
     if (len < 0) return(NULL);
 
     if (target == NULL) {
 	ret = (char *) xmlMallocAtomic(len + 1);
-	if (ret == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3786]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3786\n");
+	  else
+	    fprintf(stderr, "reached bug index 3786\n");
+	}
+	if ((!FIXREVERTER[3786] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             xmlURIErrMemory("unescaping URI value\n");
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else
 	ret = target;
     in = str;
@@ -1675,8 +2249,23 @@ xmlURIEscapeStr(const xmlChar *str, const xmlChar *list) {
     const xmlChar *in;
     int len, out;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3787]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3787\n");
+      else
+        fprintf(stderr, "reached bug index 3787\n");
+    }
+    if ((!FIXREVERTER[3787] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (str[0] == 0)
 	return(xmlStrdup(str));
     len = xmlStrlen(str);
@@ -1684,20 +2273,50 @@ xmlURIEscapeStr(const xmlChar *str, const xmlChar *list) {
 
     len += 20;
     ret = (xmlChar *) xmlMallocAtomic(len);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3788]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3788\n");
+      else
+        fprintf(stderr, "reached bug index 3788\n");
+    }
+    if ((!FIXREVERTER[3788] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlURIErrMemory("escaping URI value\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     in = (const xmlChar *) str;
     out = 0;
     while(*in != 0) {
 	if (len - out <= 3) {
             temp = xmlSaveUriRealloc(ret, &len);
-	    if (temp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3789]) {
+	      if ((temp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3789\n");
+	      else
+	        fprintf(stderr, "reached bug index 3789\n");
+	    }
+	    if ((!FIXREVERTER[3789] && (temp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 xmlURIErrMemory("escaping URI value\n");
 		xmlFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    ret = temp;
 	}
 
@@ -1753,8 +2372,23 @@ xmlURIEscape(const xmlChar * str)
          xmlFreeURI(uri); \
          return NULL; } \
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3790]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3790\n");
+      else
+        fprintf(stderr, "reached bug index 3790\n");
+    }
+    if ((!FIXREVERTER[3790] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     uri = xmlCreateURI();
     if (uri != NULL) {
@@ -1803,8 +2437,23 @@ xmlURIEscape(const xmlChar * str)
     if (uri->server) {
         segment = xmlURIEscapeStr(BAD_CAST uri->server, BAD_CAST "/?;:@");
         NULLCHK(segment)
-		if (uri->user == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3791]) {
+		  if ((uri -> user == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3791\n");
+		  else
+		    fprintf(stderr, "reached bug index 3791\n");
+		}
+		if ((!FIXREVERTER[3791] && (uri -> user == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		ret = xmlStrcat(ret, BAD_CAST "//");
+		#ifdef FRCOV
+		}
+		#endif
         ret = xmlStrcat(ret, segment);
         xmlFree(segment);
     }
@@ -1901,8 +2550,23 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
     else {
 	if (*URI) {
 	    ref = xmlCreateURI();
-	    if (ref == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3792]) {
+	      if ((ref == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3792\n");
+	      else
+	        fprintf(stderr, "reached bug index 3792\n");
+	    }
+	    if ((!FIXREVERTER[3792] && (ref == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto done;
+		#ifdef FRCOV
+		}
+		#endif
 	    ret = xmlParseURIReference(ref, (const char *) URI);
 	}
 	else
@@ -1921,8 +2585,23 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
 	ret = -1;
     else {
 	bas = xmlCreateURI();
-	if (bas == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3794]) {
+	  if ((bas == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3794\n");
+	  else
+	    fprintf(stderr, "reached bug index 3794\n");
+	}
+	if ((!FIXREVERTER[3794] && (bas == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto done;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ret = xmlParseURIReference(bas, (const char *) base);
     }
     if (ret != 0) {
@@ -1930,7 +2609,19 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
 	    val = xmlSaveUri(ref);
 	goto done;
     }
-    if (ref == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3796]) {
+      if ((ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3796\n");
+      else
+        fprintf(stderr, "reached bug index 3796\n");
+    }
+    if ((!FIXREVERTER[3796] && (ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * the base fragment must be ignored
 	 */
@@ -1941,6 +2632,9 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
 	val = xmlSaveUri(bas);
 	goto done;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * 2) If the path component is empty and the scheme, authority, and
@@ -1955,33 +2649,138 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
      *    document.
      */
     res = xmlCreateURI();
-    if (res == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3797]) {
+      if ((res == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3797\n");
+      else
+        fprintf(stderr, "reached bug index 3797\n");
+    }
+    if ((!FIXREVERTER[3797] && (res == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto done;
+	#ifdef FRCOV
+	}
+	#endif
     if ((ref->scheme == NULL) && (ref->path == NULL) &&
 	((ref->authority == NULL) && (ref->server == NULL))) {
-	if (bas->scheme != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3798]) {
+	  if ((bas -> scheme != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3798\n");
+	  else
+	    fprintf(stderr, "reached bug index 3798\n");
+	}
+	if ((!FIXREVERTER[3798] && (bas -> scheme != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->scheme = xmlMemStrdup(bas->scheme);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (bas->authority != NULL)
 	    res->authority = xmlMemStrdup(bas->authority);
 	else if ((bas->server != NULL) || (bas->port == -1)) {
-	    if (bas->server != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3799]) {
+	      if ((bas -> server != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 3799\n");
+	      else
+	        fprintf(stderr, "reached bug index 3799\n");
+	    }
+	    if ((!FIXREVERTER[3799] && (bas -> server != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		res->server = xmlMemStrdup(bas->server);
-	    if (bas->user != NULL)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3800]) {
+	      if ((bas -> user != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 3800\n");
+	      else
+	        fprintf(stderr, "reached bug index 3800\n");
+	    }
+	    if ((!FIXREVERTER[3800] && (bas -> user != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		res->user = xmlMemStrdup(bas->user);
+		#ifdef FRCOV
+		}
+		#endif
 	    res->port = bas->port;
 	}
-	if (bas->path != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3801]) {
+	  if ((bas -> path != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3801\n");
+	  else
+	    fprintf(stderr, "reached bug index 3801\n");
+	}
+	if ((!FIXREVERTER[3801] && (bas -> path != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->path = xmlMemStrdup(bas->path);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (ref->query_raw != NULL)
 	    res->query_raw = xmlMemStrdup (ref->query_raw);
 	else if (ref->query != NULL)
 	    res->query = xmlMemStrdup(ref->query);
 	else if (bas->query_raw != NULL)
 	    res->query_raw = xmlMemStrdup(bas->query_raw);
-	else if (bas->query != NULL)
+	else 
+	#ifdef FRCOV
+	{if (FIXREVERTER[3802]) {
+	  if ((bas -> query != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3802\n");
+	  else
+	    fprintf(stderr, "reached bug index 3802\n");
+	}
+	if ((!FIXREVERTER[3802] && (bas -> query != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->query = xmlMemStrdup(bas->query);
-	if (ref->fragment != NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3803]) {
+	  if ((ref -> fragment != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3803\n");
+	  else
+	    fprintf(stderr, "reached bug index 3803\n");
+	}
+	if ((!FIXREVERTER[3803] && (ref -> fragment != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->fragment = xmlMemStrdup(ref->fragment);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	goto step_7;
     }
 
@@ -1995,15 +2794,60 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
 	val = xmlSaveUri(ref);
 	goto done;
     }
-    if (bas->scheme != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3804]) {
+      if ((bas -> scheme != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3804\n");
+      else
+        fprintf(stderr, "reached bug index 3804\n");
+    }
+    if ((!FIXREVERTER[3804] && (bas -> scheme != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	res->scheme = xmlMemStrdup(bas->scheme);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ref->query_raw != NULL)
 	res->query_raw = xmlMemStrdup(ref->query_raw);
-    else if (ref->query != NULL)
+    else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[3805]) {
+      if ((ref -> query != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3805\n");
+      else
+        fprintf(stderr, "reached bug index 3805\n");
+    }
+    if ((!FIXREVERTER[3805] && (ref -> query != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	res->query = xmlMemStrdup(ref->query);
-    if (ref->fragment != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3806]) {
+      if ((ref -> fragment != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3806\n");
+      else
+        fprintf(stderr, "reached bug index 3806\n");
+    }
+    if ((!FIXREVERTER[3806] && (ref -> fragment != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	res->fragment = xmlMemStrdup(ref->fragment);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * 4) If the authority component is defined, then the reference is a
@@ -2017,21 +2861,81 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
 	    res->authority = xmlMemStrdup(ref->authority);
 	else {
 	    res->server = xmlMemStrdup(ref->server);
-	    if (ref->user != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3807]) {
+	      if ((ref -> user != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 3807\n");
+	      else
+	        fprintf(stderr, "reached bug index 3807\n");
+	    }
+	    if ((!FIXREVERTER[3807] && (ref -> user != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		res->user = xmlMemStrdup(ref->user);
+		#ifdef FRCOV
+		}
+		#endif
             res->port = ref->port;
 	}
-	if (ref->path != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3808]) {
+	  if ((ref -> path != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3808\n");
+	  else
+	    fprintf(stderr, "reached bug index 3808\n");
+	}
+	if ((!FIXREVERTER[3808] && (ref -> path != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->path = xmlMemStrdup(ref->path);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	goto step_7;
     }
     if (bas->authority != NULL)
 	res->authority = xmlMemStrdup(bas->authority);
     else if ((bas->server != NULL) || (bas->port == -1)) {
-	if (bas->server != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3809]) {
+	  if ((bas -> server != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3809\n");
+	  else
+	    fprintf(stderr, "reached bug index 3809\n");
+	}
+	if ((!FIXREVERTER[3809] && (bas -> server != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->server = xmlMemStrdup(bas->server);
-	if (bas->user != NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3810]) {
+	  if ((bas -> user != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3810\n");
+	  else
+	    fprintf(stderr, "reached bug index 3810\n");
+	}
+	if ((!FIXREVERTER[3810] && (bas -> user != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->user = xmlMemStrdup(bas->user);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	res->port = bas->port;
     }
 
@@ -2059,10 +2963,25 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
     if (bas->path != NULL)
 	len += strlen(bas->path);
     res->path = (char *) xmlMallocAtomic(len);
-    if (res->path == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3811]) {
+      if ((res -> path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3811\n");
+      else
+        fprintf(stderr, "reached bug index 3811\n");
+    }
+    if ((!FIXREVERTER[3811] && (res -> path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlURIErrMemory("resolving URI against base\n");
 	goto done;
     }
+    #ifdef FRCOV
+    }
+    #endif
     res->path[0] = 0;
 
     /*
@@ -2181,8 +3100,23 @@ xmlBuildRelativeURI (const xmlChar * URI, const xmlChar * base)
      * First parse URI into a standard form
      */
     ref = xmlCreateURI ();
-    if (ref == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3812]) {
+      if ((ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3812\n");
+      else
+        fprintf(stderr, "reached bug index 3812\n");
+    }
+    if ((!FIXREVERTER[3812] && (ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return NULL;
+	#ifdef FRCOV
+	}
+	#endif
     /* If URI not already in "relative" form */
     if (URI[0] != '.') {
 	ret = xmlParseURIReference (ref, (const char *) URI);
@@ -2199,8 +3133,23 @@ xmlBuildRelativeURI (const xmlChar * URI, const xmlChar * base)
 	goto done;
     }
     bas = xmlCreateURI ();
-    if (bas == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3814]) {
+      if ((bas == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3814\n");
+      else
+        fprintf(stderr, "reached bug index 3814\n");
+    }
+    if ((!FIXREVERTER[3814] && (bas == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto done;
+	#ifdef FRCOV
+	}
+	#endif
     if (base[0] != '.') {
 	ret = xmlParseURIReference (bas, (const char *) base);
 	if (ret != 0)
@@ -2223,10 +3172,25 @@ xmlBuildRelativeURI (const xmlChar * URI, const xmlChar * base)
 	val = xmlStrdup(BAD_CAST "");
 	goto done;
     }
-    if (bas->path == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3816]) {
+      if ((bas -> path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3816\n");
+      else
+        fprintf(stderr, "reached bug index 3816\n");
+    }
+    if ((!FIXREVERTER[3816] && (bas -> path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	val = xmlStrdup((xmlChar *)ref->path);
 	goto done;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ref->path == NULL) {
         ref->path = (char *) "/";
 	remove_path = 1;
@@ -2291,9 +3255,24 @@ xmlBuildRelativeURI (const xmlChar * URI, const xmlChar * base)
     }
 
     if (nbslash == 0) {
-	if (uptr != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3817]) {
+	  if ((uptr != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3817\n");
+	  else
+	    fprintf(stderr, "reached bug index 3817\n");
+	}
+	if ((!FIXREVERTER[3817] && (uptr != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    /* exception characters from xmlSaveUri */
 	    val = xmlURIEscapeStr(uptr, BAD_CAST "/;&=+$,");
+	    #ifdef FRCOV
+	    }
+	    #endif
 	goto done;
     }
 
@@ -2303,10 +3282,25 @@ xmlBuildRelativeURI (const xmlChar * URI, const xmlChar * base)
      * for the "../" groups, plus one for the terminator
      */
     val = (xmlChar *) xmlMalloc (len + 3 * nbslash);
-    if (val == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3819]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3819\n");
+      else
+        fprintf(stderr, "reached bug index 3819\n");
+    }
+    if ((!FIXREVERTER[3819] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlURIErrMemory("building relative URI\n");
 	goto done;
     }
+    #ifdef FRCOV
+    }
+    #endif
     vptr = val;
     /*
      * Put in as many "../" as needed
@@ -2342,8 +3336,23 @@ done:
     /*
      * Free the working variables
      */
-    if (remove_path != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3820]) {
+      if ((remove_path != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3820\n");
+      else
+        fprintf(stderr, "reached bug index 3820\n");
+    }
+    if ((!FIXREVERTER[3820] && (remove_path != 0  ))
+    #else
+    if (0
+    #endif
+    )
         ref->path = NULL;
+        #ifdef FRCOV
+        }
+        #endif
     if (ref != NULL)
 	xmlFreeURI (ref);
     if (bas != NULL)
@@ -2383,8 +3392,23 @@ xmlCanonicPath(const xmlChar *path)
     xmlChar *ret;
     const xmlChar *absuri;
 
-    if (path == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3821]) {
+      if ((path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3821\n");
+      else
+        fprintf(stderr, "reached bug index 3821\n");
+    }
+    if ((!FIXREVERTER[3821] && (path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
 #if defined(_WIN32)
     /*
@@ -2516,16 +3540,46 @@ xmlPathToURI(const xmlChar *path)
     xmlURI temp;
     xmlChar *ret, *cal;
 
-    if (path == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3823]) {
+      if ((path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3823\n");
+      else
+        fprintf(stderr, "reached bug index 3823\n");
+    }
+    if ((!FIXREVERTER[3823] && (path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((uri = xmlParseURI((const char *) path)) != NULL) {
 	xmlFreeURI(uri);
 	return xmlStrdup(path);
     }
     cal = xmlCanonicPath(path);
-    if (cal == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3824]) {
+      if ((cal == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3824\n");
+      else
+        fprintf(stderr, "reached bug index 3824\n");
+    }
+    if ((!FIXREVERTER[3824] && (cal == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 #if defined(_WIN32) && !defined(__CYGWIN__)
     /* xmlCanonicPath can return an URI on Windows (is that the intended behaviour?)
        If 'cal' is a valid URI allready then we are done here, as continuing would make
diff --git a/valid.c b/valid.c
old mode 100644
new mode 100755
index b1cfede2..f98fc09f
--- a/valid.c
+++ b/valid.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * valid.c : part of the code use to do the DTD handling and the validity
  *           checking
@@ -276,10 +280,25 @@ vstateVPush(xmlValidCtxtPtr ctxt, xmlElementPtr elemDecl, xmlNodePtr node) {
 	ctxt->vstateMax = 10;
 	ctxt->vstateTab = (xmlValidState *) xmlMalloc(ctxt->vstateMax *
 		              sizeof(ctxt->vstateTab[0]));
-        if (ctxt->vstateTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3491]) {
+          if ((ctxt -> vstateTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3491\n");
+          else
+            fprintf(stderr, "reached bug index 3491\n");
+        }
+        if ((!FIXREVERTER[3491] && (ctxt -> vstateTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlVErrMemory(ctxt, "malloc failed");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
 
     if (ctxt->vstateNr >= ctxt->vstateMax) {
@@ -287,10 +306,25 @@ vstateVPush(xmlValidCtxtPtr ctxt, xmlElementPtr elemDecl, xmlNodePtr node) {
 
 	tmp = (xmlValidState *) xmlRealloc(ctxt->vstateTab,
 	             2 * ctxt->vstateMax * sizeof(ctxt->vstateTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3492]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3492\n");
+          else
+            fprintf(stderr, "reached bug index 3492\n");
+        }
+        if ((!FIXREVERTER[3492] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlVErrMemory(ctxt, "realloc failed");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->vstateMax *= 2;
 	ctxt->vstateTab = tmp;
     }
@@ -318,7 +352,22 @@ static int
 vstateVPop(xmlValidCtxtPtr ctxt) {
     xmlElementPtr elemDecl;
 
-    if (ctxt->vstateNr < 1) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3493]) {
+      if ((ctxt -> vstateNr < 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 3493\n");
+      else
+        fprintf(stderr, "reached bug index 3493\n");
+    }
+    if ((!FIXREVERTER[3493] && (ctxt -> vstateNr < 1 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->vstateNr--;
     elemDecl = ctxt->vstateTab[ctxt->vstateNr].elemDecl;
     ctxt->vstateTab[ctxt->vstateNr].elemDecl = NULL;
@@ -441,20 +490,50 @@ nodeVPush(xmlValidCtxtPtr ctxt, xmlNodePtr value)
         ctxt->nodeTab =
             (xmlNodePtr *) xmlMalloc(ctxt->nodeMax *
                                      sizeof(ctxt->nodeTab[0]));
-        if (ctxt->nodeTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3494]) {
+          if ((ctxt -> nodeTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3494\n");
+          else
+            fprintf(stderr, "reached bug index 3494\n");
+        }
+        if ((!FIXREVERTER[3494] && (ctxt -> nodeTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlVErrMemory(ctxt, "malloc failed");
             ctxt->nodeMax = 0;
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     if (ctxt->nodeNr >= ctxt->nodeMax) {
         xmlNodePtr *tmp;
         tmp = (xmlNodePtr *) xmlRealloc(ctxt->nodeTab,
 			      ctxt->nodeMax * 2 * sizeof(ctxt->nodeTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3495]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3495\n");
+          else
+            fprintf(stderr, "reached bug index 3495\n");
+        }
+        if ((!FIXREVERTER[3495] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlVErrMemory(ctxt, "realloc failed");
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->nodeMax *= 2;
 	ctxt->nodeTab = tmp;
     }
@@ -467,8 +546,23 @@ nodeVPop(xmlValidCtxtPtr ctxt)
 {
     xmlNodePtr ret;
 
-    if (ctxt->nodeNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3496]) {
+      if ((ctxt -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3496\n");
+      else
+        fprintf(stderr, "reached bug index 3496\n");
+    }
+    if ((!FIXREVERTER[3496] && (ctxt -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nodeNr--;
     if (ctxt->nodeNr > 0)
         ctxt->node = ctxt->nodeTab[ctxt->nodeNr - 1];
@@ -659,12 +753,27 @@ static int
 xmlValidBuildAContentModel(xmlElementContentPtr content,
 		           xmlValidCtxtPtr ctxt,
 		           const xmlChar *name) {
-    if (content == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3497]) {
+      if ((content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3497\n");
+      else
+        fprintf(stderr, "reached bug index 3497\n");
+    }
+    if ((!FIXREVERTER[3497] && (content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrValidNode(ctxt, NULL, XML_ERR_INTERNAL_ERROR,
 			"Found NULL content in content model of %s\n",
 			name, NULL, NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     switch (content->type) {
 	case XML_ELEMENT_CONTENT_PCDATA:
 	    xmlErrValidNode(ctxt, NULL, XML_ERR_INTERNAL_ERROR,
@@ -678,10 +787,25 @@ xmlValidBuildAContentModel(xmlElementContentPtr content,
 	    xmlChar *fullname;
 
 	    fullname = xmlBuildQName(content->name, content->prefix, fn, 50);
-	    if (fullname == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3498]) {
+	      if ((fullname == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3498\n");
+	      else
+	        fprintf(stderr, "reached bug index 3498\n");
+	    }
+	    if ((!FIXREVERTER[3498] && (fullname == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlVErrMemory(ctxt, "Building content model");
 		return(0);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	    switch (content->ocur) {
 		case XML_ELEMENT_CONTENT_ONCE:
@@ -812,8 +936,23 @@ xmlValidBuildAContentModel(xmlElementContentPtr content,
 int
 xmlValidBuildContentModel(xmlValidCtxtPtr ctxt, xmlElementPtr elem) {
 
-    if ((ctxt == NULL) || (elem == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3499]) {
+      if ((ctxt == (void *) 0 || elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3499\n");
+      else
+        fprintf(stderr, "reached bug index 3499\n");
+    }
+    if ((!FIXREVERTER[3499] && (ctxt == (void *) 0 || elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     if (elem->type != XML_ELEMENT_DECL)
 	return(0);
     if (elem->etype != XML_ELEMENT_TYPE_ELEMENT)
@@ -828,13 +967,28 @@ xmlValidBuildContentModel(xmlValidCtxtPtr ctxt, xmlElementPtr elem) {
     }
 
     ctxt->am = xmlNewAutomata();
-    if (ctxt->am == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3500]) {
+      if ((ctxt -> am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3500\n");
+      else
+        fprintf(stderr, "reached bug index 3500\n");
+    }
+    if ((!FIXREVERTER[3500] && (ctxt -> am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrValidNode(ctxt, (xmlNodePtr) elem,
 	                XML_ERR_INTERNAL_ERROR,
 	                "Cannot create automata for element %s\n",
 		        elem->name, NULL, NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->state = xmlAutomataGetInitState(ctxt->am);
     xmlValidBuildAContentModel(elem->content, ctxt, elem->name);
     xmlAutomataSetFinalState(ctxt->am, ctxt->state);
@@ -923,8 +1077,23 @@ xmlNewDocElementContent(xmlDocPtr doc, const xmlChar *name,
     xmlElementContentPtr ret;
     xmlDictPtr dict = NULL;
 
-    if (doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3501]) {
+      if ((doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3501\n");
+      else
+        fprintf(stderr, "reached bug index 3501\n");
+    }
+    if ((!FIXREVERTER[3501] && (doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     switch(type) {
 	case XML_ELEMENT_CONTENT_ELEMENT:
@@ -950,10 +1119,25 @@ xmlNewDocElementContent(xmlDocPtr doc, const xmlChar *name,
 	    return(NULL);
     }
     ret = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3502]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3502\n");
+      else
+        fprintf(stderr, "reached bug index 3502\n");
+    }
+    if ((!FIXREVERTER[3502] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(NULL, "malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlElementContent));
     ret->type = type;
     ret->ocur = XML_ELEMENT_CONTENT_ONCE;
@@ -1009,16 +1193,61 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
     xmlElementContentPtr ret = NULL, prev = NULL, tmp;
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) return(NULL);
-
-    if (doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3503]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3503\n");
+      else
+        fprintf(stderr, "reached bug index 3503\n");
+    }
+    if ((!FIXREVERTER[3503] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3504]) {
+      if ((doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3504\n");
+      else
+        fprintf(stderr, "reached bug index 3504\n");
+    }
+    if ((!FIXREVERTER[3504] && (doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3505]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3505\n");
+      else
+        fprintf(stderr, "reached bug index 3505\n");
+    }
+    if ((!FIXREVERTER[3505] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(NULL, "malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlElementContent));
     ret->type = cur->type;
     ret->ocur = cur->ocur;
@@ -1035,8 +1264,23 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 	else
 	    ret->prefix = xmlStrdup(cur->prefix);
     }
-    if (cur->c1 != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3506]) {
+      if ((cur -> c1 != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3506\n");
+      else
+        fprintf(stderr, "reached bug index 3506\n");
+    }
+    if ((!FIXREVERTER[3506] && (cur -> c1 != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->c1 = xmlCopyDocElementContent(doc, cur->c1);
+        #ifdef FRCOV
+        }
+        #endif
     if (ret->c1 != NULL)
 	ret->c1->parent = ret;
     if (cur->c2 != NULL) {
@@ -1044,10 +1288,25 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 	cur = cur->c2;
 	while (cur != NULL) {
 	    tmp = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3507]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3507\n");
+	      else
+	        fprintf(stderr, "reached bug index 3507\n");
+	    }
+	    if ((!FIXREVERTER[3507] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlVErrMemory(NULL, "malloc failed");
 		return(ret);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memset(tmp, 0, sizeof(xmlElementContent));
 	    tmp->type = cur->type;
 	    tmp->ocur = cur->ocur;
@@ -1065,8 +1324,23 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 		else
 		    tmp->prefix = xmlStrdup(cur->prefix);
 	    }
-	    if (cur->c1 != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3508]) {
+	      if ((cur -> c1 != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 3508\n");
+	      else
+	        fprintf(stderr, "reached bug index 3508\n");
+	    }
+	    if ((!FIXREVERTER[3508] && (cur -> c1 != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        tmp->c1 = xmlCopyDocElementContent(doc,cur->c1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    if (tmp->c1 != NULL)
 		tmp->c1->parent = ret;
 	    prev = tmp;
@@ -1102,8 +1376,23 @@ xmlFreeDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
     xmlElementContentPtr next;
     xmlDictPtr dict = NULL;
 
-    if (doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3509]) {
+      if ((doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3509\n");
+      else
+        fprintf(stderr, "reached bug index 3509\n");
+    }
+    if ((!FIXREVERTER[3509] && (doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     while (cur != NULL) {
         next = cur->c2;
@@ -1254,13 +1543,43 @@ void
 xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int englob) {
     int len;
 
-    if (content == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3511]) {
+      if ((content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3511\n");
+      else
+        fprintf(stderr, "reached bug index 3511\n");
+    }
+    if ((!FIXREVERTER[3511] && (content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     len = strlen(buf);
-    if (size - len < 50) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3512]) {
+      if ((size - len < 50 ) && !(0))
+        fprintf(stderr, "triggered bug index 3512\n");
+      else
+        fprintf(stderr, "reached bug index 3512\n");
+    }
+    if ((!FIXREVERTER[3512] && (size - len < 50 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if ((size - len > 4) && (buf[len - 1] != '.'))
 	    strcat(buf, " ...");
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (englob) strcat(buf, "(");
     switch (content->type) {
         case XML_ELEMENT_CONTENT_PCDATA:
@@ -1271,10 +1590,25 @@ xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int
 
 	    if (content->prefix != NULL)
                 qnameLen += xmlStrlen(content->prefix) + 1;
-	    if (size - len < qnameLen + 10) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3513]) {
+	      if ((size - len < qnameLen + 10 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3513\n");
+	      else
+	        fprintf(stderr, "reached bug index 3513\n");
+	    }
+	    if ((!FIXREVERTER[3513] && (size - len < qnameLen + 10 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		strcat(buf, " ...");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (content->prefix != NULL) {
 		strcat(buf, (char *) content->prefix);
 		strcat(buf, ":");
@@ -1290,11 +1624,26 @@ xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int
 	    else
 		xmlSnprintfElementContent(buf, size, content->c1, 0);
 	    len = strlen(buf);
-	    if (size - len < 50) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3514]) {
+	      if ((size - len < 50 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3514\n");
+	      else
+	        fprintf(stderr, "reached bug index 3514\n");
+	    }
+	    if ((!FIXREVERTER[3514] && (size - len < 50 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if ((size - len > 4) && (buf[len - 1] != '.'))
 		    strcat(buf, " ...");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
             strcat(buf, " , ");
 	    if (((content->c2->type == XML_ELEMENT_CONTENT_OR) ||
 		 (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)) &&
@@ -1310,11 +1659,26 @@ xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int
 	    else
 		xmlSnprintfElementContent(buf, size, content->c1, 0);
 	    len = strlen(buf);
-	    if (size - len < 50) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3515]) {
+	      if ((size - len < 50 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3515\n");
+	      else
+	        fprintf(stderr, "reached bug index 3515\n");
+	    }
+	    if ((!FIXREVERTER[3515] && (size - len < 50 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if ((size - len > 4) && (buf[len - 1] != '.'))
 		    strcat(buf, " ...");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
             strcat(buf, " | ");
 	    if (((content->c2->type == XML_ELEMENT_CONTENT_SEQ) ||
 		 (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)) &&
@@ -1356,7 +1720,22 @@ xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int
  */
 static void
 xmlFreeElement(xmlElementPtr elem) {
-    if (elem == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3517]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3517\n");
+      else
+        fprintf(stderr, "reached bug index 3517\n");
+    }
+    if ((!FIXREVERTER[3517] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     xmlUnlinkNode((xmlNodePtr) elem);
     xmlFreeDocElementContent(elem->doc, elem->content);
     if (elem->name != NULL)
@@ -1393,12 +1772,42 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
     xmlAttributePtr oldAttributes = NULL;
     xmlChar *ns, *uqname;
 
-    if (dtd == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3518]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3518\n");
+      else
+        fprintf(stderr, "reached bug index 3518\n");
+    }
+    if ((!FIXREVERTER[3518] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (name == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3519]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3519\n");
+      else
+        fprintf(stderr, "reached bug index 3519\n");
+    }
+    if ((!FIXREVERTER[3519] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     switch (type) {
         case XML_ELEMENT_TYPE_EMPTY:
@@ -1418,20 +1827,50 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
 	    }
 	    break;
 	case XML_ELEMENT_TYPE_MIXED:
-	    if (content == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3520]) {
+	      if ((content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3520\n");
+	      else
+	        fprintf(stderr, "reached bug index 3520\n");
+	    }
+	    if ((!FIXREVERTER[3520] && (content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,
 		        "xmlAddElementDecl: content == NULL for MIXED\n",
 			NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    break;
 	case XML_ELEMENT_TYPE_ELEMENT:
-	    if (content == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3521]) {
+	      if ((content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3521\n");
+	      else
+	        fprintf(stderr, "reached bug index 3521\n");
+	    }
+	    if ((!FIXREVERTER[3521] && (content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,
 		        "xmlAddElementDecl: content == NULL for ELEMENT\n",
 			NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    break;
 	default:
 	    xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,
@@ -1444,8 +1883,23 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
      * check if name is a QName
      */
     uqname = xmlSplitQName2(name, &ns);
-    if (uqname != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3522]) {
+      if ((uqname != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3522\n");
+      else
+        fprintf(stderr, "reached bug index 3522\n");
+    }
+    if ((!FIXREVERTER[3522] && (uqname != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	name = uqname;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Create the Element table if needed.
@@ -1454,8 +1908,23 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
     if (table == NULL) {
 	xmlDictPtr dict = NULL;
 
-	if (dtd->doc != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3523]) {
+	  if ((dtd -> doc != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3523\n");
+	  else
+	    fprintf(stderr, "reached bug index 3523\n");
+	}
+	if ((!FIXREVERTER[3523] && (dtd -> doc != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    dict = dtd->doc->dict;
+	    #ifdef FRCOV
+	    }
+	    #endif
         table = xmlHashCreateDict(0, dict);
 	dtd->elements = (void *) table;
     }
@@ -1574,8 +2043,23 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
         ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||
          (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1))) {
 	ret->content = content;
-	if (content != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3524]) {
+	  if ((content != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3524\n");
+	  else
+	    fprintf(stderr, "reached bug index 3524\n");
+	}
+	if ((!FIXREVERTER[3524] && (content != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    content->parent = (xmlElementContentPtr) 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
 	ret->content = xmlCopyDocElementContent(dtd->doc, content);
     }
@@ -1628,10 +2112,25 @@ xmlCopyElement(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlElementPtr cur;
 
     cur = (xmlElementPtr) xmlMalloc(sizeof(xmlElement));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3525]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3525\n");
+      else
+        fprintf(stderr, "reached bug index 3525\n");
+    }
+    if ((!FIXREVERTER[3525] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(NULL, "malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlElement));
     cur->type = XML_ELEMENT_DECL;
     cur->etype = elem->etype;
@@ -1767,14 +2266,44 @@ xmlCreateEnumeration(const xmlChar *name) {
     xmlEnumerationPtr ret;
 
     ret = (xmlEnumerationPtr) xmlMalloc(sizeof(xmlEnumeration));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3528]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3528\n");
+      else
+        fprintf(stderr, "reached bug index 3528\n");
+    }
+    if ((!FIXREVERTER[3528] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(NULL, "malloc failed");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlEnumeration));
 
-    if (name != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3529]) {
+      if ((name != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3529\n");
+      else
+        fprintf(stderr, "reached bug index 3529\n");
+    }
+    if ((!FIXREVERTER[3529] && (name != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->name = xmlStrdup(name);
+        #ifdef FRCOV
+        }
+        #endif
     return(ret);
 }
 
@@ -1786,7 +2315,22 @@ xmlCreateEnumeration(const xmlChar *name) {
  */
 void
 xmlFreeEnumeration(xmlEnumerationPtr cur) {
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3530]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3530\n");
+      else
+        fprintf(stderr, "reached bug index 3530\n");
+    }
+    if ((!FIXREVERTER[3530] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (cur->next != NULL) xmlFreeEnumeration(cur->next);
 
@@ -1808,9 +2352,39 @@ xmlEnumerationPtr
 xmlCopyEnumeration(xmlEnumerationPtr cur) {
     xmlEnumerationPtr ret;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3531]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3531\n");
+      else
+        fprintf(stderr, "reached bug index 3531\n");
+    }
+    if ((!FIXREVERTER[3531] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlCreateEnumeration((xmlChar *) cur->name);
-    if (ret == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3532]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3532\n");
+      else
+        fprintf(stderr, "reached bug index 3532\n");
+    }
+    if ((!FIXREVERTER[3532] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (cur->next != NULL) ret->next = xmlCopyEnumeration(cur->next);
     else ret->next = NULL;
@@ -1859,7 +2433,22 @@ xmlScanIDAttributeDecl(xmlValidCtxtPtr ctxt, xmlElementPtr elem, int err) {
     xmlAttributePtr cur;
     int ret = 0;
 
-    if (elem == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3534]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3534\n");
+      else
+        fprintf(stderr, "reached bug index 3534\n");
+    }
+    if ((!FIXREVERTER[3534] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = elem->attributes;
     while (cur != NULL) {
         if (cur->atype == XML_ATTRIBUTE_ID) {
@@ -1885,7 +2474,22 @@ static void
 xmlFreeAttribute(xmlAttributePtr attr) {
     xmlDictPtr dict;
 
-    if (attr == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3535]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3535\n");
+      else
+        fprintf(stderr, "reached bug index 3535\n");
+    }
+    if ((!FIXREVERTER[3535] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (attr->doc != NULL)
 	dict = attr->doc->dict;
     else
@@ -1945,20 +2549,80 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
     xmlElementPtr elemDef;
     xmlDictPtr dict = NULL;
 
-    if (dtd == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3536]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3536\n");
+      else
+        fprintf(stderr, "reached bug index 3536\n");
+    }
+    if ((!FIXREVERTER[3536] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeEnumeration(tree);
 	return(NULL);
     }
-    if (name == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3537]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3537\n");
+      else
+        fprintf(stderr, "reached bug index 3537\n");
+    }
+    if ((!FIXREVERTER[3537] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeEnumeration(tree);
 	return(NULL);
     }
-    if (elem == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3538]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3538\n");
+      else
+        fprintf(stderr, "reached bug index 3538\n");
+    }
+    if ((!FIXREVERTER[3538] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeEnumeration(tree);
 	return(NULL);
     }
-    if (dtd->doc != NULL)
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3539]) {
+      if ((dtd -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3539\n");
+      else
+        fprintf(stderr, "reached bug index 3539\n");
+    }
+    if ((!FIXREVERTER[3539] && (dtd -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	dict = dtd->doc->dict;
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifdef LIBXML_VALID_ENABLED
     /*
@@ -1998,8 +2662,23 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
 	                "Attribute %s of %s: invalid default value\n",
 	                elem, name, defaultValue);
 	defaultValue = NULL;
-	if (ctxt != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3540]) {
+	  if ((ctxt != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3540\n");
+	  else
+	    fprintf(stderr, "reached bug index 3540\n");
+	}
+	if ((!FIXREVERTER[3540] && (ctxt != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->valid = 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 #endif /* LIBXML_VALID_ENABLED */
 
@@ -2025,20 +2704,50 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
         table = xmlHashCreateDict(0, dict);
 	dtd->attributes = (void *) table;
     }
-    if (table == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3541]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3541\n");
+      else
+        fprintf(stderr, "reached bug index 3541\n");
+    }
+    if ((!FIXREVERTER[3541] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt,
             "xmlAddAttributeDecl: Table creation failed!\n");
 	xmlFreeEnumeration(tree);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 
     ret = (xmlAttributePtr) xmlMalloc(sizeof(xmlAttribute));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3542]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3542\n");
+      else
+        fprintf(stderr, "reached bug index 3542\n");
+    }
+    if ((!FIXREVERTER[3542] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt, "malloc failed");
 	xmlFreeEnumeration(tree);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlAttribute));
     ret->type = XML_ATTRIBUTE_DECL;
 
@@ -2100,8 +2809,23 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
 	    xmlErrValidNode(ctxt, (xmlNodePtr) dtd, XML_DTD_MULTIPLE_ID,
 	   "Element %s has too may ID attributes defined : %s\n",
 		   elem, name, NULL);
-	    if (ctxt != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3543]) {
+	      if ((ctxt != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 3543\n");
+	      else
+	        fprintf(stderr, "reached bug index 3543\n");
+	    }
+	    if ((!FIXREVERTER[3543] && (ctxt != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		ctxt->valid = 0;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 #endif /* LIBXML_VALID_ENABLED */
 
@@ -2121,8 +2845,23 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
 		   ((xmlStrEqual(tmp->name, BAD_CAST "xmlns")) ||
 		    ((ret->prefix != NULL &&
 		     (xmlStrEqual(ret->prefix, BAD_CAST "xmlns")))))) {
-		if (tmp->nexth == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3544]) {
+		  if ((tmp -> nexth == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3544\n");
+		  else
+		    fprintf(stderr, "reached bug index 3544\n");
+		}
+		if ((!FIXREVERTER[3544] && (tmp -> nexth == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    break;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		tmp = tmp->nexth;
 	    }
 	    if (tmp != NULL) {
@@ -2180,23 +2919,98 @@ xmlCopyAttribute(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlAttributePtr cur;
 
     cur = (xmlAttributePtr) xmlMalloc(sizeof(xmlAttribute));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3545]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3545\n");
+      else
+        fprintf(stderr, "reached bug index 3545\n");
+    }
+    if ((!FIXREVERTER[3545] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(NULL, "malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlAttribute));
     cur->type = XML_ATTRIBUTE_DECL;
     cur->atype = attr->atype;
     cur->def = attr->def;
     cur->tree = xmlCopyEnumeration(attr->tree);
-    if (attr->elem != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3546]) {
+      if ((attr -> elem != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3546\n");
+      else
+        fprintf(stderr, "reached bug index 3546\n");
+    }
+    if ((!FIXREVERTER[3546] && (attr -> elem != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->elem = xmlStrdup(attr->elem);
-    if (attr->name != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3547]) {
+      if ((attr -> name != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3547\n");
+      else
+        fprintf(stderr, "reached bug index 3547\n");
+    }
+    if ((!FIXREVERTER[3547] && (attr -> name != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->name = xmlStrdup(attr->name);
-    if (attr->prefix != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3548]) {
+      if ((attr -> prefix != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3548\n");
+      else
+        fprintf(stderr, "reached bug index 3548\n");
+    }
+    if ((!FIXREVERTER[3548] && (attr -> prefix != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->prefix = xmlStrdup(attr->prefix);
-    if (attr->defaultValue != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3549]) {
+      if ((attr -> defaultValue != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3549\n");
+      else
+        fprintf(stderr, "reached bug index 3549\n");
+    }
+    if ((!FIXREVERTER[3549] && (attr -> defaultValue != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->defaultValue = xmlStrdup(attr->defaultValue);
+	#ifdef FRCOV
+	}
+	#endif
     return(cur);
 }
 
@@ -2338,7 +3152,22 @@ xmlDumpAttributeTable(xmlBufferPtr buf, xmlAttributeTablePtr table) {
  */
 static void
 xmlFreeNotation(xmlNotationPtr nota) {
-    if (nota == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3552]) {
+      if ((nota == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3552\n");
+      else
+        fprintf(stderr, "reached bug index 3552\n");
+    }
+    if ((!FIXREVERTER[3552] && (nota == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (nota->name != NULL)
 	xmlFree((xmlChar *) nota->name);
     if (nota->PublicID != NULL)
@@ -2368,12 +3197,42 @@ xmlAddNotationDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd,
     xmlNotationPtr ret;
     xmlNotationTablePtr table;
 
-    if (dtd == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3553]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3553\n");
+      else
+        fprintf(stderr, "reached bug index 3553\n");
+    }
+    if ((!FIXREVERTER[3553] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (name == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3554]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3554\n");
+      else
+        fprintf(stderr, "reached bug index 3554\n");
+    }
+    if ((!FIXREVERTER[3554] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((PublicID == NULL) && (SystemID == NULL)) {
 	return(NULL);
     }
@@ -2384,32 +3243,107 @@ xmlAddNotationDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd,
     table = (xmlNotationTablePtr) dtd->notations;
     if (table == NULL) {
 	xmlDictPtr dict = NULL;
-	if (dtd->doc != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3555]) {
+	  if ((dtd -> doc != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3555\n");
+	  else
+	    fprintf(stderr, "reached bug index 3555\n");
+	}
+	if ((!FIXREVERTER[3555] && (dtd -> doc != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    dict = dtd->doc->dict;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
         dtd->notations = table = xmlHashCreateDict(0, dict);
     }
-    if (table == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3556]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3556\n");
+      else
+        fprintf(stderr, "reached bug index 3556\n");
+    }
+    if ((!FIXREVERTER[3556] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt,
 		"xmlAddNotationDecl: Table creation failed!\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = (xmlNotationPtr) xmlMalloc(sizeof(xmlNotation));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3557]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3557\n");
+      else
+        fprintf(stderr, "reached bug index 3557\n");
+    }
+    if ((!FIXREVERTER[3557] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt, "malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlNotation));
 
     /*
      * fill the structure.
      */
     ret->name = xmlStrdup(name);
-    if (SystemID != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3558]) {
+      if ((SystemID != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3558\n");
+      else
+        fprintf(stderr, "reached bug index 3558\n");
+    }
+    if ((!FIXREVERTER[3558] && (SystemID != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->SystemID = xmlStrdup(SystemID);
-    if (PublicID != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3559]) {
+      if ((PublicID != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3559\n");
+      else
+        fprintf(stderr, "reached bug index 3559\n");
+    }
+    if ((!FIXREVERTER[3559] && (PublicID != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->PublicID = xmlStrdup(PublicID);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Validity Check:
@@ -2458,10 +3392,25 @@ xmlCopyNotation(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlNotationPtr cur;
 
     cur = (xmlNotationPtr) xmlMalloc(sizeof(xmlNotation));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3560]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3560\n");
+      else
+        fprintf(stderr, "reached bug index 3560\n");
+    }
+    if ((!FIXREVERTER[3560] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(NULL, "malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (nota->name != NULL)
 	cur->name = xmlStrdup(nota->name);
     else
@@ -2574,10 +3523,40 @@ static void
 xmlFreeID(xmlIDPtr id) {
     xmlDictPtr dict = NULL;
 
-    if (id == NULL) return;
-
-    if (id->doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3563]) {
+      if ((id == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3563\n");
+      else
+        fprintf(stderr, "reached bug index 3563\n");
+    }
+    if ((!FIXREVERTER[3563] && (id == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3564]) {
+      if ((id -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3564\n");
+      else
+        fprintf(stderr, "reached bug index 3564\n");
+    }
+    if ((!FIXREVERTER[3564] && (id -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = id->doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (id->value != NULL)
 	DICT_FREE(id->value)
@@ -2604,15 +3583,60 @@ xmlAddID(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
     xmlIDPtr ret;
     xmlIDTablePtr table;
 
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3565]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3565\n");
+      else
+        fprintf(stderr, "reached bug index 3565\n");
+    }
+    if ((!FIXREVERTER[3565] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (value == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3566]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3566\n");
+      else
+        fprintf(stderr, "reached bug index 3566\n");
+    }
+    if ((!FIXREVERTER[3566] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (attr == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3567]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3567\n");
+      else
+        fprintf(stderr, "reached bug index 3567\n");
+    }
+    if ((!FIXREVERTER[3567] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Create the ID table if needed.
@@ -2621,24 +3645,69 @@ xmlAddID(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
     if (table == NULL)  {
         doc->ids = table = xmlHashCreateDict(0, doc->dict);
     }
-    if (table == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3568]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3568\n");
+      else
+        fprintf(stderr, "reached bug index 3568\n");
+    }
+    if ((!FIXREVERTER[3568] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt,
 		"xmlAddID: Table creation failed!\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = (xmlIDPtr) xmlMalloc(sizeof(xmlID));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3569]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3569\n");
+      else
+        fprintf(stderr, "reached bug index 3569\n");
+    }
+    if ((!FIXREVERTER[3569] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt, "malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * fill the structure.
      */
     ret->value = xmlStrdup(value);
     ret->doc = doc;
-    if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3570]) {
+      fprintf(stderr, "reached bug index 3570\n");
+    }
+    if ((FIXREVERTER[3570] && (ctxt != (void *) 0 )) || (!FIXREVERTER[3570] && (ctxt != (void *) 0 && ctxt -> vstateNr != 0 ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> vstateNr != 0 ))
+        fprintf(stderr, "triggered bug index 3570\n");
+      #endif
+    
 	/*
 	 * Operating in streaming mode, attr is gonna disapear
 	 */
@@ -2651,6 +3720,9 @@ xmlAddID(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
 	ret->attr = attr;
 	ret->name = NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->lineno = xmlGetLineNo(attr->parent);
 
     if (xmlHashAddEntry(table, value, ret) < 0) {
@@ -2702,12 +3774,42 @@ xmlFreeIDTable(xmlIDTablePtr table) {
  */
 int
 xmlIsID(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
-    if ((attr == NULL) || (attr->name == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3571]) {
+      if ((attr == (void *) 0 || attr -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3571\n");
+      else
+        fprintf(stderr, "reached bug index 3571\n");
+    }
+    if ((!FIXREVERTER[3571] && (attr == (void *) 0 || attr -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if ((attr->ns != NULL) && (attr->ns->prefix != NULL) &&
         (!strcmp((char *) attr->name, "id")) &&
         (!strcmp((char *) attr->ns->prefix, "xml")))
 	return(1);
-    if (doc == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3572]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3572\n");
+      else
+        fprintf(stderr, "reached bug index 3572\n");
+    }
+    if ((!FIXREVERTER[3572] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if ((doc->intSubset == NULL) && (doc->extSubset == NULL) &&
         (doc->type != XML_HTML_DOCUMENT_NODE)) {
 	return(0);
@@ -2733,13 +3835,31 @@ xmlIsID(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
 	    xmlBuildQName(attr->name, attr->ns->prefix, fattr, 50) :
 	    (xmlChar *)attr->name;
 
-	if (fullelemname != NULL && fullattrname != NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3573]) {
+	  fprintf(stderr, "reached bug index 3573\n");
+	}
+	if ((FIXREVERTER[3573] && (fullelemname != (void *) 0 )) || (!FIXREVERTER[3573] && (fullelemname != (void *) 0 && fullattrname != (void *) 0 ))
+	#else
+	if (fullelemname != (void *) 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(fullattrname != (void *) 0 ))
+	    fprintf(stderr, "triggered bug index 3573\n");
+	  #endif
+	
 	    attrDecl = xmlGetDtdAttrDesc(doc->intSubset, fullelemname,
 		                         fullattrname);
 	    if ((attrDecl == NULL) && (doc->extSubset != NULL))
 		attrDecl = xmlGetDtdAttrDesc(doc->extSubset, fullelemname,
 					     fullattrname);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	if ((fullattrname != fattr) && (fullattrname != attr->name))
 	    xmlFree(fullattrname);
@@ -2767,16 +3887,76 @@ xmlRemoveID(xmlDocPtr doc, xmlAttrPtr attr) {
     xmlIDPtr id;
     xmlChar *ID;
 
-    if (doc == NULL) return(-1);
-    if (attr == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3574]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3574\n");
+      else
+        fprintf(stderr, "reached bug index 3574\n");
+    }
+    if ((!FIXREVERTER[3574] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3575]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3575\n");
+      else
+        fprintf(stderr, "reached bug index 3575\n");
+    }
+    if ((!FIXREVERTER[3575] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     table = (xmlIDTablePtr) doc->ids;
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3576]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3576\n");
+      else
+        fprintf(stderr, "reached bug index 3576\n");
+    }
+    if ((!FIXREVERTER[3576] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     ID = xmlNodeListGetString(doc, attr->children, 1);
-    if (ID == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3577]) {
+      if ((ID == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3577\n");
+      else
+        fprintf(stderr, "reached bug index 3577\n");
+    }
+    if ((!FIXREVERTER[3577] && (ID == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     id = xmlHashLookup(table, ID);
     if (id == NULL || id->attr != attr) {
@@ -2804,28 +3984,103 @@ xmlGetID(xmlDocPtr doc, const xmlChar *ID) {
     xmlIDTablePtr table;
     xmlIDPtr id;
 
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3578]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3578\n");
+      else
+        fprintf(stderr, "reached bug index 3578\n");
+    }
+    if ((!FIXREVERTER[3578] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
-    if (ID == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3579]) {
+      if ((ID == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3579\n");
+      else
+        fprintf(stderr, "reached bug index 3579\n");
+    }
+    if ((!FIXREVERTER[3579] && (ID == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     table = (xmlIDTablePtr) doc->ids;
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3580]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3580\n");
+      else
+        fprintf(stderr, "reached bug index 3580\n");
+    }
+    if ((!FIXREVERTER[3580] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     id = xmlHashLookup(table, ID);
-    if (id == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3581]) {
+      if ((id == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3581\n");
+      else
+        fprintf(stderr, "reached bug index 3581\n");
+    }
+    if ((!FIXREVERTER[3581] && (id == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (id->attr == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3582]) {
+      if ((id -> attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3582\n");
+      else
+        fprintf(stderr, "reached bug index 3582\n");
+    }
+    if ((!FIXREVERTER[3582] && (id -> attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * We are operating on a stream, return a well known reference
 	 * since the attribute node doesn't exist anymore
 	 */
 	return((xmlAttrPtr) doc);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(id->attr);
 }
 
@@ -2859,7 +4114,22 @@ typedef xmlValidateMemo *xmlValidateMemoPtr;
 static void
 xmlFreeRef(xmlLinkPtr lk) {
     xmlRefPtr ref = (xmlRefPtr)xmlLinkGetData(lk);
-    if (ref == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3583]) {
+      if ((ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3583\n");
+      else
+        fprintf(stderr, "reached bug index 3583\n");
+    }
+    if ((!FIXREVERTER[3583] && (ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (ref->value != NULL)
         xmlFree((xmlChar *)ref->value);
     if (ref->name != NULL)
@@ -2876,7 +4146,22 @@ xmlFreeRef(xmlLinkPtr lk) {
 static void
 xmlFreeRefTableEntry(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlListPtr list_ref = (xmlListPtr) payload;
-    if (list_ref == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3584]) {
+      if ((list_ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3584\n");
+      else
+        fprintf(stderr, "reached bug index 3584\n");
+    }
+    if ((!FIXREVERTER[3584] && (list_ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     xmlListDelete(list_ref);
 }
 
@@ -2933,15 +4218,60 @@ xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
     xmlRefTablePtr table;
     xmlListPtr ref_list;
 
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3585]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3585\n");
+      else
+        fprintf(stderr, "reached bug index 3585\n");
+    }
+    if ((!FIXREVERTER[3585] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
-    if (value == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3586]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3586\n");
+      else
+        fprintf(stderr, "reached bug index 3586\n");
+    }
+    if ((!FIXREVERTER[3586] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
-    if (attr == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3587]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3587\n");
+      else
+        fprintf(stderr, "reached bug index 3587\n");
+    }
+    if ((!FIXREVERTER[3587] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Create the Ref table if needed.
@@ -2950,23 +4280,68 @@ xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
     if (table == NULL) {
         doc->refs = table = xmlHashCreateDict(0, doc->dict);
     }
-    if (table == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3588]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3588\n");
+      else
+        fprintf(stderr, "reached bug index 3588\n");
+    }
+    if ((!FIXREVERTER[3588] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt,
             "xmlAddRef: Table creation failed!\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = (xmlRefPtr) xmlMalloc(sizeof(xmlRef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3589]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3589\n");
+      else
+        fprintf(stderr, "reached bug index 3589\n");
+    }
+    if ((!FIXREVERTER[3589] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt, "malloc failed");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * fill the structure.
      */
     ret->value = xmlStrdup(value);
-    if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3590]) {
+      fprintf(stderr, "reached bug index 3590\n");
+    }
+    if ((FIXREVERTER[3590] && (ctxt != (void *) 0 )) || (!FIXREVERTER[3590] && (ctxt != (void *) 0 && ctxt -> vstateNr != 0 ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> vstateNr != 0 ))
+        fprintf(stderr, "triggered bug index 3590\n");
+      #endif
+    
 	/*
 	 * Operating in streaming mode, attr is gonna disapear
 	 */
@@ -2976,6 +4351,9 @@ xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
 	ret->name = NULL;
 	ret->attr = attr;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->lineno = xmlGetLineNo(attr->parent);
 
     /* To add a reference :-
@@ -3043,11 +4421,41 @@ xmlFreeRefTable(xmlRefTablePtr table) {
  */
 int
 xmlIsRef(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3591]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3591\n");
+      else
+        fprintf(stderr, "reached bug index 3591\n");
+    }
+    if ((!FIXREVERTER[3591] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     if (doc == NULL) {
         doc = attr->doc;
-	if (doc == NULL) return(0);
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3592]) {
+	  if ((doc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3592\n");
+	  else
+	    fprintf(stderr, "reached bug index 3592\n");
+	}
+	if ((!FIXREVERTER[3592] && (doc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) return(0);
+	#ifdef FRCOV
+	}
+	#endif
     }
 
     if ((doc->intSubset == NULL) && (doc->extSubset == NULL)) {
@@ -3058,7 +4466,22 @@ xmlIsRef(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
     } else {
         xmlAttributePtr attrDecl;
 
-        if (elem == NULL) return(0);
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3593]) {
+          if ((elem == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3593\n");
+          else
+            fprintf(stderr, "reached bug index 3593\n");
+        }
+        if ((!FIXREVERTER[3593] && (elem == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) return(0);
+        #ifdef FRCOV
+        }
+        #endif
         attrDecl = xmlGetDtdAttrDesc(doc->intSubset, elem->name, attr->name);
         if ((attrDecl == NULL) && (doc->extSubset != NULL))
             attrDecl = xmlGetDtdAttrDesc(doc->extSubset,
@@ -3179,13 +4602,43 @@ xmlGetDtdElementDesc(xmlDtdPtr dtd, const xmlChar *name) {
     xmlChar *uqname = NULL, *prefix = NULL;
 
     if ((dtd == NULL) || (name == NULL)) return(NULL);
-    if (dtd->elements == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3603]) {
+      if ((dtd -> elements == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3603\n");
+      else
+        fprintf(stderr, "reached bug index 3603\n");
+    }
+    if ((!FIXREVERTER[3603] && (dtd -> elements == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     table = (xmlElementTablePtr) dtd->elements;
 
     uqname = xmlSplitQName2(name, &prefix);
-    if (uqname != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3604]) {
+      if ((uqname != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3604\n");
+      else
+        fprintf(stderr, "reached bug index 3604\n");
+    }
+    if ((!FIXREVERTER[3604] && (uqname != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         name = uqname;
+        #ifdef FRCOV
+        }
+        #endif
     cur = xmlHashLookup2(table, name, prefix);
     if (prefix != NULL) xmlFree(prefix);
     if (uqname != NULL) xmlFree(uqname);
@@ -3208,12 +4661,42 @@ xmlGetDtdElementDesc2(xmlDtdPtr dtd, const xmlChar *name, int create) {
     xmlElementPtr cur;
     xmlChar *uqname = NULL, *prefix = NULL;
 
-    if (dtd == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3605]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3605\n");
+      else
+        fprintf(stderr, "reached bug index 3605\n");
+    }
+    if ((!FIXREVERTER[3605] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (dtd->elements == NULL) {
 	xmlDictPtr dict = NULL;
 
-	if (dtd->doc != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3606]) {
+	  if ((dtd -> doc != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3606\n");
+	  else
+	    fprintf(stderr, "reached bug index 3606\n");
+	}
+	if ((!FIXREVERTER[3606] && (dtd -> doc != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    dict = dtd->doc->dict;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	if (!create)
 	    return(NULL);
@@ -3225,23 +4708,68 @@ xmlGetDtdElementDesc2(xmlDtdPtr dtd, const xmlChar *name, int create) {
 	    table = xmlHashCreateDict(0, dict);
 	    dtd->elements = (void *) table;
 	}
-	if (table == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3607]) {
+	  if ((table == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3607\n");
+	  else
+	    fprintf(stderr, "reached bug index 3607\n");
+	}
+	if ((!FIXREVERTER[3607] && (table == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlVErrMemory(NULL, "element table allocation failed");
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     table = (xmlElementTablePtr) dtd->elements;
 
     uqname = xmlSplitQName2(name, &prefix);
-    if (uqname != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3608]) {
+      if ((uqname != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3608\n");
+      else
+        fprintf(stderr, "reached bug index 3608\n");
+    }
+    if ((!FIXREVERTER[3608] && (uqname != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         name = uqname;
+        #ifdef FRCOV
+        }
+        #endif
     cur = xmlHashLookup2(table, name, prefix);
     if ((cur == NULL) && (create)) {
 	cur = (xmlElementPtr) xmlMalloc(sizeof(xmlElement));
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3609]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3609\n");
+	  else
+	    fprintf(stderr, "reached bug index 3609\n");
+	}
+	if ((!FIXREVERTER[3609] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlVErrMemory(NULL, "malloc failed");
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(cur, 0, sizeof(xmlElement));
 	cur->type = XML_ELEMENT_DECL;
 
@@ -3275,8 +4803,38 @@ xmlGetDtdQElementDesc(xmlDtdPtr dtd, const xmlChar *name,
 	              const xmlChar *prefix) {
     xmlElementTablePtr table;
 
-    if (dtd == NULL) return(NULL);
-    if (dtd->elements == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3610]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3610\n");
+      else
+        fprintf(stderr, "reached bug index 3610\n");
+    }
+    if ((!FIXREVERTER[3610] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3611]) {
+      if ((dtd -> elements == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3611\n");
+      else
+        fprintf(stderr, "reached bug index 3611\n");
+    }
+    if ((!FIXREVERTER[3611] && (dtd -> elements == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     table = (xmlElementTablePtr) dtd->elements;
 
     return(xmlHashLookup2(table, name, prefix));
@@ -3300,12 +4858,57 @@ xmlGetDtdAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name) {
     xmlAttributePtr cur;
     xmlChar *uqname = NULL, *prefix = NULL;
 
-    if (dtd == NULL) return(NULL);
-    if (dtd->attributes == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3612]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3612\n");
+      else
+        fprintf(stderr, "reached bug index 3612\n");
+    }
+    if ((!FIXREVERTER[3612] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3613]) {
+      if ((dtd -> attributes == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3613\n");
+      else
+        fprintf(stderr, "reached bug index 3613\n");
+    }
+    if ((!FIXREVERTER[3613] && (dtd -> attributes == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     table = (xmlAttributeTablePtr) dtd->attributes;
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3614]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3614\n");
+      else
+        fprintf(stderr, "reached bug index 3614\n");
+    }
+    if ((!FIXREVERTER[3614] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     uqname = xmlSplitQName2(name, &prefix);
 
@@ -3336,8 +4939,38 @@ xmlGetDtdQAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name,
 	          const xmlChar *prefix) {
     xmlAttributeTablePtr table;
 
-    if (dtd == NULL) return(NULL);
-    if (dtd->attributes == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3615]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3615\n");
+      else
+        fprintf(stderr, "reached bug index 3615\n");
+    }
+    if ((!FIXREVERTER[3615] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3616]) {
+      if ((dtd -> attributes == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3616\n");
+      else
+        fprintf(stderr, "reached bug index 3616\n");
+    }
+    if ((!FIXREVERTER[3616] && (dtd -> attributes == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     table = (xmlAttributeTablePtr) dtd->attributes;
 
     return(xmlHashLookup3(table, name, prefix, elem));
@@ -3357,8 +4990,38 @@ xmlNotationPtr
 xmlGetDtdNotationDesc(xmlDtdPtr dtd, const xmlChar *name) {
     xmlNotationTablePtr table;
 
-    if (dtd == NULL) return(NULL);
-    if (dtd->notations == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3617]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3617\n");
+      else
+        fprintf(stderr, "reached bug index 3617\n");
+    }
+    if ((!FIXREVERTER[3617] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3618]) {
+      if ((dtd -> notations == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3618\n");
+      else
+        fprintf(stderr, "reached bug index 3618\n");
+    }
+    if ((!FIXREVERTER[3618] && (dtd -> notations == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     table = (xmlNotationTablePtr) dtd->notations;
 
     return(xmlHashLookup(table, name));
@@ -3381,8 +5044,22 @@ int
 xmlValidateNotationUse(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
                        const xmlChar *notationName) {
     xmlNotationPtr notaDecl;
-    if ((doc == NULL) || (doc->intSubset == NULL) ||
-        (notationName == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3619]) {
+      if ((doc == (void *) 0 || doc -> intSubset == (void *) 0 || notationName == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3619\n");
+      else
+        fprintf(stderr, "reached bug index 3619\n");
+    }
+    if ((!FIXREVERTER[3619] && (doc == (void *) 0 || doc -> intSubset == (void *) 0 || notationName == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     notaDecl = xmlGetDtdNotationDesc(doc->intSubset, notationName);
     if ((notaDecl == NULL) && (doc->extSubset != NULL))
@@ -3418,7 +5095,22 @@ xmlIsMixedElement(xmlDocPtr doc, const xmlChar *name) {
     elemDecl = xmlGetDtdElementDesc(doc->intSubset, name);
     if ((elemDecl == NULL) && (doc->extSubset != NULL))
 	elemDecl = xmlGetDtdElementDesc(doc->extSubset, name);
-    if (elemDecl == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3621]) {
+      if ((elemDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3621\n");
+      else
+        fprintf(stderr, "reached bug index 3621\n");
+    }
+    if ((!FIXREVERTER[3621] && (elemDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     switch (elemDecl->etype) {
 	case XML_ELEMENT_TYPE_UNDEFINED:
 	    return(-1);
@@ -3521,7 +5213,22 @@ xmlValidateNameValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3622]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3622\n");
+      else
+        fprintf(stderr, "reached bug index 3622\n");
+    }
+    if ((!FIXREVERTER[3622] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3569,7 +5276,22 @@ xmlValidateNamesValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3624]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3624\n");
+      else
+        fprintf(stderr, "reached bug index 3624\n");
+    }
+    if ((!FIXREVERTER[3624] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3639,7 +5361,22 @@ xmlValidateNmtokenValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3626]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3626\n");
+      else
+        fprintf(stderr, "reached bug index 3626\n");
+    }
+    if ((!FIXREVERTER[3626] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3692,7 +5429,22 @@ xmlValidateNmtokensValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3628]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3628\n");
+      else
+        fprintf(stderr, "reached bug index 3628\n");
+    }
+    if ((!FIXREVERTER[3628] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3908,8 +5660,23 @@ xmlValidateAttributeValue2(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	    xmlEntityPtr ent;
 
 	    dup = xmlStrdup(value);
-	    if (dup == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3631]) {
+	      if ((dup == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3631\n");
+	      else
+	        fprintf(stderr, "reached bug index 3631\n");
+	    }
+	    if ((!FIXREVERTER[3631] && (dup == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
+		#ifdef FRCOV
+		}
+		#endif
 	    cur = dup;
 	    while (*cur != 0) {
 		nam = cur;
@@ -3990,18 +5757,93 @@ xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     xmlAttributePtr attrDecl = NULL;
     int extsubset = 0;
 
-    if (doc == NULL) return(NULL);
-    if (elem == NULL) return(NULL);
-    if (name == NULL) return(NULL);
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3632]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3632\n");
+      else
+        fprintf(stderr, "reached bug index 3632\n");
+    }
+    if ((!FIXREVERTER[3632] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3633]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3633\n");
+      else
+        fprintf(stderr, "reached bug index 3633\n");
+    }
+    if ((!FIXREVERTER[3633] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3634]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3634\n");
+      else
+        fprintf(stderr, "reached bug index 3634\n");
+    }
+    if ((!FIXREVERTER[3634] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3635]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3635\n");
+      else
+        fprintf(stderr, "reached bug index 3635\n");
+    }
+    if ((!FIXREVERTER[3635] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((elem->ns != NULL) && (elem->ns->prefix != NULL)) {
 	xmlChar fn[50];
 	xmlChar *fullname;
 
 	fullname = xmlBuildQName(elem->name, elem->ns->prefix, fn, 50);
-	if (fullname == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3636]) {
+	  if ((fullname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3636\n");
+	  else
+	    fprintf(stderr, "reached bug index 3636\n");
+	}
+	if ((!FIXREVERTER[3636] && (fullname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	attrDecl = xmlGetDtdAttrDesc(doc->intSubset, fullname, name);
 	if ((attrDecl == NULL) && (doc->extSubset != NULL)) {
 	    attrDecl = xmlGetDtdAttrDesc(doc->extSubset, fullname, name);
@@ -4025,8 +5867,23 @@ xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	return(NULL);
 
     ret = xmlStrdup(value);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3640]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3640\n");
+      else
+        fprintf(stderr, "reached bug index 3640\n");
+    }
+    if ((!FIXREVERTER[3640] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     src = value;
     dst = ret;
     while (*src == 0x20) src++;
@@ -4075,18 +5932,93 @@ xmlValidNormalizeAttributeValue(xmlDocPtr doc, xmlNodePtr elem,
     const xmlChar *src;
     xmlAttributePtr attrDecl = NULL;
 
-    if (doc == NULL) return(NULL);
-    if (elem == NULL) return(NULL);
-    if (name == NULL) return(NULL);
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3641]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3641\n");
+      else
+        fprintf(stderr, "reached bug index 3641\n");
+    }
+    if ((!FIXREVERTER[3641] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3642]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3642\n");
+      else
+        fprintf(stderr, "reached bug index 3642\n");
+    }
+    if ((!FIXREVERTER[3642] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3643]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3643\n");
+      else
+        fprintf(stderr, "reached bug index 3643\n");
+    }
+    if ((!FIXREVERTER[3643] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3644]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3644\n");
+      else
+        fprintf(stderr, "reached bug index 3644\n");
+    }
+    if ((!FIXREVERTER[3644] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((elem->ns != NULL) && (elem->ns->prefix != NULL)) {
 	xmlChar fn[50];
 	xmlChar *fullname;
 
 	fullname = xmlBuildQName(elem->name, elem->ns->prefix, fn, 50);
-	if (fullname == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3645]) {
+	  if ((fullname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3645\n");
+	  else
+	    fprintf(stderr, "reached bug index 3645\n");
+	}
+	if ((!FIXREVERTER[3645] && (fullname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((fullname != fn) && (fullname != elem->name))
 	    xmlFree(fullname);
     }
@@ -4094,14 +6026,44 @@ xmlValidNormalizeAttributeValue(xmlDocPtr doc, xmlNodePtr elem,
     if ((attrDecl == NULL) && (doc->extSubset != NULL))
 	attrDecl = xmlGetDtdAttrDesc(doc->extSubset, elem->name, name);
 
-    if (attrDecl == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3646]) {
+      if ((attrDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3646\n");
+      else
+        fprintf(stderr, "reached bug index 3646\n");
+    }
+    if ((!FIXREVERTER[3646] && (attrDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (attrDecl->atype == XML_ATTRIBUTE_CDATA)
 	return(NULL);
 
     ret = xmlStrdup(value);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3647]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3647\n");
+      else
+        fprintf(stderr, "reached bug index 3647\n");
+    }
+    if ((!FIXREVERTER[3647] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     src = value;
     dst = ret;
     while (*src == 0x20) src++;
@@ -4150,7 +6112,22 @@ xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     int ret = 1;
     int val;
     CHECK_DTD;
-    if(attr == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3648]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3648\n");
+      else
+        fprintf(stderr, "reached bug index 3648\n");
+    }
+    if ((!FIXREVERTER[3648] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
 
     /* Attribute Default Legal */
     /* Enumeration */
@@ -4222,7 +6199,22 @@ xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     }
 
     /* Validity Constraint: Enumeration */
-    if ((attr->defaultValue != NULL) && (attr->tree != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3649]) {
+      fprintf(stderr, "reached bug index 3649\n");
+    }
+    if ((FIXREVERTER[3649] && (attr -> defaultValue != (void *) 0 )) || (!FIXREVERTER[3649] && (attr -> defaultValue != (void *) 0 && attr -> tree != (void *) 0 ))
+    #else
+    if (attr -> defaultValue != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(attr -> tree != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3649\n");
+      #endif
+    
         xmlEnumerationPtr tree = attr->tree;
 	while (tree != NULL) {
 	    if (xmlStrEqual(tree->name, attr->defaultValue)) break;
@@ -4235,6 +6227,9 @@ xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	    ret = 0;
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(ret);
 }
@@ -4263,7 +6258,22 @@ xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
     CHECK_DTD;
 
-    if (elem == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3650]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3650\n");
+      else
+        fprintf(stderr, "reached bug index 3650\n");
+    }
+    if ((!FIXREVERTER[3650] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
 
 #if 0
 #ifdef LIBXML_REGEXP_ENABLED
@@ -4280,7 +6290,22 @@ xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	cur = elem->content;
 	while (cur != NULL) {
 	    if (cur->type != XML_ELEMENT_CONTENT_OR) break;
-	    if (cur->c1 == NULL) break;
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3651]) {
+	      if ((cur -> c1 == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3651\n");
+	      else
+	        fprintf(stderr, "reached bug index 3651\n");
+	    }
+	    if ((!FIXREVERTER[3651] && (cur -> c1 == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) break;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (cur->c1->type == XML_ELEMENT_CONTENT_ELEMENT) {
 		name = cur->c1->name;
 		next = cur->c2;
@@ -4301,7 +6326,22 @@ xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 			}
 			break;
 		    }
-		    if (next->c1 == NULL) break;
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[3652]) {
+		      if ((next -> c1 == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 3652\n");
+		      else
+		        fprintf(stderr, "reached bug index 3652\n");
+		    }
+		    if ((!FIXREVERTER[3652] && (next -> c1 == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) break;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    if (next->c1->type != XML_ELEMENT_CONTENT_ELEMENT) break;
 		    if ((xmlStrEqual(next->c1->name, name)) &&
 		        (xmlStrEqual(next->c1->prefix, cur->c1->prefix))) {
@@ -4386,16 +6426,61 @@ xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     int ret = 1;
 
     CHECK_DTD;
-    if ((elem == NULL) || (elem->name == NULL)) return(0);
-    if ((attr == NULL) || (attr->name == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3653]) {
+      if ((elem == (void *) 0 || elem -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3653\n");
+      else
+        fprintf(stderr, "reached bug index 3653\n");
+    }
+    if ((!FIXREVERTER[3653] && (elem == (void *) 0 || elem -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3654]) {
+      if ((attr == (void *) 0 || attr -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3654\n");
+      else
+        fprintf(stderr, "reached bug index 3654\n");
+    }
+    if ((!FIXREVERTER[3654] && (attr == (void *) 0 || attr -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((elem->ns != NULL) && (elem->ns->prefix != NULL)) {
 	xmlChar fn[50];
 	xmlChar *fullname;
 
 	fullname = xmlBuildQName(elem->name, elem->ns->prefix, fn, 50);
-	if (fullname == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3655]) {
+	  if ((fullname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3655\n");
+	  else
+	    fprintf(stderr, "reached bug index 3655\n");
+	}
+	if ((!FIXREVERTER[3655] && (fullname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (attr->ns != NULL) {
 	    attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, fullname,
 		                          attr->name, attr->ns->prefix);
@@ -4429,12 +6514,27 @@ xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
 
     /* Validity Constraint: Attribute Value Type */
-    if (attrDecl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3656]) {
+      if ((attrDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3656\n");
+      else
+        fprintf(stderr, "reached bug index 3656\n");
+    }
+    if ((!FIXREVERTER[3656] && (attrDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_ATTRIBUTE,
 	       "No declaration for attribute %s of element %s\n",
 	       attr->name, elem->name, NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     attr->atype = attrDecl->atype;
 
     val = xmlValidateAttributeValueInternal(doc, attrDecl->atype, value);
@@ -4474,8 +6574,23 @@ xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
         /* First check that the given NOTATION was declared */
 	nota = xmlGetDtdNotationDesc(doc->intSubset, value);
-	if (nota == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3657]) {
+	  if ((nota == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3657\n");
+	  else
+	    fprintf(stderr, "reached bug index 3657\n");
+	}
+	if ((!FIXREVERTER[3657] && (nota == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    nota = xmlGetDtdNotationDesc(doc->extSubset, value);
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	if (nota == NULL) {
 	    xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_NOTATION,
@@ -4563,18 +6678,63 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
     int ret = 1;
 
     CHECK_DTD;
-    if ((elem == NULL) || (elem->name == NULL)) return(0);
-    if ((ns == NULL) || (ns->href == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3658]) {
+      if ((elem == (void *) 0 || elem -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3658\n");
+      else
+        fprintf(stderr, "reached bug index 3658\n");
+    }
+    if ((!FIXREVERTER[3658] && (elem == (void *) 0 || elem -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3659]) {
+      if ((ns == (void *) 0 || ns -> href == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3659\n");
+      else
+        fprintf(stderr, "reached bug index 3659\n");
+    }
+    if ((!FIXREVERTER[3659] && (ns == (void *) 0 || ns -> href == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (prefix != NULL) {
 	xmlChar fn[50];
 	xmlChar *fullname;
 
 	fullname = xmlBuildQName(elem->name, prefix, fn, 50);
-	if (fullname == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3660]) {
+	  if ((fullname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3660\n");
+	  else
+	    fprintf(stderr, "reached bug index 3660\n");
+	}
+	if ((!FIXREVERTER[3660] && (fullname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlVErrMemory(ctxt, "Validating namespace");
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (ns->prefix != NULL) {
 	    attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, fullname,
 		                          ns->prefix, BAD_CAST "xmlns");
@@ -4609,7 +6769,19 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
 
 
     /* Validity Constraint: Attribute Value Type */
-    if (attrDecl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3661]) {
+      if ((attrDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3661\n");
+      else
+        fprintf(stderr, "reached bug index 3661\n");
+    }
+    if ((!FIXREVERTER[3661] && (attrDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (ns->prefix != NULL) {
 	    xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_ATTRIBUTE,
 		   "No declaration for attribute xmlns:%s of element %s\n",
@@ -4621,6 +6793,9 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
 	}
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     val = xmlValidateAttributeValueInternal(doc, attrDecl->atype, value);
     if (val == 0) {
@@ -4678,8 +6853,23 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
 
         /* First check that the given NOTATION was declared */
 	nota = xmlGetDtdNotationDesc(doc->intSubset, value);
-	if (nota == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3662]) {
+	  if ((nota == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3662\n");
+	  else
+	    fprintf(stderr, "reached bug index 3662\n");
+	}
+	if ((!FIXREVERTER[3662] && (nota == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    nota = xmlGetDtdNotationDesc(doc->extSubset, value);
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	if (nota == NULL) {
 	    if (ns->prefix != NULL) {
@@ -5182,16 +7372,46 @@ xmlSnprintfElements(char *buf, int size, xmlNodePtr node, int glob) {
     xmlNodePtr cur;
     int len;
 
-    if (node == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3663]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3663\n");
+      else
+        fprintf(stderr, "reached bug index 3663\n");
+    }
+    if ((!FIXREVERTER[3663] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (glob) strcat(buf, "(");
     cur = node;
     while (cur != NULL) {
 	len = strlen(buf);
-	if (size - len < 50) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3664]) {
+	  if ((size - len < 50 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3664\n");
+	  else
+	    fprintf(stderr, "reached bug index 3664\n");
+	}
+	if ((!FIXREVERTER[3664] && (size - len < 50 ))
+	#else
+	if (0
+	#endif
+	) {
 	    if ((size - len > 4) && (buf[len - 1] != '.'))
 		strcat(buf, " ...");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
         switch (cur->type) {
             case XML_ELEMENT_NODE:
 		if ((cur->ns != NULL) && (cur->ns->prefix != NULL)) {
@@ -5276,15 +7496,45 @@ xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
     xmlElementContentPtr cont;
     const xmlChar *name;
 
-    if ((elemDecl == NULL) || (parent == NULL) || (ctxt == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3665]) {
+      if ((elemDecl == (void *) 0 || parent == (void *) 0 || ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3665\n");
+      else
+        fprintf(stderr, "reached bug index 3665\n");
+    }
+    if ((!FIXREVERTER[3665] && (elemDecl == (void *) 0 || parent == (void *) 0 || ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     cont = elemDecl->content;
     name = elemDecl->name;
 
 #ifdef LIBXML_REGEXP_ENABLED
     /* Build the regexp associated to the content model */
-    if (elemDecl->contModel == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3666]) {
+      if ((elemDecl -> contModel == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3666\n");
+      else
+        fprintf(stderr, "reached bug index 3666\n");
+    }
+    if ((!FIXREVERTER[3666] && (elemDecl -> contModel == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	ret = xmlValidBuildContentModel(ctxt, elemDecl);
+	#ifdef FRCOV
+	}
+	#endif
     if (elemDecl->contModel == NULL) {
 	return(-1);
     } else {
@@ -5329,10 +7579,25 @@ xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
 
 			    fullname = xmlBuildQName(cur->name,
 				                     cur->ns->prefix, fn, 50);
-			    if (fullname == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[3667]) {
+			      if ((fullname == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 3667\n");
+			      else
+			        fprintf(stderr, "reached bug index 3667\n");
+			    }
+			    if ((!FIXREVERTER[3667] && (fullname == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 				ret = -1;
 				goto fail;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
                             ret = xmlRegExecPushString(exec, fullname, NULL);
 			    if ((fullname != fn) && (fullname != cur->name))
 				xmlFree(fullname);
@@ -5349,8 +7614,23 @@ xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
 		cur = cur->next;
 		while (cur == NULL) {
 		    cur = nodeVPop(ctxt);
-		    if (cur == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[3668]) {
+		      if ((cur == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 3668\n");
+		      else
+		        fprintf(stderr, "reached bug index 3668\n");
+		    }
+		    if ((!FIXREVERTER[3668] && (cur == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			break;
+			#ifdef FRCOV
+			}
+			#endif
 		    cur = cur->next;
 		}
 	    }
@@ -5593,8 +7873,23 @@ xmlValidateOneCdataElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	cur = cur->next;
 	while (cur == NULL) {
 	    cur = nodeVPop(ctxt);
-	    if (cur == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3669]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3669\n");
+	      else
+	        fprintf(stderr, "reached bug index 3669\n");
+	    }
+	    if ((!FIXREVERTER[3669] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    cur = cur->next;
 	}
     }
@@ -5692,9 +7987,23 @@ xmlValidGetElemDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     xmlElementPtr elemDecl = NULL;
     const xmlChar *prefix = NULL;
 
-    if ((ctxt == NULL) || (doc == NULL) ||
-        (elem == NULL) || (elem->name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3670]) {
+      if ((ctxt == (void *) 0 || doc == (void *) 0 || elem == (void *) 0 || elem -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3670\n");
+      else
+        fprintf(stderr, "reached bug index 3670\n");
+    }
+    if ((!FIXREVERTER[3670] && (ctxt == (void *) 0 || doc == (void *) 0 || elem == (void *) 0 || elem -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (extsubset != NULL)
 	*extsubset = 0;
 
@@ -5756,10 +8065,40 @@ xmlValidatePushElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     xmlElementPtr eDecl;
     int extsubset = 0;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3671]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3671\n");
+      else
+        fprintf(stderr, "reached bug index 3671\n");
+    }
+    if ((!FIXREVERTER[3671] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 /* printf("PushElem %s\n", qname); */
-    if ((ctxt->vstateNr > 0) && (ctxt->vstate != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3672]) {
+      fprintf(stderr, "reached bug index 3672\n");
+    }
+    if ((FIXREVERTER[3672] && (ctxt -> vstateNr > 0 )) || (!FIXREVERTER[3672] && (ctxt -> vstateNr > 0 && ctxt -> vstate != (void *) 0 ))
+    #else
+    if (ctxt -> vstateNr > 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> vstate != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3672\n");
+      #endif
+    
 	xmlValidStatePtr state = ctxt->vstate;
 	xmlElementPtr elemDecl;
 
@@ -5827,6 +8166,9 @@ xmlValidatePushElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	    }
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
     eDecl = xmlValidGetElemDecl(ctxt, doc, elem, &extsubset);
     vstateVPush(ctxt, eDecl, elem);
     return(ret);
@@ -5847,11 +8189,41 @@ xmlValidatePushCData(xmlValidCtxtPtr ctxt, const xmlChar *data, int len) {
     int ret = 1;
 
 /* printf("CDATA %s %d\n", data, len); */
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3673]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3673\n");
+      else
+        fprintf(stderr, "reached bug index 3673\n");
+    }
+    if ((!FIXREVERTER[3673] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     if (len <= 0)
 	return(ret);
-    if ((ctxt->vstateNr > 0) && (ctxt->vstate != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3675]) {
+      fprintf(stderr, "reached bug index 3675\n");
+    }
+    if ((FIXREVERTER[3675] && (ctxt -> vstateNr > 0 )) || (!FIXREVERTER[3675] && (ctxt -> vstateNr > 0 && ctxt -> vstate != (void *) 0 ))
+    #else
+    if (ctxt -> vstateNr > 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> vstate != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3675\n");
+      #endif
+    
 	xmlValidStatePtr state = ctxt->vstate;
 	xmlElementPtr elemDecl;
 
@@ -5901,6 +8273,9 @@ xmlValidatePushCData(xmlValidCtxtPtr ctxt, const xmlChar *data, int len) {
 	    }
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
 done:
     return(ret);
 }
@@ -5922,10 +8297,40 @@ xmlValidatePopElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc ATTRIBUTE_UNUSED,
 		      const xmlChar *qname ATTRIBUTE_UNUSED) {
     int ret = 1;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3676]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3676\n");
+      else
+        fprintf(stderr, "reached bug index 3676\n");
+    }
+    if ((!FIXREVERTER[3676] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 /* printf("PopElem %s\n", qname); */
-    if ((ctxt->vstateNr > 0) && (ctxt->vstate != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3677]) {
+      fprintf(stderr, "reached bug index 3677\n");
+    }
+    if ((FIXREVERTER[3677] && (ctxt -> vstateNr > 0 )) || (!FIXREVERTER[3677] && (ctxt -> vstateNr > 0 && ctxt -> vstate != (void *) 0 ))
+    #else
+    if (ctxt -> vstateNr > 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> vstate != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3677\n");
+      #endif
+    
 	xmlValidStatePtr state = ctxt->vstate;
 	xmlElementPtr elemDecl;
 
@@ -5955,6 +8360,9 @@ xmlValidatePopElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc ATTRIBUTE_UNUSED,
 	}
 	vstateVPop(ctxt);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(ret);
 }
 #endif /* LIBXML_REGEXP_ENABLED */
@@ -5990,7 +8398,22 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
     CHECK_DTD;
 
-    if (elem == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3678]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3678\n");
+      else
+        fprintf(stderr, "reached bug index 3678\n");
+    }
+    if ((!FIXREVERTER[3678] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     switch (elem->type) {
         case XML_ATTRIBUTE_NODE:
 	    xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,
@@ -6009,12 +8432,27 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 				NULL,NULL,NULL);
 		return(0);
 	    }
-	    if (elem->content == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3679]) {
+	      if ((elem -> content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3679\n");
+	      else
+	        fprintf(stderr, "reached bug index 3679\n");
+	    }
+	    if ((!FIXREVERTER[3679] && (elem -> content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,
 		                "Text element has no content !\n",
 				NULL,NULL,NULL);
 		return(0);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    return(1);
         case XML_XINCLUDE_START:
         case XML_XINCLUDE_END:
@@ -6054,8 +8492,23 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
      * Fetch the declaration
      */
     elemDecl = xmlValidGetElemDecl(ctxt, doc, elem, &extsubset);
-    if (elemDecl == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3680]) {
+      if ((elemDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3680\n");
+      else
+        fprintf(stderr, "reached bug index 3680\n");
+    }
+    if ((!FIXREVERTER[3680] && (elemDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * If vstateNr is not zero that means continuous validation is
@@ -6104,8 +8557,23 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
 			fullname = xmlBuildQName(child->name, child->ns->prefix,
 				                 fn, 50);
-			if (fullname == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3681]) {
+			  if ((fullname == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 3681\n");
+			  else
+			    fprintf(stderr, "reached bug index 3681\n");
+			}
+			if ((!FIXREVERTER[3681] && (fullname == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    return(0);
+			    #ifdef FRCOV
+			    }
+			    #endif
 			cont = elemDecl->content;
 			while (cont != NULL) {
 			    if (cont->type == XML_ELEMENT_CONTENT_ELEMENT) {
@@ -6161,7 +8629,22 @@ child_ok:
 	    }
 	    break;
         case XML_ELEMENT_TYPE_ELEMENT:
-	    if ((doc->standalone == 1) && (extsubset == 1)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3682]) {
+	      fprintf(stderr, "reached bug index 3682\n");
+	    }
+	    if ((FIXREVERTER[3682] && (doc -> standalone == 1 )) || (!FIXREVERTER[3682] && (doc -> standalone == 1 && extsubset == 1 ))
+	    #else
+	    if (doc -> standalone == 1 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(extsubset == 1 ))
+	        fprintf(stderr, "triggered bug index 3682\n");
+	      #endif
+	    
 		/*
 		 * VC: Standalone Document Declaration
 		 *     - element types with element content, if white space
@@ -6186,11 +8669,29 @@ child_ok:
 		    child =child->next;
 		}
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    child = elem->children;
 	    cont = elemDecl->content;
 	    tmp = xmlValidateElementContent(ctxt, child, elemDecl, 1, elem);
-	    if (tmp <= 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3683]) {
+	      if ((tmp <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3683\n");
+	      else
+	        fprintf(stderr, "reached bug index 3683\n");
+	    }
+	    if ((!FIXREVERTER[3683] && (tmp <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		ret = tmp;
+		#ifdef FRCOV
+		}
+		#endif
 	    break;
     }
     } /* not continuous */
@@ -6207,8 +8708,23 @@ child_ok:
 
 		ns = elem->nsDef;
 		while (ns != NULL) {
-		    if (ns->prefix == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[3684]) {
+		      if ((ns -> prefix == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 3684\n");
+		      else
+		        fprintf(stderr, "reached bug index 3684\n");
+		    }
+		    if ((!FIXREVERTER[3684] && (ns -> prefix == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto found;
+			#ifdef FRCOV
+			}
+			#endif
 		    ns = ns->next;
 		}
 	    } else if (xmlStrEqual(attr->prefix, BAD_CAST "xmlns")) {
@@ -6229,8 +8745,23 @@ child_ok:
 			if (attr->prefix != NULL) {
 			    xmlNsPtr nameSpace = attrib->ns;
 
-			    if (nameSpace == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[3685]) {
+			      if ((nameSpace == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 3685\n");
+			      else
+			        fprintf(stderr, "reached bug index 3685\n");
+			    }
+			    if ((!FIXREVERTER[3685] && (nameSpace == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				nameSpace = elem->ns;
+				#ifdef FRCOV
+				}
+				#endif
 			    /*
 			     * qualified names handling is problematic, having a
 			     * different prefix should be possible but DTDs don't
@@ -6291,7 +8822,19 @@ child_ok:
 
 		ns = elem->nsDef;
 		while (ns != NULL) {
-		    if (ns->prefix == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[3688]) {
+		      if ((ns -> prefix == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 3688\n");
+		      else
+		        fprintf(stderr, "reached bug index 3688\n");
+		    }
+		    if ((!FIXREVERTER[3688] && (ns -> prefix == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			if (!xmlStrEqual(attr->defaultValue, ns->href)) {
 			    xmlErrValidNode(ctxt, elem,
 			           XML_DTD_ELEM_DEFAULT_NAMESPACE,
@@ -6301,6 +8844,9 @@ child_ok:
 			}
 			goto found;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    ns = ns->next;
 		}
 	    } else if (xmlStrEqual(attr->prefix, BAD_CAST "xmlns")) {
@@ -6346,14 +8892,44 @@ xmlValidateRoot(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
     xmlNodePtr root;
     int ret;
 
-    if (doc == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3689]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3689\n");
+      else
+        fprintf(stderr, "reached bug index 3689\n");
+    }
+    if ((!FIXREVERTER[3689] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     root = xmlDocGetRootElement(doc);
-    if ((root == NULL) || (root->name == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3690]) {
+      if ((root == (void *) 0 || root -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3690\n");
+      else
+        fprintf(stderr, "reached bug index 3690\n");
+    }
+    if ((!FIXREVERTER[3690] && (root == (void *) 0 || root -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrValid(ctxt, XML_DTD_NO_ROOT,
 	            "no root element\n", NULL);
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * When doing post validation against a separate DTD, those may
@@ -6370,10 +8946,25 @@ xmlValidateRoot(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
 		xmlChar *fullname;
 
 		fullname = xmlBuildQName(root->name, root->ns->prefix, fn, 50);
-		if (fullname == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3691]) {
+		  if ((fullname == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3691\n");
+		  else
+		    fprintf(stderr, "reached bug index 3691\n");
+		}
+		if ((!FIXREVERTER[3691] && (fullname == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlVErrMemory(ctxt, NULL);
 		    return(0);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = xmlStrEqual(doc->intSubset->name, fullname);
 		if ((fullname != fn) && (fullname != root->name))
 		    xmlFree(fullname);
@@ -6413,7 +9004,22 @@ xmlValidateElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem) {
     const xmlChar *value;
     int ret = 1;
 
-    if (elem == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3693]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3693\n");
+      else
+        fprintf(stderr, "reached bug index 3693\n");
+    }
+    if ((!FIXREVERTER[3693] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * XInclude elements were added after parsing in the infoset,
@@ -6476,8 +9082,23 @@ xmlValidateRef(xmlRefPtr ref, xmlValidCtxtPtr ctxt,
     xmlAttrPtr id;
     xmlAttrPtr attr;
 
-    if (ref == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3694]) {
+      if ((ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3694\n");
+      else
+        fprintf(stderr, "reached bug index 3694\n");
+    }
+    if ((!FIXREVERTER[3694] && (ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((ref->attr == NULL) && (ref->name == NULL))
 	return;
     attr = ref->attr;
@@ -6485,10 +9106,25 @@ xmlValidateRef(xmlRefPtr ref, xmlValidCtxtPtr ctxt,
 	xmlChar *dup, *str = NULL, *cur, save;
 
 	dup = xmlStrdup(name);
-	if (dup == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3695]) {
+	  if ((dup == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3695\n");
+	  else
+	    fprintf(stderr, "reached bug index 3695\n");
+	}
+	if ((!FIXREVERTER[3695] && (dup == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ctxt->valid = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	cur = dup;
 	while (*cur != 0) {
 	    str = cur;
@@ -6520,11 +9156,26 @@ xmlValidateRef(xmlRefPtr ref, xmlValidCtxtPtr ctxt,
 	xmlChar *dup, *str = NULL, *cur, save;
 
 	dup = xmlStrdup(name);
-	if (dup == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3696]) {
+	  if ((dup == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3696\n");
+	  else
+	    fprintf(stderr, "reached bug index 3696\n");
+	}
+	if ((!FIXREVERTER[3696] && (dup == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlVErrMemory(ctxt, "IDREFS split");
 	    ctxt->valid = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	cur = dup;
 	while (*cur != 0) {
 	    str = cur;
@@ -6575,8 +9226,23 @@ xmlValidateCheckRefCallback(void *payload, void *data, const xmlChar *name) {
     xmlValidCtxtPtr ctxt = (xmlValidCtxtPtr) data;
     xmlValidateMemo memo;
 
-    if (ref_list == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3697]) {
+      if ((ref_list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3697\n");
+      else
+        fprintf(stderr, "reached bug index 3697\n");
+    }
+    if ((!FIXREVERTER[3697] && (ref_list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     memo.ctxt = ctxt;
     memo.name = name;
 
@@ -6604,13 +9270,43 @@ xmlValidateDocumentFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
     xmlRefTablePtr table;
     unsigned int save;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3698]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3698\n");
+      else
+        fprintf(stderr, "reached bug index 3698\n");
+    }
+    if ((!FIXREVERTER[3698] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
-    if (doc == NULL) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3699]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3699\n");
+      else
+        fprintf(stderr, "reached bug index 3699\n");
+    }
+    if ((!FIXREVERTER[3699] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrValid(ctxt, XML_DTD_NO_DOC,
 		"xmlValidateDocumentFinal: doc == NULL\n", NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /* trick to get correct line id report */
     save = ctxt->finishDtd;
@@ -6689,8 +9385,23 @@ xmlValidateNotationCallback(void *payload, void *data,
 	                    const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlEntityPtr cur = (xmlEntityPtr) payload;
     xmlValidCtxtPtr ctxt = (xmlValidCtxtPtr) data;
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3703]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3703\n");
+      else
+        fprintf(stderr, "reached bug index 3703\n");
+    }
+    if ((!FIXREVERTER[3703] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (cur->etype == XML_EXTERNAL_GENERAL_UNPARSED_ENTITY) {
 	xmlChar *notation = cur->content;
 
@@ -6714,8 +9425,23 @@ xmlValidateAttributeCallback(void *payload, void *data,
     xmlDocPtr doc;
     xmlElementPtr elem = NULL;
 
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3704]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3704\n");
+      else
+        fprintf(stderr, "reached bug index 3704\n");
+    }
+    if ((!FIXREVERTER[3704] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     switch (cur->atype) {
 	case XML_ATTRIBUTE_CDATA:
 	case XML_ATTRIBUTE_ID:
@@ -6732,42 +9458,121 @@ xmlValidateAttributeCallback(void *payload, void *data,
 
 		ret = xmlValidateAttributeValue2(ctxt, ctxt->doc, cur->name,
 			                         cur->atype, cur->defaultValue);
-		if ((ret == 0) && (ctxt->valid == 1))
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3705]) {
+		  fprintf(stderr, "reached bug index 3705\n");
+		}
+		if ((FIXREVERTER[3705] && (ret == 0 )) || (!FIXREVERTER[3705] && (ret == 0 && ctxt -> valid == 1  ))
+		#else
+		if (ret == 0 
+		#endif
+		)
+		    
+		    #ifdef FRCOV
+		    {if (!(ctxt -> valid == 1  ))
+		      fprintf(stderr, "triggered bug index 3705\n");
+		    #endif
 		    ctxt->valid = 0;
+		    #ifdef FRCOV
+		    }}
+		    #endif
 	    }
 	    if (cur->tree != NULL) {
 		xmlEnumerationPtr tree = cur->tree;
 		while (tree != NULL) {
 		    ret = xmlValidateAttributeValue2(ctxt, ctxt->doc,
 				    cur->name, cur->atype, tree->name);
-		    if ((ret == 0) && (ctxt->valid == 1))
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[3706]) {
+		      fprintf(stderr, "reached bug index 3706\n");
+		    }
+		    if ((FIXREVERTER[3706] && (ret == 0 )) || (!FIXREVERTER[3706] && (ret == 0 && ctxt -> valid == 1  ))
+		    #else
+		    if (ret == 0 
+		    #endif
+		    )
+			
+			#ifdef FRCOV
+			{if (!(ctxt -> valid == 1  ))
+			  fprintf(stderr, "triggered bug index 3706\n");
+			#endif
 			ctxt->valid = 0;
+			#ifdef FRCOV
+			}}
+			#endif
 		    tree = tree->next;
 		}
 	    }
     }
     if (cur->atype == XML_ATTRIBUTE_NOTATION) {
 	doc = cur->doc;
-	if (cur->elem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3707]) {
+	  if ((cur -> elem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3707\n");
+	  else
+	    fprintf(stderr, "reached bug index 3707\n");
+	}
+	if ((!FIXREVERTER[3707] && (cur -> elem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,
 		   "xmlValidateAttributeCallback(%s): internal error\n",
 		   (const char *) cur->name);
 	    return;
 	}
-
-	if (doc != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3708]) {
+	  if ((doc != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3708\n");
+	  else
+	    fprintf(stderr, "reached bug index 3708\n");
+	}
+	if ((!FIXREVERTER[3708] && (doc != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    elem = xmlGetDtdElementDesc(doc->intSubset, cur->elem);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((elem == NULL) && (doc != NULL))
 	    elem = xmlGetDtdElementDesc(doc->extSubset, cur->elem);
 	if ((elem == NULL) && (cur->parent != NULL) &&
 	    (cur->parent->type == XML_DTD_NODE))
 	    elem = xmlGetDtdElementDesc((xmlDtdPtr) cur->parent, cur->elem);
-	if (elem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3709]) {
+	  if ((elem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3709\n");
+	  else
+	    fprintf(stderr, "reached bug index 3709\n");
+	}
+	if ((!FIXREVERTER[3709] && (elem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrValidNode(ctxt, NULL, XML_DTD_UNKNOWN_ELEM,
 		   "attribute %s: could not find decl for element %s\n",
 		   cur->name, cur->elem, NULL);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (elem->etype == XML_ELEMENT_TYPE_EMPTY) {
 	    xmlErrValidNode(ctxt, NULL, XML_DTD_EMPTY_NOTATION,
 		   "NOTATION attribute %s declared for EMPTY element %s\n",
@@ -6800,29 +9605,116 @@ xmlValidateDtdFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
     xmlAttributeTablePtr table;
     xmlEntitiesTablePtr entities;
 
-    if ((doc == NULL) || (ctxt == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3710]) {
+      if ((doc == (void *) 0 || ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3710\n");
+      else
+        fprintf(stderr, "reached bug index 3710\n");
+    }
+    if ((!FIXREVERTER[3710] && (doc == (void *) 0 || ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if ((doc->intSubset == NULL) && (doc->extSubset == NULL))
 	return(0);
     ctxt->doc = doc;
     ctxt->valid = 1;
     dtd = doc->intSubset;
-    if ((dtd != NULL) && (dtd->attributes != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3711]) {
+      fprintf(stderr, "reached bug index 3711\n");
+    }
+    if ((FIXREVERTER[3711] && (dtd != (void *) 0 )) || (!FIXREVERTER[3711] && (dtd != (void *) 0 && dtd -> attributes != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> attributes != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3711\n");
+      #endif
+    
 	table = (xmlAttributeTablePtr) dtd->attributes;
 	xmlHashScan(table, xmlValidateAttributeCallback, ctxt);
     }
-    if ((dtd != NULL) && (dtd->entities != NULL)) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3712]) {
+      fprintf(stderr, "reached bug index 3712\n");
+    }
+    if ((FIXREVERTER[3712] && (dtd != (void *) 0 )) || (!FIXREVERTER[3712] && (dtd != (void *) 0 && dtd -> entities != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> entities != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3712\n");
+      #endif
+    
 	entities = (xmlEntitiesTablePtr) dtd->entities;
 	xmlHashScan(entities, xmlValidateNotationCallback, ctxt);
     }
+    #ifdef FRCOV
+    }
+    #endif
     dtd = doc->extSubset;
-    if ((dtd != NULL) && (dtd->attributes != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3713]) {
+      fprintf(stderr, "reached bug index 3713\n");
+    }
+    if ((FIXREVERTER[3713] && (dtd != (void *) 0 )) || (!FIXREVERTER[3713] && (dtd != (void *) 0 && dtd -> attributes != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> attributes != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3713\n");
+      #endif
+    
 	table = (xmlAttributeTablePtr) dtd->attributes;
 	xmlHashScan(table, xmlValidateAttributeCallback, ctxt);
     }
-    if ((dtd != NULL) && (dtd->entities != NULL)) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3714]) {
+      fprintf(stderr, "reached bug index 3714\n");
+    }
+    if ((FIXREVERTER[3714] && (dtd != (void *) 0 )) || (!FIXREVERTER[3714] && (dtd != (void *) 0 && dtd -> entities != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> entities != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3714\n");
+      #endif
+    
 	entities = (xmlEntitiesTablePtr) dtd->entities;
 	xmlHashScan(entities, xmlValidateNotationCallback, ctxt);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->valid);
 }
 
diff --git a/vms/diffs.vms b/vms/diffs.vms
old mode 100644
new mode 100755
diff --git a/vms/readme.vms b/vms/readme.vms
old mode 100644
new mode 100755
diff --git a/win32/Makefile.bcb b/win32/Makefile.bcb
old mode 100644
new mode 100755
diff --git a/win32/Makefile.mingw b/win32/Makefile.mingw
old mode 100644
new mode 100755
diff --git a/win32/Makefile.msvc b/win32/Makefile.msvc
old mode 100644
new mode 100755
diff --git a/win32/Readme.txt b/win32/Readme.txt
old mode 100644
new mode 100755
diff --git a/win32/VC10/README.vc10 b/win32/VC10/README.vc10
old mode 100644
new mode 100755
diff --git a/win32/VC10/RuleSet1.ruleset b/win32/VC10/RuleSet1.ruleset
old mode 100644
new mode 100755
diff --git a/win32/VC10/config.h b/win32/VC10/config.h
old mode 100644
new mode 100755
diff --git a/win32/VC10/libxml2-focus.vcxproj b/win32/VC10/libxml2-focus.vcxproj
old mode 100644
new mode 100755
diff --git a/win32/VC10/libxml2.sln b/win32/VC10/libxml2.sln
old mode 100644
new mode 100755
diff --git a/win32/VC10/libxml2.vcxproj b/win32/VC10/libxml2.vcxproj
old mode 100644
new mode 100755
diff --git a/win32/VC10/libxml2.vcxproj.filters b/win32/VC10/libxml2.vcxproj.filters
old mode 100644
new mode 100755
diff --git a/win32/VC10/runsuite.vcxproj b/win32/VC10/runsuite.vcxproj
old mode 100644
new mode 100755
diff --git a/win32/VC10/runsuite.vcxproj.filters b/win32/VC10/runsuite.vcxproj.filters
old mode 100644
new mode 100755
diff --git a/win32/configure.js b/win32/configure.js
old mode 100644
new mode 100755
diff --git a/win32/defgen.xsl b/win32/defgen.xsl
old mode 100644
new mode 100755
diff --git a/win32/libxml2.def.src b/win32/libxml2.def.src
old mode 100644
new mode 100755
diff --git a/win32/libxml2.rc b/win32/libxml2.rc
old mode 100644
new mode 100755
diff --git a/win32/wince/libxml2.vcb b/win32/wince/libxml2.vcb
old mode 100644
new mode 100755
diff --git a/win32/wince/libxml2.vcl b/win32/wince/libxml2.vcl
old mode 100644
new mode 100755
diff --git a/win32/wince/libxml2.vco b/win32/wince/libxml2.vco
old mode 100644
new mode 100755
diff --git a/win32/wince/libxml2.vcp b/win32/wince/libxml2.vcp
old mode 100644
new mode 100755
diff --git a/win32/wince/libxml2.vcw b/win32/wince/libxml2.vcw
old mode 100644
new mode 100755
diff --git a/win32/wince/wincecompat.c b/win32/wince/wincecompat.c
old mode 100644
new mode 100755
diff --git a/win32/wince/wincecompat.h b/win32/wince/wincecompat.h
old mode 100644
new mode 100755
diff --git a/xinclude.c b/xinclude.c
old mode 100644
new mode 100755
index c3a1854e..9fb1ef7d
--- a/xinclude.c
+++ b/xinclude.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xinclude.c : Code to implement XInclude processing
  *
@@ -192,8 +196,23 @@ xmlXIncludeGetProp(xmlXIncludeCtxtPtr ctxt, xmlNodePtr cur,
  */
 static void
 xmlXIncludeFreeRef(xmlXIncludeRefPtr ref) {
-    if (ref == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1359]) {
+      if ((ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1359\n");
+      else
+        fprintf(stderr, "reached bug index 1359\n");
+    }
+    if ((!FIXREVERTER[1359] && (ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 #ifdef DEBUG_XINCLUDE
     xmlGenericError(xmlGenericErrorContext, "Freeing ref\n");
 #endif
@@ -230,10 +249,25 @@ xmlXIncludeNewRef(xmlXIncludeCtxtPtr ctxt, const xmlChar *URI,
     xmlGenericError(xmlGenericErrorContext, "New ref %s\n", URI);
 #endif
     ret = (xmlXIncludeRefPtr) xmlMalloc(sizeof(xmlXIncludeRef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1360]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1360\n");
+      else
+        fprintf(stderr, "reached bug index 1360\n");
+    }
+    if ((!FIXREVERTER[1360] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXIncludeErrMemory(ctxt, ref, "growing XInclude context");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlXIncludeRef));
     if (URI == NULL)
 	ret->URI = NULL;
@@ -249,21 +283,51 @@ xmlXIncludeNewRef(xmlXIncludeCtxtPtr ctxt, const xmlChar *URI,
 	ctxt->incMax = 4;
         ctxt->incTab = (xmlXIncludeRefPtr *) xmlMalloc(ctxt->incMax *
 					      sizeof(ctxt->incTab[0]));
-        if (ctxt->incTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1361]) {
+          if ((ctxt -> incTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1361\n");
+          else
+            fprintf(stderr, "reached bug index 1361\n");
+        }
+        if ((!FIXREVERTER[1361] && (ctxt -> incTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlXIncludeErrMemory(ctxt, ref, "growing XInclude context");
 	    xmlXIncludeFreeRef(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     if (ctxt->incNr >= ctxt->incMax) {
 	ctxt->incMax *= 2;
         ctxt->incTab = (xmlXIncludeRefPtr *) xmlRealloc(ctxt->incTab,
 	             ctxt->incMax * sizeof(ctxt->incTab[0]));
-        if (ctxt->incTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1362]) {
+          if ((ctxt -> incTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1362\n");
+          else
+            fprintf(stderr, "reached bug index 1362\n");
+        }
+        if ((!FIXREVERTER[1362] && (ctxt -> incTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlXIncludeErrMemory(ctxt, ref, "growing XInclude context");
 	    xmlXIncludeFreeRef(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     ctxt->incTab[ctxt->incNr++] = ret;
     return(ret);
@@ -284,14 +348,44 @@ xmlXIncludeNewContext(xmlDocPtr doc) {
 #ifdef DEBUG_XINCLUDE
     xmlGenericError(xmlGenericErrorContext, "New context\n");
 #endif
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1363]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1363\n");
+      else
+        fprintf(stderr, "reached bug index 1363\n");
+    }
+    if ((!FIXREVERTER[1363] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ret = (xmlXIncludeCtxtPtr) xmlMalloc(sizeof(xmlXIncludeCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1364]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1364\n");
+      else
+        fprintf(stderr, "reached bug index 1364\n");
+    }
+    if ((!FIXREVERTER[1364] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXIncludeErrMemory(NULL, (xmlNodePtr) doc,
 	                     "creating XInclude context");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlXIncludeCtxt));
     ret->doc = doc;
     ret->incNr = 0;
@@ -315,20 +409,50 @@ static int
 xmlXIncludeURLPush(xmlXIncludeCtxtPtr ctxt,
 	           const xmlChar *value)
 {
-    if (ctxt->urlNr > XINCLUDE_MAX_DEPTH) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1365]) {
+      if ((ctxt -> urlNr > 40 ) && !(0))
+        fprintf(stderr, "triggered bug index 1365\n");
+      else
+        fprintf(stderr, "reached bug index 1365\n");
+    }
+    if ((!FIXREVERTER[1365] && (ctxt -> urlNr > 40 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXIncludeErr(ctxt, NULL, XML_XINCLUDE_RECURSION,
 	               "detected a recursion in %s\n", value);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->urlTab == NULL) {
 	ctxt->urlMax = 4;
 	ctxt->urlNr = 0;
 	ctxt->urlTab = (xmlChar * *) xmlMalloc(
 		        ctxt->urlMax * sizeof(ctxt->urlTab[0]));
-        if (ctxt->urlTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1366]) {
+          if ((ctxt -> urlTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1366\n");
+          else
+            fprintf(stderr, "reached bug index 1366\n");
+        }
+        if ((!FIXREVERTER[1366] && (ctxt -> urlTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlXIncludeErrMemory(ctxt, NULL, "adding URL");
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     if (ctxt->urlNr >= ctxt->urlMax) {
         ctxt->urlMax *= 2;
@@ -336,10 +460,25 @@ xmlXIncludeURLPush(xmlXIncludeCtxtPtr ctxt,
             (xmlChar * *) xmlRealloc(ctxt->urlTab,
                                       ctxt->urlMax *
                                       sizeof(ctxt->urlTab[0]));
-        if (ctxt->urlTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1367]) {
+          if ((ctxt -> urlTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1367\n");
+          else
+            fprintf(stderr, "reached bug index 1367\n");
+        }
+        if ((!FIXREVERTER[1367] && (ctxt -> urlTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlXIncludeErrMemory(ctxt, NULL, "adding URL");
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     ctxt->url = ctxt->urlTab[ctxt->urlNr] = xmlStrdup(value);
     return (ctxt->urlNr++);
@@ -356,8 +495,23 @@ xmlXIncludeURLPop(xmlXIncludeCtxtPtr ctxt)
 {
     xmlChar * ret;
 
-    if (ctxt->urlNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1368]) {
+      if ((ctxt -> urlNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1368\n");
+      else
+        fprintf(stderr, "reached bug index 1368\n");
+    }
+    if ((!FIXREVERTER[1368] && (ctxt -> urlNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->urlNr--;
     if (ctxt->urlNr > 0)
         ctxt->url = ctxt->urlTab[ctxt->urlNr - 1];
@@ -382,8 +536,23 @@ xmlXIncludeFreeContext(xmlXIncludeCtxtPtr ctxt) {
 #ifdef DEBUG_XINCLUDE
     xmlGenericError(xmlGenericErrorContext, "Freeing context\n");
 #endif
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1369]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1369\n");
+      else
+        fprintf(stderr, "reached bug index 1369\n");
+    }
+    if ((!FIXREVERTER[1369] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     while (ctxt->urlNr > 0)
 	xmlXIncludeURLPop(ctxt);
     if (ctxt->urlTab != NULL)
@@ -426,10 +595,25 @@ xmlXIncludeParseFile(xmlXIncludeCtxtPtr ctxt, const char *URL) {
     xmlInitParser();
 
     pctxt = xmlNewParserCtxt();
-    if (pctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1370]) {
+      if ((pctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1370\n");
+      else
+        fprintf(stderr, "reached bug index 1370\n");
+    }
+    if ((!FIXREVERTER[1370] && (pctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXIncludeErrMemory(ctxt, NULL, "cannot allocate parser context");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * pass in the application data to the parser context.
@@ -454,15 +638,45 @@ xmlXIncludeParseFile(xmlXIncludeCtxtPtr ctxt, const char *URL) {
         URL = "./-";
 
     inputStream = xmlLoadExternalEntity(URL, NULL, pctxt);
-    if (inputStream == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1371]) {
+      if ((inputStream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1371\n");
+      else
+        fprintf(stderr, "reached bug index 1371\n");
+    }
+    if ((!FIXREVERTER[1371] && (inputStream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserCtxt(pctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     inputPush(pctxt, inputStream);
 
-    if (pctxt->directory == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1372]) {
+      if ((pctxt -> directory == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1372\n");
+      else
+        fprintf(stderr, "reached bug index 1372\n");
+    }
+    if ((!FIXREVERTER[1372] && (pctxt -> directory == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         pctxt->directory = xmlParserGetDirectory(URL);
+        #ifdef FRCOV
+        }
+        #endif
 
     pctxt->loadsubset |= XML_DETECT_IDS;
 
@@ -503,10 +717,40 @@ xmlXIncludeAddNode(xmlXIncludeCtxtPtr ctxt, xmlNodePtr cur) {
     int local = 0;
 
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1373]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1373\n");
+      else
+        fprintf(stderr, "reached bug index 1373\n");
+    }
+    if ((!FIXREVERTER[1373] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (cur == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1374]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1374\n");
+      else
+        fprintf(stderr, "reached bug index 1374\n");
+    }
+    if ((!FIXREVERTER[1374] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifdef DEBUG_XINCLUDE
     xmlGenericError(xmlGenericErrorContext, "Add node\n");
@@ -517,8 +761,23 @@ xmlXIncludeAddNode(xmlXIncludeCtxtPtr ctxt, xmlNodePtr cur) {
     href = xmlXIncludeGetProp(ctxt, cur, XINCLUDE_HREF);
     if (href == NULL) {
 	href = xmlStrdup(BAD_CAST ""); /* @@@@ href is now optional */
-	if (href == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1375]) {
+	  if ((href == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1375\n");
+	  else
+	    fprintf(stderr, "reached bug index 1375\n");
+	}
+	if ((!FIXREVERTER[1375] && (href == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     if ((href[0] == '#') || (href[0] == 0))
 	local = 1;
@@ -568,11 +827,26 @@ xmlXIncludeAddNode(xmlXIncludeCtxtPtr ctxt, xmlNodePtr cur) {
 	xmlFree(href);
     if (base != NULL)
 	xmlFree(base);
-    if (URI == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1376]) {
+      if ((URI == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1376\n");
+      else
+        fprintf(stderr, "reached bug index 1376\n");
+    }
+    if ((!FIXREVERTER[1376] && (URI == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXIncludeErr(ctxt, cur, XML_XINCLUDE_HREF_URI,
 	               "failed build URL\n", NULL);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     fragment = xmlXIncludeGetProp(ctxt, cur, XINCLUDE_PARSE_XPOINTER);
 
     /*
@@ -610,13 +884,28 @@ xmlXIncludeAddNode(xmlXIncludeCtxtPtr ctxt, xmlNodePtr cur) {
     URL = xmlSaveUri(uri);
     xmlFreeURI(uri);
     xmlFree(URI);
-    if (URL == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1377]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1377\n");
+      else
+        fprintf(stderr, "reached bug index 1377\n");
+    }
+    if ((!FIXREVERTER[1377] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXIncludeErr(ctxt, cur, XML_XINCLUDE_HREF_URI,
 	               "invalid value URI %s\n", URI);
 	if (fragment != NULL)
 	    xmlFree(fragment);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * If local and xml then we need a fragment
@@ -645,9 +934,24 @@ xmlXIncludeAddNode(xmlXIncludeCtxtPtr ctxt, xmlNodePtr cur) {
     }
 
     ref = xmlXIncludeNewRef(ctxt, URL, cur);
-    if (ref == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1378]) {
+      if ((ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1378\n");
+      else
+        fprintf(stderr, "reached bug index 1378\n");
+    }
+    if ((!FIXREVERTER[1378] && (ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ref->fragment = fragment;
     ref->doc = NULL;
     ref->xml = xml;
@@ -698,11 +1002,26 @@ xmlXIncludeRecurseDoc(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc,
 	newctxt->incNr = ctxt->incNr;
         newctxt->incTab = (xmlXIncludeRefPtr *) xmlMalloc(newctxt->incMax *
 		                          sizeof(newctxt->incTab[0]));
-        if (newctxt->incTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1379]) {
+          if ((newctxt -> incTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1379\n");
+          else
+            fprintf(stderr, "reached bug index 1379\n");
+        }
+        if ((!FIXREVERTER[1379] && (newctxt -> incTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlXIncludeErrMemory(ctxt, (xmlNodePtr) doc, "processing doc");
 	    xmlFree(newctxt);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	 * copy the urlTab
 	 */
@@ -767,31 +1086,91 @@ xmlXIncludeAddTxt(xmlXIncludeCtxtPtr ctxt, xmlNodePtr txt, const xmlURL url) {
 	ctxt->txtMax = 4;
         ctxt->txtTab = (xmlNodePtr *) xmlMalloc(ctxt->txtMax *
 		                          sizeof(ctxt->txtTab[0]));
-        if (ctxt->txtTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1380]) {
+          if ((ctxt -> txtTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1380\n");
+          else
+            fprintf(stderr, "reached bug index 1380\n");
+        }
+        if ((!FIXREVERTER[1380] && (ctxt -> txtTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlXIncludeErrMemory(ctxt, NULL, "processing text");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
         ctxt->txturlTab = (xmlURL *) xmlMalloc(ctxt->txtMax *
 		                          sizeof(ctxt->txturlTab[0]));
-        if (ctxt->txturlTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1381]) {
+          if ((ctxt -> txturlTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1381\n");
+          else
+            fprintf(stderr, "reached bug index 1381\n");
+        }
+        if ((!FIXREVERTER[1381] && (ctxt -> txturlTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlXIncludeErrMemory(ctxt, NULL, "processing text");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     if (ctxt->txtNr >= ctxt->txtMax) {
 	ctxt->txtMax *= 2;
         ctxt->txtTab = (xmlNodePtr *) xmlRealloc(ctxt->txtTab,
 	             ctxt->txtMax * sizeof(ctxt->txtTab[0]));
-        if (ctxt->txtTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1382]) {
+          if ((ctxt -> txtTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1382\n");
+          else
+            fprintf(stderr, "reached bug index 1382\n");
+        }
+        if ((!FIXREVERTER[1382] && (ctxt -> txtTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlXIncludeErrMemory(ctxt, NULL, "processing text");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
         ctxt->txturlTab = (xmlURL *) xmlRealloc(ctxt->txturlTab,
 	             ctxt->txtMax * sizeof(ctxt->txturlTab[0]));
-        if (ctxt->txturlTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1383]) {
+          if ((ctxt -> txturlTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1383\n");
+          else
+            fprintf(stderr, "reached bug index 1383\n");
+        }
+        if ((!FIXREVERTER[1383] && (ctxt -> txturlTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlXIncludeErrMemory(ctxt, NULL, "processing text");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     ctxt->txtTab[ctxt->txtNr] = txt;
     ctxt->txturlTab[ctxt->txtNr] = xmlStrdup(url);
@@ -823,9 +1202,23 @@ xmlXIncludeCopyNode(xmlXIncludeCtxtPtr ctxt, xmlDocPtr target,
 	            xmlDocPtr source, xmlNodePtr elem) {
     xmlNodePtr result = NULL;
 
-    if ((ctxt == NULL) || (target == NULL) || (source == NULL) ||
-	(elem == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1384]) {
+      if ((ctxt == (void *) 0 || target == (void *) 0 || source == (void *) 0 || elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1384\n");
+      else
+        fprintf(stderr, "reached bug index 1384\n");
+    }
+    if ((!FIXREVERTER[1384] && (ctxt == (void *) 0 || target == (void *) 0 || source == (void *) 0 || elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (elem->type == XML_DTD_NODE)
 	return(NULL);
     if (elem->type == XML_DOCUMENT_NODE)
@@ -850,9 +1243,23 @@ xmlXIncludeCopyNodeList(xmlXIncludeCtxtPtr ctxt, xmlDocPtr target,
 	                xmlDocPtr source, xmlNodePtr elem) {
     xmlNodePtr cur, res, result = NULL, last = NULL;
 
-    if ((ctxt == NULL) || (target == NULL) || (source == NULL) ||
-	(elem == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1385]) {
+      if ((ctxt == (void *) 0 || target == (void *) 0 || source == (void *) 0 || elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1385\n");
+      else
+        fprintf(stderr, "reached bug index 1385\n");
+    }
+    if ((!FIXREVERTER[1385] && (ctxt == (void *) 0 || target == (void *) 0 || source == (void *) 0 || elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     cur = elem;
     while (cur != NULL) {
 	res = xmlXIncludeCopyNode(ctxt, target, source, cur);
@@ -884,8 +1291,23 @@ xmlXIncludeGetNthChild(xmlNodePtr cur, int no) {
         return(NULL);
     cur = cur->children;
     for (i = 0;i <= no;cur = cur->next) {
-	if (cur == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1386]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1386\n");
+	  else
+	    fprintf(stderr, "reached bug index 1386\n");
+	}
+	if ((!FIXREVERTER[1386] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(cur);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((cur->type == XML_ELEMENT_NODE) ||
 	    (cur->type == XML_DOCUMENT_NODE) ||
 	    (cur->type == XML_HTML_DOCUMENT_NODE)) {
@@ -921,9 +1343,23 @@ xmlXIncludeCopyRange(xmlXIncludeCtxtPtr ctxt, xmlDocPtr target,
     int index1, index2;
     int level = 0, lastLevel = 0, endLevel = 0, endFlag = 0;
 
-    if ((ctxt == NULL) || (target == NULL) || (source == NULL) ||
-	(range == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1388]) {
+      if ((ctxt == (void *) 0 || target == (void *) 0 || source == (void *) 0 || range == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1388\n");
+      else
+        fprintf(stderr, "reached bug index 1388\n");
+    }
+    if ((!FIXREVERTER[1388] && (ctxt == (void *) 0 || target == (void *) 0 || source == (void *) 0 || range == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (range->type != XPATH_RANGE)
 	return(NULL);
     start = (xmlNodePtr) range->user;
@@ -931,8 +1367,23 @@ xmlXIncludeCopyRange(xmlXIncludeCtxtPtr ctxt, xmlDocPtr target,
     if ((start == NULL) || (start->type == XML_NAMESPACE_DECL))
 	return(NULL);
     end = range->user2;
-    if (end == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1389]) {
+      if ((end == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1389\n");
+      else
+        fprintf(stderr, "reached bug index 1389\n");
+    }
+    if ((!FIXREVERTER[1389] && (end == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(xmlDocCopyNode(start, target, 1));
+	#ifdef FRCOV
+	}
+	#endif
     if (end->type == XML_NAMESPACE_DECL)
         return(NULL);
 
@@ -988,8 +1439,23 @@ xmlXIncludeCopyRange(xmlXIncludeCtxtPtr ctxt, xmlDocPtr target,
 		    tmp = xmlNewTextLen(content, len);
 		}
 		/* single sub text node selection */
-		if (list == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1390]) {
+		  if ((list == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1390\n");
+		  else
+		    fprintf(stderr, "reached bug index 1390\n");
+		}
+		if ((!FIXREVERTER[1390] && (list == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(tmp);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		/* prune and return full set */
 		if (level == lastLevel)
 		    xmlAddNextSibling(last, tmp);
@@ -1130,16 +1596,60 @@ xmlXIncludeCopyXPointer(xmlXIncludeCtxtPtr ctxt, xmlDocPtr target,
     xmlNodePtr list = NULL, last = NULL;
     int i;
 
-    if (source == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1391]) {
+      if ((source == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1391\n");
+      else
+        fprintf(stderr, "reached bug index 1391\n");
+    }
+    if ((!FIXREVERTER[1391] && (source == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	source = ctxt->doc;
-    if ((ctxt == NULL) || (target == NULL) || (source == NULL) ||
-	(obj == NULL))
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1392]) {
+      if ((ctxt == (void *) 0 || target == (void *) 0 || source == (void *) 0 || obj == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1392\n");
+      else
+        fprintf(stderr, "reached bug index 1392\n");
+    }
+    if ((!FIXREVERTER[1392] && (ctxt == (void *) 0 || target == (void *) 0 || source == (void *) 0 || obj == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     switch (obj->type) {
         case XPATH_NODESET: {
 	    xmlNodeSetPtr set = obj->nodesetval;
-	    if (set == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1393]) {
+	      if ((set == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1393\n");
+	      else
+	        fprintf(stderr, "reached bug index 1393\n");
+	    }
+	    if ((!FIXREVERTER[1393] && (set == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    for (i = 0;i < set->nodeNr;i++) {
 		if (set->nodeTab[i] == NULL)
 		    continue;
@@ -1206,8 +1716,23 @@ xmlXIncludeCopyXPointer(xmlXIncludeCtxtPtr ctxt, xmlDocPtr target,
 		    xmlAddNextSibling(last,
 			    xmlXIncludeCopyNode(ctxt, target, source,
 				                set->nodeTab[i]));
-		    if (last->next != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1394]) {
+		      if ((last -> next != (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1394\n");
+		      else
+		        fprintf(stderr, "reached bug index 1394\n");
+		    }
+		    if ((!FIXREVERTER[1394] && (last -> next != (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			last = last->next;
+			#ifdef FRCOV
+			}
+			#endif
 		}
 	    }
 	    break;
@@ -1215,8 +1740,23 @@ xmlXIncludeCopyXPointer(xmlXIncludeCtxtPtr ctxt, xmlDocPtr target,
 #ifdef LIBXML_XPTR_ENABLED
 	case XPATH_LOCATIONSET: {
 	    xmlLocationSetPtr set = (xmlLocationSetPtr) obj->user;
-	    if (set == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1395]) {
+	      if ((set == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1395\n");
+	      else
+	        fprintf(stderr, "reached bug index 1395\n");
+	    }
+	    if ((!FIXREVERTER[1395] && (set == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    for (i = 0;i < set->locNr;i++) {
 		if (last == NULL)
 		    list = last = xmlXIncludeCopyXPointer(ctxt, target, source,
@@ -1273,12 +1813,42 @@ xmlXIncludeMergeEntity(void *payload, void *vdata,
     xmlDocPtr doc;
     xmlXIncludeCtxtPtr ctxt;
 
-    if ((ent == NULL) || (data == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1396]) {
+      if ((ent == (void *) 0 || data == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1396\n");
+      else
+        fprintf(stderr, "reached bug index 1396\n");
+    }
+    if ((!FIXREVERTER[1396] && (ent == (void *) 0 || data == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     ctxt = data->ctxt;
     doc = data->doc;
-    if ((ctxt == NULL) || (doc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1397]) {
+      if ((ctxt == (void *) 0 || doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1397\n");
+      else
+        fprintf(stderr, "reached bug index 1397\n");
+    }
+    if ((!FIXREVERTER[1397] && (ctxt == (void *) 0 || doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     switch (ent->etype) {
         case XML_INTERNAL_PARAMETER_ENTITY:
         case XML_EXTERNAL_PARAMETER_ENTITY:
@@ -1292,8 +1862,23 @@ xmlXIncludeMergeEntity(void *payload, void *vdata,
     ret = xmlAddDocEntity(doc, ent->name, ent->etype, ent->ExternalID,
 			  ent->SystemID, ent->content);
     if (ret != NULL) {
-	if (ent->URI != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1398]) {
+	  if ((ent -> URI != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1398\n");
+	  else
+	    fprintf(stderr, "reached bug index 1398\n");
+	}
+	if ((!FIXREVERTER[1398] && (ent -> URI != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ret->URI = xmlStrdup(ent->URI);
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
 	prev = xmlGetDocEntity(doc, ent->name);
 	if (prev != NULL) {
@@ -1349,24 +1934,99 @@ xmlXIncludeMergeEntities(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc,
     xmlNodePtr cur;
     xmlDtdPtr target, source;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1399]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1399\n");
+      else
+        fprintf(stderr, "reached bug index 1399\n");
+    }
+    if ((!FIXREVERTER[1399] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-
-    if ((from == NULL) || (from->intSubset == NULL))
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1400]) {
+      if ((from == (void *) 0 || from -> intSubset == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1400\n");
+      else
+        fprintf(stderr, "reached bug index 1400\n");
+    }
+    if ((!FIXREVERTER[1400] && (from == (void *) 0 || from -> intSubset == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     target = doc->intSubset;
     if (target == NULL) {
 	cur = xmlDocGetRootElement(doc);
-	if (cur == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1401]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1401\n");
+	  else
+	    fprintf(stderr, "reached bug index 1401\n");
+	}
+	if ((!FIXREVERTER[1401] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
         target = xmlCreateIntSubset(doc, cur->name, NULL, NULL);
-	if (target == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1402]) {
+	  if ((target == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1402\n");
+	  else
+	    fprintf(stderr, "reached bug index 1402\n");
+	}
+	if ((!FIXREVERTER[1402] && (target == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
     source = from->intSubset;
-    if ((source != NULL) && (source->entities != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1403]) {
+      fprintf(stderr, "reached bug index 1403\n");
+    }
+    if ((FIXREVERTER[1403] && (source != (void *) 0 )) || (!FIXREVERTER[1403] && (source != (void *) 0 && source -> entities != (void *) 0 ))
+    #else
+    if (source != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(source -> entities != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1403\n");
+      #endif
+    
 	xmlXIncludeMergeData data;
 
 	data.ctxt = ctxt;
@@ -1375,8 +2035,26 @@ xmlXIncludeMergeEntities(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc,
 	xmlHashScan((xmlHashTablePtr) source->entities,
 		    xmlXIncludeMergeEntity, &data);
     }
+    #ifdef FRCOV
+    }
+    #endif
     source = from->extSubset;
-    if ((source != NULL) && (source->entities != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1404]) {
+      fprintf(stderr, "reached bug index 1404\n");
+    }
+    if ((FIXREVERTER[1404] && (source != (void *) 0 )) || (!FIXREVERTER[1404] && (source != (void *) 0 && source -> entities != (void *) 0 ))
+    #else
+    if (source != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(source -> entities != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1404\n");
+      #endif
+    
 	xmlXIncludeMergeData data;
 
 	data.ctxt = ctxt;
@@ -1391,6 +2069,9 @@ xmlXIncludeMergeEntities(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc,
 			xmlXIncludeMergeEntity, &data);
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(0);
 }
 
@@ -1422,12 +2103,27 @@ xmlXIncludeLoadDoc(xmlXIncludeCtxtPtr ctxt, const xmlChar *url, int nr) {
      * Check the URL and remove any fragment identifier
      */
     uri = xmlParseURI((const char *)url);
-    if (uri == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1405]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1405\n");
+      else
+        fprintf(stderr, "reached bug index 1405\n");
+    }
+    if ((!FIXREVERTER[1405] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	               XML_XINCLUDE_HREF_URI,
 		       "invalid value URI %s\n", url);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (uri->fragment != NULL) {
 	fragment = (xmlChar *) uri->fragment;
 	uri->fragment = NULL;
@@ -1439,7 +2135,19 @@ xmlXIncludeLoadDoc(xmlXIncludeCtxtPtr ctxt, const xmlChar *url, int nr) {
     }
     URL = xmlSaveUri(uri);
     xmlFreeURI(uri);
-    if (URL == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1406]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1406\n");
+      else
+        fprintf(stderr, "reached bug index 1406\n");
+    }
+    if ((!FIXREVERTER[1406] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (ctxt->incTab != NULL)
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 			   XML_XINCLUDE_HREF_URI,
@@ -1452,6 +2160,9 @@ xmlXIncludeLoadDoc(xmlXIncludeCtxtPtr ctxt, const xmlChar *url, int nr) {
 	    xmlFree(fragment);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Handling of references to the local document are done
@@ -1499,12 +2210,27 @@ xmlXIncludeLoadDoc(xmlXIncludeCtxtPtr ctxt, const xmlChar *url, int nr) {
 #ifdef LIBXML_XPTR_ENABLED
     ctxt->parseFlags = saveFlags;
 #endif
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1407]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1407\n");
+      else
+        fprintf(stderr, "reached bug index 1407\n");
+    }
+    if ((!FIXREVERTER[1407] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(URL);
 	if (fragment != NULL)
 	    xmlFree(fragment);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->incTab[nr]->doc = doc;
     /*
      * It's possible that the requested URL has been mapped to a
@@ -1818,11 +2544,26 @@ xmlXIncludeLoadTxt(xmlXIncludeCtxtPtr ctxt, const xmlChar *url, int nr) {
      * Check the URL and remove any fragment identifier
      */
     uri = xmlParseURI((const char *)url);
-    if (uri == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1408]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1408\n");
+      else
+        fprintf(stderr, "reached bug index 1408\n");
+    }
+    if ((!FIXREVERTER[1408] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref, XML_XINCLUDE_HREF_URI,
 	               "invalid value URI %s\n", url);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (uri->fragment != NULL) {
 	xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref, XML_XINCLUDE_TEXT_FRAGMENT,
 	               "fragment identifier forbidden for text: %s\n",
@@ -1832,11 +2573,26 @@ xmlXIncludeLoadTxt(xmlXIncludeCtxtPtr ctxt, const xmlChar *url, int nr) {
     }
     URL = xmlSaveUri(uri);
     xmlFreeURI(uri);
-    if (URL == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1409]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1409\n");
+      else
+        fprintf(stderr, "reached bug index 1409\n");
+    }
+    if ((!FIXREVERTER[1409] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref, XML_XINCLUDE_HREF_URI,
 	               "invalid value URI %s\n", url);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Handling of references to the local document are done
@@ -1889,11 +2645,26 @@ xmlXIncludeLoadTxt(xmlXIncludeCtxtPtr ctxt, const xmlChar *url, int nr) {
      */
     pctxt = xmlNewParserCtxt();
     inputStream = xmlLoadExternalEntity((const char*)URL, NULL, pctxt);
-    if(inputStream == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1410]) {
+      if ((inputStream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1410\n");
+      else
+        fprintf(stderr, "reached bug index 1410\n");
+    }
+    if ((!FIXREVERTER[1410] && (inputStream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserCtxt(pctxt);
 	xmlFree(URL);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     buf = inputStream->buf;
     if (buf == NULL) {
 	xmlFreeInputStream (inputStream);
@@ -1983,8 +2754,23 @@ xmlXIncludeLoadFallback(xmlXIncludeCtxtPtr ctxt, xmlNodePtr fallback, int nr) {
 	 * (Bug 129969), so we re-process the fallback just in case
 	 */
 	newctxt = xmlXIncludeNewContext(ctxt->doc);
-	if (newctxt == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1411]) {
+	  if ((newctxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1411\n");
+	  else
+	    fprintf(stderr, "reached bug index 1411\n");
+	}
+	if ((!FIXREVERTER[1411] && (newctxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	newctxt->_private = ctxt->_private;
 	newctxt->base = xmlStrdup(ctxt->base);	/* Inherit the base from the existing context */
 	xmlXIncludeSetFlags(newctxt, ctxt->parseFlags);
@@ -2046,13 +2832,58 @@ xmlXIncludeLoadNode(xmlXIncludeCtxtPtr ctxt, int nr) {
     int xml = 1; /* default Issue 64 */
     int ret;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1413]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1413\n");
+      else
+        fprintf(stderr, "reached bug index 1413\n");
+    }
+    if ((!FIXREVERTER[1413] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if ((nr < 0) || (nr >= ctxt->incNr))
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1414]) {
+      if ((nr < 0 || nr >= ctxt -> incNr ) && !(0))
+        fprintf(stderr, "triggered bug index 1414\n");
+      else
+        fprintf(stderr, "reached bug index 1414\n");
+    }
+    if ((!FIXREVERTER[1414] && (nr < 0 || nr >= ctxt -> incNr ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     cur = ctxt->incTab[nr]->ref;
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1415]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1415\n");
+      else
+        fprintf(stderr, "reached bug index 1415\n");
+    }
+    if ((!FIXREVERTER[1415] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * read the attributes
@@ -2060,8 +2891,23 @@ xmlXIncludeLoadNode(xmlXIncludeCtxtPtr ctxt, int nr) {
     href = xmlXIncludeGetProp(ctxt, cur, XINCLUDE_HREF);
     if (href == NULL) {
 	href = xmlStrdup(BAD_CAST ""); /* @@@@ href is now optional */
-	if (href == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1416]) {
+	  if ((href == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1416\n");
+	  else
+	    fprintf(stderr, "reached bug index 1416\n");
+	}
+	if ((!FIXREVERTER[1416] && (href == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     parse = xmlXIncludeGetProp(ctxt, cur, XINCLUDE_PARSE);
     if (parse != NULL) {
@@ -2196,10 +3042,40 @@ static int
 xmlXIncludeIncludeNode(xmlXIncludeCtxtPtr ctxt, int nr) {
     xmlNodePtr cur, end, list, tmp;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1418]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1418\n");
+      else
+        fprintf(stderr, "reached bug index 1418\n");
+    }
+    if ((!FIXREVERTER[1418] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if ((nr < 0) || (nr >= ctxt->incNr))
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1419]) {
+      if ((nr < 0 || nr >= ctxt -> incNr ) && !(0))
+        fprintf(stderr, "triggered bug index 1419\n");
+      else
+        fprintf(stderr, "reached bug index 1419\n");
+    }
+    if ((!FIXREVERTER[1419] && (nr < 0 || nr >= ctxt -> incNr ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     cur = ctxt->incTab[nr]->ref;
     if ((cur == NULL) || (cur->type == XML_NAMESPACE_DECL))
 	return(-1);
@@ -2259,12 +3135,27 @@ xmlXIncludeIncludeNode(xmlXIncludeCtxtPtr ctxt, int nr) {
 	 */
 	cur->type = XML_XINCLUDE_START;
 	end = xmlNewDocNode(cur->doc, cur->ns, cur->name, NULL);
-	if (end == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1421]) {
+	  if ((end == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1421\n");
+	  else
+	    fprintf(stderr, "reached bug index 1421\n");
+	}
+	if ((!FIXREVERTER[1421] && (end == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_BUILD_FAILED,
 			   "failed to build node\n", NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	end->type = XML_XINCLUDE_END;
 	xmlAddNextSibling(cur, end);
 
@@ -2294,12 +3185,42 @@ xmlXIncludeIncludeNode(xmlXIncludeCtxtPtr ctxt, int nr) {
  */
 static int
 xmlXIncludeTestNode(xmlXIncludeCtxtPtr ctxt, xmlNodePtr node) {
-    if (node == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1422]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1422\n");
+      else
+        fprintf(stderr, "reached bug index 1422\n");
+    }
+    if ((!FIXREVERTER[1422] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     if (node->type != XML_ELEMENT_NODE)
 	return(0);
-    if (node->ns == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1423]) {
+      if ((node -> ns == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1423\n");
+      else
+        fprintf(stderr, "reached bug index 1423\n");
+    }
+    if ((!FIXREVERTER[1423] && (node -> ns == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     if ((xmlStrEqual(node->ns->href, XINCLUDE_NS)) ||
         (xmlStrEqual(node->ns->href, XINCLUDE_OLD_NS))) {
 	if (xmlStrEqual(node->ns->href, XINCLUDE_OLD_NS)) {
@@ -2378,8 +3299,23 @@ xmlXIncludeDoProcess(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr tree) {
 
     if ((doc == NULL) || (tree == NULL) || (tree->type == XML_NAMESPACE_DECL))
 	return(-1);
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1425]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1425\n");
+      else
+        fprintf(stderr, "reached bug index 1425\n");
+    }
+    if ((!FIXREVERTER[1425] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (doc->URL != NULL) {
 	ret = xmlXIncludeURLPush(ctxt, doc->URL);
@@ -2466,8 +3402,23 @@ xmlXIncludeDoProcess(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr tree) {
  */
 int
 xmlXIncludeSetFlags(xmlXIncludeCtxtPtr ctxt, int flags) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1427]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1427\n");
+      else
+        fprintf(stderr, "reached bug index 1427\n");
+    }
+    if ((!FIXREVERTER[1427] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->parseFlags = flags;
     return(0);
 }
diff --git a/xlink.c b/xlink.c
old mode 100644
new mode 100755
diff --git a/xml2-config.1 b/xml2-config.1
old mode 100644
new mode 100755
diff --git a/xml2-config.in b/xml2-config.in
old mode 100644
new mode 100755
diff --git a/xml2Conf.sh.in b/xml2Conf.sh.in
old mode 100644
new mode 100755
diff --git a/xmlIO.c b/xmlIO.c
old mode 100644
new mode 100755
index 3ab73398..83f32cd2
--- a/xmlIO.c
+++ b/xmlIO.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xmlIO.c : implementation of the I/O interfaces used by the parser
  *
@@ -407,8 +411,38 @@ __xmlIOErr(int domain, int code, const char *extra)
 #endif /* HAVE_ERRNO_H */
     }
     idx = 0;
-    if (code >= XML_IO_UNKNOWN) idx = code - XML_IO_UNKNOWN;
-    if (idx >= (sizeof(IOerr) / sizeof(IOerr[0]))) idx = 0;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3825]) {
+      if ((code >= XML_IO_UNKNOWN ) && !(0))
+        fprintf(stderr, "triggered bug index 3825\n");
+      else
+        fprintf(stderr, "reached bug index 3825\n");
+    }
+    if ((!FIXREVERTER[3825] && (code >= XML_IO_UNKNOWN ))
+    #else
+    if (0
+    #endif
+    ) idx = code - XML_IO_UNKNOWN;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3826]) {
+      if ((idx >= sizeof ( IOerr ) / sizeof ( IOerr [ 0 ] ) ) && !(0))
+        fprintf(stderr, "triggered bug index 3826\n");
+      else
+        fprintf(stderr, "reached bug index 3826\n");
+    }
+    if ((!FIXREVERTER[3826] && (idx >= sizeof ( IOerr ) / sizeof ( IOerr [ 0 ] ) ))
+    #else
+    if (0
+    #endif
+    ) idx = 0;
+    #ifdef FRCOV
+    }
+    #endif
 
     __xmlSimpleError(domain, code, NULL, IOerr[idx], extra);
 }
@@ -801,8 +835,23 @@ xmlFileOpen_real (const char *filename) {
     const char *path = filename;
     FILE *fd;
 
-    if (filename == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3830]) {
+      if ((filename == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3830\n");
+      else
+        fprintf(stderr, "reached bug index 3830\n");
+    }
+    if ((!FIXREVERTER[3830] && (filename == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (!strcmp(filename, "-")) {
 	fd = stdin;
@@ -906,8 +955,23 @@ xmlFileOpenW (const char *filename) {
     } else
 	path = filename;
 
-    if (path == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3831]) {
+      if ((path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3831\n");
+      else
+        fprintf(stderr, "reached bug index 3831\n");
+    }
+    if ((!FIXREVERTER[3831] && (path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
 #if defined(_WIN32) || defined (__DJGPP__) && !defined (__CYGWIN__)
     fd = xmlWrapOpenUtf8(path, 1);
@@ -935,8 +999,23 @@ xmlFileOpenW (const char *filename) {
 int
 xmlFileRead (void * context, char * buffer, int len) {
     int ret;
-    if ((context == NULL) || (buffer == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3832]) {
+      if ((context == (void *) 0 || buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3832\n");
+      else
+        fprintf(stderr, "reached bug index 3832\n");
+    }
+    if ((!FIXREVERTER[3832] && (context == (void *) 0 || buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     ret = fread(&buffer[0], 1,  len, (FILE *) context);
     if (ret < 0) xmlIOErr(0, "fread()");
     return(ret);
@@ -957,8 +1036,23 @@ static int
 xmlFileWrite (void * context, const char * buffer, int len) {
     int items;
 
-    if ((context == NULL) || (buffer == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3833]) {
+      if ((context == (void *) 0 || buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3833\n");
+      else
+        fprintf(stderr, "reached bug index 3833\n");
+    }
+    if ((!FIXREVERTER[3833] && (context == (void *) 0 || buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     items = fwrite(&buffer[0], len, 1, (FILE *) context);
     if ((items == 0) && (ferror((FILE *) context))) {
         xmlIOErr(0, "fwrite()");
@@ -981,8 +1075,23 @@ xmlFileClose (void * context) {
     FILE *fil;
     int ret;
 
-    if (context == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3834]) {
+      if ((context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3834\n");
+      else
+        fprintf(stderr, "reached bug index 3834\n");
+    }
+    if ((!FIXREVERTER[3834] && (context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     fil = (FILE *) context;
     if ((fil == stdout) || (fil == stderr)) {
         ret = fflush(fil);
@@ -1790,23 +1899,68 @@ xmlIOHTTPOpenW(const char *post_uri, int compression ATTRIBUTE_UNUSED)
 
     xmlIOHTTPWriteCtxtPtr ctxt = NULL;
 
-    if (post_uri == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3837]) {
+      if ((post_uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3837\n");
+      else
+        fprintf(stderr, "reached bug index 3837\n");
+    }
+    if ((!FIXREVERTER[3837] && (post_uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ctxt = xmlMalloc(sizeof(xmlIOHTTPWriteCtxt));
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3838]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3838\n");
+      else
+        fprintf(stderr, "reached bug index 3838\n");
+    }
+    if ((!FIXREVERTER[3838] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlIOErrMemory("creating HTTP output context");
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     (void) memset(ctxt, 0, sizeof(xmlIOHTTPWriteCtxt));
 
     ctxt->uri = (char *) xmlStrdup((const xmlChar *)post_uri);
-    if (ctxt->uri == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3839]) {
+      if ((ctxt -> uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3839\n");
+      else
+        fprintf(stderr, "reached bug index 3839\n");
+    }
+    if ((!FIXREVERTER[3839] && (ctxt -> uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlIOErrMemory("copying URI");
         xmlFreeHTTPWriteCtxt(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * **  Since the document length is required for an HTTP post,
@@ -1865,7 +2019,22 @@ xmlIOHTTPDfltOpenW( const char * post_uri ) {
  */
 int
 xmlIOHTTPRead(void * context, char * buffer, int len) {
-    if ((buffer == NULL) || (len < 0)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3840]) {
+      if ((buffer == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3840\n");
+      else
+        fprintf(stderr, "reached bug index 3840\n");
+    }
+    if ((!FIXREVERTER[3840] && (buffer == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlNanoHTTPRead(context, &buffer[0], len));
 }
 
@@ -1887,8 +2056,23 @@ xmlIOHTTPWrite( void * context, const char * buffer, int len ) {
 
     xmlIOHTTPWriteCtxtPtr	ctxt = context;
 
-    if ( ( ctxt == NULL ) || ( ctxt->doc_buff == NULL ) || ( buffer == NULL ) )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3841]) {
+      if ((ctxt == (void *) 0 || ctxt -> doc_buff == (void *) 0 || buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3841\n");
+      else
+        fprintf(stderr, "reached bug index 3841\n");
+    }
+    if ((!FIXREVERTER[3841] && (ctxt == (void *) 0 || ctxt -> doc_buff == (void *) 0 || buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     )
 	return ( -1 );
+	#ifdef FRCOV
+	}
+	#endif
 
     if ( len > 0 ) {
 
@@ -1953,8 +2137,23 @@ xmlIOHTTPCloseWrite( void * context, const char * http_mthd ) {
     char *			content_type = (char *) "text/xml";
     void *			http_ctxt = NULL;
 
-    if ( ( ctxt == NULL ) || ( http_mthd == NULL ) )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3842]) {
+      if ((ctxt == (void *) 0 || http_mthd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3842\n");
+      else
+        fprintf(stderr, "reached bug index 3842\n");
+    }
+    if ((!FIXREVERTER[3842] && (ctxt == (void *) 0 || http_mthd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     )
 	return ( -1 );
+	#ifdef FRCOV
+	}
+	#endif
 
     /*  Retrieve the content from the appropriate buffer  */
 
@@ -2144,7 +2343,22 @@ xmlIOFTPOpen (const char *filename) {
  */
 int
 xmlIOFTPRead(void * context, char * buffer, int len) {
-    if ((buffer == NULL) || (len < 0)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3843]) {
+      if ((buffer == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3843\n");
+      else
+        fprintf(stderr, "reached bug index 3843\n");
+    }
+    if ((!FIXREVERTER[3843] && (buffer == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlNanoFTPRead(context, &buffer[0], len));
 }
 
@@ -2325,16 +2539,46 @@ xmlAllocParserInputBuffer(xmlCharEncoding enc) {
     xmlParserInputBufferPtr ret;
 
     ret = (xmlParserInputBufferPtr) xmlMalloc(sizeof(xmlParserInputBuffer));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3846]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3846\n");
+      else
+        fprintf(stderr, "reached bug index 3846\n");
+    }
+    if ((!FIXREVERTER[3846] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlIOErrMemory("creating input buffer");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, (size_t) sizeof(xmlParserInputBuffer));
     ret->buffer = xmlBufCreateSize(2 * xmlDefaultBufferSize);
-    if (ret->buffer == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3847]) {
+      if ((ret -> buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3847\n");
+      else
+        fprintf(stderr, "reached bug index 3847\n");
+    }
+    if ((!FIXREVERTER[3847] && (ret -> buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlBufSetAllocationScheme(ret->buffer, XML_BUFFER_ALLOC_DOUBLEIT);
     ret->encoder = xmlGetCharEncodingHandler(enc);
     if (ret->encoder != NULL)
@@ -2415,16 +2659,46 @@ xmlAllocOutputBufferInternal(xmlCharEncodingHandlerPtr encoder) {
     xmlOutputBufferPtr ret;
 
     ret = (xmlOutputBufferPtr) xmlMalloc(sizeof(xmlOutputBuffer));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3851]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3851\n");
+      else
+        fprintf(stderr, "reached bug index 3851\n");
+    }
+    if ((!FIXREVERTER[3851] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlIOErrMemory("creating output buffer");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, (size_t) sizeof(xmlOutputBuffer));
     ret->buffer = xmlBufCreate();
-    if (ret->buffer == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3852]) {
+      if ((ret -> buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3852\n");
+      else
+        fprintf(stderr, "reached bug index 3852\n");
+    }
+    if ((!FIXREVERTER[3852] && (ret -> buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 
     /*
@@ -2435,11 +2709,26 @@ xmlAllocOutputBufferInternal(xmlCharEncodingHandlerPtr encoder) {
     ret->encoder = encoder;
     if (encoder != NULL) {
         ret->conv = xmlBufCreateSize(4000);
-	if (ret->conv == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3853]) {
+	  if ((ret -> conv == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3853\n");
+	  else
+	    fprintf(stderr, "reached bug index 3853\n");
+	}
+	if ((!FIXREVERTER[3853] && (ret -> conv == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             xmlBufFree(ret->buffer);
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	/*
 	 * This call is designed to initiate the encoder state
@@ -2465,7 +2754,22 @@ xmlAllocOutputBufferInternal(xmlCharEncodingHandlerPtr encoder) {
  */
 void
 xmlFreeParserInputBuffer(xmlParserInputBufferPtr in) {
-    if (in == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3854]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3854\n");
+      else
+        fprintf(stderr, "reached bug index 3854\n");
+    }
+    if ((!FIXREVERTER[3854] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (in->raw) {
         xmlBufFree(in->raw);
@@ -2501,8 +2805,23 @@ xmlOutputBufferClose(xmlOutputBufferPtr out)
     int written;
     int err_rc = 0;
 
-    if (out == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3855]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3855\n");
+      else
+        fprintf(stderr, "reached bug index 3855\n");
+    }
+    if ((!FIXREVERTER[3855] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (out->writecallback != NULL)
         xmlOutputBufferFlush(out);
     if (out->closecallback != NULL) {
@@ -2537,7 +2856,22 @@ __xmlParserInputBufferCreateFilename(const char *URI, xmlCharEncoding enc) {
     if (xmlInputCallbackInitialized == 0)
 	xmlRegisterDefaultInputCallbacks();
 
-    if (URI == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3856]) {
+      if ((URI == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3856\n");
+      else
+        fprintf(stderr, "reached bug index 3856\n");
+    }
+    if ((!FIXREVERTER[3856] && (URI == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Try to find one of the input accept method accepting that scheme
@@ -2554,9 +2888,24 @@ __xmlParserInputBufferCreateFilename(const char *URI, xmlCharEncoding enc) {
 	    }
 	}
     }
-    if (context == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3857]) {
+      if ((context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3857\n");
+      else
+        fprintf(stderr, "reached bug index 3857\n");
+    }
+    if ((!FIXREVERTER[3857] && (context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Allocate the Input buffer front-end.
@@ -2928,8 +3277,38 @@ xmlParserInputBufferCreateMem(const char *mem, int size, xmlCharEncoding enc) {
     xmlParserInputBufferPtr ret;
     int errcode;
 
-    if (size < 0) return(NULL);
-    if (mem == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3866]) {
+      if ((size < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3866\n");
+      else
+        fprintf(stderr, "reached bug index 3866\n");
+    }
+    if ((!FIXREVERTER[3866] && (size < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3867]) {
+      if ((mem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3867\n");
+      else
+        fprintf(stderr, "reached bug index 3867\n");
+    }
+    if ((!FIXREVERTER[3867] && (mem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = xmlAllocParserInputBuffer(enc);
     if (ret != NULL) {
@@ -3140,7 +3519,22 @@ xmlParserInputBufferPush(xmlParserInputBufferPtr in,
     int nbchars = 0;
     int ret;
 
-    if (len < 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3876]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3876\n");
+      else
+        fprintf(stderr, "reached bug index 3876\n");
+    }
+    if ((!FIXREVERTER[3876] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if ((in == NULL) || (in->error)) return(-1);
     if (in->encoder != NULL) {
         unsigned int use;
@@ -3160,11 +3554,26 @@ xmlParserInputBufferPush(xmlParserInputBufferPtr in,
 	 */
 	use = xmlBufUse(in->raw);
 	nbchars = xmlCharEncInput(in, 1);
-	if (nbchars < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3878]) {
+	  if ((nbchars < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3878\n");
+	  else
+	    fprintf(stderr, "reached bug index 3878\n");
+	}
+	if ((!FIXREVERTER[3878] && (nbchars < 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlIOErr(XML_IO_ENCODER, NULL);
 	    in->error = XML_IO_ENCODER;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	in->rawconsumed += (use - xmlBufUse(in->raw));
     } else {
 	nbchars = len;
@@ -3236,16 +3645,46 @@ xmlParserInputBufferGrow(xmlParserInputBufferPtr in, int len) {
      */
     if (in->readcallback != NULL) {
 	res = in->readcallback(in->context, &buffer[0], len);
-	if (res <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3881]) {
+	  if ((res <= 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3881\n");
+	  else
+	    fprintf(stderr, "reached bug index 3881\n");
+	}
+	if ((!FIXREVERTER[3881] && (res <= 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    in->readcallback = endOfInput;
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
 	xmlIOErr(XML_IO_NO_INPUT, NULL);
 	in->error = XML_IO_NO_INPUT;
 	return(-1);
     }
-    if (res < 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3882]) {
+      if ((res < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3882\n");
+      else
+        fprintf(stderr, "reached bug index 3882\n");
+    }
+    if ((!FIXREVERTER[3882] && (res < 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * try to establish compressed status of input if not done already
@@ -3268,19 +3707,49 @@ xmlParserInputBufferGrow(xmlParserInputBufferPtr in, int len) {
 	    in->raw = xmlBufCreate();
 	}
 	res = xmlBufAdd(in->raw, (const xmlChar *) buffer, len);
-	if (res != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3883]) {
+	  if ((res != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3883\n");
+	  else
+	    fprintf(stderr, "reached bug index 3883\n");
+	}
+	if ((!FIXREVERTER[3883] && (res != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	/*
 	 * convert as much as possible to the parser reading buffer.
 	 */
 	use = xmlBufUse(in->raw);
 	nbchars = xmlCharEncInput(in, 1);
-	if (nbchars < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3884]) {
+	  if ((nbchars < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3884\n");
+	  else
+	    fprintf(stderr, "reached bug index 3884\n");
+	}
+	if ((!FIXREVERTER[3884] && (nbchars < 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlIOErr(XML_IO_ENCODER, NULL);
 	    in->error = XML_IO_ENCODER;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	in->rawconsumed += (use - xmlBufUse(in->raw));
     } else {
 	nbchars = len;
@@ -3340,13 +3809,43 @@ xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf) {
     int chunk;       /* number of byte curreent processed from buf */
 
     if ((out == NULL) || (out->error)) return(-1);
-    if (len < 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3885]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3885\n");
+      else
+        fprintf(stderr, "reached bug index 3885\n");
+    }
+    if ((!FIXREVERTER[3885] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (out->error) return(-1);
 
     do {
 	chunk = len;
-	if (chunk > 4 * MINLEN)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3886]) {
+	  if ((chunk > 4 * 4000 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3886\n");
+	  else
+	    fprintf(stderr, "reached bug index 3886\n");
+	}
+	if ((!FIXREVERTER[3886] && (chunk > 4 * 4000 ))
+	#else
+	if (0
+	#endif
+	)
 	    chunk = 4 * MINLEN;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	/*
 	 * first handle encoding stuff.
@@ -3359,8 +3858,23 @@ xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf) {
 		out->conv = xmlBufCreate();
 	    }
 	    ret = xmlBufAdd(out->buffer, (const xmlChar *) buf, chunk);
-	    if (ret != 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3887]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3887\n");
+	      else
+	        fprintf(stderr, "reached bug index 3887\n");
+	    }
+	    if ((!FIXREVERTER[3887] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 
 	    if ((xmlBufUse(out->buffer) < MINLEN) && (chunk == len))
 		goto done;
@@ -3380,8 +3894,23 @@ xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf) {
                 nbchars = ret;
 	} else {
 	    ret = xmlBufAdd(out->buffer, (const xmlChar *) buf, chunk);
-	    if (ret != 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3888]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3888\n");
+	      else
+	        fprintf(stderr, "reached bug index 3888\n");
+	    }
+	    if ((!FIXREVERTER[3888] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
             if (out->writecallback)
 	        nbchars = xmlBufUse(out->buffer);
             else
@@ -3408,11 +3937,26 @@ xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf) {
 		if (ret >= 0)
 		    xmlBufShrink(out->buffer, ret);
 	    }
-	    if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3889]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3889\n");
+	      else
+	        fprintf(stderr, "reached bug index 3889\n");
+	    }
+	    if ((!FIXREVERTER[3889] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlIOErr(XML_IO_WRITE, NULL);
 		out->error = XML_IO_WRITE;
 		return(ret);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    out->written += ret;
 	}
 	written += nbchars;
@@ -3667,7 +4211,22 @@ xmlOutputBufferFlush(xmlOutputBufferPtr out) {
     /*
      * first handle encoding stuff.
      */
-    if ((out->conv != NULL) && (out->encoder != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3900]) {
+      fprintf(stderr, "reached bug index 3900\n");
+    }
+    if ((FIXREVERTER[3900] && (out -> conv != (void *) 0 )) || (!FIXREVERTER[3900] && (out -> conv != (void *) 0 && out -> encoder != (void *) 0 ))
+    #else
+    if (out -> conv != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(out -> encoder != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3900\n");
+      #endif
+    
 	/*
 	 * convert as much as possible to the parser output buffer.
 	 */
@@ -3680,6 +4239,9 @@ xmlOutputBufferFlush(xmlOutputBufferPtr out) {
 	    }
 	} while (nbchars);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * second flush the stuff to the I/O channel
@@ -3698,11 +4260,26 @@ xmlOutputBufferFlush(xmlOutputBufferPtr out) {
 	if (ret >= 0)
 	    xmlBufShrink(out->buffer, ret);
     }
-    if (ret < 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3901]) {
+      if ((ret < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3901\n");
+      else
+        fprintf(stderr, "reached bug index 3901\n");
+    }
+    if ((!FIXREVERTER[3901] && (ret < 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlIOErr(XML_IO_FLUSH, NULL);
 	out->error = XML_IO_FLUSH;
 	return(ret);
     }
+    #ifdef FRCOV
+    }
+    #endif
     out->written += ret;
 
 #ifdef DEBUG_INPUT
@@ -3734,7 +4311,22 @@ xmlParserGetDirectory(const char *filename) {
     if (xmlInputCallbackInitialized == 0)
 	xmlRegisterDefaultInputCallbacks();
 
-    if (filename == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3902]) {
+      if ((filename == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3902\n");
+      else
+        fprintf(stderr, "reached bug index 3902\n");
+    }
+    if ((!FIXREVERTER[3902] && (filename == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
 #if defined(_WIN32) && !defined(__CYGWIN__)
 #   define IS_XMLPGD_SEP(ch) ((ch=='/')||(ch=='\\'))
@@ -3846,8 +4438,23 @@ xmlCheckHTTPInput(xmlParserCtxtPtr ctxt, xmlParserInputPtr ret) {
 static int xmlNoNetExists(const char *URL) {
     const char *path;
 
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3904]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3904\n");
+      else
+        fprintf(stderr, "reached bug index 3904\n");
+    }
+    if ((!FIXREVERTER[3904] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (!xmlStrncasecmp(BAD_CAST URL, BAD_CAST "file://localhost/", 17))
 #if defined (_WIN32) || defined (__DJGPP__) && !defined(__CYGWIN__)
@@ -4038,10 +4645,25 @@ xmlLoadExternalEntity(const char *URL, const char *ID,
 	xmlParserInputPtr ret;
 
 	canonicFilename = (char *) xmlCanonicPath((const xmlChar *) URL);
-	if (canonicFilename == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3908]) {
+	  if ((canonicFilename == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3908\n");
+	  else
+	    fprintf(stderr, "reached bug index 3908\n");
+	}
+	if ((!FIXREVERTER[3908] && (canonicFilename == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             xmlIOErrMemory("building canonical path\n");
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	ret = xmlCurrentExternalEntityLoader(canonicFilename, ID, ctxt);
 	xmlFree(canonicFilename);
diff --git a/xmlcatalog.c b/xmlcatalog.c
old mode 100644
new mode 100755
index c02b97f6..aa0d4ab7
--- a/xmlcatalog.c
+++ b/xmlcatalog.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[4734];
+#endif
 /*
  * xmlcatalog.c : a small utility program to handle XML catalogs
  *
diff --git a/xmllint.c b/xmllint.c
old mode 100644
new mode 100755
index 2bbe91d6..70ac2fe0
--- a/xmllint.c
+++ b/xmllint.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[4734];
+#endif
 /*
  * xmllint.c : a small tester program for XML input.
  *
diff --git a/xmlmemory.c b/xmlmemory.c
old mode 100644
new mode 100755
diff --git a/xmlmodule.c b/xmlmodule.c
old mode 100644
new mode 100755
diff --git a/xmlreader.c b/xmlreader.c
old mode 100644
new mode 100755
index 9229c18c..e22ab8d1
--- a/xmlreader.c
+++ b/xmlreader.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xmlreader.c: implements the xmlTextReader streaming node API
  *
@@ -231,10 +235,40 @@ static void
 xmlFreeID(xmlIDPtr id) {
     xmlDictPtr dict = NULL;
 
-    if (id == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[661]) {
+      if ((id == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 661\n");
+      else
+        fprintf(stderr, "reached bug index 661\n");
+    }
+    if ((!FIXREVERTER[661] && (id == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
-    if (id->doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[662]) {
+      if ((id -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 662\n");
+      else
+        fprintf(stderr, "reached bug index 662\n");
+    }
+    if ((!FIXREVERTER[662] && (id -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = id->doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (id->value != NULL)
 	DICT_FREE(id->value)
@@ -258,15 +292,75 @@ xmlTextReaderRemoveID(xmlDocPtr doc, xmlAttrPtr attr) {
     xmlIDPtr id;
     xmlChar *ID;
 
-    if (doc == NULL) return(-1);
-    if (attr == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[663]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 663\n");
+      else
+        fprintf(stderr, "reached bug index 663\n");
+    }
+    if ((!FIXREVERTER[663] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[664]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 664\n");
+      else
+        fprintf(stderr, "reached bug index 664\n");
+    }
+    if ((!FIXREVERTER[664] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     table = (xmlIDTablePtr) doc->ids;
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[665]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 665\n");
+      else
+        fprintf(stderr, "reached bug index 665\n");
+    }
+    if ((!FIXREVERTER[665] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     ID = xmlNodeListGetString(doc, attr->children, 1);
-    if (ID == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[666]) {
+      if ((ID == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 666\n");
+      else
+        fprintf(stderr, "reached bug index 666\n");
+    }
+    if ((!FIXREVERTER[666] && (ID == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     id = xmlHashLookup(table, ID);
     xmlFree(ID);
     if (id == NULL || id->attr != attr) {
@@ -293,7 +387,22 @@ xmlTextReaderFreeProp(xmlTextReaderPtr reader, xmlAttrPtr cur) {
 	dict = reader->ctxt->dict;
     else
         dict = NULL;
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[667]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 667\n");
+      else
+        fprintf(stderr, "reached bug index 667\n");
+    }
+    if ((!FIXREVERTER[667] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
 	xmlDeregisterNodeDefaultValue((xmlNodePtr) cur);
@@ -356,7 +465,22 @@ xmlTextReaderFreeNodeList(xmlTextReaderPtr reader, xmlNodePtr cur) {
 	dict = reader->ctxt->dict;
     else
         dict = NULL;
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[668]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 668\n");
+      else
+        fprintf(stderr, "reached bug index 668\n");
+    }
+    if ((!FIXREVERTER[668] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (cur->type == XML_NAMESPACE_DECL) {
 	xmlFreeNsList((xmlNsPtr) cur);
 	return;
@@ -423,8 +547,23 @@ xmlTextReaderFreeNodeList(xmlTextReaderPtr reader, xmlNodePtr cur) {
         if (next != NULL) {
 	    cur = next;
         } else {
-            if ((depth == 0) || (parent == NULL))
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[669]) {
+              if ((parent == (void *) 0 ) && !(depth == 0 ))
+                fprintf(stderr, "triggered bug index 669\n");
+              else
+                fprintf(stderr, "reached bug index 669\n");
+            }
+            if ((FIXREVERTER[669] && (depth == 0 )) || (!FIXREVERTER[669] && (depth == 0 || parent == (void *) 0 ))
+            #else
+            if (depth == 0 
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
             depth -= 1;
             cur = parent;
             cur->children = NULL;
@@ -535,7 +674,22 @@ static void
 xmlTextReaderFreeDoc(xmlTextReaderPtr reader, xmlDocPtr cur) {
     xmlDtdPtr extSubset, intSubset;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[670]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 670\n");
+      else
+        fprintf(stderr, "reached bug index 670\n");
+    }
+    if ((!FIXREVERTER[670] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
 	xmlDeregisterNodeDefaultValue((xmlNodePtr) cur);
@@ -549,8 +703,23 @@ xmlTextReaderFreeDoc(xmlTextReaderPtr reader, xmlDocPtr cur) {
     cur->refs = NULL;
     extSubset = cur->extSubset;
     intSubset = cur->intSubset;
-    if (intSubset == extSubset)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[671]) {
+      if ((intSubset == extSubset ) && !(0))
+        fprintf(stderr, "triggered bug index 671\n");
+      else
+        fprintf(stderr, "reached bug index 671\n");
+    }
+    if ((!FIXREVERTER[671] && (intSubset == extSubset ))
+    #else
+    if (0
+    #endif
+    )
 	extSubset = NULL;
+	#ifdef FRCOV
+	}
+	#endif
     if (extSubset != NULL) {
 	xmlUnlinkNode((xmlNodePtr) cur->extSubset);
 	cur->extSubset = NULL;
@@ -623,10 +792,25 @@ xmlTextReaderEntPush(xmlTextReaderPtr reader, xmlNodePtr value)
 	reader->entMax = 10;
 	reader->entTab = (xmlNodePtr *) xmlMalloc(reader->entMax *
 		                                  sizeof(reader->entTab[0]));
-        if (reader->entTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[672]) {
+          if ((reader -> entTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 672\n");
+          else
+            fprintf(stderr, "reached bug index 672\n");
+        }
+        if ((!FIXREVERTER[672] && (reader -> entTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlGenericError(xmlGenericErrorContext, "xmlMalloc failed !\n");
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     if (reader->entNr >= reader->entMax) {
         reader->entMax *= 2;
@@ -634,10 +818,25 @@ xmlTextReaderEntPush(xmlTextReaderPtr reader, xmlNodePtr value)
             (xmlNodePtr *) xmlRealloc(reader->entTab,
                                       reader->entMax *
                                       sizeof(reader->entTab[0]));
-        if (reader->entTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[673]) {
+          if ((reader -> entTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 673\n");
+          else
+            fprintf(stderr, "reached bug index 673\n");
+        }
+        if ((!FIXREVERTER[673] && (reader -> entTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlGenericError(xmlGenericErrorContext, "xmlRealloc failed !\n");
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     reader->entTab[reader->entNr] = value;
     reader->ent = value;
@@ -657,8 +856,23 @@ xmlTextReaderEntPop(xmlTextReaderPtr reader)
 {
     xmlNodePtr ret;
 
-    if (reader->entNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[674]) {
+      if ((reader -> entNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 674\n");
+      else
+        fprintf(stderr, "reached bug index 674\n");
+    }
+    if ((!FIXREVERTER[674] && (reader -> entNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     reader->entNr--;
     if (reader->entNr > 0)
         reader->ent = reader->entTab[reader->entNr - 1];
@@ -686,13 +900,31 @@ xmlTextReaderStartElement(void *ctx, const xmlChar *fullname,
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderStartElement(%s)\n", fullname);
 #endif
-    if ((reader != NULL) && (reader->startElement != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[675]) {
+      fprintf(stderr, "reached bug index 675\n");
+    }
+    if ((FIXREVERTER[675] && (reader != (void *) 0 )) || (!FIXREVERTER[675] && (reader != (void *) 0 && reader -> startElement != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> startElement != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 675\n");
+      #endif
+    
 	reader->startElement(ctx, fullname, atts);
 	if ((ctxt->node != NULL) && (ctxt->input != NULL) &&
 	    (ctxt->input->cur != NULL) && (ctxt->input->cur[0] == '/') &&
 	    (ctxt->input->cur[1] == '>'))
 	    ctxt->node->extra = NODE_IS_EMPTY;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (reader != NULL)
 	reader->state = XML_TEXTREADER_ELEMENT;
 }
@@ -712,9 +944,27 @@ xmlTextReaderEndElement(void *ctx, const xmlChar *fullname) {
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderEndElement(%s)\n", fullname);
 #endif
-    if ((reader != NULL) && (reader->endElement != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[676]) {
+      fprintf(stderr, "reached bug index 676\n");
+    }
+    if ((FIXREVERTER[676] && (reader != (void *) 0 )) || (!FIXREVERTER[676] && (reader != (void *) 0 && reader -> endElement != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> endElement != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 676\n");
+      #endif
+    
 	reader->endElement(ctx, fullname);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 /**
@@ -749,7 +999,22 @@ xmlTextReaderStartElementNs(void *ctx,
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderStartElementNs(%s)\n", localname);
 #endif
-    if ((reader != NULL) && (reader->startElementNs != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[677]) {
+      fprintf(stderr, "reached bug index 677\n");
+    }
+    if ((FIXREVERTER[677] && (reader != (void *) 0 )) || (!FIXREVERTER[677] && (reader != (void *) 0 && reader -> startElementNs != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> startElementNs != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 677\n");
+      #endif
+    
 	reader->startElementNs(ctx, localname, prefix, URI, nb_namespaces,
 	                       namespaces, nb_attributes, nb_defaulted,
 			       attributes);
@@ -758,6 +1023,9 @@ xmlTextReaderStartElementNs(void *ctx,
 	    (ctxt->input->cur[1] == '>'))
 	    ctxt->node->extra = NODE_IS_EMPTY;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (reader != NULL)
 	reader->state = XML_TEXTREADER_ELEMENT;
 }
@@ -783,9 +1051,27 @@ xmlTextReaderEndElementNs(void *ctx,
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderEndElementNs(%s)\n", localname);
 #endif
-    if ((reader != NULL) && (reader->endElementNs != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[678]) {
+      fprintf(stderr, "reached bug index 678\n");
+    }
+    if ((FIXREVERTER[678] && (reader != (void *) 0 )) || (!FIXREVERTER[678] && (reader != (void *) 0 && reader -> endElementNs != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> endElementNs != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 678\n");
+      #endif
+    
 	reader->endElementNs(ctx, localname, prefix, URI);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 
@@ -806,9 +1092,27 @@ xmlTextReaderCharacters(void *ctx, const xmlChar *ch, int len)
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderCharacters()\n");
 #endif
-    if ((reader != NULL) && (reader->characters != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[679]) {
+      fprintf(stderr, "reached bug index 679\n");
+    }
+    if ((FIXREVERTER[679] && (reader != (void *) 0 )) || (!FIXREVERTER[679] && (reader != (void *) 0 && reader -> characters != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> characters != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 679\n");
+      #endif
+    
 	reader->characters(ctx, ch, len);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 /**
@@ -828,9 +1132,27 @@ xmlTextReaderCDataBlock(void *ctx, const xmlChar *ch, int len)
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderCDataBlock()\n");
 #endif
-    if ((reader != NULL) && (reader->cdataBlock != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[680]) {
+      fprintf(stderr, "reached bug index 680\n");
+    }
+    if ((FIXREVERTER[680] && (reader != (void *) 0 )) || (!FIXREVERTER[680] && (reader != (void *) 0 && reader -> cdataBlock != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> cdataBlock != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 680\n");
+      #endif
+    
 	reader->cdataBlock(ctx, ch, len);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 /**
@@ -915,13 +1237,30 @@ xmlTextReaderPushData(xmlTextReaderPtr reader) {
      */
     if (reader->mode == XML_TEXTREADER_MODE_INTERACTIVE) {
         if (alloc != XML_BUFFER_ALLOC_IMMUTABLE) {
-	    if ((reader->cur >= 4096) &&
-		(xmlBufUse(inbuf) - reader->cur <= CHUNK_SIZE)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[682]) {
+	      fprintf(stderr, "reached bug index 682\n");
+	    }
+	    if ((FIXREVERTER[682] && (reader -> cur >= 4096 )) || (!FIXREVERTER[682] && (reader -> cur >= 4096 && xmlBufUse ( inbuf ) - reader -> cur <= 512 ))
+	    #else
+	    if (reader -> cur >= 4096 
+	    #endif
+	    ) {
+		  
+		#ifdef FRCOV
+		  if (!(xmlBufUse ( inbuf ) - reader -> cur <= 512 ))
+		    fprintf(stderr, "triggered bug index 682\n");
+		  #endif
+		
 		val = xmlBufShrink(inbuf, reader->cur);
 		if (val >= 0) {
 		    reader->cur -= val;
 		}
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
     }
 
@@ -1081,8 +1420,23 @@ xmlTextReaderValidatePop(xmlTextReaderPtr reader) {
 	int ret;
 
 	if (reader->rngFullNode != NULL) {
-	    if (node == reader->rngFullNode)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[683]) {
+	      if ((node == reader -> rngFullNode  ) && !(0))
+	        fprintf(stderr, "triggered bug index 683\n");
+	      else
+	        fprintf(stderr, "reached bug index 683\n");
+	    }
+	    if ((!FIXREVERTER[683] && (node == reader -> rngFullNode  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        reader->rngFullNode = NULL;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    return;
 	}
 	ret = xmlRelaxNGValidatePopElement(reader->rngValidCtxt,
@@ -1202,11 +1556,41 @@ skip_children:
  */
 static xmlNodePtr
 xmlTextReaderGetSuccessor(xmlNodePtr cur) {
-    if (cur == NULL) return(NULL) ; /* ERROR */
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[684]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 684\n");
+      else
+        fprintf(stderr, "reached bug index 684\n");
+    }
+    if ((!FIXREVERTER[684] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL) ;
+    #ifdef FRCOV
+    }
+    #endif /* ERROR */
     if (cur->next != NULL) return(cur->next) ;
     do {
         cur = cur->parent;
-        if (cur == NULL) break;
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[685]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 685\n");
+          else
+            fprintf(stderr, "reached bug index 685\n");
+        }
+        if ((!FIXREVERTER[685] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) break;
+        #ifdef FRCOV
+        }
+        #endif
         if (cur->next != NULL) return(cur->next);
     } while (cur != NULL);
     return(cur);
@@ -1227,8 +1611,23 @@ static int
 xmlTextReaderDoExpand(xmlTextReaderPtr reader) {
     int val;
 
-    if ((reader == NULL) || (reader->node == NULL) || (reader->ctxt == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[686]) {
+      if ((reader == (void *) 0 || reader -> node == (void *) 0 || reader -> ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 686\n");
+      else
+        fprintf(stderr, "reached bug index 686\n");
+    }
+    if ((!FIXREVERTER[686] && (reader == (void *) 0 || reader -> node == (void *) 0 || reader -> ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     do {
 	if (reader->ctxt->instate == XML_PARSER_EOF) return(1);
 
@@ -1236,8 +1635,23 @@ xmlTextReaderDoExpand(xmlTextReaderPtr reader) {
 	    return(1);
 	if (reader->ctxt->nodeNr < reader->depth)
 	    return(1);
-	if (reader->mode == XML_TEXTREADER_MODE_EOF)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[687]) {
+	  if ((reader -> mode == XML_TEXTREADER_MODE_EOF ) && !(0))
+	    fprintf(stderr, "triggered bug index 687\n");
+	  else
+	    fprintf(stderr, "reached bug index 687\n");
+	}
+	if ((!FIXREVERTER[687] && (reader -> mode == XML_TEXTREADER_MODE_EOF ))
+	#else
+	if (0
+	#endif
+	)
 	    return(1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	val = xmlTextReaderPushData(reader);
 	if (val < 0){
 	    reader->mode = XML_TEXTREADER_MODE_ERROR;
@@ -1311,13 +1725,43 @@ xmlTextReaderRead(xmlTextReaderPtr reader) {
     xmlNodePtr oldnode = NULL;
 
 
-    if (reader == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[690]) {
+      if ((reader == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 690\n");
+      else
+        fprintf(stderr, "reached bug index 690\n");
+    }
+    if ((!FIXREVERTER[690] && (reader == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     reader->curnode = NULL;
     if (reader->doc != NULL)
         return(xmlTextReaderReadTree(reader));
-    if (reader->ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[691]) {
+      if ((reader -> ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 691\n");
+      else
+        fprintf(stderr, "reached bug index 691\n");
+    }
+    if ((!FIXREVERTER[691] && (reader -> ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifdef DEBUG_READER
     fprintf(stderr, "\nREAD ");
@@ -1342,18 +1786,48 @@ xmlTextReaderRead(xmlTextReaderPtr reader) {
 	    if (reader->ctxt->myDoc != NULL) {
 		reader->node = reader->ctxt->myDoc->children;
 	    }
-	    if (reader->node == NULL){
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[693]) {
+	      if ((reader -> node == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 693\n");
+	      else
+	        fprintf(stderr, "reached bug index 693\n");
+	    }
+	    if ((!FIXREVERTER[693] && (reader -> node == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ){
 			reader->mode = XML_TEXTREADER_MODE_ERROR;
 			reader->state = XML_TEXTREADER_ERROR;
 		return(-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    reader->state = XML_TEXTREADER_ELEMENT;
 	} else {
 	    if (reader->ctxt->myDoc != NULL) {
 		reader->node = reader->ctxt->myDoc->children;
 	    }
-	    if (reader->node == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[694]) {
+	      if ((reader -> node == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 694\n");
+	      else
+	        fprintf(stderr, "reached bug index 694\n");
+	    }
+	    if ((!FIXREVERTER[694] && (reader -> node == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		reader->node = reader->ctxt->nodeTab[0];
+		#ifdef FRCOV
+		}
+		#endif
 	    reader->state = XML_TEXTREADER_ELEMENT;
 	}
 	reader->depth = 0;
@@ -1398,8 +1872,23 @@ get_next_node:
 		reader->state = XML_TEXTREADER_ERROR;
 	    return(-1);
 	}
-	if (reader->node == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[696]) {
+	  if ((reader -> node == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 696\n");
+	  else
+	    fprintf(stderr, "reached bug index 696\n");
+	}
+	if ((!FIXREVERTER[696] && (reader -> node == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto node_end;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     if (oldstate != XML_TEXTREADER_BACKTRACK) {
 	if ((reader->node->children != NULL) &&
@@ -1661,12 +2150,42 @@ xmlTextReaderReadState(xmlTextReaderPtr reader) {
  */
 xmlNodePtr
 xmlTextReaderExpand(xmlTextReaderPtr reader) {
-    if ((reader == NULL) || (reader->node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[699]) {
+      if ((reader == (void *) 0 || reader -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 699\n");
+      else
+        fprintf(stderr, "reached bug index 699\n");
+    }
+    if ((!FIXREVERTER[699] && (reader == (void *) 0 || reader -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (reader->doc != NULL)
         return(reader->node);
-    if (reader->ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[700]) {
+      if ((reader -> ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 700\n");
+      else
+        fprintf(stderr, "reached bug index 700\n");
+    }
+    if ((!FIXREVERTER[700] && (reader -> ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (xmlTextReaderDoExpand(reader) < 0)
         return(NULL);
     return(reader->node);
@@ -2093,14 +2612,44 @@ xmlTextReaderPtr
 xmlNewTextReader(xmlParserInputBufferPtr input, const char *URI) {
     xmlTextReaderPtr ret;
 
-    if (input == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[709]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 709\n");
+      else
+        fprintf(stderr, "reached bug index 709\n");
+    }
+    if ((!FIXREVERTER[709] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ret = xmlMalloc(sizeof(xmlTextReader));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[710]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 710\n");
+      else
+        fprintf(stderr, "reached bug index 710\n");
+    }
+    if ((!FIXREVERTER[710] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewTextReader : malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlTextReader));
     ret->doc = NULL;
     ret->entTab = NULL;
@@ -2108,12 +2657,27 @@ xmlNewTextReader(xmlParserInputBufferPtr input, const char *URI) {
     ret->entNr = 0;
     ret->input = input;
     ret->buffer = xmlBufCreateSize(100);
-    if (ret->buffer == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[711]) {
+      if ((ret -> buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 711\n");
+      else
+        fprintf(stderr, "reached bug index 711\n");
+    }
+    if ((!FIXREVERTER[711] && (ret -> buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(ret);
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewTextReader : malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /* no operation on a reader should require a huge buffer */
     xmlBufSetAllocationScheme(ret->buffer,
 			      XML_BUFFER_ALLOC_BOUNDED);
@@ -2210,13 +2774,43 @@ xmlNewTextReaderFilename(const char *URI) {
     char *directory = NULL;
 
     input = xmlParserInputBufferCreateFilename(URI, XML_CHAR_ENCODING_NONE);
-    if (input == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[712]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 712\n");
+      else
+        fprintf(stderr, "reached bug index 712\n");
+    }
+    if ((!FIXREVERTER[712] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ret = xmlNewTextReader(input, URI);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[713]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 713\n");
+      else
+        fprintf(stderr, "reached bug index 713\n");
+    }
+    if ((!FIXREVERTER[713] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserInputBuffer(input);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->allocs |= XML_TEXTREADER_INPUT;
     if (ret->ctxt->directory == NULL)
         directory = xmlParserGetDirectory(URI);
@@ -2235,8 +2829,23 @@ xmlNewTextReaderFilename(const char *URI) {
  */
 void
 xmlFreeTextReader(xmlTextReaderPtr reader) {
-    if (reader == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[714]) {
+      if ((reader == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 714\n");
+      else
+        fprintf(stderr, "reached bug index 714\n");
+    }
+    if ((!FIXREVERTER[714] && (reader == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 #ifdef LIBXML_SCHEMAS_ENABLED
     if (reader->rngSchemas != NULL) {
 	xmlRelaxNGFree(reader->rngSchemas);
@@ -2580,14 +3189,59 @@ xmlChar *
 xmlTextReaderLookupNamespace(xmlTextReaderPtr reader, const xmlChar *prefix) {
     xmlNsPtr ns;
 
-    if (reader == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[731]) {
+      if ((reader == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 731\n");
+      else
+        fprintf(stderr, "reached bug index 731\n");
+    }
+    if ((!FIXREVERTER[731] && (reader == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (reader->node == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[732]) {
+      if ((reader -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 732\n");
+      else
+        fprintf(stderr, "reached bug index 732\n");
+    }
+    if ((!FIXREVERTER[732] && (reader -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ns = xmlSearchNs(reader->node->doc, reader->node, prefix);
-    if (ns == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[733]) {
+      if ((ns == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 733\n");
+      else
+        fprintf(stderr, "reached bug index 733\n");
+    }
+    if ((!FIXREVERTER[733] && (ns == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlStrdup(ns->href));
 }
 
@@ -3032,10 +3686,40 @@ int
 xmlTextReaderNodeType(xmlTextReaderPtr reader) {
     xmlNodePtr node;
 
-    if (reader == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[759]) {
+      if ((reader == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 759\n");
+      else
+        fprintf(stderr, "reached bug index 759\n");
+    }
+    if ((!FIXREVERTER[759] && (reader == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (reader->node == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[760]) {
+      if ((reader -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 760\n");
+      else
+        fprintf(stderr, "reached bug index 760\n");
+    }
+    if ((!FIXREVERTER[760] && (reader -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(XML_READER_TYPE_NONE);
+	#ifdef FRCOV
+	}
+	#endif
     if (reader->curnode != NULL)
 	node = reader->curnode;
     else
@@ -3630,10 +4314,40 @@ xmlTextReaderValue(xmlTextReaderPtr reader) {
 const xmlChar *
 xmlTextReaderConstValue(xmlTextReaderPtr reader) {
     xmlNodePtr node;
-    if (reader == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[786]) {
+      if ((reader == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 786\n");
+      else
+        fprintf(stderr, "reached bug index 786\n");
+    }
+    if ((!FIXREVERTER[786] && (reader == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (reader->node == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[787]) {
+      if ((reader -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 787\n");
+      else
+        fprintf(stderr, "reached bug index 787\n");
+    }
+    if ((!FIXREVERTER[787] && (reader -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (reader->curnode != NULL)
 	node = reader->curnode;
     else
@@ -3653,11 +4367,26 @@ xmlTextReaderConstValue(xmlTextReaderPtr reader) {
 	    else {
 		if (reader->buffer == NULL) {
 		    reader->buffer = xmlBufCreateSize(100);
-                    if (reader->buffer == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[788]) {
+                      if ((reader -> buffer == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 788\n");
+                      else
+                        fprintf(stderr, "reached bug index 788\n");
+                    }
+                    if ((!FIXREVERTER[788] && (reader -> buffer == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlGenericError(xmlGenericErrorContext,
                                         "xmlTextReaderSetup : malloc failed\n");
                         return (NULL);
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
 		    xmlBufSetAllocationScheme(reader->buffer,
 		                              XML_BUFFER_ALLOC_BOUNDED);
                 } else
@@ -3971,15 +4700,45 @@ xmlNodePtr
 xmlTextReaderPreserve(xmlTextReaderPtr reader) {
     xmlNodePtr cur, parent;
 
-    if (reader == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[803]) {
+      if ((reader == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 803\n");
+      else
+        fprintf(stderr, "reached bug index 803\n");
+    }
+    if ((!FIXREVERTER[803] && (reader == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (reader->curnode != NULL)
         cur = reader->curnode;
     else
         cur = reader->node;
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[804]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 804\n");
+      else
+        fprintf(stderr, "reached bug index 804\n");
+    }
+    if ((!FIXREVERTER[804] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((cur->type != XML_DOCUMENT_NODE) && (cur->type != XML_DTD_NODE)) {
 	cur->extra |= NODE_IS_PRESERVED;
@@ -5144,11 +5903,26 @@ xmlTextReaderSetup(xmlTextReaderPtr reader,
                    xmlParserInputBufferPtr input, const char *URL,
                    const char *encoding, int options)
 {
-    if (reader == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[836]) {
+      if ((reader == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 836\n");
+      else
+        fprintf(stderr, "reached bug index 836\n");
+    }
+    if ((!FIXREVERTER[836] && (reader == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (input != NULL)
 	    xmlFreeParserInputBuffer(input);
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * we force the generation of compact text nodes on the reader
@@ -5170,23 +5944,83 @@ xmlTextReaderSetup(xmlTextReaderPtr reader,
 	reader->input = input;
 	reader->allocs |= XML_TEXTREADER_INPUT;
     }
-    if (reader->buffer == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[837]) {
+      if ((reader -> buffer == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 837\n");
+      else
+        fprintf(stderr, "reached bug index 837\n");
+    }
+    if ((!FIXREVERTER[837] && (reader -> buffer == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         reader->buffer = xmlBufCreateSize(100);
-    if (reader->buffer == NULL) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[838]) {
+      if ((reader -> buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 838\n");
+      else
+        fprintf(stderr, "reached bug index 838\n");
+    }
+    if ((!FIXREVERTER[838] && (reader -> buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlGenericError(xmlGenericErrorContext,
                         "xmlTextReaderSetup : malloc failed\n");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /* no operation on a reader should require a huge buffer */
     xmlBufSetAllocationScheme(reader->buffer,
 			      XML_BUFFER_ALLOC_BOUNDED);
-    if (reader->sax == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[839]) {
+      if ((reader -> sax == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 839\n");
+      else
+        fprintf(stderr, "reached bug index 839\n");
+    }
+    if ((!FIXREVERTER[839] && (reader -> sax == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	reader->sax = (xmlSAXHandler *) xmlMalloc(sizeof(xmlSAXHandler));
-    if (reader->sax == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[840]) {
+      if ((reader -> sax == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 840\n");
+      else
+        fprintf(stderr, "reached bug index 840\n");
+    }
+    if ((!FIXREVERTER[840] && (reader -> sax == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlGenericError(xmlGenericErrorContext,
                         "xmlTextReaderSetup : malloc failed\n");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlSAXVersion(reader->sax, 2);
     reader->startElement = reader->sax->startElement;
     reader->sax->startElement = xmlTextReaderStartElement;
@@ -5238,12 +6072,42 @@ xmlTextReaderSetup(xmlTextReaderPtr reader,
 
 	    xmlCtxtReset(reader->ctxt);
 	    buf = xmlAllocParserInputBuffer(enc);
-	    if (buf == NULL) return(-1);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[841]) {
+	      if ((buf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 841\n");
+	      else
+	        fprintf(stderr, "reached bug index 841\n");
+	    }
+	    if ((!FIXREVERTER[841] && (buf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    inputStream = xmlNewInputStream(reader->ctxt);
-	    if (inputStream == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[842]) {
+	      if ((inputStream == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 842\n");
+	      else
+	        fprintf(stderr, "reached bug index 842\n");
+	    }
+	    if ((!FIXREVERTER[842] && (inputStream == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFreeParserInputBuffer(buf);
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	    if (URL == NULL)
 		inputStream->filename = NULL;
@@ -5256,11 +6120,26 @@ xmlTextReaderSetup(xmlTextReaderPtr reader,
 	    inputPush(reader->ctxt, inputStream);
 	    reader->cur = 0;
 	}
-        if (reader->ctxt == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[843]) {
+          if ((reader -> ctxt == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 843\n");
+          else
+            fprintf(stderr, "reached bug index 843\n");
+        }
+        if ((!FIXREVERTER[843] && (reader -> ctxt == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlGenericError(xmlGenericErrorContext,
                             "xmlTextReaderSetup : malloc failed\n");
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     if (reader->dict != NULL) {
         if (reader->ctxt->dict != NULL) {
@@ -5434,8 +6313,23 @@ xmlReaderForFile(const char *filename, const char *encoding, int options)
     xmlTextReaderPtr reader;
 
     reader = xmlNewTextReaderFilename(filename);
-    if (reader == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[848]) {
+      if ((reader == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 848\n");
+      else
+        fprintf(stderr, "reached bug index 848\n");
+    }
+    if ((!FIXREVERTER[848] && (reader == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     xmlTextReaderSetup(reader, NULL, NULL, encoding, options);
     return (reader);
 }
diff --git a/xmlregexp.c b/xmlregexp.c
old mode 100644
new mode 100755
index 6825cd65..58418b4b
--- a/xmlregexp.c
+++ b/xmlregexp.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * regexp.c: generic and extensible Regular Expression engine
  *
@@ -431,10 +435,25 @@ xmlRegEpxFromParse(xmlRegParserCtxtPtr ctxt) {
     xmlRegexpPtr ret;
 
     ret = (xmlRegexpPtr) xmlMalloc(sizeof(xmlRegexp));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2932]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2932\n");
+      else
+        fprintf(stderr, "reached bug index 2932\n");
+    }
+    if ((!FIXREVERTER[2932] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt, "compiling regexp");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegexp));
     ret->string = ctxt->string;
     ret->nbStates = ctxt->nbStates;
@@ -472,11 +491,26 @@ xmlRegEpxFromParse(xmlRegParserCtxtPtr ctxt) {
 	 */
 
 	stateRemap = xmlMalloc(ret->nbStates * sizeof(int));
-	if (stateRemap == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2933]) {
+	  if ((stateRemap == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2933\n");
+	  else
+	    fprintf(stderr, "reached bug index 2933\n");
+	}
+	if ((!FIXREVERTER[2933] && (stateRemap == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "compiling regexp");
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	for (i = 0;i < ret->nbStates;i++) {
 	    if (ret->states[i] != NULL) {
 		stateRemap[i] = nbstates;
@@ -688,11 +722,41 @@ xmlRegNewParserCtxt(const xmlChar *string) {
     xmlRegParserCtxtPtr ret;
 
     ret = (xmlRegParserCtxtPtr) xmlMalloc(sizeof(xmlRegParserCtxt));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2934]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2934\n");
+      else
+        fprintf(stderr, "reached bug index 2934\n");
+    }
+    if ((!FIXREVERTER[2934] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(ret, 0, sizeof(xmlRegParserCtxt));
-    if (string != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2935]) {
+      if ((string != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2935\n");
+      else
+        fprintf(stderr, "reached bug index 2935\n");
+    }
+    if ((!FIXREVERTER[2935] && (string != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ret->string = xmlStrdup(string);
+	#ifdef FRCOV
+	}
+	#endif
     ret->cur = ret->string;
     ret->neg = 0;
     ret->negs = 0;
@@ -719,10 +783,25 @@ xmlRegNewRange(xmlRegParserCtxtPtr ctxt,
     xmlRegRangePtr ret;
 
     ret = (xmlRegRangePtr) xmlMalloc(sizeof(xmlRegRange));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2936]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2936\n");
+      else
+        fprintf(stderr, "reached bug index 2936\n");
+    }
+    if ((!FIXREVERTER[2936] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt, "allocating range");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->neg = neg;
     ret->type = type;
     ret->start = start;
@@ -738,8 +817,23 @@ xmlRegNewRange(xmlRegParserCtxtPtr ctxt,
  */
 static void
 xmlRegFreeRange(xmlRegRangePtr range) {
-    if (range == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2937]) {
+      if ((range == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2937\n");
+      else
+        fprintf(stderr, "reached bug index 2937\n");
+    }
+    if ((!FIXREVERTER[2937] && (range == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (range->blockName != NULL)
 	xmlFree(range->blockName);
@@ -758,20 +852,65 @@ static xmlRegRangePtr
 xmlRegCopyRange(xmlRegParserCtxtPtr ctxt, xmlRegRangePtr range) {
     xmlRegRangePtr ret;
 
-    if (range == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2938]) {
+      if ((range == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2938\n");
+      else
+        fprintf(stderr, "reached bug index 2938\n");
+    }
+    if ((!FIXREVERTER[2938] && (range == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlRegNewRange(ctxt, range->neg, range->type, range->start,
                          range->end);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2939]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2939\n");
+      else
+        fprintf(stderr, "reached bug index 2939\n");
+    }
+    if ((!FIXREVERTER[2939] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (range->blockName != NULL) {
 	ret->blockName = xmlStrdup(range->blockName);
-	if (ret->blockName == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2940]) {
+	  if ((ret -> blockName == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2940\n");
+	  else
+	    fprintf(stderr, "reached bug index 2940\n");
+	}
+	if ((!FIXREVERTER[2940] && (ret -> blockName == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "allocating range");
 	    xmlRegFreeRange(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return(ret);
 }
@@ -790,10 +929,25 @@ xmlRegNewAtom(xmlRegParserCtxtPtr ctxt, xmlRegAtomType type) {
     xmlRegAtomPtr ret;
 
     ret = (xmlRegAtomPtr) xmlMalloc(sizeof(xmlRegAtom));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2941]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2941\n");
+      else
+        fprintf(stderr, "reached bug index 2941\n");
+    }
+    if ((!FIXREVERTER[2941] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt, "allocating atom");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegAtom));
     ret->type = type;
     ret->quant = XML_REGEXP_QUANT_ONCE;
@@ -812,8 +966,23 @@ static void
 xmlRegFreeAtom(xmlRegAtomPtr atom) {
     int i;
 
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2942]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2942\n");
+      else
+        fprintf(stderr, "reached bug index 2942\n");
+    }
+    if ((!FIXREVERTER[2942] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     for (i = 0;i < atom->nbRanges;i++)
 	xmlRegFreeRange(atom->ranges[i]);
@@ -842,10 +1011,25 @@ xmlRegCopyAtom(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom) {
     xmlRegAtomPtr ret;
 
     ret = (xmlRegAtomPtr) xmlMalloc(sizeof(xmlRegAtom));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2943]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2943\n");
+      else
+        fprintf(stderr, "reached bug index 2943\n");
+    }
+    if ((!FIXREVERTER[2943] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt, "copying atom");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegAtom));
     ret->type = atom->type;
     ret->quant = atom->quant;
@@ -856,10 +1040,25 @@ xmlRegCopyAtom(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom) {
 
         ret->ranges = (xmlRegRangePtr *) xmlMalloc(sizeof(xmlRegRangePtr) *
 	                                           atom->nbRanges);
-	if (ret->ranges == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2944]) {
+	  if ((ret -> ranges == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2944\n");
+	  else
+	    fprintf(stderr, "reached bug index 2944\n");
+	}
+	if ((!FIXREVERTER[2944] && (ret -> ranges == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "copying atom");
 	    goto error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	for (i = 0;i < atom->nbRanges;i++) {
 	    ret->ranges[i] = xmlRegCopyRange(ctxt, atom->ranges[i]);
 	    if (ret->ranges[i] == NULL)
@@ -879,10 +1078,25 @@ xmlRegNewState(xmlRegParserCtxtPtr ctxt) {
     xmlRegStatePtr ret;
 
     ret = (xmlRegStatePtr) xmlMalloc(sizeof(xmlRegState));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2945]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2945\n");
+      else
+        fprintf(stderr, "reached bug index 2945\n");
+    }
+    if ((!FIXREVERTER[2945] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt, "allocating state");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegState));
     ret->type = XML_REGEXP_TRANS_STATE;
     ret->mark = XML_REGEXP_MARK_NORMAL;
@@ -897,8 +1111,23 @@ xmlRegNewState(xmlRegParserCtxtPtr ctxt) {
  */
 static void
 xmlRegFreeState(xmlRegStatePtr state) {
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2946]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2946\n");
+      else
+        fprintf(stderr, "reached bug index 2946\n");
+    }
+    if ((!FIXREVERTER[2946] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (state->trans != NULL)
 	xmlFree(state->trans);
@@ -916,8 +1145,23 @@ xmlRegFreeState(xmlRegStatePtr state) {
 static void
 xmlRegFreeParserCtxt(xmlRegParserCtxtPtr ctxt) {
     int i;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2947]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2947\n");
+      else
+        fprintf(stderr, "reached bug index 2947\n");
+    }
+    if ((!FIXREVERTER[2947] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ctxt->string != NULL)
 	xmlFree(ctxt->string);
@@ -1233,26 +1477,71 @@ xmlRegAtomAddRange(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom,
 	atom->maxRanges = 4;
 	atom->ranges = (xmlRegRangePtr *) xmlMalloc(atom->maxRanges *
 		                             sizeof(xmlRegRangePtr));
-	if (atom->ranges == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2953]) {
+	  if ((atom -> ranges == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2953\n");
+	  else
+	    fprintf(stderr, "reached bug index 2953\n");
+	}
+	if ((!FIXREVERTER[2953] && (atom -> ranges == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding ranges");
 	    atom->maxRanges = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (atom->nbRanges >= atom->maxRanges) {
 	xmlRegRangePtr *tmp;
 	atom->maxRanges *= 2;
 	tmp = (xmlRegRangePtr *) xmlRealloc(atom->ranges, atom->maxRanges *
 		                             sizeof(xmlRegRangePtr));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2954]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2954\n");
+	  else
+	    fprintf(stderr, "reached bug index 2954\n");
+	}
+	if ((!FIXREVERTER[2954] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding ranges");
 	    atom->maxRanges /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	atom->ranges = tmp;
     }
     range = xmlRegNewRange(ctxt, neg, type, start, end);
-    if (range == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2955]) {
+      if ((range == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2955\n");
+      else
+        fprintf(stderr, "reached bug index 2955\n");
+    }
+    if ((!FIXREVERTER[2955] && (range == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     range->blockName = blockName;
     atom->ranges[atom->nbRanges++] = range;
 
@@ -1264,21 +1553,51 @@ xmlRegGetCounter(xmlRegParserCtxtPtr ctxt) {
 	ctxt->maxCounters = 4;
 	ctxt->counters = (xmlRegCounter *) xmlMalloc(ctxt->maxCounters *
 		                             sizeof(xmlRegCounter));
-	if (ctxt->counters == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2956]) {
+	  if ((ctxt -> counters == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2956\n");
+	  else
+	    fprintf(stderr, "reached bug index 2956\n");
+	}
+	if ((!FIXREVERTER[2956] && (ctxt -> counters == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "allocating counter");
 	    ctxt->maxCounters = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (ctxt->nbCounters >= ctxt->maxCounters) {
 	xmlRegCounter *tmp;
 	ctxt->maxCounters *= 2;
 	tmp = (xmlRegCounter *) xmlRealloc(ctxt->counters, ctxt->maxCounters *
 		                           sizeof(xmlRegCounter));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2957]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2957\n");
+	  else
+	    fprintf(stderr, "reached bug index 2957\n");
+	}
+	if ((!FIXREVERTER[2957] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "allocating counter");
 	    ctxt->maxCounters /= 2;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->counters = tmp;
     }
     ctxt->counters[ctxt->nbCounters].min = -1;
@@ -1296,21 +1615,51 @@ xmlRegAtomPush(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom) {
 	ctxt->maxAtoms = 4;
 	ctxt->atoms = (xmlRegAtomPtr *) xmlMalloc(ctxt->maxAtoms *
 		                             sizeof(xmlRegAtomPtr));
-	if (ctxt->atoms == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2958]) {
+	  if ((ctxt -> atoms == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2958\n");
+	  else
+	    fprintf(stderr, "reached bug index 2958\n");
+	}
+	if ((!FIXREVERTER[2958] && (ctxt -> atoms == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "pushing atom");
 	    ctxt->maxAtoms = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (ctxt->nbAtoms >= ctxt->maxAtoms) {
 	xmlRegAtomPtr *tmp;
 	ctxt->maxAtoms *= 2;
 	tmp = (xmlRegAtomPtr *) xmlRealloc(ctxt->atoms, ctxt->maxAtoms *
 		                             sizeof(xmlRegAtomPtr));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2959]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2959\n");
+	  else
+	    fprintf(stderr, "reached bug index 2959\n");
+	}
+	if ((!FIXREVERTER[2959] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "allocating counter");
 	    ctxt->maxAtoms /= 2;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->atoms = tmp;
     }
     atom->no = ctxt->nbAtoms;
@@ -1325,21 +1674,51 @@ xmlRegStateAddTransTo(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr target,
 	target->maxTransTo = 8;
 	target->transTo = (int *) xmlMalloc(target->maxTransTo *
 		                             sizeof(int));
-	if (target->transTo == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2960]) {
+	  if ((target -> transTo == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2960\n");
+	  else
+	    fprintf(stderr, "reached bug index 2960\n");
+	}
+	if ((!FIXREVERTER[2960] && (target -> transTo == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding transition");
 	    target->maxTransTo = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (target->nbTransTo >= target->maxTransTo) {
 	int *tmp;
 	target->maxTransTo *= 2;
 	tmp = (int *) xmlRealloc(target->transTo, target->maxTransTo *
 		                             sizeof(int));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2961]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2961\n");
+	  else
+	    fprintf(stderr, "reached bug index 2961\n");
+	}
+	if ((!FIXREVERTER[2961] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding transition");
 	    target->maxTransTo /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	target->transTo = tmp;
     }
     target->transTo[target->nbTransTo] = from;
@@ -1385,21 +1764,51 @@ xmlRegStateAddTrans(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
 	state->maxTrans = 8;
 	state->trans = (xmlRegTrans *) xmlMalloc(state->maxTrans *
 		                             sizeof(xmlRegTrans));
-	if (state->trans == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2962]) {
+	  if ((state -> trans == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2962\n");
+	  else
+	    fprintf(stderr, "reached bug index 2962\n");
+	}
+	if ((!FIXREVERTER[2962] && (state -> trans == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding transition");
 	    state->maxTrans = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (state->nbTrans >= state->maxTrans) {
 	xmlRegTrans *tmp;
 	state->maxTrans *= 2;
 	tmp = (xmlRegTrans *) xmlRealloc(state->trans, state->maxTrans *
 		                             sizeof(xmlRegTrans));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2963]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2963\n");
+	  else
+	    fprintf(stderr, "reached bug index 2963\n");
+	}
+	if ((!FIXREVERTER[2963] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding transition");
 	    state->maxTrans /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	state->trans = tmp;
     }
 #ifdef DEBUG_REGEXP_GRAPH
@@ -1427,26 +1836,71 @@ xmlRegStateAddTrans(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
 
 static int
 xmlRegStatePush(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state) {
-    if (state == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2964]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2964\n");
+      else
+        fprintf(stderr, "reached bug index 2964\n");
+    }
+    if ((!FIXREVERTER[2964] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->maxStates == 0) {
 	ctxt->maxStates = 4;
 	ctxt->states = (xmlRegStatePtr *) xmlMalloc(ctxt->maxStates *
 		                             sizeof(xmlRegStatePtr));
-	if (ctxt->states == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2965]) {
+	  if ((ctxt -> states == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2965\n");
+	  else
+	    fprintf(stderr, "reached bug index 2965\n");
+	}
+	if ((!FIXREVERTER[2965] && (ctxt -> states == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding state");
 	    ctxt->maxStates = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (ctxt->nbStates >= ctxt->maxStates) {
 	xmlRegStatePtr *tmp;
 	ctxt->maxStates *= 2;
 	tmp = (xmlRegStatePtr *) xmlRealloc(ctxt->states, ctxt->maxStates *
 		                             sizeof(xmlRegStatePtr));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2966]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2966\n");
+	  else
+	    fprintf(stderr, "reached bug index 2966\n");
+	}
+	if ((!FIXREVERTER[2966] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding state");
 	    ctxt->maxStates /= 2;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->states = tmp;
     }
     state->no = ctxt->nbStates;
@@ -1632,8 +2086,23 @@ xmlFAGenerateTransitions(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr from,
 		        case, I suppose this got optimized out before when
 			building the automata */
 		    copy = xmlRegCopyAtom(ctxt, atom);
-		    if (copy == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2967]) {
+		      if ((copy == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2967\n");
+		      else
+		        fprintf(stderr, "reached bug index 2967\n");
+		    }
+		    if ((!FIXREVERTER[2967] && (copy == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        return(-1);
+		        #ifdef FRCOV
+		        }
+		        #endif
 		    copy->quant = XML_REGEXP_QUANT_ONCE;
 		    copy->min = 0;
 		    copy->max = 0;
@@ -1785,11 +2254,41 @@ xmlFAReduceEpsilonTransitions(xmlRegParserCtxtPtr ctxt, int fromnr,
     printf("xmlFAReduceEpsilonTransitions(%d, %d)\n", fromnr, tonr);
 #endif
     from = ctxt->states[fromnr];
-    if (from == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2968]) {
+      if ((from == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2968\n");
+      else
+        fprintf(stderr, "reached bug index 2968\n");
+    }
+    if ((!FIXREVERTER[2968] && (from == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     to = ctxt->states[tonr];
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2969]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2969\n");
+      else
+        fprintf(stderr, "reached bug index 2969\n");
+    }
+    if ((!FIXREVERTER[2969] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((to->mark == XML_REGEXP_MARK_START) ||
 	(to->mark == XML_REGEXP_MARK_VISITED))
 	return;
@@ -1870,10 +2369,40 @@ xmlFAEliminateSimpleEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
 
     for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2970]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2970\n");
+	  else
+	    fprintf(stderr, "reached bug index 2970\n");
+	}
+	if ((!FIXREVERTER[2970] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
-	if (state->nbTrans != 1)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2971]) {
+	  if ((state -> nbTrans != 1 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2971\n");
+	  else
+	    fprintf(stderr, "reached bug index 2971\n");
+	}
+	if ((!FIXREVERTER[2971] && (state -> nbTrans != 1 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (state->type == XML_REGEXP_UNREACH_STATE)
 	    continue;
 	/* is the only transition out a basic transition */
@@ -1933,7 +2462,22 @@ xmlFAEliminateEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
     xmlRegStatePtr state;
     int has_epsilon;
 
-    if (ctxt->states == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2972]) {
+      if ((ctxt -> states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2972\n");
+      else
+        fprintf(stderr, "reached bug index 2972\n");
+    }
+    if ((!FIXREVERTER[2972] && (ctxt -> states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Eliminate simple epsilon transition and the associated unreachable
@@ -1963,8 +2507,23 @@ xmlFAEliminateEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
      */
     for (statenr = ctxt->nbStates - 1;statenr >= 0;statenr--) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2973]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2973\n");
+	  else
+	    fprintf(stderr, "reached bug index 2973\n");
+	}
+	if ((!FIXREVERTER[2973] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((state->nbTrans == 0) &&
 	    (state->type != XML_REGEXP_FINAL_STATE)) {
 	    state->type = XML_REGEXP_SINK_STATE;
@@ -2006,8 +2565,23 @@ xmlFAEliminateEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
     if (has_epsilon) {
 	for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	    state = ctxt->states[statenr];
-	    if (state == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2974]) {
+	      if ((state == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2974\n");
+	      else
+	        fprintf(stderr, "reached bug index 2974\n");
+	    }
+	    if ((!FIXREVERTER[2974] && (state == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    for (transnr = 0;transnr < state->nbTrans;transnr++) {
 		xmlRegTransPtr trans = &(state->trans[transnr]);
 		if ((trans->atom == NULL) &&
@@ -2460,8 +3034,23 @@ xmlFAEqualAtoms(xmlRegAtomPtr atom1, xmlRegAtomPtr atom2, int deep) {
 
     if (atom1 == atom2)
 	return(1);
-    if ((atom1 == NULL) || (atom2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2976]) {
+      if ((atom1 == (void *) 0 || atom2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2976\n");
+      else
+        fprintf(stderr, "reached bug index 2976\n");
+    }
+    if ((!FIXREVERTER[2976] && (atom1 == (void *) 0 || atom2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (atom1->type != atom2->type)
         return(0);
@@ -2505,8 +3094,23 @@ xmlFACompareAtoms(xmlRegAtomPtr atom1, xmlRegAtomPtr atom2, int deep) {
 
     if (atom1 == atom2)
 	return(1);
-    if ((atom1 == NULL) || (atom2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2977]) {
+      if ((atom1 == (void *) 0 || atom2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2977\n");
+      else
+        fprintf(stderr, "reached bug index 2977\n");
+    }
+    if ((!FIXREVERTER[2977] && (atom1 == (void *) 0 || atom2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if ((atom1->type == XML_REGEXP_ANYCHAR) ||
         (atom2->type == XML_REGEXP_ANYCHAR))
@@ -2604,8 +3208,23 @@ xmlFARecurseDeterminism(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
     xmlRegTransPtr t1;
     int deep = 1;
 
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2983]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2983\n");
+      else
+        fprintf(stderr, "reached bug index 2983\n");
+    }
+    if ((!FIXREVERTER[2983] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(ret);
+	#ifdef FRCOV
+	}
+	#endif
     if (state->markd == XML_REGEXP_MARK_VISITED)
 	return(ret);
 
@@ -2623,8 +3242,23 @@ xmlFARecurseDeterminism(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
 	 * check transitions conflicting with the one looked at
 	 */
 	if (t1->atom == NULL) {
-	    if (t1->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2984]) {
+	      if ((t1 -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2984\n");
+	      else
+	        fprintf(stderr, "reached bug index 2984\n");
+	    }
+	    if ((!FIXREVERTER[2984] && (t1 -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    state->markd = XML_REGEXP_MARK_VISITED;
 	    res = xmlFARecurseDeterminism(ctxt, ctxt->states[t1->to],
 		                           to, atom);
@@ -2635,8 +3269,23 @@ xmlFARecurseDeterminism(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
 	    }
 	    continue;
 	}
-	if (t1->to != to)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2985]) {
+	  if ((t1 -> to != to ) && !(0))
+	    fprintf(stderr, "triggered bug index 2985\n");
+	  else
+	    fprintf(stderr, "reached bug index 2985\n");
+	}
+	if ((!FIXREVERTER[2985] && (t1 -> to != to ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (xmlFACompareAtoms(t1->atom, atom, deep)) {
 	    ret = 0;
 	    /* mark the transition as non-deterministic */
@@ -2678,20 +3327,65 @@ xmlFAComputesDeterminism(xmlRegParserCtxtPtr ctxt) {
      */
     for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2986]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2986\n");
+	  else
+	    fprintf(stderr, "reached bug index 2986\n");
+	}
+	if ((!FIXREVERTER[2986] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
-	if (state->nbTrans < 2)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2987]) {
+	  if ((state -> nbTrans < 2 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2987\n");
+	  else
+	    fprintf(stderr, "reached bug index 2987\n");
+	}
+	if ((!FIXREVERTER[2987] && (state -> nbTrans < 2 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	for (transnr = 0;transnr < state->nbTrans;transnr++) {
 	    t1 = &(state->trans[transnr]);
 	    /*
 	     * Determinism checks in case of counted or all transitions
 	     * will have to be handled separately
 	     */
-	    if (t1->atom == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2988]) {
+	      if ((t1 -> atom == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2988\n");
+	      else
+	        fprintf(stderr, "reached bug index 2988\n");
+	    }
+	    if ((!FIXREVERTER[2988] && (t1 -> atom == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/* t1->nd = 1; */
 		continue;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (t1->to == -1) /* eliminated */
 		continue;
 	    for (i = 0;i < transnr;i++) {
@@ -2720,10 +3414,40 @@ xmlFAComputesDeterminism(xmlRegParserCtxtPtr ctxt) {
      */
     for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2989]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2989\n");
+	  else
+	    fprintf(stderr, "reached bug index 2989\n");
+	}
+	if ((!FIXREVERTER[2989] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
-	if (state->nbTrans < 2)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2990]) {
+	  if ((state -> nbTrans < 2 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2990\n");
+	  else
+	    fprintf(stderr, "reached bug index 2990\n");
+	}
+	if ((!FIXREVERTER[2990] && (state -> nbTrans < 2 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	last = NULL;
 	for (transnr = 0;transnr < state->nbTrans;transnr++) {
 	    t1 = &(state->trans[transnr]);
@@ -2731,9 +3455,24 @@ xmlFAComputesDeterminism(xmlRegParserCtxtPtr ctxt) {
 	     * Determinism checks in case of counted or all transitions
 	     * will have to be handled separately
 	     */
-	    if (t1->atom == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2991]) {
+	      if ((t1 -> atom == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2991\n");
+	      else
+	        fprintf(stderr, "reached bug index 2991\n");
+	    }
+	    if ((!FIXREVERTER[2991] && (t1 -> atom == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		continue;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (t1->to == -1) /* eliminated */
 		continue;
 	    for (i = 0;i < transnr;i++) {
@@ -3112,9 +3851,24 @@ xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
     exec->transno--;
 #endif
 #ifdef MAX_PUSH
-    if (exec->nbPush > MAX_PUSH) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2996]) {
+      if ((exec -> nbPush > 10000000 ) && !(0))
+        fprintf(stderr, "triggered bug index 2996\n");
+      else
+        fprintf(stderr, "reached bug index 2996\n");
+    }
+    if ((!FIXREVERTER[2996] && (exec -> nbPush > 10000000 ))
+    #else
+    if (0
+    #endif
+    ) {
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     exec->nbPush++;
 #endif
 
@@ -3122,11 +3876,26 @@ xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
 	exec->maxRollbacks = 4;
 	exec->rollbacks = (xmlRegExecRollback *) xmlMalloc(exec->maxRollbacks *
 		                             sizeof(xmlRegExecRollback));
-	if (exec->rollbacks == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2997]) {
+	  if ((exec -> rollbacks == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2997\n");
+	  else
+	    fprintf(stderr, "reached bug index 2997\n");
+	}
+	if ((!FIXREVERTER[2997] && (exec -> rollbacks == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "saving regexp");
 	    exec->maxRollbacks = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(exec->rollbacks, 0,
 	       exec->maxRollbacks * sizeof(xmlRegExecRollback));
     } else if (exec->nbRollbacks >= exec->maxRollbacks) {
@@ -3136,11 +3905,26 @@ xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
 	exec->maxRollbacks *= 2;
 	tmp = (xmlRegExecRollback *) xmlRealloc(exec->rollbacks,
 			exec->maxRollbacks * sizeof(xmlRegExecRollback));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2998]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2998\n");
+	  else
+	    fprintf(stderr, "reached bug index 2998\n");
+	}
+	if ((!FIXREVERTER[2998] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "saving regexp");
 	    exec->maxRollbacks /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	exec->rollbacks = tmp;
 	tmp = &exec->rollbacks[len];
 	memset(tmp, 0, (exec->maxRollbacks - len) * sizeof(xmlRegExecRollback));
@@ -3166,13 +3950,28 @@ xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
 
 static void
 xmlFARegExecRollBack(xmlRegExecCtxtPtr exec) {
-    if (exec->nbRollbacks <= 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2999]) {
+      if ((exec -> nbRollbacks <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2999\n");
+      else
+        fprintf(stderr, "reached bug index 2999\n");
+    }
+    if ((!FIXREVERTER[2999] && (exec -> nbRollbacks <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	exec->status = -1;
 #ifdef DEBUG_REGEXP_EXEC
 	printf("rollback failed on empty stack\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     exec->nbRollbacks--;
     exec->state = exec->rollbacks[exec->nbRollbacks].state;
     exec->index = exec->rollbacks[exec->nbRollbacks].index;
@@ -3223,10 +4022,25 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
     exec->inputStackMax = 0;
     if (comp->nbCounters > 0) {
 	exec->counts = (int *) xmlMalloc(comp->nbCounters * sizeof(int));
-	if (exec->counts == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3000]) {
+	  if ((exec -> counts == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3000\n");
+	  else
+	    fprintf(stderr, "reached bug index 3000\n");
+	}
+	if ((!FIXREVERTER[3000] && (exec -> counts == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "running regexp");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         memset(exec->counts, 0, comp->nbCounters * sizeof(int));
     } else
 	exec->counts = NULL;
@@ -3264,8 +4078,23 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 	exec->transcount = 0;
 	for (;exec->transno < exec->state->nbTrans;exec->transno++) {
 	    trans = &exec->state->trans[exec->transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3001]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3001\n");
+	      else
+	        fprintf(stderr, "reached bug index 3001\n");
+	    }
+	    if ((!FIXREVERTER[3001] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
 	    ret = 0;
 	    deter = 1;
@@ -3273,10 +4102,25 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 		int count;
 		xmlRegCounterPtr counter;
 
-		if (exec->counts == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3002]) {
+		  if ((exec -> counts == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3002\n");
+		  else
+		    fprintf(stderr, "reached bug index 3002\n");
+		}
+		if ((!FIXREVERTER[3002] && (exec -> counts == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    exec->status = -1;
 		    goto error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		/*
 		 * A counted transition.
 		 */
@@ -3333,9 +4177,24 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 			/*
 			 * Try to progress as much as possible on the input
 			 */
-			if (exec->transcount == atom->max) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3003]) {
+			  if ((exec -> transcount == atom -> max ) && !(0))
+			    fprintf(stderr, "triggered bug index 3003\n");
+			  else
+			    fprintf(stderr, "reached bug index 3003\n");
+			}
+			if ((!FIXREVERTER[3003] && (exec -> transcount == atom -> max ))
+			#else
+			if (0
+			#endif
+			) {
 			    break;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			exec->index += len;
 			/*
 			 * End of input: stop here
@@ -3375,10 +4234,25 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 			goto rollback;
 		    }
 		    if (trans->counter >= 0) {
-			if (exec->counts == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3007]) {
+			  if ((exec -> counts == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 3007\n");
+			  else
+			    fprintf(stderr, "reached bug index 3007\n");
+			}
+			if ((!FIXREVERTER[3007] && (exec -> counts == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    exec->status = -1;
 			    goto error;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 #ifdef DEBUG_REGEXP_EXEC
 			printf("Decreasing count %d\n", trans->counter);
 #endif
@@ -3434,10 +4308,25 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 		}
 		if ((trans->count >= 0) &&
 		    (trans->count < REGEXP_ALL_COUNTER)) {
-		    if (exec->counts == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[3010]) {
+		      if ((exec -> counts == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 3010\n");
+		      else
+		        fprintf(stderr, "reached bug index 3010\n");
+		    }
+		    if ((!FIXREVERTER[3010] && (exec -> counts == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 		        exec->status = -1;
 			goto error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 #ifdef DEBUG_REGEXP_EXEC
 		    printf("resetting count %d on transition\n",
 		           trans->count);
@@ -3484,15 +4373,60 @@ error:
 	}
 	xmlFree(exec->rollbacks);
     }
-    if (exec->state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3013]) {
+      if ((exec -> state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3013\n");
+      else
+        fprintf(stderr, "reached bug index 3013\n");
+    }
+    if ((!FIXREVERTER[3013] && (exec -> state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (exec->counts != NULL)
 	xmlFree(exec->counts);
-    if (exec->status == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3014]) {
+      if ((exec -> status == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3014\n");
+      else
+        fprintf(stderr, "reached bug index 3014\n");
+    }
+    if ((!FIXREVERTER[3014] && (exec -> status == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(1);
+	#ifdef FRCOV
+	}
+	#endif
     if (exec->status == -1) {
-	if (exec->nbPush > MAX_PUSH)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3015]) {
+	  if ((exec -> nbPush > 10000000 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3015\n");
+	  else
+	    fprintf(stderr, "reached bug index 3015\n");
+	}
+	if ((!FIXREVERTER[3015] && (exec -> nbPush > 10000000 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return(0);
     }
     return(exec->status);
@@ -3522,15 +4456,45 @@ xmlRegExecCtxtPtr
 xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
     xmlRegExecCtxtPtr exec;
 
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3016]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3016\n");
+      else
+        fprintf(stderr, "reached bug index 3016\n");
+    }
+    if ((!FIXREVERTER[3016] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((comp->compact == NULL) && (comp->states == NULL))
         return(NULL);
     exec = (xmlRegExecCtxtPtr) xmlMalloc(sizeof(xmlRegExecCtxt));
-    if (exec == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3017]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3017\n");
+      else
+        fprintf(stderr, "reached bug index 3017\n");
+    }
+    if ((!FIXREVERTER[3017] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(NULL, "creating execution context");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(exec, 0, sizeof(xmlRegExecCtxt));
     exec->inputString = NULL;
     exec->index = 0;
@@ -3540,8 +4504,23 @@ xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
     exec->rollbacks = NULL;
     exec->status = 0;
     exec->comp = comp;
-    if (comp->compact == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3018]) {
+      if ((comp -> compact == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3018\n");
+      else
+        fprintf(stderr, "reached bug index 3018\n");
+    }
+    if ((!FIXREVERTER[3018] && (comp -> compact == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	exec->state = comp->states[0];
+	#ifdef FRCOV
+	}
+	#endif
     exec->transno = 0;
     exec->transcount = 0;
     exec->callback = callback;
@@ -3553,11 +4532,26 @@ xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
 	 */
 	exec->counts = (int *) xmlMalloc(comp->nbCounters * sizeof(int)
 	                                 * 2);
-	if (exec->counts == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3019]) {
+	  if ((exec -> counts == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3019\n");
+	  else
+	    fprintf(stderr, "reached bug index 3019\n");
+	}
+	if ((!FIXREVERTER[3019] && (exec -> counts == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "creating execution context");
 	    xmlFree(exec);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         memset(exec->counts, 0, comp->nbCounters * sizeof(int) * 2);
 	exec->errCounts = &exec->counts[comp->nbCounters];
     } else {
@@ -3581,8 +4575,23 @@ xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
  */
 void
 xmlRegFreeExecCtxt(xmlRegExecCtxtPtr exec) {
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3020]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3020\n");
+      else
+        fprintf(stderr, "reached bug index 3020\n");
+    }
+    if ((!FIXREVERTER[3020] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (exec->rollbacks != NULL) {
 	if (exec->counts != NULL) {
@@ -3620,22 +4629,52 @@ xmlFARegExecSaveInputString(xmlRegExecCtxtPtr exec, const xmlChar *value,
 	exec->inputStackMax = 4;
 	exec->inputStack = (xmlRegInputTokenPtr)
 	    xmlMalloc(exec->inputStackMax * sizeof(xmlRegInputToken));
-	if (exec->inputStack == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3021]) {
+	  if ((exec -> inputStack == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3021\n");
+	  else
+	    fprintf(stderr, "reached bug index 3021\n");
+	}
+	if ((!FIXREVERTER[3021] && (exec -> inputStack == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "pushing input string");
 	    exec->inputStackMax = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (exec->inputStackNr + 1 >= exec->inputStackMax) {
 	xmlRegInputTokenPtr tmp;
 
 	exec->inputStackMax *= 2;
 	tmp = (xmlRegInputTokenPtr) xmlRealloc(exec->inputStack,
 			exec->inputStackMax * sizeof(xmlRegInputToken));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3022]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3022\n");
+	  else
+	    fprintf(stderr, "reached bug index 3022\n");
+	}
+	if ((!FIXREVERTER[3022] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "pushing input string");
 	    exec->inputStackMax /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	exec->inputStack = tmp;
     }
     exec->inputStack[exec->inputStackNr].value = xmlStrdup(value);
@@ -3661,8 +4700,38 @@ xmlFARegExecSaveInputString(xmlRegExecCtxtPtr exec, const xmlChar *value,
 static int
 xmlRegStrEqualWildcard(const xmlChar *expStr, const xmlChar *valStr) {
     if (expStr == valStr) return(1);
-    if (expStr == NULL) return(0);
-    if (valStr == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3023]) {
+      if ((expStr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3023\n");
+      else
+        fprintf(stderr, "reached bug index 3023\n");
+    }
+    if ((!FIXREVERTER[3023] && (expStr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3024]) {
+      if ((valStr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3024\n");
+      else
+        fprintf(stderr, "reached bug index 3024\n");
+    }
+    if ((!FIXREVERTER[3024] && (valStr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     do {
 	/*
 	* Eval if we have a wildcard for the current item.
@@ -3715,10 +4784,37 @@ xmlRegCompactPushString(xmlRegExecCtxtPtr exec,
     int state = exec->index;
     int i, target;
 
-    if ((comp == NULL) || (comp->compact == NULL) || (comp->stringMap == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3025]) {
+      if ((comp == (void *) 0 || comp -> compact == (void *) 0 || comp -> stringMap == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3025\n");
+      else
+        fprintf(stderr, "reached bug index 3025\n");
+    }
+    if ((!FIXREVERTER[3025] && (comp == (void *) 0 || comp -> compact == (void *) 0 || comp -> stringMap == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-
-    if (value == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3026]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3026\n");
+      else
+        fprintf(stderr, "reached bug index 3026\n");
+    }
+    if ((!FIXREVERTER[3026] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * are we at a final state ?
 	 */
@@ -3727,6 +4823,9 @@ xmlRegCompactPushString(xmlRegExecCtxtPtr exec,
 	    return(1);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef DEBUG_PUSH
     printf("value pushed: %s\n", value);
@@ -3737,14 +4836,47 @@ xmlRegCompactPushString(xmlRegExecCtxtPtr exec,
      */
     for (i = 0;i < comp->nbstrings;i++) {
 	target = comp->compact[state * (comp->nbstrings + 1) + i + 1];
-	if ((target > 0) && (target <= comp->nbstates)) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3028]) {
+	  fprintf(stderr, "reached bug index 3028\n");
+	}
+	if ((FIXREVERTER[3028] && (target > 0 )) || (!FIXREVERTER[3028] && (target > 0 && target <= comp -> nbstates ))
+	#else
+	if (target > 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(target <= comp -> nbstates ))
+	    fprintf(stderr, "triggered bug index 3028\n");
+	  #endif
+	
 	    target--; /* to avoid 0 */
 	    if (xmlRegStrEqualWildcard(comp->stringMap[i], value)) {
 		exec->index = target;
-		if ((exec->callback != NULL) && (comp->transdata != NULL)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3027]) {
+		  fprintf(stderr, "reached bug index 3027\n");
+		}
+		if ((FIXREVERTER[3027] && (exec -> callback != (void *) 0 )) || (!FIXREVERTER[3027] && (exec -> callback != (void *) 0 && comp -> transdata != (void *) 0 ))
+		#else
+		if (exec -> callback != (void *) 0 
+		#endif
+		) {
+		  
+		#ifdef FRCOV
+		  if (!(comp -> transdata != (void *) 0 ))
+		    fprintf(stderr, "triggered bug index 3027\n");
+		  #endif
+		
 		    exec->callback(exec->data, value,
 			  comp->transdata[state * comp->nbstrings + i], data);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 #ifdef DEBUG_PUSH
 		printf("entering state %d\n", target);
 #endif
@@ -3758,6 +4890,9 @@ xmlRegCompactPushString(xmlRegExecCtxtPtr exec,
 		return(0);
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     /*
      * Failed to find an exit transition out from current state for the
@@ -3799,12 +4934,57 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
     int final = 0;
     int progress = 1;
 
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3029]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3029\n");
+      else
+        fprintf(stderr, "reached bug index 3029\n");
+    }
+    if ((!FIXREVERTER[3029] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->comp == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3030]) {
+      if ((exec -> comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3030\n");
+      else
+        fprintf(stderr, "reached bug index 3030\n");
+    }
+    if ((!FIXREVERTER[3030] && (exec -> comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->status != 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3031]) {
+      if ((exec -> status != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3031\n");
+      else
+        fprintf(stderr, "reached bug index 3031\n");
+    }
+    if ((!FIXREVERTER[3031] && (exec -> status != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(exec->status);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (exec->comp->compact != NULL)
 	return(xmlRegCompactPushString(exec, exec->comp, value, data));
@@ -3822,7 +5002,22 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
      * If we have an active rollback stack push the new value there
      * and get back to where we were left
      */
-    if ((value != NULL) && (exec->inputStackNr > 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3032]) {
+      fprintf(stderr, "reached bug index 3032\n");
+    }
+    if ((FIXREVERTER[3032] && (value != (void *) 0 )) || (!FIXREVERTER[3032] && (value != (void *) 0 && exec -> inputStackNr > 0 ))
+    #else
+    if (value != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(exec -> inputStackNr > 0 ))
+        fprintf(stderr, "triggered bug index 3032\n");
+      #endif
+    
 	xmlFARegExecSaveInputString(exec, value, data);
 	value = exec->inputStack[exec->index].value;
 	data = exec->inputStack[exec->index].data;
@@ -3830,6 +5025,9 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 	printf("value loaded: %s\n", value);
 #endif
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     while ((exec->status == 0) &&
 	   ((value != NULL) ||
@@ -3847,8 +5045,23 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 	exec->transcount = 0;
 	for (;exec->transno < exec->state->nbTrans;exec->transno++) {
 	    trans = &exec->state->trans[exec->transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3033]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3033\n");
+	      else
+	        fprintf(stderr, "reached bug index 3033\n");
+	    }
+	    if ((!FIXREVERTER[3033] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
 	    ret = 0;
 	    if (trans->count == REGEXP_ALL_LAX_COUNTER) {
@@ -3909,10 +5122,25 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			continue;
                     counter = &exec->comp->counters[t->counter];
 		    count = exec->counts[t->counter];
-		    if ((count < counter->min) || (count > counter->max)) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[3034]) {
+		      if ((count < counter -> min || count > counter -> max ) && !(0))
+		        fprintf(stderr, "triggered bug index 3034\n");
+		      else
+		        fprintf(stderr, "reached bug index 3034\n");
+		    }
+		    if ((!FIXREVERTER[3034] && (count < counter -> min || count > counter -> max ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			ret = 0;
 			break;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		}
 	    } else if (trans->count >= 0) {
 		int count;
@@ -3940,7 +5168,22 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 		    if (!compound)
 		        ret = 0;
 		}
-		if ((ret == 1) && (trans->counter >= 0)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3036]) {
+		  fprintf(stderr, "reached bug index 3036\n");
+		}
+		if ((FIXREVERTER[3036] && (ret == 1 )) || (!FIXREVERTER[3036] && (ret == 1 && trans -> counter >= 0 ))
+		#else
+		if (ret == 1 
+		#endif
+		) {
+		  
+		#ifdef FRCOV
+		  if (!(trans -> counter >= 0 ))
+		    fprintf(stderr, "triggered bug index 3036\n");
+		  #endif
+		
 		    xmlRegCounterPtr counter;
 		    int count;
 
@@ -3949,8 +5192,26 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 		    if (count >= counter->max)
 			ret = 0;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 
-		if ((ret == 1) && (atom->min > 0) && (atom->max > 0)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3042]) {
+		  fprintf(stderr, "reached bug index 3042\n");
+		}
+		if ((FIXREVERTER[3042] && (ret == 1 && atom -> min > 0 )) || (!FIXREVERTER[3042] && (ret == 1 && atom -> min > 0 && atom -> max > 0 ))
+		#else
+		if (ret == 1 && atom -> min > 0 
+		#endif
+		) {
+		  
+		#ifdef FRCOV
+		  if (!(atom -> max > 0 ))
+		    fprintf(stderr, "triggered bug index 3042\n");
+		  #endif
+		
 		    xmlRegStatePtr to = exec->comp->states[trans->to];
 
 		    /*
@@ -3967,9 +5228,24 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			/*
 			 * Try to progress as much as possible on the input
 			 */
-			if (exec->transcount == atom->max) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3037]) {
+			  if ((exec -> transcount == atom -> max ) && !(0))
+			    fprintf(stderr, "triggered bug index 3037\n");
+			  else
+			    fprintf(stderr, "reached bug index 3037\n");
+			}
+			if ((!FIXREVERTER[3037] && (exec -> transcount == atom -> max ))
+			#else
+			if (0
+			#endif
+			) {
 			    break;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			exec->index++;
 			value = exec->inputStack[exec->index].value;
 			data = exec->inputStack[exec->index].data;
@@ -3980,10 +5256,25 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			/*
 			 * End of input: stop here
 			 */
-			if (value == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3038]) {
+			  if ((value == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 3038\n");
+			  else
+			    fprintf(stderr, "reached bug index 3038\n");
+			}
+			if ((!FIXREVERTER[3038] && (value == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    exec->index --;
 			    break;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			if (exec->transcount >= atom->min) {
 			    int transno = exec->transno;
 			    xmlRegStatePtr state = exec->state;
@@ -4016,13 +5307,33 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			goto rollback;
 		    }
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 	    if (ret == 1) {
-		if ((exec->callback != NULL) && (atom != NULL) &&
-			(data != NULL)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3043]) {
+		  fprintf(stderr, "reached bug index 3043\n");
+		}
+		if ((FIXREVERTER[3043] && (exec -> callback != (void *) 0 && atom != (void *) 0 )) || (!FIXREVERTER[3043] && (exec -> callback != (void *) 0 && atom != (void *) 0 && data != (void *) 0 ))
+		#else
+		if (exec -> callback != (void *) 0 && atom != (void *) 0 
+		#endif
+		) {
+			  
+			#ifdef FRCOV
+			  if (!(data != (void *) 0 ))
+			    fprintf(stderr, "triggered bug index 3043\n");
+			  #endif
+			
 		    exec->callback(exec->data, atom->valuep,
 			           atom->data, data);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		if (exec->state->nbTrans > exec->transno + 1) {
 		    if (exec->inputStackNr <= 0) {
 			xmlFARegExecSaveInputString(exec, value, data);
@@ -4035,14 +5346,31 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 #endif
 		    exec->counts[trans->counter]++;
 		}
-		if ((trans->count >= 0) &&
-		    (trans->count < REGEXP_ALL_COUNTER)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3044]) {
+		  fprintf(stderr, "reached bug index 3044\n");
+		}
+		if ((FIXREVERTER[3044] && (trans -> count >= 0 )) || (!FIXREVERTER[3044] && (trans -> count >= 0 && trans -> count < 1193046 ))
+		#else
+		if (trans -> count >= 0 
+		#endif
+		) {
+		      
+		    #ifdef FRCOV
+		      if (!(trans -> count < 1193046 ))
+		        fprintf(stderr, "triggered bug index 3044\n");
+		      #endif
+		    
 #ifdef DEBUG_REGEXP_EXEC
 		    printf("resetting count %d on transition\n",
 		           trans->count);
 #endif
 		    exec->counts[trans->count] = 0;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 #ifdef DEBUG_PUSH
 		printf("entering state %d\n", trans->to);
 #endif
@@ -4115,22 +5443,55 @@ rollback:
 	     */
 	    exec->determinist = 0;
 	    xmlFARegExecRollBack(exec);
-	    if ((exec->inputStack != NULL ) && (exec->status == 0)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3046]) {
+	      fprintf(stderr, "reached bug index 3046\n");
+	    }
+	    if ((FIXREVERTER[3046] && (exec -> inputStack != (void *) 0 )) || (!FIXREVERTER[3046] && (exec -> inputStack != (void *) 0 && exec -> status == 0 ))
+	    #else
+	    if (exec -> inputStack != (void *) 0 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(exec -> status == 0 ))
+	        fprintf(stderr, "triggered bug index 3046\n");
+	      #endif
+	    
 		value = exec->inputStack[exec->index].value;
 		data = exec->inputStack[exec->index].data;
 #ifdef DEBUG_PUSH
 		printf("value loaded: %s\n", value);
 #endif
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	continue;
 progress:
         progress = 1;
 	continue;
     }
-    if (exec->status == 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3047]) {
+      if ((exec -> status == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3047\n");
+      else
+        fprintf(stderr, "reached bug index 3047\n");
+    }
+    if ((!FIXREVERTER[3047] && (exec -> status == 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(exec->state->type == XML_REGEXP_FINAL_STATE);
     }
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_ERR
     if (exec->status < 0) {
 	testerr(exec);
@@ -4175,25 +5536,100 @@ xmlRegExecPushString2(xmlRegExecCtxtPtr exec, const xmlChar *value,
     int lenn, lenp, ret;
     xmlChar *str;
 
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3048]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3048\n");
+      else
+        fprintf(stderr, "reached bug index 3048\n");
+    }
+    if ((!FIXREVERTER[3048] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->comp == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3049]) {
+      if ((exec -> comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3049\n");
+      else
+        fprintf(stderr, "reached bug index 3049\n");
+    }
+    if ((!FIXREVERTER[3049] && (exec -> comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->status != 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3050]) {
+      if ((exec -> status != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3050\n");
+      else
+        fprintf(stderr, "reached bug index 3050\n");
+    }
+    if ((!FIXREVERTER[3050] && (exec -> status != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(exec->status);
-
-    if (value2 == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3051]) {
+      if ((value2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3051\n");
+      else
+        fprintf(stderr, "reached bug index 3051\n");
+    }
+    if ((!FIXREVERTER[3051] && (value2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlRegExecPushString(exec, value, data));
+        #ifdef FRCOV
+        }
+        #endif
 
     lenn = strlen((char *) value2);
     lenp = strlen((char *) value);
 
     if (150 < lenn + lenp + 2) {
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3052]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3052\n");
+	  else
+	    fprintf(stderr, "reached bug index 3052\n");
+	}
+	if ((!FIXREVERTER[3052] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    exec->status = -1;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
 	str = buf;
     }
@@ -4259,7 +5695,21 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 	    else
 		*terminal = 0;
 	}
-	for (i = 0;(i < comp->nbstrings) && (nb < maxval);i++) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3053])
+	  fprintf(stderr, "reached bug index 3053\n");
+	for (i = 0; (FIXREVERTER[3053] && (i < comp -> nbstrings )) || (!FIXREVERTER[3053] && (i < comp -> nbstrings && nb < maxval ))
+	#else
+	for (i = 0; i < comp -> nbstrings 
+	#endif
+	;i++) {
+	  
+	#ifdef FRCOV
+	  if (!(nb < maxval ))
+	    fprintf(stderr, "triggered bug index 3053\n");
+	  #endif
+	
 	    target = comp->compact[state * (comp->nbstrings + 1) + i + 1];
 	    if ((target > 0) && (target <= comp->nbstates) &&
 	        (comp->compact[(target - 1) * (comp->nbstrings + 1)] !=
@@ -4268,7 +5718,24 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		(*nbval)++;
 	    }
 	}
-	for (i = 0;(i < comp->nbstrings) && (nb < maxval);i++) {
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3054])
+	  fprintf(stderr, "reached bug index 3054\n");
+	for (i = 0; (FIXREVERTER[3054] && (i < comp -> nbstrings )) || (!FIXREVERTER[3054] && (i < comp -> nbstrings && nb < maxval ))
+	#else
+	for (i = 0; i < comp -> nbstrings 
+	#endif
+	;i++) {
+	  
+	#ifdef FRCOV
+	  if (!(nb < maxval ))
+	    fprintf(stderr, "triggered bug index 3054\n");
+	  #endif
+	
 	    target = comp->compact[state * (comp->nbstrings + 1) + i + 1];
 	    if ((target > 0) && (target <= comp->nbstates) &&
 	        (comp->compact[(target - 1) * (comp->nbstrings + 1)] ==
@@ -4277,6 +5744,9 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		(*nbneg)++;
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
         int transno;
 	xmlRegTransPtr trans;
@@ -4291,21 +5761,94 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 	}
 
 	if (err) {
-	    if (exec->errState == NULL) return(-1);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3055]) {
+	      if ((exec -> errState == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3055\n");
+	      else
+	        fprintf(stderr, "reached bug index 3055\n");
+	    }
+	    if ((!FIXREVERTER[3055] && (exec -> errState == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    state = exec->errState;
 	} else {
-	    if (exec->state == NULL) return(-1);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3056]) {
+	      if ((exec -> state == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3056\n");
+	      else
+	        fprintf(stderr, "reached bug index 3056\n");
+	    }
+	    if ((!FIXREVERTER[3056] && (exec -> state == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    state = exec->state;
 	}
-	for (transno = 0;
-	     (transno < state->nbTrans) && (nb < maxval);
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3060])
+	  fprintf(stderr, "reached bug index 3060\n");
+	for (transno = 0; (FIXREVERTER[3060] && (transno < state -> nbTrans )) || (!FIXREVERTER[3060] && (transno < state -> nbTrans && nb < maxval ))
+	#else
+	for (transno = 0; transno < state -> nbTrans 
+	#endif
+	;
 	     transno++) {
+	       
+	     #ifdef FRCOV
+	       if (!(nb < maxval ))
+	         fprintf(stderr, "triggered bug index 3060\n");
+	       #endif
+	     
 	    trans = &state->trans[transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3057]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3057\n");
+	      else
+	        fprintf(stderr, "reached bug index 3057\n");
+	    }
+	    if ((!FIXREVERTER[3057] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
-	    if ((atom == NULL) || (atom->valuep == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3058]) {
+	      if ((atom == (void *) 0 || atom -> valuep == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3058\n");
+	      else
+	        fprintf(stderr, "reached bug index 3058\n");
+	    }
+	    if ((!FIXREVERTER[3058] && (atom == (void *) 0 || atom -> valuep == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    if (trans->count == REGEXP_ALL_LAX_COUNTER) {
 	        /* this should not be reached but ... */
 	        TODO;
@@ -4320,8 +5863,23 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		    count = exec->errCounts[trans->counter];
 		else
 		    count = exec->counts[trans->counter];
-		if (exec->comp != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3059]) {
+		  if ((exec -> comp != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3059\n");
+		  else
+		    fprintf(stderr, "reached bug index 3059\n");
+		}
+		if ((!FIXREVERTER[3059] && (exec -> comp != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    counter = &exec->comp->counters[trans->counter];
+		    #ifdef FRCOV
+		    }
+		    #endif
 		if ((counter == NULL) || (count < counter->max)) {
 		    if (atom->neg)
 			values[nb++] = (xmlChar *) atom->valuep2;
@@ -4341,15 +5899,61 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		}
 	    }
 	}
-	for (transno = 0;
-	     (transno < state->nbTrans) && (nb < maxval);
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3063])
+	  fprintf(stderr, "reached bug index 3063\n");
+	for (transno = 0; (FIXREVERTER[3063] && (transno < state -> nbTrans )) || (!FIXREVERTER[3063] && (transno < state -> nbTrans && nb < maxval ))
+	#else
+	for (transno = 0; transno < state -> nbTrans 
+	#endif
+	;
 	     transno++) {
+	       
+	     #ifdef FRCOV
+	       if (!(nb < maxval ))
+	         fprintf(stderr, "triggered bug index 3063\n");
+	       #endif
+	     
 	    trans = &state->trans[transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3061]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3061\n");
+	      else
+	        fprintf(stderr, "reached bug index 3061\n");
+	    }
+	    if ((!FIXREVERTER[3061] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
-	    if ((atom == NULL) || (atom->valuep == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3062]) {
+	      if ((atom == (void *) 0 || atom -> valuep == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3062\n");
+	      else
+	        fprintf(stderr, "reached bug index 3062\n");
+	    }
+	    if ((!FIXREVERTER[3062] && (atom == (void *) 0 || atom -> valuep == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    if (trans->count == REGEXP_ALL_LAX_COUNTER) {
 	        continue;
 	    } else if (trans->count == REGEXP_ALL_COUNTER) {
@@ -4368,6 +5972,9 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		}
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return(0);
 }
@@ -4417,8 +6024,23 @@ xmlRegExecNextValues(xmlRegExecCtxtPtr exec, int *nbval, int *nbneg,
 int
 xmlRegExecErrInfo(xmlRegExecCtxtPtr exec, const xmlChar **string,
                   int *nbval, int *nbneg, xmlChar **values, int *terminal) {
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3064]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3064\n");
+      else
+        fprintf(stderr, "reached bug index 3064\n");
+    }
+    if ((!FIXREVERTER[3064] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (string != NULL) {
         if (exec->status != 0)
 	    *string = exec->errString;
@@ -5158,8 +6780,23 @@ xmlFAParseCharClass(xmlRegParserCtxtPtr ctxt) {
     if (CUR == '[') {
 	NEXT;
 	ctxt->atom = xmlRegNewAtom(ctxt, XML_REGEXP_RANGES);
-	if (ctxt->atom == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3065]) {
+	  if ((ctxt -> atom == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3065\n");
+	  else
+	    fprintf(stderr, "reached bug index 3065\n");
+	}
+	if ((!FIXREVERTER[3065] && (ctxt -> atom == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlFAParseCharGroup(ctxt);
 	if (CUR == ']') {
 	    NEXT;
@@ -5227,8 +6864,23 @@ xmlFAParseQuantifier(xmlRegParserCtxtPtr ctxt) {
 
 	NEXT;
 	cur = xmlFAParseQuantExact(ctxt);
-	if (cur >= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3067]) {
+	  if ((cur >= 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3067\n");
+	  else
+	    fprintf(stderr, "reached bug index 3067\n");
+	}
+	if ((!FIXREVERTER[3067] && (cur >= 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    min = cur;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (CUR == ',') {
 	    NEXT;
 	    if (CUR == '}')
@@ -5247,8 +6899,23 @@ xmlFAParseQuantifier(xmlRegParserCtxtPtr ctxt) {
 	} else {
 	    ERROR("Unterminated quantifier");
 	}
-	if (max == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3068]) {
+	  if ((max == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3068\n");
+	  else
+	    fprintf(stderr, "reached bug index 3068\n");
+	}
+	if ((!FIXREVERTER[3068] && (max == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    max = min;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (ctxt->atom != NULL) {
 	    ctxt->atom->quant = XML_REGEXP_QUANT_RANGE;
 	    ctxt->atom->min = min;
@@ -5272,8 +6939,23 @@ xmlFAParseAtom(xmlRegParserCtxtPtr ctxt) {
     codepoint = xmlFAIsChar(ctxt);
     if (codepoint > 0) {
 	ctxt->atom = xmlRegNewAtom(ctxt, XML_REGEXP_CHARVAL);
-	if (ctxt->atom == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3069]) {
+	  if ((ctxt -> atom == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3069\n");
+	  else
+	    fprintf(stderr, "reached bug index 3069\n");
+	}
+	if ((!FIXREVERTER[3069] && (ctxt -> atom == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	codepoint = CUR_SCHAR(ctxt->cur, len);
 	ctxt->atom->codepoint = codepoint;
 	NEXTL(len);
@@ -5306,8 +6988,23 @@ xmlFAParseAtom(xmlRegParserCtxtPtr ctxt) {
 	    ERROR("xmlFAParseAtom: expecting ')'");
 	}
 	ctxt->atom = xmlRegNewAtom(ctxt, XML_REGEXP_SUBREG);
-	if (ctxt->atom == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3070]) {
+	  if ((ctxt -> atom == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3070\n");
+	  else
+	    fprintf(stderr, "reached bug index 3070\n");
+	}
+	if ((!FIXREVERTER[3070] && (ctxt -> atom == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->atom->start = start;
 	ctxt->atom->start0 = start0;
 	ctxt->atom->stop = ctxt->state;
@@ -5368,7 +7065,21 @@ xmlFAParseBranch(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr to) {
 	previous = ctxt->state;
 	ctxt->atom = NULL;
     }
-    while ((ret != 0) && (ctxt->error == 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3072])
+      fprintf(stderr, "reached bug index 3072\n");
+    while ((FIXREVERTER[3072] && (ret != 0 )) || (!FIXREVERTER[3072] && (ret != 0 && ctxt -> error == 0 ))
+    #else
+    while (ret != 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> error == 0 ))
+        fprintf(stderr, "triggered bug index 3072\n");
+      #endif
+    
 	ret = xmlFAParsePiece(ctxt);
 	if (ret != 0) {
 	    if (xmlFAGenerateTransitions(ctxt, previous,
@@ -5379,6 +7090,9 @@ xmlFAParseBranch(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr to) {
 	    ctxt->atom = NULL;
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(0);
 }
 
@@ -5479,8 +7193,23 @@ xmlRegexpCompile(const xmlChar *regexp) {
     xmlRegParserCtxtPtr ctxt;
 
     ctxt = xmlRegNewParserCtxt(regexp);
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3075]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3075\n");
+      else
+        fprintf(stderr, "reached bug index 3075\n");
+    }
+    if ((!FIXREVERTER[3075] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     /* initialize the parser */
     ctxt->end = NULL;
@@ -5492,10 +7221,25 @@ xmlRegexpCompile(const xmlChar *regexp) {
     if (CUR != 0) {
 	ERROR("xmlFAParseRegExp: extra characters");
     }
-    if (ctxt->error != 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3076]) {
+      if ((ctxt -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3076\n");
+      else
+        fprintf(stderr, "reached bug index 3076\n");
+    }
+    if ((!FIXREVERTER[3076] && (ctxt -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegFreeParserCtxt(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->end = ctxt->state;
     ctxt->start->type = XML_REGEXP_START_STATE;
     ctxt->end->type = XML_REGEXP_FINAL_STATE;
@@ -5504,10 +7248,25 @@ xmlRegexpCompile(const xmlChar *regexp) {
     xmlFAEliminateEpsilonTransitions(ctxt);
 
 
-    if (ctxt->error != 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3077]) {
+      if ((ctxt -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3077\n");
+      else
+        fprintf(stderr, "reached bug index 3077\n");
+    }
+    if ((!FIXREVERTER[3077] && (ctxt -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegFreeParserCtxt(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlRegEpxFromParse(ctxt);
     xmlRegFreeParserCtxt(ctxt);
     return(ret);
@@ -5524,8 +7283,23 @@ xmlRegexpCompile(const xmlChar *regexp) {
  */
 int
 xmlRegexpExec(xmlRegexpPtr comp, const xmlChar *content) {
-    if ((comp == NULL) || (content == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3078]) {
+      if ((comp == (void *) 0 || content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3078\n");
+      else
+        fprintf(stderr, "reached bug index 3078\n");
+    }
+    if ((!FIXREVERTER[3078] && (comp == (void *) 0 || content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlFARegExec(comp, content));
 }
 
@@ -5542,14 +7316,44 @@ xmlRegexpIsDeterminist(xmlRegexpPtr comp) {
     xmlAutomataPtr am;
     int ret;
 
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3079]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3079\n");
+      else
+        fprintf(stderr, "reached bug index 3079\n");
+    }
+    if ((!FIXREVERTER[3079] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (comp->determinist != -1)
 	return(comp->determinist);
 
     am = xmlNewAutomata();
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3080]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3080\n");
+      else
+        fprintf(stderr, "reached bug index 3080\n");
+    }
+    if ((!FIXREVERTER[3080] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (am->states != NULL) {
 	int i;
 
@@ -5580,8 +7384,23 @@ xmlRegexpIsDeterminist(xmlRegexpPtr comp) {
 void
 xmlRegFreeRegexp(xmlRegexpPtr regexp) {
     int i;
-    if (regexp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3081]) {
+      if ((regexp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3081\n");
+      else
+        fprintf(stderr, "reached bug index 3081\n");
+    }
+    if ((!FIXREVERTER[3081] && (regexp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (regexp->string != NULL)
 	xmlFree(regexp->string);
@@ -5629,16 +7448,46 @@ xmlNewAutomata(void) {
     xmlAutomataPtr ctxt;
 
     ctxt = xmlRegNewParserCtxt(NULL);
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3082]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3082\n");
+      else
+        fprintf(stderr, "reached bug index 3082\n");
+    }
+    if ((!FIXREVERTER[3082] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     /* initialize the parser */
     ctxt->end = NULL;
     ctxt->start = ctxt->state = xmlRegNewState(ctxt);
-    if (ctxt->start == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3083]) {
+      if ((ctxt -> start == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3083\n");
+      else
+        fprintf(stderr, "reached bug index 3083\n");
+    }
+    if ((!FIXREVERTER[3083] && (ctxt -> start == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeAutomata(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->start->type = XML_REGEXP_START_STATE;
     if (xmlRegStatePush(ctxt, ctxt->start) < 0) {
         xmlRegFreeState(ctxt->start);
@@ -5658,8 +7507,23 @@ xmlNewAutomata(void) {
  */
 void
 xmlFreeAutomata(xmlAutomataPtr am) {
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3084]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3084\n");
+      else
+        fprintf(stderr, "reached bug index 3084\n");
+    }
+    if ((!FIXREVERTER[3084] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     xmlRegFreeParserCtxt(am);
 }
 
@@ -5687,8 +7551,23 @@ xmlAutomataSetFlags(xmlAutomataPtr am, int flags) {
  */
 xmlAutomataStatePtr
 xmlAutomataGetInitState(xmlAutomataPtr am) {
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3086]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3086\n");
+      else
+        fprintf(stderr, "reached bug index 3086\n");
+    }
+    if ((!FIXREVERTER[3086] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(am->start);
 }
 
@@ -5703,8 +7582,23 @@ xmlAutomataGetInitState(xmlAutomataPtr am) {
  */
 int
 xmlAutomataSetFinalState(xmlAutomataPtr am, xmlAutomataStatePtr state) {
-    if ((am == NULL) || (state == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3087]) {
+      if ((am == (void *) 0 || state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3087\n");
+      else
+        fprintf(stderr, "reached bug index 3087\n");
+    }
+    if ((!FIXREVERTER[3087] && (am == (void *) 0 || state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     state->type = XML_REGEXP_FINAL_STATE;
     return(0);
 }
@@ -5729,11 +7623,41 @@ xmlAutomataNewTransition(xmlAutomataPtr am, xmlAutomataStatePtr from,
 			 void *data) {
     xmlRegAtomPtr atom;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3088]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3088\n");
+      else
+        fprintf(stderr, "reached bug index 3088\n");
+    }
+    if ((!FIXREVERTER[3088] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3089]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3089\n");
+      else
+        fprintf(stderr, "reached bug index 3089\n");
+    }
+    if ((!FIXREVERTER[3089] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     atom->data = data;
     atom->valuep = xmlStrdup(token);
 
@@ -5741,8 +7665,23 @@ xmlAutomataNewTransition(xmlAutomataPtr am, xmlAutomataStatePtr from,
         xmlRegFreeAtom(atom);
 	return(NULL);
     }
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3090]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3090\n");
+      else
+        fprintf(stderr, "reached bug index 3090\n");
+    }
+    if ((!FIXREVERTER[3090] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -5767,11 +7706,41 @@ xmlAutomataNewTransition2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 			  const xmlChar *token2, void *data) {
     xmlRegAtomPtr atom;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3091]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3091\n");
+      else
+        fprintf(stderr, "reached bug index 3091\n");
+    }
+    if ((!FIXREVERTER[3091] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3092]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3092\n");
+      else
+        fprintf(stderr, "reached bug index 3092\n");
+    }
+    if ((!FIXREVERTER[3092] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom->data = data;
     if ((token2 == NULL) || (*token2 == 0)) {
 	atom->valuep = xmlStrdup(token);
@@ -5783,10 +7752,25 @@ xmlAutomataNewTransition2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3093]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3093\n");
+	  else
+	    fprintf(stderr, "reached bug index 3093\n");
+	}
+	if ((!FIXREVERTER[3093] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegFreeAtom(atom);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -5799,8 +7783,23 @@ xmlAutomataNewTransition2(xmlAutomataPtr am, xmlAutomataStatePtr from,
         xmlRegFreeAtom(atom);
 	return(NULL);
     }
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3094]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3094\n");
+      else
+        fprintf(stderr, "reached bug index 3094\n");
+    }
+    if ((!FIXREVERTER[3094] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -5828,11 +7827,41 @@ xmlAutomataNewNegTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
     xmlRegAtomPtr atom;
     xmlChar err_msg[200];
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3095]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3095\n");
+      else
+        fprintf(stderr, "reached bug index 3095\n");
+    }
+    if ((!FIXREVERTER[3095] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3096]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3096\n");
+      else
+        fprintf(stderr, "reached bug index 3096\n");
+    }
+    if ((!FIXREVERTER[3096] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom->data = data;
     atom->neg = 1;
     if ((token2 == NULL) || (*token2 == 0)) {
@@ -5845,10 +7874,25 @@ xmlAutomataNewNegTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3097]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3097\n");
+	  else
+	    fprintf(stderr, "reached bug index 3097\n");
+	}
+	if ((!FIXREVERTER[3097] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegFreeAtom(atom);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -5865,8 +7909,23 @@ xmlAutomataNewNegTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	return(NULL);
     }
     am->negs++;
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3098]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3098\n");
+      else
+        fprintf(stderr, "reached bug index 3098\n");
+    }
+    if ((!FIXREVERTER[3098] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -5896,15 +7955,75 @@ xmlAutomataNewCountTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
     xmlRegAtomPtr atom;
     int counter;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3099]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3099\n");
+      else
+        fprintf(stderr, "reached bug index 3099\n");
+    }
+    if ((!FIXREVERTER[3099] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (min < 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3100]) {
+      if ((min < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3100\n");
+      else
+        fprintf(stderr, "reached bug index 3100\n");
+    }
+    if ((!FIXREVERTER[3100] && (min < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if ((max < min) || (max < 1))
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3101]) {
+      if ((max < min || max < 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 3101\n");
+      else
+        fprintf(stderr, "reached bug index 3101\n");
+    }
+    if ((!FIXREVERTER[3101] && (max < min || max < 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3102]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3102\n");
+      else
+        fprintf(stderr, "reached bug index 3102\n");
+    }
+    if ((!FIXREVERTER[3102] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((token2 == NULL) || (*token2 == 0)) {
 	atom->valuep = xmlStrdup(token);
     } else {
@@ -5915,10 +8034,25 @@ xmlAutomataNewCountTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3103]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3103\n");
+	  else
+	    fprintf(stderr, "reached bug index 3103\n");
+	}
+	if ((!FIXREVERTER[3103] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegFreeAtom(atom);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -5949,10 +8083,40 @@ xmlAutomataNewCountTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
     xmlRegAtomPush(am, atom);
     am->state = to;
 
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3104]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3104\n");
+      else
+        fprintf(stderr, "reached bug index 3104\n");
+    }
+    if ((!FIXREVERTER[3104] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	to = am->state;
-    if (to == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3105]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3105\n");
+      else
+        fprintf(stderr, "reached bug index 3105\n");
+    }
+    if ((!FIXREVERTER[3105] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (min == 0)
 	xmlFAGenerateEpsilonTransition(am, from, to);
     return(to);
@@ -6051,15 +8215,75 @@ xmlAutomataNewOnceTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
     xmlRegAtomPtr atom;
     int counter;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3112]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3112\n");
+      else
+        fprintf(stderr, "reached bug index 3112\n");
+    }
+    if ((!FIXREVERTER[3112] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (min < 1)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3113]) {
+      if ((min < 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 3113\n");
+      else
+        fprintf(stderr, "reached bug index 3113\n");
+    }
+    if ((!FIXREVERTER[3113] && (min < 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if ((max < min) || (max < 1))
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3114]) {
+      if ((max < min || max < 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 3114\n");
+      else
+        fprintf(stderr, "reached bug index 3114\n");
+    }
+    if ((!FIXREVERTER[3114] && (max < min || max < 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3115]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3115\n");
+      else
+        fprintf(stderr, "reached bug index 3115\n");
+    }
+    if ((!FIXREVERTER[3115] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((token2 == NULL) || (*token2 == 0)) {
 	atom->valuep = xmlStrdup(token);
     } else {
@@ -6070,10 +8294,25 @@ xmlAutomataNewOnceTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3116]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3116\n");
+	  else
+	    fprintf(stderr, "reached bug index 3116\n");
+	}
+	if ((!FIXREVERTER[3116] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegFreeAtom(atom);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -6174,8 +8413,23 @@ xmlAutomataStatePtr
 xmlAutomataNewState(xmlAutomataPtr am) {
     xmlAutomataStatePtr to;
 
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3121]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3121\n");
+      else
+        fprintf(stderr, "reached bug index 3121\n");
+    }
+    if ((!FIXREVERTER[3121] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     to = xmlRegNewState(am);
     xmlRegStatePush(am, to);
     return(to);
@@ -6196,11 +8450,41 @@ xmlAutomataNewState(xmlAutomataPtr am) {
 xmlAutomataStatePtr
 xmlAutomataNewEpsilon(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		      xmlAutomataStatePtr to) {
-    if ((am == NULL) || (from == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3122]) {
+      if ((am == (void *) 0 || from == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3122\n");
+      else
+        fprintf(stderr, "reached bug index 3122\n");
+    }
+    if ((!FIXREVERTER[3122] && (am == (void *) 0 || from == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateEpsilonTransition(am, from, to);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3123]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3123\n");
+      else
+        fprintf(stderr, "reached bug index 3123\n");
+    }
+    if ((!FIXREVERTER[3123] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6221,11 +8505,41 @@ xmlAutomataNewEpsilon(xmlAutomataPtr am, xmlAutomataStatePtr from,
 xmlAutomataStatePtr
 xmlAutomataNewAllTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		       xmlAutomataStatePtr to, int lax) {
-    if ((am == NULL) || (from == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3124]) {
+      if ((am == (void *) 0 || from == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3124\n");
+      else
+        fprintf(stderr, "reached bug index 3124\n");
+    }
+    if ((!FIXREVERTER[3124] && (am == (void *) 0 || from == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateAllTransition(am, from, to, lax);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3125]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3125\n");
+      else
+        fprintf(stderr, "reached bug index 3125\n");
+    }
+    if ((!FIXREVERTER[3125] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6243,12 +8557,42 @@ int
 xmlAutomataNewCounter(xmlAutomataPtr am, int min, int max) {
     int ret;
 
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3126]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3126\n");
+      else
+        fprintf(stderr, "reached bug index 3126\n");
+    }
+    if ((!FIXREVERTER[3126] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlRegGetCounter(am);
-    if (ret < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3127]) {
+      if ((ret < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3127\n");
+      else
+        fprintf(stderr, "reached bug index 3127\n");
+    }
+    if ((!FIXREVERTER[3127] && (ret < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     am->counters[ret].min = min;
     am->counters[ret].max = max;
     return(ret);
@@ -6270,11 +8614,41 @@ xmlAutomataNewCounter(xmlAutomataPtr am, int min, int max) {
 xmlAutomataStatePtr
 xmlAutomataNewCountedTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		xmlAutomataStatePtr to, int counter) {
-    if ((am == NULL) || (from == NULL) || (counter < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3128]) {
+      if ((am == (void *) 0 || from == (void *) 0 || counter < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3128\n");
+      else
+        fprintf(stderr, "reached bug index 3128\n");
+    }
+    if ((!FIXREVERTER[3128] && (am == (void *) 0 || from == (void *) 0 || counter < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateCountedEpsilonTransition(am, from, to, counter);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3129]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3129\n");
+      else
+        fprintf(stderr, "reached bug index 3129\n");
+    }
+    if ((!FIXREVERTER[3129] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6294,11 +8668,41 @@ xmlAutomataNewCountedTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 xmlAutomataStatePtr
 xmlAutomataNewCounterTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		xmlAutomataStatePtr to, int counter) {
-    if ((am == NULL) || (from == NULL) || (counter < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3130]) {
+      if ((am == (void *) 0 || from == (void *) 0 || counter < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3130\n");
+      else
+        fprintf(stderr, "reached bug index 3130\n");
+    }
+    if ((!FIXREVERTER[3130] && (am == (void *) 0 || from == (void *) 0 || counter < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateCountedTransition(am, from, to, counter);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3131]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3131\n");
+      else
+        fprintf(stderr, "reached bug index 3131\n");
+    }
+    if ((!FIXREVERTER[3131] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6315,7 +8719,22 @@ xmlRegexpPtr
 xmlAutomataCompile(xmlAutomataPtr am) {
     xmlRegexpPtr ret;
 
-    if ((am == NULL) || (am->error != 0)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3132]) {
+      if ((am == (void *) 0 || am -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3132\n");
+      else
+        fprintf(stderr, "reached bug index 3132\n");
+    }
+    if ((!FIXREVERTER[3132] && (am == (void *) 0 || am -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     xmlFAEliminateEpsilonTransitions(am);
     /* xmlFAComputesDeterminism(am); */
     ret = xmlRegEpxFromParse(am);
diff --git a/xmlsave.c b/xmlsave.c
old mode 100644
new mode 100755
diff --git a/xmlschemas.c b/xmlschemas.c
old mode 100644
new mode 100755
index 457f7d4a..d2148d2b
--- a/xmlschemas.c
+++ b/xmlschemas.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * schemas.c : implementation of the XML Schema handling and
  *             schema validity checking
@@ -1308,8 +1312,23 @@ xmlSchemaFormatQName(xmlChar **buf,
 	*buf = xmlStrcat(*buf, BAD_CAST "}");
     }
     if (localName != NULL) {
-	if (namespaceName == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4156]) {
+	  if ((namespaceName == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4156\n");
+	  else
+	    fprintf(stderr, "reached bug index 4156\n");
+	}
+	if ((!FIXREVERTER[4156] && (namespaceName == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(localName);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	*buf = xmlStrcat(*buf, localName);
     } else {
 	*buf = xmlStrcat(*buf, BAD_CAST "(NULL)");
@@ -1495,8 +1514,23 @@ xmlSchemaGetCanonValueWhtspExt(xmlSchemaValPtr val,
     const xmlChar *value, *value2 = NULL;
 
 
-    if ((retValue == NULL) || (val == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4157]) {
+      if ((retValue == (void *) 0 || val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4157\n");
+      else
+        fprintf(stderr, "reached bug index 4157\n");
+    }
+    if ((!FIXREVERTER[4157] && (retValue == (void *) 0 || val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     list = xmlSchemaValueGetNext(val) ? 1 : 0;
     *retValue = NULL;
     do {
@@ -1512,8 +1546,23 @@ xmlSchemaGetCanonValueWhtspExt(xmlSchemaValPtr val,
 			value2 = xmlSchemaCollapseString(value);
 		    else if (ws == XML_SCHEMA_WHITESPACE_REPLACE)
 			value2 = xmlSchemaWhiteSpaceReplace(value);
-		    if (value2 != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4158]) {
+		      if ((value2 != (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4158\n");
+		      else
+		        fprintf(stderr, "reached bug index 4158\n");
+		    }
+		    if ((!FIXREVERTER[4158] && (value2 != (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			value = value2;
+			#ifdef FRCOV
+			}
+			#endif
 		}
 		break;
 	    default:
@@ -1749,7 +1798,22 @@ xmlSchemaFormatItemForReport(xmlChar **buf,
     } else
 	named = 0;
 
-    if ((named == 0) && (itemNode != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4159]) {
+      fprintf(stderr, "reached bug index 4159\n");
+    }
+    if ((FIXREVERTER[4159] && (named == 0 )) || (!FIXREVERTER[4159] && (named == 0 && itemNode != (void *) 0 ))
+    #else
+    if (named == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(itemNode != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 4159\n");
+      #endif
+    
 	xmlNodePtr elem;
 
 	if (itemNode->type == XML_ATTRIBUTE_NODE)
@@ -1766,6 +1830,9 @@ xmlSchemaFormatItemForReport(xmlChar **buf,
 	*buf = xmlStrcat(*buf, BAD_CAST "'");
 
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((itemNode != NULL) && (itemNode->type == XML_ATTRIBUTE_NODE)) {
 	*buf = xmlStrcat(*buf, BAD_CAST ", attribute '");
 	if (itemNode->ns != NULL) {
@@ -2102,10 +2169,40 @@ xmlSchemaErr4Line(xmlSchemaAbstractCtxtPtr ctxt,
 		    unsigned long l;
 		    const char *f;
 		    vctxt->locFunc(vctxt->locCtxt, &f, &l);
-		    if (file == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4160]) {
+		      if ((file == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4160\n");
+		      else
+		        fprintf(stderr, "reached bug index 4160\n");
+		    }
+		    if ((!FIXREVERTER[4160] && (file == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        file = f;
-		    if (line == 0)
+		        #ifdef FRCOV
+		        }
+		        #endif
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4161]) {
+		      if ((line == 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4161\n");
+		      else
+		        fprintf(stderr, "reached bug index 4161\n");
+		    }
+		    if ((!FIXREVERTER[4161] && (line == 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        line = (int) l;
+		        #ifdef FRCOV
+		        }
+		        #endif
 		}
 	    }
 	    if ((file == NULL) && (vctxt->filename != NULL))
@@ -2290,8 +2387,23 @@ xmlSchemaInternalErr2(xmlSchemaAbstractCtxtPtr actxt,
 {
     xmlChar *msg = NULL;
 
-    if (actxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4162]) {
+      if ((actxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4162\n");
+      else
+        fprintf(stderr, "reached bug index 4162\n");
+    }
+    if ((!FIXREVERTER[4162] && (actxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     msg = xmlStrdup(BAD_CAST "Internal error: %s, ");
     msg = xmlStrcat(msg, BAD_CAST message);
     msg = xmlStrcat(msg, BAD_CAST ".\n");
@@ -2575,8 +2687,23 @@ xmlSchemaComplexTypeErr(xmlSchemaAbstractCtxtPtr actxt,
 
 	for (i = 0; i < nbval + nbneg; i++) {
 	    cur = values[i];
-	    if (cur == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4163]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4163\n");
+	      else
+	        fprintf(stderr, "reached bug index 4163\n");
+	    }
+	    if ((!FIXREVERTER[4163] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        continue;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    if ((cur[0] == 'n') && (cur[1] == 'o') && (cur[2] == 't') &&
 	        (cur[3] == ' ')) {
 		cur += 4;
@@ -2840,8 +2967,23 @@ xmlSchemaPResCompAttrErr(xmlSchemaParserCtxtPtr ctxt,
     xmlChar *des = NULL, *strA = NULL;
 
     xmlSchemaFormatItemForReport(&des, NULL, ownerItem, ownerElem);
-    if (refTypeStr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4164]) {
+      if ((refTypeStr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4164\n");
+      else
+        fprintf(stderr, "reached bug index 4164\n");
+    }
+    if ((!FIXREVERTER[4164] && (refTypeStr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	refTypeStr = (const char *) xmlSchemaItemTypeToStr(refType);
+	#ifdef FRCOV
+	}
+	#endif
     xmlSchemaPErrExt(ctxt, ownerElem, error,
 	    NULL, NULL, NULL,
 	    "%s, attribute '%s': The QName value '%s' does not resolve to a(n) "
@@ -3277,10 +3419,25 @@ xmlSchemaNewSchema(xmlSchemaParserCtxtPtr ctxt)
     xmlSchemaPtr ret;
 
     ret = (xmlSchemaPtr) xmlMalloc(sizeof(xmlSchema));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4165]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4165\n");
+      else
+        fprintf(stderr, "reached bug index 4165\n");
+    }
+    if ((!FIXREVERTER[4165] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating schema", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchema));
     ret->dict = ctxt->dict;
     xmlDictReference(ret->dict);
@@ -3301,9 +3458,24 @@ xmlSchemaNewFacet(void)
     xmlSchemaFacetPtr ret;
 
     ret = (xmlSchemaFacetPtr) xmlMalloc(sizeof(xmlSchemaFacet));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4166]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4166\n");
+      else
+        fprintf(stderr, "reached bug index 4166\n");
+    }
+    if ((!FIXREVERTER[4166] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaFacet));
 
     return (ret);
@@ -3324,10 +3496,25 @@ xmlSchemaNewAnnot(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node)
     xmlSchemaAnnotPtr ret;
 
     ret = (xmlSchemaAnnotPtr) xmlMalloc(sizeof(xmlSchemaAnnot));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4167]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4167\n");
+      else
+        fprintf(stderr, "reached bug index 4167\n");
+    }
+    if ((!FIXREVERTER[4167] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating annotation", node);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAnnot));
     ret->content = node;
     return (ret);
@@ -3339,11 +3526,26 @@ xmlSchemaItemListCreate(void)
     xmlSchemaItemListPtr ret;
 
     ret = xmlMalloc(sizeof(xmlSchemaItemList));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4168]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4168\n");
+      else
+        fprintf(stderr, "reached bug index 4168\n");
+    }
+    if ((!FIXREVERTER[4168] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL,
 	    "allocating an item list structure", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaItemList));
     return (ret);
 }
@@ -3365,20 +3567,50 @@ xmlSchemaItemListAdd(xmlSchemaItemListPtr list, void *item)
     if (list->items == NULL) {
 	list->items = (void **) xmlMalloc(
 	    20 * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4169]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4169\n");
+	  else
+	    fprintf(stderr, "reached bug index 4169\n");
+	}
+	if ((!FIXREVERTER[4169] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "allocating new item list", NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	list->sizeItems = 20;
     } else if (list->sizeItems <= list->nbItems) {
 	list->sizeItems *= 2;
 	list->items = (void **) xmlRealloc(list->items,
 	    list->sizeItems * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4170]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4170\n");
+	  else
+	    fprintf(stderr, "reached bug index 4170\n");
+	}
+	if ((!FIXREVERTER[4170] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "growing item list", NULL);
 	    list->sizeItems = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     list->items[list->nbItems++] = item;
     return(0);
@@ -3390,24 +3622,69 @@ xmlSchemaItemListAddSize(xmlSchemaItemListPtr list,
 			 void *item)
 {
     if (list->items == NULL) {
-	if (initialSize <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4171]) {
+	  if ((initialSize <= 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4171\n");
+	  else
+	    fprintf(stderr, "reached bug index 4171\n");
+	}
+	if ((!FIXREVERTER[4171] && (initialSize <= 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    initialSize = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	list->items = (void **) xmlMalloc(
 	    initialSize * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4172]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4172\n");
+	  else
+	    fprintf(stderr, "reached bug index 4172\n");
+	}
+	if ((!FIXREVERTER[4172] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "allocating new item list", NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	list->sizeItems = initialSize;
     } else if (list->sizeItems <= list->nbItems) {
 	list->sizeItems *= 2;
 	list->items = (void **) xmlRealloc(list->items,
 	    list->sizeItems * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4173]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4173\n");
+	  else
+	    fprintf(stderr, "reached bug index 4173\n");
+	}
+	if ((!FIXREVERTER[4173] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "growing item list", NULL);
 	    list->sizeItems = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     list->items[list->nbItems++] = item;
     return(0);
@@ -3419,20 +3696,50 @@ xmlSchemaItemListInsert(xmlSchemaItemListPtr list, void *item, int idx)
     if (list->items == NULL) {
 	list->items = (void **) xmlMalloc(
 	    20 * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4174]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4174\n");
+	  else
+	    fprintf(stderr, "reached bug index 4174\n");
+	}
+	if ((!FIXREVERTER[4174] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "allocating new item list", NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	list->sizeItems = 20;
     } else if (list->sizeItems <= list->nbItems) {
 	list->sizeItems *= 2;
 	list->items = (void **) xmlRealloc(list->items,
 	    list->sizeItems * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4175]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4175\n");
+	  else
+	    fprintf(stderr, "reached bug index 4175\n");
+	}
+	if ((!FIXREVERTER[4175] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "growing item list", NULL);
 	    list->sizeItems = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     /*
     * Just append if the index is greater/equal than the item count.
@@ -3496,11 +3803,26 @@ static int
 xmlSchemaItemListRemove(xmlSchemaItemListPtr list, int idx)
 {
     int i;
-    if ((list->items == NULL) || (idx >= list->nbItems)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4176]) {
+      if ((list -> items == (void *) 0 || idx >= list -> nbItems ) && !(0))
+        fprintf(stderr, "triggered bug index 4176\n");
+      else
+        fprintf(stderr, "reached bug index 4176\n");
+    }
+    if ((!FIXREVERTER[4176] && (list -> items == (void *) 0 || idx >= list -> nbItems ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPSimpleErr("Internal error: xmlSchemaItemListRemove, "
 	    "index error.\n");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (list->nbItems == 1) {
 	/* TODO: Really free the list? */
@@ -3527,8 +3849,23 @@ xmlSchemaItemListRemove(xmlSchemaItemListPtr list, int idx)
 static void
 xmlSchemaItemListFree(xmlSchemaItemListPtr list)
 {
-    if (list == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4177]) {
+      if ((list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4177\n");
+      else
+        fprintf(stderr, "reached bug index 4177\n");
+    }
+    if ((!FIXREVERTER[4177] && (list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (list->items != NULL)
 	xmlFree(list->items);
     xmlFree(list);
@@ -3537,8 +3874,23 @@ xmlSchemaItemListFree(xmlSchemaItemListPtr list)
 static void
 xmlSchemaBucketFree(xmlSchemaBucketPtr bucket)
 {
-    if (bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4178]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4178\n");
+      else
+        fprintf(stderr, "reached bug index 4178\n");
+    }
+    if ((!FIXREVERTER[4178] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (bucket->globals != NULL) {
 	xmlSchemaComponentListFree(bucket->globals);
 	xmlSchemaItemListFree(bucket->globals);
@@ -3591,23 +3943,68 @@ xmlSchemaBucketCreate(xmlSchemaParserCtxtPtr pctxt,
     else
 	size = sizeof(xmlSchemaImport);
     ret = (xmlSchemaBucketPtr) xmlMalloc(size);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4179]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4179\n");
+      else
+        fprintf(stderr, "reached bug index 4179\n");
+    }
+    if ((!FIXREVERTER[4179] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL, "allocating schema bucket", NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, size);
     ret->targetNamespace = targetNamespace;
     ret->type = type;
     ret->globals = xmlSchemaItemListCreate();
-    if (ret->globals == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4180]) {
+      if ((ret -> globals == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4180\n");
+      else
+        fprintf(stderr, "reached bug index 4180\n");
+    }
+    if ((!FIXREVERTER[4180] && (ret -> globals == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->locals = xmlSchemaItemListCreate();
-    if (ret->locals == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4181]) {
+      if ((ret -> locals == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4181\n");
+      else
+        fprintf(stderr, "reached bug index 4181\n");
+    }
+    if ((!FIXREVERTER[4181] && (ret -> locals == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * The following will assure that only the first bucket is marked as
     * XML_SCHEMA_SCHEMA_MAIN and it points to the *main* schema.
@@ -3660,10 +4057,25 @@ xmlSchemaBucketCreate(xmlSchemaParserCtxtPtr pctxt,
 	if (mainSchema->schemasImports == NULL) {
 	    mainSchema->schemasImports = xmlHashCreateDict(5,
 		WXS_CONSTRUCTOR(pctxt)->dict);
-	    if (mainSchema->schemasImports == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4182]) {
+	      if ((mainSchema -> schemasImports == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4182\n");
+	      else
+	        fprintf(stderr, "reached bug index 4182\n");
+	    }
+	    if ((!FIXREVERTER[4182] && (mainSchema -> schemasImports == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaBucketFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	if (targetNamespace == NULL)
 	    res = xmlHashAddEntry(mainSchema->schemasImports,
@@ -3689,10 +4101,25 @@ xmlSchemaBucketCreate(xmlSchemaParserCtxtPtr pctxt,
 	/* Includes got into the "includes" slot of the *main* schema. */
 	if (mainSchema->includes == NULL) {
 	    mainSchema->includes = xmlSchemaItemListCreate();
-	    if (mainSchema->includes == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4183]) {
+	      if ((mainSchema -> includes == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4183\n");
+	      else
+	        fprintf(stderr, "reached bug index 4183\n");
+	    }
+	    if ((!FIXREVERTER[4183] && (mainSchema -> includes == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaBucketFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	xmlSchemaItemListAdd(mainSchema->includes, ret);
     }
@@ -3726,8 +4153,23 @@ xmlSchemaAddItemSize(xmlSchemaItemListPtr *list, int initialSize, void *item)
 static void
 xmlSchemaFreeAnnot(xmlSchemaAnnotPtr annot)
 {
-    if (annot == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4184]) {
+      if ((annot == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4184\n");
+      else
+        fprintf(stderr, "reached bug index 4184\n");
+    }
+    if ((!FIXREVERTER[4184] && (annot == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (annot->next == NULL) {
 	xmlFree(annot);
     } else {
@@ -3750,8 +4192,23 @@ xmlSchemaFreeAnnot(xmlSchemaAnnotPtr annot)
 static void
 xmlSchemaFreeNotation(xmlSchemaNotationPtr nota)
 {
-    if (nota == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4185]) {
+      if ((nota == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4185\n");
+      else
+        fprintf(stderr, "reached bug index 4185\n");
+    }
+    if ((!FIXREVERTER[4185] && (nota == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     xmlFree(nota);
 }
 
@@ -3764,8 +4221,23 @@ xmlSchemaFreeNotation(xmlSchemaNotationPtr nota)
 static void
 xmlSchemaFreeAttribute(xmlSchemaAttributePtr attr)
 {
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4186]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4186\n");
+      else
+        fprintf(stderr, "reached bug index 4186\n");
+    }
+    if ((!FIXREVERTER[4186] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (attr->annot != NULL)
 	xmlSchemaFreeAnnot(attr->annot);
     if (attr->defVal != NULL)
@@ -3782,8 +4254,23 @@ xmlSchemaFreeAttribute(xmlSchemaAttributePtr attr)
 static void
 xmlSchemaFreeAttributeUse(xmlSchemaAttributeUsePtr use)
 {
-    if (use == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4187]) {
+      if ((use == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4187\n");
+      else
+        fprintf(stderr, "reached bug index 4187\n");
+    }
+    if ((!FIXREVERTER[4187] && (use == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (use->annot != NULL)
 	xmlSchemaFreeAnnot(use->annot);
     if (use->defVal != NULL)
@@ -3800,8 +4287,23 @@ xmlSchemaFreeAttributeUse(xmlSchemaAttributeUsePtr use)
 static void
 xmlSchemaFreeAttributeUseProhib(xmlSchemaAttributeUseProhibPtr prohib)
 {
-    if (prohib == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4188]) {
+      if ((prohib == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4188\n");
+      else
+        fprintf(stderr, "reached bug index 4188\n");
+    }
+    if ((!FIXREVERTER[4188] && (prohib == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     xmlFree(prohib);
 }
 
@@ -3832,8 +4334,23 @@ xmlSchemaFreeWildcardNsSet(xmlSchemaWildcardNsPtr set)
 void
 xmlSchemaFreeWildcard(xmlSchemaWildcardPtr wildcard)
 {
-    if (wildcard == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4189]) {
+      if ((wildcard == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4189\n");
+      else
+        fprintf(stderr, "reached bug index 4189\n");
+    }
+    if ((!FIXREVERTER[4189] && (wildcard == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (wildcard->annot != NULL)
         xmlSchemaFreeAnnot(wildcard->annot);
     if (wildcard->nsSet != NULL)
@@ -3852,8 +4369,23 @@ xmlSchemaFreeWildcard(xmlSchemaWildcardPtr wildcard)
 static void
 xmlSchemaFreeAttributeGroup(xmlSchemaAttributeGroupPtr attrGr)
 {
-    if (attrGr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4190]) {
+      if ((attrGr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4190\n");
+      else
+        fprintf(stderr, "reached bug index 4190\n");
+    }
+    if ((!FIXREVERTER[4190] && (attrGr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (attrGr->annot != NULL)
         xmlSchemaFreeAnnot(attrGr->annot);
     if (attrGr->attrUses != NULL)
@@ -3917,8 +4449,23 @@ xmlSchemaFreeIDC(xmlSchemaIDCPtr idcDef)
 {
     xmlSchemaIDCSelectPtr cur, prev;
 
-    if (idcDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4191]) {
+      if ((idcDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4191\n");
+      else
+        fprintf(stderr, "reached bug index 4191\n");
+    }
+    if ((!FIXREVERTER[4191] && (idcDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (idcDef->annot != NULL)
         xmlSchemaFreeAnnot(idcDef->annot);
     /* Selector */
@@ -3950,8 +4497,23 @@ xmlSchemaFreeIDC(xmlSchemaIDCPtr idcDef)
 static void
 xmlSchemaFreeElement(xmlSchemaElementPtr elem)
 {
-    if (elem == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4192]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4192\n");
+      else
+        fprintf(stderr, "reached bug index 4192\n");
+    }
+    if ((!FIXREVERTER[4192] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (elem->annot != NULL)
         xmlSchemaFreeAnnot(elem->annot);
     if (elem->contModel != NULL)
@@ -3970,8 +4532,23 @@ xmlSchemaFreeElement(xmlSchemaElementPtr elem)
 void
 xmlSchemaFreeFacet(xmlSchemaFacetPtr facet)
 {
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4193]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4193\n");
+      else
+        fprintf(stderr, "reached bug index 4193\n");
+    }
+    if ((!FIXREVERTER[4193] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (facet->val != NULL)
         xmlSchemaFreeValue(facet->val);
     if (facet->regexp != NULL)
@@ -3990,8 +4567,23 @@ xmlSchemaFreeFacet(xmlSchemaFacetPtr facet)
 void
 xmlSchemaFreeType(xmlSchemaTypePtr type)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4194]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4194\n");
+      else
+        fprintf(stderr, "reached bug index 4194\n");
+    }
+    if ((!FIXREVERTER[4194] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (type->annot != NULL)
         xmlSchemaFreeAnnot(type->annot);
     if (type->facets != NULL) {
@@ -4054,8 +4646,23 @@ xmlSchemaFreeModelGroup(xmlSchemaModelGroupPtr item)
 static void
 xmlSchemaComponentListFree(xmlSchemaItemListPtr list)
 {
-    if ((list == NULL) || (list->nbItems == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4195]) {
+      if ((list == (void *) 0 || list -> nbItems == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4195\n");
+      else
+        fprintf(stderr, "reached bug index 4195\n");
+    }
+    if ((!FIXREVERTER[4195] && (list == (void *) 0 || list -> nbItems == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     {
 	xmlSchemaTreeItemPtr item;
 	xmlSchemaTreeItemPtr *items = (xmlSchemaTreeItemPtr *) list->items;
@@ -4063,8 +4670,23 @@ xmlSchemaComponentListFree(xmlSchemaItemListPtr list)
 
 	for (i = 0; i < list->nbItems; i++) {
 	    item = items[i];
-	    if (item == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4196]) {
+	      if ((item == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4196\n");
+	      else
+	        fprintf(stderr, "reached bug index 4196\n");
+	    }
+	    if ((!FIXREVERTER[4196] && (item == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    switch (item->type) {
 		case XML_SCHEMA_TYPE_SIMPLE:
 		case XML_SCHEMA_TYPE_COMPLEX:
@@ -4139,8 +4761,23 @@ xmlSchemaComponentListFree(xmlSchemaItemListPtr list)
 void
 xmlSchemaFree(xmlSchemaPtr schema)
 {
-    if (schema == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4197]) {
+      if ((schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4197\n");
+      else
+        fprintf(stderr, "reached bug index 4197\n");
+    }
+    if ((!FIXREVERTER[4197] && (schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     /* @volatiles is not used anymore :-/ */
     if (schema->volatiles != NULL)
 	TODO
@@ -4661,8 +5298,23 @@ xmlSchemaGetPropNode(xmlNodePtr node, const char *name)
 {
     xmlAttrPtr prop;
 
-    if ((node == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4206]) {
+      if ((node == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4206\n");
+      else
+        fprintf(stderr, "reached bug index 4206\n");
+    }
+    if ((!FIXREVERTER[4206] && (node == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     prop = node->properties;
     while (prop != NULL) {
         if ((prop->ns == NULL) && xmlStrEqual(prop->name, BAD_CAST name))
@@ -4688,8 +5340,23 @@ xmlSchemaGetPropNodeNs(xmlNodePtr node, const char *uri, const char *name)
 {
     xmlAttrPtr prop;
 
-    if ((node == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4207]) {
+      if ((node == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4207\n");
+      else
+        fprintf(stderr, "reached bug index 4207\n");
+    }
+    if ((!FIXREVERTER[4207] && (node == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     prop = node->properties;
     while (prop != NULL) {
 	if ((prop->ns != NULL) &&
@@ -4708,8 +5375,23 @@ xmlSchemaGetNodeContent(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node)
     const xmlChar *ret;
 
     val = xmlNodeGetContent(node);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4208]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4208\n");
+      else
+        fprintf(stderr, "reached bug index 4208\n");
+    }
+    if ((!FIXREVERTER[4208] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	val = xmlStrdup((xmlChar *)"");
+	#ifdef FRCOV
+	}
+	#endif
     ret = xmlDictLookup(ctxt->dict, val, -1);
     xmlFree(val);
     return(ret);
@@ -4739,8 +5421,23 @@ xmlSchemaGetProp(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node,
     const xmlChar *ret;
 
     val = xmlGetNoNsProp(node, BAD_CAST name);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4209]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4209\n");
+      else
+        fprintf(stderr, "reached bug index 4209\n");
+    }
+    if ((!FIXREVERTER[4209] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret = xmlDictLookup(ctxt->dict, val, -1);
     xmlFree(val);
     return(ret);
@@ -4785,8 +5482,23 @@ xmlSchemaGetElem(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaElementPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4210]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4210\n");
+      else
+        fprintf(stderr, "reached bug index 4210\n");
+    }
+    if ((!FIXREVERTER[4210] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(elemDecl)
     }
@@ -4819,8 +5531,23 @@ xmlSchemaGetType(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaTypePtr ret = NULL;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4211]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4211\n");
+      else
+        fprintf(stderr, "reached bug index 4211\n");
+    }
+    if ((!FIXREVERTER[4211] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* First try the built-in types. */
     if ((nsName != NULL) && xmlStrEqual(nsName, xmlSchemaNs)) {
 	ret = xmlSchemaGetPredefinedType(name, nsName);
@@ -4866,8 +5593,23 @@ xmlSchemaGetAttributeDecl(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaAttributePtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4212]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4212\n");
+      else
+        fprintf(stderr, "reached bug index 4212\n");
+    }
+    if ((!FIXREVERTER[4212] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(attrDecl)
     }
@@ -4900,8 +5642,23 @@ xmlSchemaGetAttributeGroup(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaAttributeGroupPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4213]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4213\n");
+      else
+        fprintf(stderr, "reached bug index 4213\n");
+    }
+    if ((!FIXREVERTER[4213] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(attrgrpDecl)
     }
@@ -4940,8 +5697,23 @@ xmlSchemaGetGroup(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaModelGroupDefPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4214]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4214\n");
+      else
+        fprintf(stderr, "reached bug index 4214\n");
+    }
+    if ((!FIXREVERTER[4214] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(groupDecl)
     }
@@ -4966,8 +5738,23 @@ xmlSchemaGetNotation(xmlSchemaPtr schema,
 {
     xmlSchemaNotationPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4215]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4215\n");
+      else
+        fprintf(stderr, "reached bug index 4215\n");
+    }
+    if ((!FIXREVERTER[4215] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(notaDecl)
     }
@@ -4982,8 +5769,23 @@ xmlSchemaGetIDC(xmlSchemaPtr schema,
 {
     xmlSchemaIDCPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4216]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4216\n");
+      else
+        fprintf(stderr, "reached bug index 4216\n");
+    }
+    if ((!FIXREVERTER[4216] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(idcDef)
     }
@@ -5041,8 +5843,23 @@ xmlSchemaGetNamedComponent(xmlSchemaPtr schema,
 static int
 xmlSchemaIsBlank(xmlChar * str, int len)
 {
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4217]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4217\n");
+      else
+        fprintf(stderr, "reached bug index 4217\n");
+    }
+    if ((!FIXREVERTER[4217] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
     if (len < 0) {
 	while (*str != 0) {
 	    if (!(IS_BLANK_CH(*str)))
@@ -5074,8 +5891,23 @@ xmlSchemaFindRedefCompInGraph(xmlSchemaBucketPtr bucket,
     xmlSchemaBasicItemPtr ret;
     int i;
 
-    if ((bucket == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4218]) {
+      if ((bucket == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4218\n");
+      else
+        fprintf(stderr, "reached bug index 4218\n");
+    }
+    if ((!FIXREVERTER[4218] && (bucket == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((bucket->globals == NULL) ||
 	(bucket->globals->nbItems == 0))
 	goto subschemas;
@@ -5164,14 +5996,44 @@ xmlSchemaAddNotation(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaNotationPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4219]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4219\n");
+      else
+        fprintf(stderr, "reached bug index 4219\n");
+    }
+    if ((!FIXREVERTER[4219] && (ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaNotationPtr) xmlMalloc(sizeof(xmlSchemaNotation));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4220]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4220\n");
+      else
+        fprintf(stderr, "reached bug index 4220\n");
+    }
+    if ((!FIXREVERTER[4220] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "add annotation", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaNotation));
     ret->type = XML_SCHEMA_TYPE_NOTATION;
     ret->name = name;
@@ -5201,14 +6063,44 @@ xmlSchemaAddAttribute(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaAttributePtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4221]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4221\n");
+      else
+        fprintf(stderr, "reached bug index 4221\n");
+    }
+    if ((!FIXREVERTER[4221] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaAttributePtr) xmlMalloc(sizeof(xmlSchemaAttribute));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4222]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4222\n");
+      else
+        fprintf(stderr, "reached bug index 4222\n");
+    }
+    if ((!FIXREVERTER[4222] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating attribute", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttribute));
     ret->type = XML_SCHEMA_TYPE_ATTRIBUTE;
     ret->node = node;
@@ -5241,14 +6133,44 @@ xmlSchemaAddAttributeUse(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlSchemaAttributeUsePtr ret = NULL;
 
-    if (pctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4223]) {
+      if ((pctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4223\n");
+      else
+        fprintf(stderr, "reached bug index 4223\n");
+    }
+    if ((!FIXREVERTER[4223] && (pctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaAttributeUsePtr) xmlMalloc(sizeof(xmlSchemaAttributeUse));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4224]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4224\n");
+      else
+        fprintf(stderr, "reached bug index 4224\n");
+    }
+    if ((!FIXREVERTER[4224] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(pctxt, "allocating attribute", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttributeUse));
     ret->type = XML_SCHEMA_TYPE_ATTRIBUTE_USE;
     ret->node = node;
@@ -5274,11 +6196,26 @@ xmlSchemaAddRedef(xmlSchemaParserCtxtPtr pctxt,
 
     ret = (xmlSchemaRedefPtr)
 	xmlMalloc(sizeof(xmlSchemaRedef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4225]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4225\n");
+      else
+        fprintf(stderr, "reached bug index 4225\n");
+    }
+    if ((!FIXREVERTER[4225] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt,
 	    "allocating redefinition info", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaRedef));
     ret->item = item;
     ret->targetBucket = targetBucket;
@@ -5314,15 +6251,45 @@ xmlSchemaAddAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlSchemaAttributeGroupPtr ret = NULL;
 
-    if ((pctxt == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4226]) {
+      if ((pctxt == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4226\n");
+      else
+        fprintf(stderr, "reached bug index 4226\n");
+    }
+    if ((!FIXREVERTER[4226] && (pctxt == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaAttributeGroupPtr)
         xmlMalloc(sizeof(xmlSchemaAttributeGroup));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4227]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4227\n");
+      else
+        fprintf(stderr, "reached bug index 4227\n");
+    }
+    if ((!FIXREVERTER[4227] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt, "allocating attribute group", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttributeGroup));
     ret->type = XML_SCHEMA_TYPE_ATTRIBUTEGROUP;
     ret->name = name;
@@ -5334,10 +6301,25 @@ xmlSchemaAddAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
     if (pctxt->isRedefine) {
 	pctxt->redef = xmlSchemaAddRedef(pctxt, pctxt->redefined,
 	    ret, name, nsName);
-	if (pctxt->redef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4228]) {
+	  if ((pctxt -> redef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4228\n");
+	  else
+	    fprintf(stderr, "reached bug index 4228\n");
+	}
+	if ((!FIXREVERTER[4228] && (pctxt -> redef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	pctxt->redefCounter = 0;
     }
     WXS_ADD_GLOBAL(pctxt, ret);
@@ -5364,14 +6346,44 @@ xmlSchemaAddElement(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaElementPtr ret = NULL;
 
-    if ((ctxt == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4229]) {
+      if ((ctxt == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4229\n");
+      else
+        fprintf(stderr, "reached bug index 4229\n");
+    }
+    if ((!FIXREVERTER[4229] && (ctxt == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaElementPtr) xmlMalloc(sizeof(xmlSchemaElement));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4230]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4230\n");
+      else
+        fprintf(stderr, "reached bug index 4230\n");
+    }
+    if ((!FIXREVERTER[4230] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating element", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaElement));
     ret->type = XML_SCHEMA_TYPE_ELEMENT;
     ret->name = name;
@@ -5406,14 +6418,44 @@ xmlSchemaAddType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaTypePtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4231]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4231\n");
+      else
+        fprintf(stderr, "reached bug index 4231\n");
+    }
+    if ((!FIXREVERTER[4231] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaTypePtr) xmlMalloc(sizeof(xmlSchemaType));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4232]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4232\n");
+      else
+        fprintf(stderr, "reached bug index 4232\n");
+    }
+    if ((!FIXREVERTER[4232] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating type", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaType));
     ret->type = type;
     ret->name = name;
@@ -5423,10 +6465,25 @@ xmlSchemaAddType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	if (ctxt->isRedefine) {
 	    ctxt->redef = xmlSchemaAddRedef(ctxt, ctxt->redefined,
 		ret, name, nsName);
-	    if (ctxt->redef == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4233]) {
+	      if ((ctxt -> redef == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4233\n");
+	      else
+	        fprintf(stderr, "reached bug index 4233\n");
+	    }
+	    if ((!FIXREVERTER[4233] && (ctxt -> redef == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    ctxt->redefCounter = 0;
 	}
 	WXS_ADD_GLOBAL(ctxt, ret);
@@ -5446,11 +6503,26 @@ xmlSchemaNewQNameRef(xmlSchemaParserCtxtPtr pctxt,
 
     ret = (xmlSchemaQNameRefPtr)
 	xmlMalloc(sizeof(xmlSchemaQNameRef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4234]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4234\n");
+      else
+        fprintf(stderr, "reached bug index 4234\n");
+    }
+    if ((!FIXREVERTER[4234] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt,
 	    "allocating QName reference item", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->node = NULL;
     ret->type = XML_SCHEMA_EXTRA_QNAMEREF;
     ret->name = refName;
@@ -5471,11 +6543,26 @@ xmlSchemaAddAttributeUseProhib(xmlSchemaParserCtxtPtr pctxt)
 
     ret = (xmlSchemaAttributeUseProhibPtr)
 	xmlMalloc(sizeof(xmlSchemaAttributeUseProhib));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4235]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4235\n");
+      else
+        fprintf(stderr, "reached bug index 4235\n");
+    }
+    if ((!FIXREVERTER[4235] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt,
 	    "allocating attribute use prohibition", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttributeUseProhib));
     ret->type = XML_SCHEMA_EXTRA_ATTR_USE_PROHIB;
     WXS_ADD_LOCAL(pctxt, ret);
@@ -5503,16 +6590,46 @@ xmlSchemaAddModelGroup(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaModelGroupPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4236]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4236\n");
+      else
+        fprintf(stderr, "reached bug index 4236\n");
+    }
+    if ((!FIXREVERTER[4236] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaModelGroupPtr)
 	xmlMalloc(sizeof(xmlSchemaModelGroup));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4237]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4237\n");
+      else
+        fprintf(stderr, "reached bug index 4237\n");
+    }
+    if ((!FIXREVERTER[4237] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(ctxt, "allocating model group component",
 	    NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaModelGroup));
     ret->type = type;
     ret->node = node;
@@ -5542,19 +6659,49 @@ xmlSchemaAddParticle(xmlSchemaParserCtxtPtr ctxt,
 		     xmlNodePtr node, int min, int max)
 {
     xmlSchemaParticlePtr ret = NULL;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4238]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4238\n");
+      else
+        fprintf(stderr, "reached bug index 4238\n");
+    }
+    if ((!FIXREVERTER[4238] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
 #ifdef DEBUG
     fprintf(stderr, "Adding particle component\n");
 #endif
     ret = (xmlSchemaParticlePtr)
 	xmlMalloc(sizeof(xmlSchemaParticle));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4239]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4239\n");
+      else
+        fprintf(stderr, "reached bug index 4239\n");
+    }
+    if ((!FIXREVERTER[4239] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(ctxt, "allocating particle component",
 	    NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->type = XML_SCHEMA_TYPE_PARTICLE;
     ret->annot = NULL;
     ret->node = node;
@@ -5592,15 +6739,45 @@ xmlSchemaAddModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaModelGroupDefPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4240]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4240\n");
+      else
+        fprintf(stderr, "reached bug index 4240\n");
+    }
+    if ((!FIXREVERTER[4240] && (ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaModelGroupDefPtr)
 	xmlMalloc(sizeof(xmlSchemaModelGroupDef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4241]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4241\n");
+      else
+        fprintf(stderr, "reached bug index 4241\n");
+    }
+    if ((!FIXREVERTER[4241] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "adding group", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaModelGroupDef));
     ret->name = name;
     ret->type = XML_SCHEMA_TYPE_GROUP;
@@ -5610,10 +6787,25 @@ xmlSchemaAddModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
     if (ctxt->isRedefine) {
 	ctxt->redef = xmlSchemaAddRedef(ctxt, ctxt->redefined,
 	    ret, name, nsName);
-	if (ctxt->redef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4242]) {
+	  if ((ctxt -> redef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4242\n");
+	  else
+	    fprintf(stderr, "reached bug index 4242\n");
+	}
+	if ((!FIXREVERTER[4242] && (ctxt -> redef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->redefCounter = 0;
     }
     WXS_ADD_GLOBAL(ctxt, ret);
@@ -5636,10 +6828,25 @@ xmlSchemaNewWildcardNsConstraint(xmlSchemaParserCtxtPtr ctxt)
 
     ret = (xmlSchemaWildcardNsPtr)
 	xmlMalloc(sizeof(xmlSchemaWildcardNs));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4243]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4243\n");
+      else
+        fprintf(stderr, "reached bug index 4243\n");
+    }
+    if ((!FIXREVERTER[4243] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(ctxt, "creating wildcard namespace constraint", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->value = NULL;
     ret->next = NULL;
     return (ret);
@@ -5652,15 +6859,45 @@ xmlSchemaAddIDC(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaIDCPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4244]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4244\n");
+      else
+        fprintf(stderr, "reached bug index 4244\n");
+    }
+    if ((!FIXREVERTER[4244] && (ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaIDCPtr) xmlMalloc(sizeof(xmlSchemaIDC));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4245]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4245\n");
+      else
+        fprintf(stderr, "reached bug index 4245\n");
+    }
+    if ((!FIXREVERTER[4245] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt,
 	    "allocating an identity-constraint definition", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaIDC));
     /* The target namespace of the parent element declaration. */
     ret->targetNamespace = nsName;
@@ -5693,14 +6930,44 @@ xmlSchemaAddWildcard(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaWildcardPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4246]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4246\n");
+      else
+        fprintf(stderr, "reached bug index 4246\n");
+    }
+    if ((!FIXREVERTER[4246] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaWildcardPtr) xmlMalloc(sizeof(xmlSchemaWildcard));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4247]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4247\n");
+      else
+        fprintf(stderr, "reached bug index 4247\n");
+    }
+    if ((!FIXREVERTER[4247] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "adding wildcard", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaWildcard));
     ret->type = type;
     ret->node = node;
@@ -5711,8 +6978,23 @@ xmlSchemaAddWildcard(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 static void
 xmlSchemaSubstGroupFree(xmlSchemaSubstGroupPtr group)
 {
-    if (group == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4248]) {
+      if ((group == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4248\n");
+      else
+        fprintf(stderr, "reached bug index 4248\n");
+    }
+    if ((!FIXREVERTER[4248] && (group == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (group->members != NULL)
 	xmlSchemaItemListFree(group->members);
     xmlFree(group);
@@ -5738,19 +7020,49 @@ xmlSchemaSubstGroupAdd(xmlSchemaParserCtxtPtr pctxt,
     }
     /* Create a new substitution group. */
     ret = (xmlSchemaSubstGroupPtr) xmlMalloc(sizeof(xmlSchemaSubstGroup));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4249]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4249\n");
+      else
+        fprintf(stderr, "reached bug index 4249\n");
+    }
+    if ((!FIXREVERTER[4249] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL,
 	    "allocating a substitution group container", NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaSubstGroup));
     ret->head = head;
     /* Create list of members. */
     ret->members = xmlSchemaItemListCreate();
-    if (ret->members == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4250]) {
+      if ((ret -> members == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4250\n");
+      else
+        fprintf(stderr, "reached bug index 4250\n");
+    }
+    if ((!FIXREVERTER[4250] && (ret -> members == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaSubstGroupFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /* Add subst group to hash. */
     if (xmlHashAddEntry2(WXS_SUBST_GROUPS(pctxt),
 	head->name, head->targetNamespace, ret) != 0) {
@@ -5790,14 +7102,59 @@ xmlSchemaAddElementSubstitutionMember(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlSchemaSubstGroupPtr substGroup = NULL;
 
-    if ((pctxt == NULL) || (head == NULL) || (member == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4251]) {
+      if ((pctxt == (void *) 0 || head == (void *) 0 || member == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4251\n");
+      else
+        fprintf(stderr, "reached bug index 4251\n");
+    }
+    if ((!FIXREVERTER[4251] && (pctxt == (void *) 0 || head == (void *) 0 || member == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     substGroup = xmlSchemaSubstGroupGet(pctxt, head);
-    if (substGroup == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4252]) {
+      if ((substGroup == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4252\n");
+      else
+        fprintf(stderr, "reached bug index 4252\n");
+    }
+    if ((!FIXREVERTER[4252] && (substGroup == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	substGroup = xmlSchemaSubstGroupAdd(pctxt, head);
-    if (substGroup == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4253]) {
+      if ((substGroup == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4253\n");
+      else
+        fprintf(stderr, "reached bug index 4253\n");
+    }
+    if ((!FIXREVERTER[4253] && (substGroup == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (xmlSchemaItemListAdd(substGroup->members, member) == -1)
 	return(-1);
     return(0);
@@ -5950,11 +7307,26 @@ xmlSchemaPValAttrQName(xmlSchemaParserCtxtPtr ctxt,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(ownerElem, name);
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4255]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4255\n");
+      else
+        fprintf(stderr, "reached bug index 4255\n");
+    }
+    if ((!FIXREVERTER[4255] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	*local = NULL;
 	*uri = NULL;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (xmlSchemaPValAttrNodeQName(ctxt, schema,
 	ownerItem, attr, uri, local));
 }
@@ -5979,8 +7351,23 @@ xmlSchemaPValAttrNodeID(xmlSchemaParserCtxtPtr ctxt, xmlAttrPtr attr)
     int ret;
     const xmlChar *value;
 
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4256]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4256\n");
+      else
+        fprintf(stderr, "reached bug index 4256\n");
+    }
+    if ((!FIXREVERTER[4256] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     value = xmlSchemaGetNodeContentNoDict((xmlNodePtr) attr);
     ret = xmlValidateNCName(value, 1);
     if (ret == 0) {
@@ -6036,8 +7423,23 @@ xmlSchemaPValAttrID(xmlSchemaParserCtxtPtr ctxt,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(ownerElem, (const char *) name);
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4257]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4257\n");
+      else
+        fprintf(stderr, "reached bug index 4257\n");
+    }
+    if ((!FIXREVERTER[4257] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlSchemaPValAttrNodeID(ctxt, attr));
 
 }
@@ -6060,8 +7462,23 @@ xmlGetMaxOccurs(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(node, "maxOccurs");
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4258]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4258\n");
+      else
+        fprintf(stderr, "reached bug index 4258\n");
+    }
+    if ((!FIXREVERTER[4258] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (def);
+	#ifdef FRCOV
+	}
+	#endif
     val = xmlSchemaGetNodeContent(ctxt, (xmlNodePtr) attr);
 
     if (xmlStrEqual(val, (const xmlChar *) "unbounded")) {
@@ -6125,8 +7542,23 @@ xmlGetMinOccurs(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(node, "minOccurs");
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4259]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4259\n");
+      else
+        fprintf(stderr, "reached bug index 4259\n");
+    }
+    if ((!FIXREVERTER[4259] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (def);
+	#ifdef FRCOV
+	}
+	#endif
     val = xmlSchemaGetNodeContent(ctxt, (xmlNodePtr) attr);
     cur = val;
     while (IS_BLANK_CH(*cur))
@@ -6225,8 +7657,23 @@ xmlGetBooleanProp(xmlSchemaParserCtxtPtr ctxt,
     const xmlChar *val;
 
     val = xmlSchemaGetProp(ctxt, node, name);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4260]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4260\n");
+      else
+        fprintf(stderr, "reached bug index 4260\n");
+    }
+    if ((!FIXREVERTER[4260] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (def);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * 3.2.2.1 Lexical representation
     * An instance of a datatype that is defined as `boolean`
@@ -6314,8 +7761,23 @@ xmlSchemaPValAttrNodeValue(xmlSchemaParserCtxtPtr pctxt,
     * NOTE: Should we move this to xmlschematypes.c? Hmm, but this
     * one is really meant to be used internally, so better not.
     */
-    if ((pctxt == NULL) || (type == NULL) || (attr == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4261]) {
+      if ((pctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4261\n");
+      else
+        fprintf(stderr, "reached bug index 4261\n");
+    }
+    if ((!FIXREVERTER[4261] && (pctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (type->type != XML_SCHEMA_TYPE_BASIC) {
 	PERROR_INT("xmlSchemaPValAttrNodeValue",
 	    "the given type is not a built-in type");
@@ -6382,8 +7844,23 @@ xmlSchemaPValAttrNode(xmlSchemaParserCtxtPtr ctxt,
 {
     const xmlChar *val;
 
-    if ((ctxt == NULL) || (type == NULL) || (attr == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4262]) {
+      if ((ctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4262\n");
+      else
+        fprintf(stderr, "reached bug index 4262\n");
+    }
+    if ((!FIXREVERTER[4262] && (ctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     val = xmlSchemaGetNodeContent(ctxt, (xmlNodePtr) attr);
     if (value != NULL)
@@ -6422,11 +7899,26 @@ xmlSchemaPValAttr(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (type == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4263]) {
+      if ((ctxt == (void *) 0 || type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4263\n");
+      else
+        fprintf(stderr, "reached bug index 4263\n");
+    }
+    if ((!FIXREVERTER[4263] && (ctxt == (void *) 0 || type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (value != NULL)
 	    *value = NULL;
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (type->type != XML_SCHEMA_TYPE_BASIC) {
 	if (value != NULL)
 	    *value = NULL;
@@ -6438,11 +7930,26 @@ xmlSchemaPValAttr(xmlSchemaParserCtxtPtr ctxt,
 	return (-1);
     }
     attr = xmlSchemaGetPropNode(ownerElem, name);
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4264]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4264\n");
+      else
+        fprintf(stderr, "reached bug index 4264\n");
+    }
+    if ((!FIXREVERTER[4264] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (value != NULL)
 	    *value = NULL;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (xmlSchemaPValAttrNode(ctxt, ownerItem, attr,
 	type, value));
 }
@@ -6565,8 +8072,23 @@ xmlSchemaParseAnnotation(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node, int neede
     * {any attributes with non-schema namespace . . .}>
     * Content: (appinfo | documentation)*
     */
-    if ((ctxt == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4265]) {
+      if ((ctxt == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4265\n");
+      else
+        fprintf(stderr, "reached bug index 4265\n");
+    }
+    if ((!FIXREVERTER[4265] && (ctxt == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (needed)
 	ret = xmlSchemaNewAnnot(ctxt, node);
     else
@@ -6676,22 +8198,67 @@ xmlSchemaParseFacet(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     const xmlChar *value;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4266]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4266\n");
+      else
+        fprintf(stderr, "reached bug index 4266\n");
+    }
+    if ((!FIXREVERTER[4266] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     facet = xmlSchemaNewFacet();
-    if (facet == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4267]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4267\n");
+      else
+        fprintf(stderr, "reached bug index 4267\n");
+    }
+    if ((!FIXREVERTER[4267] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating facet", node);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     facet->node = node;
     value = xmlSchemaGetProp(ctxt, node, "value");
-    if (value == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4268]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4268\n");
+      else
+        fprintf(stderr, "reached bug index 4268\n");
+    }
+    if ((!FIXREVERTER[4268] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErr2(ctxt, node, child, XML_SCHEMAP_FACET_NO_VALUE,
                        "Facet %s has no value\n", node->name, NULL);
         xmlSchemaFreeFacet(facet);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (IS_SCHEMA(node, "minInclusive")) {
         facet->type = XML_SCHEMA_FACET_MININCLUSIVE;
     } else if (IS_SCHEMA(node, "minExclusive")) {
@@ -6799,9 +8366,24 @@ xmlSchemaParseWildcardNs(xmlSchemaParserCtxtPtr ctxt,
 	wildc->any = 1;
     else if (xmlStrEqual(ns, BAD_CAST "##other")) {
 	wildc->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-	if (wildc->negNsSet == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4269]) {
+	  if ((wildc -> negNsSet == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4269\n");
+	  else
+	    fprintf(stderr, "reached bug index 4269\n");
+	}
+	if ((!FIXREVERTER[4269] && (wildc -> negNsSet == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	wildc->negNsSet->value = ctxt->targetNamespace;
     } else {
 	const xmlChar *end, *cur;
@@ -6850,16 +8432,46 @@ xmlSchemaParseWildcardNs(xmlSchemaParserCtxtPtr ctxt,
 		}
 		if (tmp == NULL) {
 		    tmp = xmlSchemaNewWildcardNsConstraint(ctxt);
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4270]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4270\n");
+		      else
+		        fprintf(stderr, "reached bug index 4270\n");
+		    }
+		    if ((!FIXREVERTER[4270] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlFree(nsItem);
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    tmp->value = dictnsItem;
 		    tmp->next = NULL;
 		    if (wildc->nsSet == NULL)
 			wildc->nsSet = tmp;
-		    else if (lastNs != NULL)
+		    else 
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4271]) {
+		      if ((lastNs != (void *) 0  ) && !(0))
+		        fprintf(stderr, "triggered bug index 4271\n");
+		      else
+		        fprintf(stderr, "reached bug index 4271\n");
+		    }
+		    if ((!FIXREVERTER[4271] && (lastNs != (void *) 0  ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			lastNs->next = tmp;
+			#ifdef FRCOV
+			}
+			#endif
 		    lastNs = tmp;
 		}
 
@@ -6939,8 +8551,23 @@ xmlSchemaParseAny(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     xmlSchemaAnnotPtr annot = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4273]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4273\n");
+      else
+        fprintf(stderr, "reached bug index 4273\n");
+    }
+    if ((!FIXREVERTER[4273] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * Check for illegal attributes.
     */
@@ -6974,8 +8601,23 @@ xmlSchemaParseAny(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     * Create & parse the wildcard.
     */
     wild = xmlSchemaAddWildcard(ctxt, schema, XML_SCHEMA_TYPE_ANY, node);
-    if (wild == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4274]) {
+      if ((wild == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4274\n");
+      else
+        fprintf(stderr, "reached bug index 4274\n");
+    }
+    if ((!FIXREVERTER[4274] && (wild == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlSchemaParseWildcardNs(ctxt, schema, wild, node);
     /*
     * And now for the children...
@@ -7002,8 +8644,23 @@ xmlSchemaParseAny(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     * Create the particle.
     */
     particle = xmlSchemaAddParticle(ctxt, node, min, max);
-    if (particle == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4275]) {
+      if ((particle == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4275\n");
+      else
+        fprintf(stderr, "reached bug index 4275\n");
+    }
+    if ((!FIXREVERTER[4275] && (particle == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     particle->annot = annot;
     particle->children = (xmlSchemaTreeItemPtr) wild;
 
@@ -7028,18 +8685,63 @@ xmlSchemaParseNotation(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlSchemaNotationPtr ret;
     xmlNodePtr child = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4276]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4276\n");
+      else
+        fprintf(stderr, "reached bug index 4276\n");
+    }
+    if ((!FIXREVERTER[4276] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     name = xmlSchemaGetProp(ctxt, node, "name");
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4277]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4277\n");
+      else
+        fprintf(stderr, "reached bug index 4277\n");
+    }
+    if ((!FIXREVERTER[4277] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErr2(ctxt, node, child, XML_SCHEMAP_NOTATION_NO_NAME,
                        "Notation has no name\n", NULL, NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlSchemaAddNotation(ctxt, schema, name,
 	ctxt->targetNamespace, node);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4278]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4278\n");
+      else
+        fprintf(stderr, "reached bug index 4278\n");
+    }
+    if ((!FIXREVERTER[4278] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaPValAttrID(ctxt, node, BAD_CAST "id");
 
     child = node->children;
@@ -7076,14 +8778,44 @@ xmlSchemaParseAnyAttribute(xmlSchemaParserCtxtPtr ctxt,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4279]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4279\n");
+      else
+        fprintf(stderr, "reached bug index 4279\n");
+    }
+    if ((!FIXREVERTER[4279] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = xmlSchemaAddWildcard(ctxt, schema, XML_SCHEMA_TYPE_ANY_ATTRIBUTE,
 	node);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4280]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4280\n");
+      else
+        fprintf(stderr, "reached bug index 4280\n");
+    }
+    if ((!FIXREVERTER[4280] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Check for illegal attributes.
     */
@@ -7160,8 +8892,23 @@ xmlSchemaParseLocalAttribute(xmlSchemaParserCtxtPtr pctxt,
      * 3.2.3 Constraints on XML Representations of Attribute Declarations
      */
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4281]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4281\n");
+      else
+        fprintf(stderr, "reached bug index 4281\n");
+    }
+    if ((!FIXREVERTER[4281] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     attr = xmlSchemaGetPropNode(node, "ref");
     if (attr != NULL) {
 	if (xmlSchemaPValAttrNodeQName(pctxt, schema,
@@ -7277,8 +9024,22 @@ attr_next:
     * If default and use are both present, use must have
     * the actual value optional.
     */
-    if ((defValueType == WXS_ATTR_DEF_VAL_DEFAULT) &&
-	(occurs != XML_SCHEMAS_ATTR_USE_OPTIONAL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4282]) {
+      fprintf(stderr, "reached bug index 4282\n");
+    }
+    if ((FIXREVERTER[4282] && (defValueType == 1 )) || (!FIXREVERTER[4282] && (defValueType == 1 && occurs != 2 ))
+    #else
+    if (defValueType == 1 
+    #endif
+    ) {
+	  
+	#ifdef FRCOV
+	  if (!(occurs != 2 ))
+	    fprintf(stderr, "triggered bug index 4282\n");
+	  #endif
+	
 	xmlSchemaPSimpleTypeErr(pctxt,
 	    XML_SCHEMAP_SRC_ATTRIBUTE_2,
 	    NULL, node, NULL,
@@ -7287,11 +9048,29 @@ attr_next:
 	    "if the attribute 'default' is present",
 	    NULL, NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * We want correct attributes.
     */
-    if (nberrors != pctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4283]) {
+      if ((nberrors != pctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 4283\n");
+      else
+        fprintf(stderr, "reached bug index 4283\n");
+    }
+    if ((!FIXREVERTER[4283] && (nberrors != pctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (! isRef) {
 	xmlSchemaAttributePtr attrDecl;
 
@@ -7310,11 +9089,26 @@ attr_next:
 		xmlSchemaInstanceNs, NULL);
 	}
 	attr = xmlSchemaGetPropNode(node, "name");
-	if (attr == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4284]) {
+	  if ((attr == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4284\n");
+	  else
+	    fprintf(stderr, "reached bug index 4284\n");
+	}
+	if ((!FIXREVERTER[4284] && (attr == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPMissingAttrErr(pctxt, XML_SCHEMAP_S4S_ATTR_MISSING,
 		NULL, node, "name", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (xmlSchemaPValAttrNode(pctxt, NULL, attr,
 	    xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME), &name) != 0) {
 	    return (NULL);
@@ -7332,21 +9126,66 @@ attr_next:
 		NULL, NULL);
 	    return (NULL);
 	}
-	if (occurs == XML_SCHEMAS_ATTR_USE_PROHIBITED)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4285]) {
+	  if ((occurs == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4285\n");
+	  else
+	    fprintf(stderr, "reached bug index 4285\n");
+	}
+	if ((!FIXREVERTER[4285] && (occurs == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto check_children;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Create the attribute use component.
 	*/
 	use = xmlSchemaAddAttributeUse(pctxt, node);
-	if (use == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4286]) {
+	  if ((use == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4286\n");
+	  else
+	    fprintf(stderr, "reached bug index 4286\n");
+	}
+	if ((!FIXREVERTER[4286] && (use == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	use->occurs = occurs;
 	/*
 	* Create the attribute declaration.
 	*/
 	attrDecl = xmlSchemaAddAttribute(pctxt, schema, name, ns, node, 0);
-	if (attrDecl == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4287]) {
+	  if ((attrDecl == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4287\n");
+	  else
+	    fprintf(stderr, "reached bug index 4287\n");
+	}
+	if ((!FIXREVERTER[4287] && (attrDecl == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (tmpName != NULL) {
 	    attrDecl->typeName = tmpName;
 	    attrDecl->typeNs = tmpNs;
@@ -7367,8 +9206,23 @@ attr_next:
 	* Create the attribute use component.
 	*/
 	use = xmlSchemaAddAttributeUse(pctxt, node);
-	if (use == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4288]) {
+	  if ((use == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4288\n");
+	  else
+	    fprintf(stderr, "reached bug index 4288\n");
+	}
+	if ((!FIXREVERTER[4288] && (use == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* We need to resolve the reference at later stage.
 	*/
@@ -7379,8 +9233,23 @@ attr_next:
 	*/
 	ref = xmlSchemaNewQNameRef(pctxt, XML_SCHEMA_TYPE_ATTRIBUTE,
 	    tmpName, tmpNs);
-	if (ref == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4289]) {
+	  if ((ref == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4289\n");
+	  else
+	    fprintf(stderr, "reached bug index 4289\n");
+	}
+	if ((!FIXREVERTER[4289] && (ref == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Assign the reference. This will be substituted for the
 	* referenced attribute declaration when the QName is resolved.
@@ -7389,8 +9258,23 @@ attr_next:
 	/*
 	* Value constraint.
 	*/
-	if (defValue != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4290]) {
+	  if ((defValue != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 4290\n");
+	  else
+	    fprintf(stderr, "reached bug index 4290\n");
+	}
+	if ((!FIXREVERTER[4290] && (defValue != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    use->defValue = defValue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (defValueType == WXS_ATTR_DEF_VAL_FIXED)
 	    use->flags |= XML_SCHEMA_ATTR_USE_FIXED;
     }
@@ -7466,8 +9350,23 @@ check_children:
 	* Create the attribute prohibition helper component.
 	*/
 	prohib = xmlSchemaAddAttributeUseProhib(pctxt);
-	if (prohib == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4292]) {
+	  if ((prohib == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4292\n");
+	  else
+	    fprintf(stderr, "reached bug index 4292\n");
+	}
+	if ((!FIXREVERTER[4292] && (prohib == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	prohib->node = node;
 	prohib->name = tmpName;
 	prohib->targetNamespace = tmpNs;
@@ -7546,18 +9445,48 @@ xmlSchemaParseGlobalAttribute(xmlSchemaParserCtxtPtr pctxt,
      *
      * 3.2.3 Constraints on XML Representations of Attribute Declarations
      */
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4293]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4293\n");
+      else
+        fprintf(stderr, "reached bug index 4293\n");
+    }
+    if ((!FIXREVERTER[4293] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * 3.2.3 : 3.1
     * One of ref or name must be present, but not both
     */
     attr = xmlSchemaGetPropNode(node, "name");
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4294]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4294\n");
+      else
+        fprintf(stderr, "reached bug index 4294\n");
+    }
+    if ((!FIXREVERTER[4294] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPMissingAttrErr(pctxt, XML_SCHEMAP_S4S_ATTR_MISSING,
 	    NULL, node, "name", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlSchemaPValAttrNode(pctxt, NULL, attr,
 	xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME), &attrValue) != 0) {
 	return (NULL);
@@ -7590,8 +9519,23 @@ xmlSchemaParseGlobalAttribute(xmlSchemaParserCtxtPtr pctxt,
 
     ret = xmlSchemaAddAttribute(pctxt, schema, attrValue,
 	pctxt->targetNamespace, node, 1);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4295]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4295\n");
+      else
+        fprintf(stderr, "reached bug index 4295\n");
+    }
+    if ((!FIXREVERTER[4295] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ret->flags |= XML_SCHEMAS_ATTR_GLOBAL;
 
     /*
@@ -7693,16 +9637,46 @@ xmlSchemaParseAttributeGroupRef(xmlSchemaParserCtxtPtr pctxt,
     xmlAttrPtr attr;
     const xmlChar *refNs = NULL, *ref = NULL;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4296]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4296\n");
+      else
+        fprintf(stderr, "reached bug index 4296\n");
+    }
+    if ((!FIXREVERTER[4296] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "ref");
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4297]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4297\n");
+      else
+        fprintf(stderr, "reached bug index 4297\n");
+    }
+    if ((!FIXREVERTER[4297] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPMissingAttrErr(pctxt,
 	    XML_SCHEMAP_S4S_ATTR_MISSING,
 	    NULL, node, "ref", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlSchemaPValAttrNodeQName(pctxt, schema,
 	NULL, attr, &refNs, &ref);
     if (xmlSchemaCheckReference(pctxt, schema, node, attr, refNs) != 0)
@@ -7782,8 +9756,23 @@ xmlSchemaParseAttributeGroupRef(xmlSchemaParserCtxtPtr pctxt,
 	*/
 	ret = xmlSchemaNewQNameRef(pctxt,
 	    XML_SCHEMA_TYPE_ATTRIBUTEGROUP, ref, refNs);
-	if (ret == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4298]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4298\n");
+	  else
+	    fprintf(stderr, "reached bug index 4298\n");
+	}
+	if ((!FIXREVERTER[4298] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ret->node = node;
 	pctxt->redef->reference = WXS_BASIC_CAST ret;
     } else {
@@ -7794,8 +9783,23 @@ xmlSchemaParseAttributeGroupRef(xmlSchemaParserCtxtPtr pctxt,
 	*/
 	ret = xmlSchemaNewQNameRef(pctxt,
 	    XML_SCHEMA_TYPE_ATTRIBUTEGROUP, ref, refNs);
-	if (ret == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4299]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4299\n");
+	  else
+	    fprintf(stderr, "reached bug index 4299\n");
+	}
+	if ((!FIXREVERTER[4299] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ret->node = node;
 	/* Add to pending items, to be able to resolve the reference. */
 	WXS_ADD_PENDING(pctxt, ret);
@@ -7825,16 +9829,46 @@ xmlSchemaParseAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
     xmlAttrPtr attr;
     int hasRefs = 0;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4300]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4300\n");
+      else
+        fprintf(stderr, "reached bug index 4300\n");
+    }
+    if ((!FIXREVERTER[4300] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "name");
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4301]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4301\n");
+      else
+        fprintf(stderr, "reached bug index 4301\n");
+    }
+    if ((!FIXREVERTER[4301] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPMissingAttrErr(pctxt,
 	    XML_SCHEMAP_S4S_ATTR_MISSING,
 	    NULL, node, "name", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * The name is crucial, exit if invalid.
     */
@@ -7845,8 +9879,23 @@ xmlSchemaParseAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
     }
     ret = xmlSchemaAddAttributeGroupDefinition(pctxt, schema,
 	name, pctxt->targetNamespace, node);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4302]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4302\n");
+      else
+        fprintf(stderr, "reached bug index 4302\n");
+    }
+    if ((!FIXREVERTER[4302] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Check for illegal attributes.
     */
@@ -7955,8 +10004,23 @@ xmlSchemaPValAttrBlockFinal(const xmlChar *value,
     /*
     * TODO: This does not check for dublicate entries.
     */
-    if ((flags == NULL) || (value == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4303]) {
+      if ((flags == (void *) 0 || value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4303\n");
+      else
+        fprintf(stderr, "reached bug index 4303\n");
+    }
+    if ((!FIXREVERTER[4303] && (flags == (void *) 0 || value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (value[0] == 0)
 	return (0);
     if (xmlStrEqual(value, BAD_CAST "#all")) {
@@ -8044,13 +10108,28 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
     * TODO: 1 The {selector} must be a valid XPath expression, as defined
     * in [XPath].
     */
-    if (selector == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4304]) {
+      if ((selector == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4304\n");
+      else
+        fprintf(stderr, "reached bug index 4304\n");
+    }
+    if ((!FIXREVERTER[4304] && (selector == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErr(ctxt, idc->node,
 	    XML_SCHEMAP_INTERNAL,
 	    "Internal error: xmlSchemaCheckCSelectorXPath, "
 	    "the selector is not specified.\n", NULL, NULL);
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (attr == NULL)
 	node = idc->node;
     else
@@ -8088,12 +10167,27 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
 
 	    nsArray = (const xmlChar **) xmlMalloc(
 		(count * 2 + 1) * sizeof(const xmlChar *));
-	    if (nsArray == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4305]) {
+	      if ((nsArray == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4305\n");
+	      else
+	        fprintf(stderr, "reached bug index 4305\n");
+	    }
+	    if ((!FIXREVERTER[4305] && (nsArray == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaPErrMemory(ctxt, "allocating a namespace array",
 		    NULL);
 		xmlFree(nsList);
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    for (i = 0; i < count; i++) {
 		nsArray[2 * i] = nsList[i]->href;
 		nsArray[2 * i + 1] = nsList[i]->prefix;
@@ -8113,7 +10207,19 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
 	if (nsArray != NULL)
 	    xmlFree((xmlChar **) nsArray);
 
-	if (selector->xpathComp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4306]) {
+	  if ((selector -> xpathComp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4306\n");
+	  else
+	    fprintf(stderr, "reached bug index 4306\n");
+	}
+	if ((!FIXREVERTER[4306] && (selector -> xpathComp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPCustomErr(ctxt,
 		/* TODO: Adjust error code? */
 		XML_SCHEMAP_S4S_ATTR_INVALID_VALUE,
@@ -8122,6 +10228,9 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
 		"compiled", selector->xpath);
 	    return (XML_SCHEMAP_S4S_ATTR_INVALID_VALUE);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return (0);
 }
@@ -8151,8 +10260,23 @@ static xmlSchemaAnnotPtr
 xmlSchemaAddAnnotation(xmlSchemaAnnotItemPtr annItem,
 		       xmlSchemaAnnotPtr annot)
 {
-    if ((annItem == NULL) || (annot == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4307]) {
+      if ((annItem == (void *) 0 || annot == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4307\n");
+      else
+        fprintf(stderr, "reached bug index 4307\n");
+    }
+    if ((!FIXREVERTER[4307] && (annItem == (void *) 0 || annot == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     switch (annItem->type) {
 	case XML_SCHEMA_TYPE_ELEMENT: {
 		xmlSchemaElementPtr item = (xmlSchemaElementPtr) annItem;
@@ -8276,12 +10400,27 @@ xmlSchemaParseIDCSelectorAndField(xmlSchemaParserCtxtPtr ctxt,
     * Create the item.
     */
     item = (xmlSchemaIDCSelectPtr) xmlMalloc(sizeof(xmlSchemaIDCSelect));
-    if (item == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4308]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4308\n");
+      else
+        fprintf(stderr, "reached bug index 4308\n");
+    }
+    if ((!FIXREVERTER[4308] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt,
 	    "allocating a 'selector' of an identity-constraint definition",
 	    NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(item, 0, sizeof(xmlSchemaIDCSelect));
     /*
     * Attribute "xpath" (mandatory).
@@ -8392,8 +10531,23 @@ xmlSchemaParseIDC(xmlSchemaParserCtxtPtr ctxt,
     /* Create the component. */
     item = xmlSchemaAddIDC(ctxt, schema, name, targetNamespace,
 	idcCategory, node);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4309]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4309\n");
+      else
+        fprintf(stderr, "reached bug index 4309\n");
+    }
+    if ((!FIXREVERTER[4309] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     xmlSchemaPValAttrID(ctxt, node, BAD_CAST "id");
     if (idcCategory == XML_SCHEMA_TYPE_IDC_KEYREF) {
@@ -8412,8 +10566,23 @@ xmlSchemaParseIDC(xmlSchemaParserCtxtPtr ctxt,
 	    */
 	    item->ref = xmlSchemaNewQNameRef(ctxt, XML_SCHEMA_TYPE_IDC_KEY,
 		NULL, NULL);
-	    if (item->ref == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4310]) {
+	      if ((item -> ref == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4310\n");
+	      else
+	        fprintf(stderr, "reached bug index 4310\n");
+	    }
+	    if ((!FIXREVERTER[4310] && (item -> ref == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    xmlSchemaPValAttrNodeQName(ctxt, schema,
 		NULL, attr,
 		&(item->ref->targetNamespace),
@@ -8507,8 +10676,23 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     /* 3.3.3 Constraints on XML Representations of Element Declarations */
     /* TODO: Complete implementation of 3.3.6 */
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4311]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4311\n");
+      else
+        fprintf(stderr, "reached bug index 4311\n");
+    }
+    if ((!FIXREVERTER[4311] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (isElemRef != NULL)
 	*isElemRef = 0;
@@ -8520,12 +10704,27 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     nameAttr = xmlSchemaGetPropNode(node, "name");
     attr = xmlSchemaGetPropNode(node, "ref");
     if ((topLevel) || (attr == NULL)) {
-	if (nameAttr == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4312]) {
+	  if ((nameAttr == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4312\n");
+	  else
+	    fprintf(stderr, "reached bug index 4312\n");
+	}
+	if ((!FIXREVERTER[4312] && (nameAttr == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPMissingAttrErr(ctxt,
 		XML_SCHEMAP_S4S_ATTR_MISSING,
 		NULL, node, "name", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else
 	isRef = 1;
 
@@ -8547,8 +10746,23 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     max = xmlGetMaxOccurs(ctxt, node, 0, UNBOUNDED, 1, "(xs:nonNegativeInteger | unbounded)");
     xmlSchemaPCheckParticleCorrect_2(ctxt, NULL, node, min, max);
     particle = xmlSchemaAddParticle(ctxt, node, min, max);
-    if (particle == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4313]) {
+      if ((particle == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4313\n");
+      else
+        fprintf(stderr, "reached bug index 4313\n");
+    }
+    if ((!FIXREVERTER[4313] && (particle == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto return_null;
+	#ifdef FRCOV
+	}
+	#endif
 
     /* ret->flags |= XML_SCHEMAS_ELEM_REF; */
 
@@ -8614,8 +10828,23 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	*/
 	refer = xmlSchemaNewQNameRef(ctxt, XML_SCHEMA_TYPE_ELEMENT,
 	    ref, refNs);
-	if (refer == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4314]) {
+	  if ((refer == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4314\n");
+	  else
+	    fprintf(stderr, "reached bug index 4314\n");
+	}
+	if ((!FIXREVERTER[4314] && (refer == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto return_null;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	particle->children = (xmlSchemaTreeItemPtr) refer;
 	particle->annot = annot;
 	/*
@@ -8658,9 +10887,24 @@ declaration_part:
 		ns = ctxt->targetNamespace;
 	}
 	decl = xmlSchemaAddElement(ctxt, name, ns, node, topLevel);
-	if (decl == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4315]) {
+	  if ((decl == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4315\n");
+	  else
+	    fprintf(stderr, "reached bug index 4315\n");
+	}
+	if ((!FIXREVERTER[4315] && (decl == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    goto return_null;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Check for illegal attributes.
 	*/
@@ -8869,10 +11113,40 @@ declaration_part:
 return_null:
     FREE_AND_NULL(des);
     if (annot != NULL) {
-	if (particle != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4316]) {
+	  if ((particle != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 4316\n");
+	  else
+	    fprintf(stderr, "reached bug index 4316\n");
+	}
+	if ((!FIXREVERTER[4316] && (particle != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    particle->annot = NULL;
-	if (decl != NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4317]) {
+	  if ((decl != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 4317\n");
+	  else
+	    fprintf(stderr, "reached bug index 4317\n");
+	}
+	if ((!FIXREVERTER[4317] && (decl != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    decl->annot = NULL;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlSchemaFreeAnnot(annot);
     }
     return (NULL);
@@ -8899,8 +11173,23 @@ xmlSchemaParseUnion(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     const xmlChar *cur = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4318]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4318\n");
+      else
+        fprintf(stderr, "reached bug index 4318\n");
+    }
+    if ((!FIXREVERTER[4318] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     /*
@@ -8960,11 +11249,26 @@ xmlSchemaParseUnion(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 		*/
 		link = (xmlSchemaTypeLinkPtr)
 		    xmlMalloc(sizeof(xmlSchemaTypeLink));
-		if (link == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4319]) {
+		  if ((link == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4319\n");
+		  else
+		    fprintf(stderr, "reached bug index 4319\n");
+		}
+		if ((!FIXREVERTER[4319] && (link == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaPErrMemory(ctxt, "xmlSchemaParseUnion, "
 			"allocating a type link", NULL);
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		link->type = NULL;
 		link->next = NULL;
 		if (lastLink == NULL)
@@ -8977,10 +11281,25 @@ xmlSchemaParseUnion(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 		*/
 		ref = xmlSchemaNewQNameRef(ctxt, XML_SCHEMA_TYPE_SIMPLE,
 		    localName, nsName);
-		if (ref == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4320]) {
+		  if ((ref == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4320\n");
+		  else
+		    fprintf(stderr, "reached bug index 4320\n");
+		}
+		if ((!FIXREVERTER[4320] && (ref == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    FREE_AND_NULL(tmp)
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		/*
 		* Assign the reference to the link, it will be resolved
 		* later during fixup of the union simple type.
@@ -9067,8 +11386,23 @@ xmlSchemaParseList(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4321]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4321\n");
+      else
+        fprintf(stderr, "reached bug index 4321\n");
+    }
+    if ((!FIXREVERTER[4321] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     /*
@@ -9180,8 +11514,23 @@ xmlSchemaParseSimpleType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     int hasRestriction = 0;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4322]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4322\n");
+      else
+        fprintf(stderr, "reached bug index 4322\n");
+    }
+    if ((!FIXREVERTER[4322] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (topLevel) {
 	attr = xmlSchemaGetPropNode(node, "name");
@@ -9244,8 +11593,23 @@ xmlSchemaParseSimpleType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    XML_SCHEMA_TYPE_SIMPLE,
 	    NULL, ctxt->targetNamespace, node, 0);
 #endif
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4323]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4323\n");
+	  else
+	    fprintf(stderr, "reached bug index 4323\n");
+	}
+	if ((!FIXREVERTER[4323] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	type->type = XML_SCHEMA_TYPE_SIMPLE;
 	type->contentType = XML_SCHEMA_CONTENT_SIMPLE;
 	/*
@@ -9272,8 +11636,23 @@ xmlSchemaParseSimpleType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	*/
 	type = xmlSchemaAddType(ctxt, schema, XML_SCHEMA_TYPE_SIMPLE,
 	    attrValue, ctxt->targetNamespace, node, 1);
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4324]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4324\n");
+	  else
+	    fprintf(stderr, "reached bug index 4324\n");
+	}
+	if ((!FIXREVERTER[4324] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	type->type = XML_SCHEMA_TYPE_SIMPLE;
 	type->contentType = XML_SCHEMA_CONTENT_SIMPLE;
 	type->flags |= XML_SCHEMAS_TYPE_GLOBAL;
@@ -9395,8 +11774,23 @@ xmlSchemaParseModelGroupDefRef(xmlSchemaParserCtxtPtr ctxt,
     const xmlChar *ref = NULL, *refNs = NULL;
     int min, max;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4325]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4325\n");
+      else
+        fprintf(stderr, "reached bug index 4325\n");
+    }
+    if ((!FIXREVERTER[4325] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "ref");
     if (attr == NULL) {
@@ -9433,8 +11827,23 @@ xmlSchemaParseModelGroupDefRef(xmlSchemaParserCtxtPtr ctxt,
     }
     xmlSchemaPValAttrID(ctxt, node, BAD_CAST "id");
     item = xmlSchemaAddParticle(ctxt, node, min, max);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4326]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4326\n");
+      else
+        fprintf(stderr, "reached bug index 4326\n");
+    }
+    if ((!FIXREVERTER[4326] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Create a qname-reference and set as the term; it will be substituted
     * for the model group after the reference has been resolved.
@@ -9496,8 +11905,23 @@ xmlSchemaParseModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
     xmlAttrPtr attr;
     const xmlChar *name;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4327]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4327\n");
+      else
+        fprintf(stderr, "reached bug index 4327\n");
+    }
+    if ((!FIXREVERTER[4327] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "name");
     if (attr == NULL) {
@@ -9512,8 +11936,23 @@ xmlSchemaParseModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
     }
     item = xmlSchemaAddModelGroupDefinition(ctxt, schema, name,
 	ctxt->targetNamespace, node);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4328]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4328\n");
+      else
+        fprintf(stderr, "reached bug index 4328\n");
+    }
+    if ((!FIXREVERTER[4328] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Check for illegal attributes.
     */
@@ -9577,7 +12016,22 @@ xmlSchemaCleanupDoc(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr root)
 {
     xmlNodePtr delete, cur;
 
-    if ((ctxt == NULL) || (root == NULL)) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4329]) {
+      if ((ctxt == (void *) 0 || root == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4329\n");
+      else
+        fprintf(stderr, "reached bug index 4329\n");
+    }
+    if ((!FIXREVERTER[4329] && (ctxt == (void *) 0 || root == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Remove all the blank text nodes
@@ -9621,8 +12075,23 @@ xmlSchemaCleanupDoc(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr root)
 
         do {
             cur = cur->parent;
-            if (cur == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4330]) {
+              if ((cur == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 4330\n");
+              else
+                fprintf(stderr, "reached bug index 4330\n");
+            }
+            if ((!FIXREVERTER[4330] && (cur == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
             if (cur == root) {
                 cur = NULL;
                 break;
@@ -9701,10 +12170,25 @@ xmlSchemaParseSchemaElement(xmlSchemaParserCtxtPtr ctxt,
 	res = xmlSchemaPValAttrNode(ctxt, NULL, attr,
 	    xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI), NULL);
 	HFAILURE;
-	if (res != 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4331]) {
+	  if ((res != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4331\n");
+	  else
+	    fprintf(stderr, "reached bug index 4331\n");
+	}
+	if ((!FIXREVERTER[4331] && (res != 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ctxt->stop = XML_SCHEMAP_S4S_ATTR_INVALID_VALUE;
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     attr = xmlSchemaGetPropNode(node, "elementFormDefault");
     if (attr != NULL) {
@@ -9768,8 +12252,23 @@ xmlSchemaParseSchemaElement(xmlSchemaParserCtxtPtr ctxt,
     }
 
 exit:
-    if (oldErrs != ctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4332]) {
+      if ((oldErrs != ctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 4332\n");
+      else
+        fprintf(stderr, "reached bug index 4332\n");
+    }
+    if ((!FIXREVERTER[4332] && (oldErrs != ctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	res = ctxt->err;
+	#ifdef FRCOV
+	}
+	#endif
     return(res);
 exit_failure:
     return(-1);
@@ -9792,8 +12291,23 @@ xmlSchemaParseSchemaTopLevel(xmlSchemaParserCtxtPtr ctxt,
     xmlSchemaAnnotPtr annot;
     int res = 0, oldErrs, tmpOldErrs;
 
-    if ((ctxt == NULL) || (schema == NULL) || (nodes == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4333]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || nodes == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4333\n");
+      else
+        fprintf(stderr, "reached bug index 4333\n");
+    }
+    if ((!FIXREVERTER[4333] && (ctxt == (void *) 0 || schema == (void *) 0 || nodes == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     oldErrs = ctxt->nberrors;
     child = nodes;
@@ -9812,22 +12326,67 @@ xmlSchemaParseSchemaTopLevel(xmlSchemaParserCtxtPtr ctxt,
 	    res = xmlSchemaParseImport(ctxt, schema, child);
 	    HFAILURE;
 	    HSTOP(ctxt);
-	    if (tmpOldErrs != ctxt->nberrors)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4334]) {
+	      if ((tmpOldErrs != ctxt -> nberrors ) && !(0))
+	        fprintf(stderr, "triggered bug index 4334\n");
+	      else
+	        fprintf(stderr, "reached bug index 4334\n");
+	    }
+	    if ((!FIXREVERTER[4334] && (tmpOldErrs != ctxt -> nberrors ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit;
+		#ifdef FRCOV
+		}
+		#endif
 	} else if (IS_SCHEMA(child, "include")) {
 	    tmpOldErrs = ctxt->nberrors;
 	    res = xmlSchemaParseInclude(ctxt, schema, child);
 	    HFAILURE;
 	    HSTOP(ctxt);
-	    if (tmpOldErrs != ctxt->nberrors)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4335]) {
+	      if ((tmpOldErrs != ctxt -> nberrors ) && !(0))
+	        fprintf(stderr, "triggered bug index 4335\n");
+	      else
+	        fprintf(stderr, "reached bug index 4335\n");
+	    }
+	    if ((!FIXREVERTER[4335] && (tmpOldErrs != ctxt -> nberrors ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit;
+		#ifdef FRCOV
+		}
+		#endif
 	} else if (IS_SCHEMA(child, "redefine")) {
 	    tmpOldErrs = ctxt->nberrors;
 	    res = xmlSchemaParseRedefine(ctxt, schema, child);
 	    HFAILURE;
 	    HSTOP(ctxt);
-	    if (tmpOldErrs != ctxt->nberrors)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4336]) {
+	      if ((tmpOldErrs != ctxt -> nberrors ) && !(0))
+	        fprintf(stderr, "triggered bug index 4336\n");
+	      else
+	        fprintf(stderr, "reached bug index 4336\n");
+	    }
+	    if ((!FIXREVERTER[4336] && (tmpOldErrs != ctxt -> nberrors ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	child = child->next;
     }
@@ -9880,8 +12439,23 @@ xmlSchemaParseSchemaTopLevel(xmlSchemaParserCtxtPtr ctxt,
     }
 exit:
     ctxt->ctxtType = NULL;
-    if (oldErrs != ctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4337]) {
+      if ((oldErrs != ctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 4337\n");
+      else
+        fprintf(stderr, "reached bug index 4337\n");
+    }
+    if ((!FIXREVERTER[4337] && (oldErrs != ctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	res = ctxt->err;
+	#ifdef FRCOV
+	}
+	#endif
     return(res);
 exit_failure:
     return(-1);
@@ -9894,10 +12468,25 @@ xmlSchemaSchemaRelationCreate(void)
 
     ret = (xmlSchemaSchemaRelationPtr)
 	xmlMalloc(sizeof(xmlSchemaSchemaRelation));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4338]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4338\n");
+      else
+        fprintf(stderr, "reached bug index 4338\n");
+    }
+    if ((!FIXREVERTER[4338] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL, "allocating schema relation", NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaSchemaRelation));
     return(ret);
 }
@@ -9983,18 +12572,48 @@ xmlSchemaParserCtxtCreate(void)
     xmlSchemaParserCtxtPtr ret;
 
     ret = (xmlSchemaParserCtxtPtr) xmlMalloc(sizeof(xmlSchemaParserCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4342]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4342\n");
+      else
+        fprintf(stderr, "reached bug index 4342\n");
+    }
+    if ((!FIXREVERTER[4342] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(NULL, "allocating schema parser context",
                             NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaParserCtxt));
     ret->type = XML_SCHEMA_CTXT_PARSER;
     ret->attrProhibs = xmlSchemaItemListCreate();
-    if (ret->attrProhibs == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4343]) {
+      if ((ret -> attrProhibs == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4343\n");
+      else
+        fprintf(stderr, "reached bug index 4343\n");
+    }
+    if ((!FIXREVERTER[4343] && (ret -> attrProhibs == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(ret);
 }
 
@@ -10014,12 +12633,42 @@ xmlSchemaNewParserCtxtUseDict(const char *URL, xmlDictPtr dict)
     xmlSchemaParserCtxtPtr ret;
 
     ret = xmlSchemaParserCtxtCreate();
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4344]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4344\n");
+      else
+        fprintf(stderr, "reached bug index 4344\n");
+    }
+    if ((!FIXREVERTER[4344] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret->dict = dict;
     xmlDictReference(dict);
-    if (URL != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4345]) {
+      if ((URL != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4345\n");
+      else
+        fprintf(stderr, "reached bug index 4345\n");
+    }
+    if ((!FIXREVERTER[4345] && (URL != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ret->URL = xmlDictLookup(dict, (const xmlChar *) URL, -1);
+	#ifdef FRCOV
+	}
+	#endif
     return (ret);
 }
 
@@ -10174,15 +12823,60 @@ xmlSchemaParseNewDocWithContext(xmlSchemaParserCtxtPtr pctxt,
     /* Compile the schema doc. */
     node = xmlDocGetRootElement(bucket->doc);
     ret = xmlSchemaParseSchemaElement(pctxt, schema, node);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4347]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4347\n");
+      else
+        fprintf(stderr, "reached bug index 4347\n");
+    }
+    if ((!FIXREVERTER[4347] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit;
+	#ifdef FRCOV
+	}
+	#endif
     /* An empty schema; just get out. */
-    if (node->children == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4348]) {
+      if ((node -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4348\n");
+      else
+        fprintf(stderr, "reached bug index 4348\n");
+    }
+    if ((!FIXREVERTER[4348] && (node -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit;
+	#ifdef FRCOV
+	}
+	#endif
     oldErrs = pctxt->nberrors;
     ret = xmlSchemaParseSchemaTopLevel(pctxt, schema, node->children);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4349]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4349\n");
+      else
+        fprintf(stderr, "reached bug index 4349\n");
+    }
+    if ((!FIXREVERTER[4349] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * TODO: Not nice, but I'm not 100% sure we will get always an error
     * as a result of the obove functions; so better rely on pctxt->err
@@ -10209,28 +12903,88 @@ xmlSchemaParseNewDoc(xmlSchemaParserCtxtPtr pctxt,
     xmlSchemaParserCtxtPtr newpctxt;
     int res = 0;
 
-    if (bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4350]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4350\n");
+      else
+        fprintf(stderr, "reached bug index 4350\n");
+    }
+    if ((!FIXREVERTER[4350] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     if (bucket->parsed) {
 	PERROR_INT("xmlSchemaParseNewDoc",
 	    "reparsing a schema doc");
 	return(-1);
     }
-    if (bucket->doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4351]) {
+      if ((bucket -> doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4351\n");
+      else
+        fprintf(stderr, "reached bug index 4351\n");
+    }
+    if ((!FIXREVERTER[4351] && (bucket -> doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaParseNewDoc",
 	    "parsing a schema doc, but there's no doc");
 	return(-1);
     }
-    if (pctxt->constructor == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4352]) {
+      if ((pctxt -> constructor == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4352\n");
+      else
+        fprintf(stderr, "reached bug index 4352\n");
+    }
+    if ((!FIXREVERTER[4352] && (pctxt -> constructor == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaParseNewDoc",
 	    "no constructor");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /* Create and init the temporary parser context. */
     newpctxt = xmlSchemaNewParserCtxtUseDict(
 	(const char *) bucket->schemaLocation, pctxt->dict);
-    if (newpctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4353]) {
+      if ((newpctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4353\n");
+      else
+        fprintf(stderr, "reached bug index 4353\n");
+    }
+    if ((!FIXREVERTER[4353] && (newpctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     newpctxt->constructor = pctxt->constructor;
     /*
     * TODO: Can we avoid that the parser knows about the main schema?
@@ -10248,8 +13002,23 @@ xmlSchemaParseNewDoc(xmlSchemaParserCtxtPtr pctxt,
     res = xmlSchemaParseNewDocWithContext(newpctxt, schema, bucket);
 
     /* Channel back errors and cleanup the temporary parser context. */
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4354]) {
+      if ((res != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4354\n");
+      else
+        fprintf(stderr, "reached bug index 4354\n");
+    }
+    if ((!FIXREVERTER[4354] && (res != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	pctxt->err = res;
+	#ifdef FRCOV
+	}
+	#endif
     pctxt->nberrors += newpctxt->nberrors;
     pctxt->counter = newpctxt->counter;
     newpctxt->constructor = NULL;
@@ -10264,10 +13033,25 @@ xmlSchemaSchemaRelationAddChild(xmlSchemaBucketPtr bucket,
 {
     xmlSchemaSchemaRelationPtr cur = bucket->relations;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4355]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4355\n");
+      else
+        fprintf(stderr, "reached bug index 4355\n");
+    }
+    if ((!FIXREVERTER[4355] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	bucket->relations = rel;
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (cur->next != NULL)
 	cur = cur->next;
     cur->next = rel;
@@ -10379,8 +13163,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
     * Create a relation for the graph of schemas.
     */
     relation = xmlSchemaSchemaRelationCreate();
-    if (relation == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4356]) {
+      if ((relation == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4356\n");
+      else
+        fprintf(stderr, "reached bug index 4356\n");
+    }
+    if ((!FIXREVERTER[4356] && (relation == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     xmlSchemaSchemaRelationAddChild(pctxt->constructor->bucket,
 	relation);
     relation->type = type;
@@ -10390,7 +13189,19 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
     */
     if (WXS_IS_BUCKET_IMPMAIN(type)) {
 	relation->importNamespace = importNamespace;
-	if (schemaLocation == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4357]) {
+	  if ((schemaLocation == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4357\n");
+	  else
+	    fprintf(stderr, "reached bug index 4357\n");
+	}
+	if ((!FIXREVERTER[4357] && (schemaLocation == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * No location; this is just an import of the namespace.
 	    * Note that we don't assign a bucket to the relation
@@ -10398,6 +13209,9 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 	    */
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	targetNamespace = importNamespace;
     }
 
@@ -10408,8 +13222,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 	    * We included/redefined and then try to import a schema,
 	    * but the new location provided for import was different.
 	    */
-	    if (schemaLocation == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4358]) {
+	      if ((schemaLocation == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4358\n");
+	      else
+	        fprintf(stderr, "reached bug index 4358\n");
+	    }
+	    if ((!FIXREVERTER[4358] && (schemaLocation == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		schemaLocation = BAD_CAST "in_memory_buffer";
+		#ifdef FRCOV
+		}
+		#endif
 	    if (!xmlStrEqual(schemaLocation,
 		bkt->schemaLocation)) {
 		xmlSchemaCustomErr(ACTXT_CAST pctxt, err,
@@ -10425,8 +13254,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 	    * but the new location provided for the include/redefine
 	    * was different.
 	    */
-	    if (schemaLocation == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4359]) {
+	      if ((schemaLocation == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4359\n");
+	      else
+	        fprintf(stderr, "reached bug index 4359\n");
+	    }
+	    if ((!FIXREVERTER[4359] && (schemaLocation == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		schemaLocation = BAD_CAST "in_memory_buffer";
+		#ifdef FRCOV
+		}
+		#endif
 	    if (!xmlStrEqual(schemaLocation,
 		bkt->schemaLocation)) {
 		xmlSchemaCustomErr(ACTXT_CAST pctxt, err,
@@ -10480,8 +13324,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 		    * URGENT TODO: We should report a warning here.
 		    * res = XML_SCHEMAP_SRC_IMPORT;
 		    */
-		    if (schemaLocation == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4360]) {
+		      if ((schemaLocation == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4360\n");
+		      else
+		        fprintf(stderr, "reached bug index 4360\n");
+		    }
+		    if ((!FIXREVERTER[4360] && (schemaLocation == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			schemaLocation = BAD_CAST "in_memory_buffer";
+			#ifdef FRCOV
+			}
+			#endif
 
 		    xmlSchemaCustomWarning(ACTXT_CAST pctxt,
 			XML_SCHEMAP_WARN_SKIP_SCHEMA,
@@ -10569,12 +13428,42 @@ doc_load:
 	xmlParserCtxtPtr parserCtxt;
 
 	parserCtxt = xmlNewParserCtxt();
-	if (parserCtxt == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4361]) {
+	  if ((parserCtxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4361\n");
+	  else
+	    fprintf(stderr, "reached bug index 4361\n");
+	}
+	if ((!FIXREVERTER[4361] && (parserCtxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "xmlSchemaGetDoc, "
 		"allocating a parser context", NULL);
 	    goto exit_failure;
 	}
-	if ((pctxt->dict != NULL) && (parserCtxt->dict != NULL)) {
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4362]) {
+	  fprintf(stderr, "reached bug index 4362\n");
+	}
+	if ((FIXREVERTER[4362] && (pctxt -> dict != (void *) 0 )) || (!FIXREVERTER[4362] && (pctxt -> dict != (void *) 0 && parserCtxt -> dict != (void *) 0 ))
+	#else
+	if (pctxt -> dict != (void *) 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(parserCtxt -> dict != (void *) 0 ))
+	    fprintf(stderr, "triggered bug index 4362\n");
+	  #endif
+	
 	    /*
 	    * TODO: Do we have to burden the schema parser dict with all
 	    * the content of the schema doc?
@@ -10583,6 +13472,9 @@ doc_load:
 	    parserCtxt->dict = pctxt->dict;
 	    xmlDictReference(parserCtxt->dict);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (schemaLocation != NULL) {
 	    /* Parse from file. */
 	    doc = xmlCtxtReadFile(parserCtxt, (const char *) schemaLocation,
@@ -10592,8 +13484,23 @@ doc_load:
 	    doc = xmlCtxtReadMemory(parserCtxt, schemaBuffer, schemaBufferLen,
 		NULL, NULL, SCHEMAS_PARSE_OPTIONS);
 	    schemaLocation = BAD_CAST "in_memory_buffer";
-	    if (doc != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4363]) {
+	      if ((doc != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 4363\n");
+	      else
+	        fprintf(stderr, "reached bug index 4363\n");
+	    }
+	    if ((!FIXREVERTER[4363] && (doc != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		doc->URL = xmlStrdup(schemaLocation);
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	/*
 	* For <import>:
@@ -10649,13 +13556,28 @@ doc_load:
 
 	located = 1;
 	docElem = xmlDocGetRootElement(doc);
-	if (docElem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4364]) {
+	  if ((docElem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4364\n");
+	  else
+	    fprintf(stderr, "reached bug index 4364\n");
+	}
+	if ((!FIXREVERTER[4364] && (docElem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaCustomErr(ACTXT_CAST pctxt, XML_SCHEMAP_NOROOT,
 		invokingNode, NULL,
 		"The document '%s' has no document element",
 		schemaLocation, NULL);
 	    goto exit_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Remove all the blank text nodes.
 	*/
@@ -10683,8 +13605,23 @@ doc_load:
 	/* Only create a bucket if the schema was located. */
         bkt = xmlSchemaBucketCreate(pctxt, type,
 	    targetNamespace);
-	if (bkt == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4365]) {
+	  if ((bkt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4365\n");
+	  else
+	    fprintf(stderr, "reached bug index 4365\n");
+	}
+	if ((!FIXREVERTER[4365] && (bkt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto exit_failure;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     if (bkt != NULL) {
 	bkt->schemaLocation = schemaLocation;
@@ -10701,8 +13638,23 @@ doc_load:
 	    /*
 	    * Add it to the graph of schemas.
 	    */
-	if (relation != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4366]) {
+	  if ((relation != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 4366\n");
+	  else
+	    fprintf(stderr, "reached bug index 4366\n");
+	}
+	if ((!FIXREVERTER[4366] && (relation != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    relation->bucket = bkt;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
 exit:
@@ -10717,16 +13669,46 @@ exit:
 exit_error:
     if ((doc != NULL) && (! preserveDoc)) {
 	xmlFreeDoc(doc);
-	if (bkt != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4367]) {
+	  if ((bkt != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 4367\n");
+	  else
+	    fprintf(stderr, "reached bug index 4367\n");
+	}
+	if ((!FIXREVERTER[4367] && (bkt != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    bkt->doc = NULL;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     return(pctxt->err);
 
 exit_failure:
     if ((doc != NULL) && (! preserveDoc)) {
 	xmlFreeDoc(doc);
-	if (bkt != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4368]) {
+	  if ((bkt != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 4368\n");
+	  else
+	    fprintf(stderr, "reached bug index 4368\n");
+	}
+	if ((!FIXREVERTER[4368] && (bkt != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    bkt->doc = NULL;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     return (-1);
 }
@@ -10754,8 +13736,23 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
     int ret = 0;
     xmlSchemaBucketPtr bucket = NULL;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4369]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4369\n");
+      else
+        fprintf(stderr, "reached bug index 4369\n");
+    }
+    if ((!FIXREVERTER[4369] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
     * Check for illegal attributes.
@@ -10845,7 +13842,19 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 	* 1.2 If the namespace [attribute] is not present, then the enclosing
 	* <schema> must have a targetNamespace [attribute].
 	*/
-	if (thisTargetNamespace == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4370]) {
+	  if ((thisTargetNamespace == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4370\n");
+	  else
+	    fprintf(stderr, "reached bug index 4370\n");
+	}
+	if ((!FIXREVERTER[4370] && (thisTargetNamespace == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPCustomErr(pctxt,
 		XML_SCHEMAP_SRC_IMPORT_1_2,
 		NULL, node,
@@ -10854,19 +13863,52 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 		NULL);
 	    return (pctxt->err);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     /*
     * Locate and acquire the schema document.
     */
-    if (schemaLocation != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4371]) {
+      if ((schemaLocation != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4371\n");
+      else
+        fprintf(stderr, "reached bug index 4371\n");
+    }
+    if ((!FIXREVERTER[4371] && (schemaLocation != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	schemaLocation = xmlSchemaBuildAbsoluteURI(pctxt->dict,
 	    schemaLocation, node);
+	    #ifdef FRCOV
+	    }
+	    #endif
     ret = xmlSchemaAddSchemaDoc(pctxt, XML_SCHEMA_SCHEMA_IMPORT,
 	schemaLocation, NULL, NULL, 0, node, thisTargetNamespace,
 	namespaceName, &bucket);
 
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4372]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4372\n");
+      else
+        fprintf(stderr, "reached bug index 4372\n");
+    }
+    if ((!FIXREVERTER[4372] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(ret);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * For <import>: "It is *not* an error for the application
@@ -10883,9 +13925,27 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 	    "Skipping the import", schemaLocation, NULL, NULL);
     }
 
-    if ((bucket != NULL) && CAN_PARSE_SCHEMA(bucket)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4373]) {
+      fprintf(stderr, "reached bug index 4373\n");
+    }
+    if ((FIXREVERTER[4373] && (bucket != (void *) 0 && bucket -> doc != (void *) 0 )) || (!FIXREVERTER[4373] && (bucket != (void *) 0 && bucket -> doc != (void *) 0 && bucket -> parsed == 0 ))
+    #else
+    if (bucket != (void *) 0 && bucket -> doc != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(bucket -> parsed == 0 ))
+        fprintf(stderr, "triggered bug index 4373\n");
+      #endif
+    
 	ret = xmlSchemaParseNewDoc(pctxt, schema, bucket);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return (ret);
 }
@@ -10899,9 +13959,23 @@ xmlSchemaParseIncludeOrRedefineAttrs(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlAttrPtr attr;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL) ||
-	(schemaLocation == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4374]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || schemaLocation == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4374\n");
+      else
+        fprintf(stderr, "reached bug index 4374\n");
+    }
+    if ((!FIXREVERTER[4374] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || schemaLocation == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     *schemaLocation = NULL;
     /*
@@ -10946,11 +14020,26 @@ xmlSchemaParseIncludeOrRedefineAttrs(xmlSchemaParserCtxtPtr pctxt,
 	    uri = xmlBuildURI(*schemaLocation, base);
 	    xmlFree(base);
 	}
-	if (uri == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4375]) {
+	  if ((uri == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4375\n");
+	  else
+	    fprintf(stderr, "reached bug index 4375\n");
+	}
+	if ((!FIXREVERTER[4375] && (uri == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    PERROR_INT("xmlSchemaParseIncludeOrRedefine",
 		"could not build an URI from the schemaLocation")
 	    goto exit_failure;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	(*schemaLocation) = (xmlChar *) xmlDictLookup(pctxt->dict, uri, -1);
 	xmlFree(uri);
     } else {
@@ -10998,8 +14087,23 @@ xmlSchemaParseIncludeOrRedefine(xmlSchemaParserCtxtPtr pctxt,
     int isChameleon = 0, wasChameleon = 0;
     xmlSchemaBucketPtr bucket = NULL;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4376]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4376\n");
+      else
+        fprintf(stderr, "reached bug index 4376\n");
+    }
+    if ((!FIXREVERTER[4376] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
     * Parse attributes. Note that the returned schemaLocation will
@@ -11007,15 +14111,45 @@ xmlSchemaParseIncludeOrRedefine(xmlSchemaParserCtxtPtr pctxt,
     */
     res = xmlSchemaParseIncludeOrRedefineAttrs(pctxt, schema,
 	node, (xmlChar **) (&schemaLocation), type);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4377]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4377\n");
+      else
+        fprintf(stderr, "reached bug index 4377\n");
+    }
+    if ((!FIXREVERTER[4377] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Load and add the schema document.
     */
     res = xmlSchemaAddSchemaDoc(pctxt, type, schemaLocation, NULL,
 	NULL, 0, node, pctxt->targetNamespace, NULL, &bucket);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4378]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4378\n");
+      else
+        fprintf(stderr, "reached bug index 4378\n");
+    }
+    if ((!FIXREVERTER[4378] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * If we get no schema bucket back, then this means that the schema
     * document could not be located or was broken XML or was not
@@ -11205,8 +14339,23 @@ xmlSchemaParseRedefine(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 #endif
     res = xmlSchemaParseIncludeOrRedefine(pctxt, schema, node,
 	XML_SCHEMA_SCHEMA_REDEFINE);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4379]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4379\n");
+      else
+        fprintf(stderr, "reached bug index 4379\n");
+    }
+    if ((!FIXREVERTER[4379] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 }
 
@@ -11218,8 +14367,23 @@ xmlSchemaParseInclude(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 
     res = xmlSchemaParseIncludeOrRedefine(pctxt, schema, node,
 	XML_SCHEMA_SCHEMA_INCLUDE);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4380]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4380\n");
+      else
+        fprintf(stderr, "reached bug index 4380\n");
+    }
+    if ((!FIXREVERTER[4380] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 }
 
@@ -11259,14 +14423,44 @@ xmlSchemaParseModelGroup(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     int min = 1, max = 1, isElemRef, hasRefs = 0;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4381]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4381\n");
+      else
+        fprintf(stderr, "reached bug index 4381\n");
+    }
+    if ((!FIXREVERTER[4381] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * Create a model group with the given compositor.
     */
     item = xmlSchemaAddModelGroup(ctxt, schema, type, node);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4382]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4382\n");
+      else
+        fprintf(stderr, "reached bug index 4382\n");
+    }
+    if ((!FIXREVERTER[4382] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (withParticle) {
 	if (type == XML_SCHEMA_TYPE_ALL) {
@@ -11283,8 +14477,23 @@ xmlSchemaParseModelGroup(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	* Create a particle
 	*/
 	particle = xmlSchemaAddParticle(ctxt, node, min, max);
-	if (particle == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4383]) {
+	  if ((particle == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4383\n");
+	  else
+	    fprintf(stderr, "reached bug index 4383\n");
+	}
+	if ((!FIXREVERTER[4383] && (particle == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	particle->children = (xmlSchemaTreeItemPtr) item;
 	/*
 	* Check for illegal attributes.
@@ -11522,8 +14731,23 @@ xmlSchemaParseRestriction(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4384]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4384\n");
+      else
+        fprintf(stderr, "reached bug index 4384\n");
+    }
+    if ((!FIXREVERTER[4384] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     type->flags |= XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION;
@@ -11689,8 +14913,23 @@ xmlSchemaParseRestriction(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    */
 	    type->contentTypeDef = (xmlSchemaTypePtr)
 		xmlSchemaParseSimpleType(ctxt, schema, child, 0);
-	    if ( type->contentTypeDef == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4385]) {
+	      if ((type -> contentTypeDef == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4385\n");
+	      else
+	        fprintf(stderr, "reached bug index 4385\n");
+	    }
+	    if ((!FIXREVERTER[4385] && (type -> contentTypeDef == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    child = child->next;
 	}
     }
@@ -11744,11 +14983,26 @@ xmlSchemaParseRestriction(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    do {
 		facetLink = (xmlSchemaFacetLinkPtr)
 		    xmlMalloc(sizeof(xmlSchemaFacetLink));
-		if (facetLink == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4386]) {
+		  if ((facetLink == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4386\n");
+		  else
+		    fprintf(stderr, "reached bug index 4386\n");
+		}
+		if ((!FIXREVERTER[4386] && (facetLink == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaPErrMemory(ctxt, "allocating a facet link", NULL);
 		    xmlFree(facetLink);
 		    return (NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		facetLink->facet = facet;
 		facetLink->next = NULL;
 		if (lastFacetLink == NULL)
@@ -11826,8 +15080,23 @@ xmlSchemaParseExtension(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4387]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4387\n");
+      else
+        fprintf(stderr, "reached bug index 4387\n");
+    }
+    if ((!FIXREVERTER[4387] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     type->flags |= XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION;
@@ -11962,9 +15231,23 @@ xmlSchemaParseSimpleContent(xmlSchemaParserCtxtPtr ctxt,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL) ||
-	(hasRestrictionOrExtension == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4388]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4388\n");
+      else
+        fprintf(stderr, "reached bug index 4388\n");
+    }
+    if ((!FIXREVERTER[4388] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     *hasRestrictionOrExtension = 0;
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
@@ -12052,9 +15335,23 @@ xmlSchemaParseComplexContent(xmlSchemaParserCtxtPtr ctxt,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL) ||
-	(hasRestrictionOrExtension == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4389]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4389\n");
+      else
+        fprintf(stderr, "reached bug index 4389\n");
+    }
+    if ((!FIXREVERTER[4389] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     *hasRestrictionOrExtension = 0;
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
@@ -12153,8 +15450,23 @@ xmlSchemaParseComplexType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     int final = 0, block = 0, hasRestrictionOrExtension = 0;
 
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4390]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4390\n");
+      else
+        fprintf(stderr, "reached bug index 4390\n");
+    }
+    if ((!FIXREVERTER[4390] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ctxtType = ctxt->ctxtType;
 
@@ -12185,8 +15497,23 @@ xmlSchemaParseComplexType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    XML_SCHEMA_TYPE_COMPLEX,
 	    NULL, ctxt->targetNamespace, node, 0);
 #endif
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4391]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4391\n");
+	  else
+	    fprintf(stderr, "reached bug index 4391\n");
+	}
+	if ((!FIXREVERTER[4391] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	name = type->name;
 	type->node = node;
 	type->type = XML_SCHEMA_TYPE_COMPLEX;
@@ -12200,8 +15527,23 @@ xmlSchemaParseComplexType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	type = xmlSchemaAddType(ctxt, schema,
 	    XML_SCHEMA_TYPE_COMPLEX,
 	    name, ctxt->targetNamespace, node, 1);
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4392]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4392\n");
+	  else
+	    fprintf(stderr, "reached bug index 4392\n");
+	}
+	if ((!FIXREVERTER[4392] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	type->node = node;
 	type->type = XML_SCHEMA_TYPE_COMPLEX;
 	type->flags |= XML_SCHEMAS_TYPE_GLOBAL;
@@ -12488,12 +15830,42 @@ xmlSchemaNewParserCtxt(const char *URL)
 {
     xmlSchemaParserCtxtPtr ret;
 
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4393]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4393\n");
+      else
+        fprintf(stderr, "reached bug index 4393\n");
+    }
+    if ((!FIXREVERTER[4393] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = xmlSchemaParserCtxtCreate();
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4394]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4394\n");
+      else
+        fprintf(stderr, "reached bug index 4394\n");
+    }
+    if ((!FIXREVERTER[4394] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ret->dict = xmlDictCreate();
     ret->URL = xmlDictLookup(ret->dict, (const xmlChar *) URL, -1);
     return (ret);
@@ -12561,8 +15933,23 @@ xmlSchemaNewDocParserCtxt(xmlDocPtr doc)
 void
 xmlSchemaFreeParserCtxt(xmlSchemaParserCtxtPtr ctxt)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4399]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4399\n");
+      else
+        fprintf(stderr, "reached bug index 4399\n");
+    }
+    if ((!FIXREVERTER[4399] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->doc != NULL && !ctxt->preserve)
         xmlFreeDoc(ctxt->doc);
     if (ctxt->vctxt != NULL) {
@@ -12605,10 +15992,37 @@ xmlSchemaBuildContentModelForSubstGroup(xmlSchemaParserCtxtPtr pctxt,
     * Wrap the substitution group with a CHOICE.
     */
     start = pctxt->state;
-    if (end == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4400]) {
+      if ((end == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4400\n");
+      else
+        fprintf(stderr, "reached bug index 4400\n");
+    }
+    if ((!FIXREVERTER[4400] && (end == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	end = xmlAutomataNewState(pctxt->am);
+	#ifdef FRCOV
+	}
+	#endif
     substGroup = xmlSchemaSubstGroupGet(pctxt, elemDecl);
-    if (substGroup == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4401]) {
+      if ((substGroup == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4401\n");
+      else
+        fprintf(stderr, "reached bug index 4401\n");
+    }
+    if ((!FIXREVERTER[4401] && (substGroup == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErr(pctxt, WXS_ITEM_NODE(particle),
 	    XML_SCHEMAP_INTERNAL,
 	    "Internal error: xmlSchemaBuildContentModelForSubstGroup, "
@@ -12616,6 +16030,9 @@ xmlSchemaBuildContentModelForSubstGroup(xmlSchemaParserCtxtPtr pctxt,
 	    "available.\n", elemDecl->name, NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (counter >= 0) {
 	/*
 	* NOTE that we put the declaration in, even if it's abstract.
@@ -12778,17 +16195,47 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
 {
     int ret = 0, tmp2;
 
-    if (particle == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4402]) {
+      if ((particle == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4402\n");
+      else
+        fprintf(stderr, "reached bug index 4402\n");
+    }
+    if ((!FIXREVERTER[4402] && (particle == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaBuildAContentModel", "particle is NULL");
 	return(1);
     }
-    if (particle->children == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4403]) {
+      if ((particle -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4403\n");
+      else
+        fprintf(stderr, "reached bug index 4403\n");
+    }
+    if ((!FIXREVERTER[4403] && (particle -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Just return in this case. A missing "term" of the particle
 	* might arise due to an invalid "term" component.
 	*/
 	return(1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     switch (particle->children->type) {
 	case XML_SCHEMA_TYPE_ANY: {
@@ -12891,7 +16338,22 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
              * If max and min occurances are default (1) then
              * simply iterate over the particles of the <sequence>.
              */
-            if ((particle->minOccurs == 1) && (particle->maxOccurs == 1)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4409]) {
+              fprintf(stderr, "reached bug index 4409\n");
+            }
+            if ((FIXREVERTER[4409] && (particle -> minOccurs == 1 )) || (!FIXREVERTER[4409] && (particle -> minOccurs == 1 && particle -> maxOccurs == 1 ))
+            #else
+            if (particle -> minOccurs == 1 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(particle -> maxOccurs == 1 ))
+                fprintf(stderr, "triggered bug index 4409\n");
+              #endif
+            
                 sub = particle->children->children;
 
                 while (sub != NULL) {
@@ -13014,6 +16476,9 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                     }
                 }
             }
+            #ifdef FRCOV
+            }
+            #endif
             break;
         }
         case XML_SCHEMA_TYPE_CHOICE:{
@@ -13085,8 +16550,23 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
             ret = 1;
 
             sub = (xmlSchemaParticlePtr) particle->children->children;
-            if (sub == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4412]) {
+              if ((sub == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 4412\n");
+              else
+                fprintf(stderr, "reached bug index 4412\n");
+            }
+            if ((!FIXREVERTER[4412] && (sub == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
 
             ret = 0;
 
@@ -13098,11 +16578,26 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                 pctxt->state = tmp;
 
                 elemDecl = (xmlSchemaElementPtr) sub->children;
-                if (elemDecl == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[4413]) {
+                  if ((elemDecl == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 4413\n");
+                  else
+                    fprintf(stderr, "reached bug index 4413\n");
+                }
+                if ((!FIXREVERTER[4413] && (elemDecl == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     PERROR_INT("xmlSchemaBuildAContentModel",
                         "<element> particle has no term");
                     return(ret);
                 };
+                #ifdef FRCOV
+                }
+                #endif
                 /*
                 * NOTE: The {max occurs} of all the particles in the
                 * {particles} of the group must be 0 or 1; this is
@@ -13129,8 +16624,22 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                                                 elemDecl->name,
                                                 elemDecl->targetNamespace,
                                                 1, 1, elemDecl);
-                    } else if ((sub->minOccurs == 0) &&
-                        (sub->maxOccurs == 1)) {
+                    } else 
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[4414]) {
+                      fprintf(stderr, "reached bug index 4414\n");
+                    }
+                    if ((FIXREVERTER[4414] && (sub -> minOccurs == 0 )) || (!FIXREVERTER[4414] && (sub -> minOccurs == 0 && sub -> maxOccurs == 1 ))
+                    #else
+                    if (sub -> minOccurs == 0 
+                    #endif
+                    ) {
+                          
+                        #ifdef FRCOV
+                          if (!(sub -> maxOccurs == 1 ))
+                            fprintf(stderr, "triggered bug index 4414\n");
+                          #endif
+                        
 
                         xmlAutomataNewCountTrans2(pctxt->am, pctxt->state,
                                                  pctxt->state,
@@ -13140,6 +16649,9 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                                                  1,
                                                  elemDecl);
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 sub = (xmlSchemaParticlePtr) sub->next;
             }
@@ -13195,11 +16707,26 @@ xmlSchemaBuildContentModel(xmlSchemaTypePtr type,
 #endif
     ctxt->am = NULL;
     ctxt->am = xmlNewAutomata();
-    if (ctxt->am == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4415]) {
+      if ((ctxt -> am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4415\n");
+      else
+        fprintf(stderr, "reached bug index 4415\n");
+    }
+    if ((!FIXREVERTER[4415] && (ctxt -> am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlGenericError(xmlGenericErrorContext,
 	    "Cannot create automata for complex type %s\n", type->name);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->state = xmlAutomataGetInitState(ctxt->am);
     /*
     * Build the automaton.
@@ -13294,8 +16821,23 @@ xmlSchemaResolveElementReferences(xmlSchemaElementPtr elemDecl,
 	    * declaration `resolved` to by the `actual value`
 	    * of the substitutionGroup [attribute], if present"
 	    */
-	    if (elemDecl->subtypes == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4416]) {
+	      if ((elemDecl -> subtypes == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 4416\n");
+	      else
+	        fprintf(stderr, "reached bug index 4416\n");
+	    }
+	    if ((!FIXREVERTER[4416] && (elemDecl -> subtypes == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		elemDecl->subtypes = substHead->subtypes;
+		#ifdef FRCOV
+		}
+		#endif
 	}
     }
     /*
@@ -13372,10 +16914,25 @@ xmlSchemaResolveUnionMemberTypes(xmlSchemaParserCtxtPtr ctxt,
     memberType = type->subtypes;
     while (memberType != NULL) {
 	link = (xmlSchemaTypeLinkPtr) xmlMalloc(sizeof(xmlSchemaTypeLink));
-	if (link == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4417]) {
+	  if ((link == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4417\n");
+	  else
+	    fprintf(stderr, "reached bug index 4417\n");
+	}
+	if ((!FIXREVERTER[4417] && (link == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(ctxt, "allocating a type link", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	link->type = memberType;
 	link->next = NULL;
 	if (lastLink == NULL)
@@ -13401,16 +16958,60 @@ xmlSchemaResolveUnionMemberTypes(xmlSchemaParserCtxtPtr ctxt,
 static int
 xmlSchemaIsDerivedFromBuiltInType(xmlSchemaTypePtr type, int valType)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4418]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4418\n");
+      else
+        fprintf(stderr, "reached bug index 4418\n");
+    }
+    if ((!FIXREVERTER[4418] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     if (WXS_IS_COMPLEX(type))
 	return (0);
     if (type->type == XML_SCHEMA_TYPE_BASIC) {
-	if (type->builtInType == valType)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4419]) {
+	  if ((type -> builtInType == valType ) && !(0))
+	    fprintf(stderr, "triggered bug index 4419\n");
+	  else
+	    fprintf(stderr, "reached bug index 4419\n");
+	}
+	if ((!FIXREVERTER[4419] && (type -> builtInType == valType ))
+	#else
+	if (0
+	#endif
+	)
 	    return(1);
-	if ((type->builtInType == XML_SCHEMAS_ANYSIMPLETYPE) ||
-	    (type->builtInType == XML_SCHEMAS_ANYTYPE))
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4420]) {
+	  if ((type -> builtInType == XML_SCHEMAS_ANYSIMPLETYPE || type -> builtInType == XML_SCHEMAS_ANYTYPE ) && !(0))
+	    fprintf(stderr, "triggered bug index 4420\n");
+	  else
+	    fprintf(stderr, "reached bug index 4420\n");
+	}
+	if ((!FIXREVERTER[4420] && (type -> builtInType == XML_SCHEMAS_ANYSIMPLETYPE || type -> builtInType == XML_SCHEMAS_ANYTYPE ))
+	#else
+	if (0
+	#endif
+	)
 	    return (0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return(xmlSchemaIsDerivedFromBuiltInType(type->subtypes, valType));
     }
     return(xmlSchemaIsDerivedFromBuiltInType(type->subtypes, valType));
@@ -13522,15 +17123,45 @@ xmlSchemaCloneWildcardNsConstraints(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaWildcardNsPtr cur, tmp, last;
 
-    if ((source == NULL) || (dest == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4421]) {
+      if ((source == (void *) 0 || dest == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4421\n");
+      else
+        fprintf(stderr, "reached bug index 4421\n");
+    }
+    if ((!FIXREVERTER[4421] && (source == (void *) 0 || dest == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     dest->any = source->any;
     cur = source->nsSet;
     last = NULL;
     while (cur != NULL) {
 	tmp = xmlSchemaNewWildcardNsConstraint(ctxt);
-	if (tmp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4422]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4422\n");
+	  else
+	    fprintf(stderr, "reached bug index 4422\n");
+	}
+	if ((!FIXREVERTER[4422] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	tmp->value = cur->value;
 	if (last == NULL)
 	    dest->nsSet = tmp;
@@ -13543,8 +17174,23 @@ xmlSchemaCloneWildcardNsConstraints(xmlSchemaParserCtxtPtr ctxt,
 	xmlSchemaFreeWildcardNsSet(dest->negNsSet);
     if (source->negNsSet != NULL) {
 	dest->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-	if (dest->negNsSet == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4423]) {
+	  if ((dest -> negNsSet == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4423\n");
+	  else
+	    fprintf(stderr, "reached bug index 4423\n");
+	}
+	if ((!FIXREVERTER[4423] && (dest -> negNsSet == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	dest->negNsSet->value = source->negNsSet->value;
     } else
 	dest->negNsSet = NULL;
@@ -13610,7 +17256,19 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
     /*
     * 2 If either O1 or O2 is any, then any must be the value
     */
-    if (completeWild->any != curWild->any) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4424]) {
+      if ((completeWild -> any != curWild -> any ) && !(0))
+        fprintf(stderr, "triggered bug index 4424\n");
+      else
+        fprintf(stderr, "reached bug index 4424\n");
+    }
+    if ((!FIXREVERTER[4424] && (completeWild -> any != curWild -> any ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (completeWild->any == 0) {
 	    completeWild->any = 1;
 	    if (completeWild->nsSet != NULL) {
@@ -13624,6 +17282,9 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 	}
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * 3 If both O1 and O2 are sets of (namespace names or `absent`),
     * then the union of those sets must be the value.
@@ -13646,8 +17307,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 	    }
 	    if (!found) {
 		tmp = xmlSchemaNewWildcardNsConstraint(ctxt);
-		if (tmp == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4425]) {
+		  if ((tmp == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4425\n");
+		  else
+		    fprintf(stderr, "reached bug index 4425\n");
+		}
+		if ((!FIXREVERTER[4425] && (tmp == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (-1);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		tmp->value = cur->value;
 		tmp->next = completeWild->nsSet;
 		completeWild->nsSet = tmp;
@@ -13724,8 +17400,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 	    }
 	    if (completeWild->negNsSet == NULL) {
 		completeWild->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-		if (completeWild->negNsSet == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4427]) {
+		  if ((completeWild -> negNsSet == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4427\n");
+		  else
+		    fprintf(stderr, "reached bug index 4427\n");
+		}
+		if ((!FIXREVERTER[4427] && (completeWild -> negNsSet == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (-1);
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	    completeWild->negNsSet->value = NULL;
 	} else if ((!nsFound) && absentFound) {
@@ -13750,8 +17441,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 		    completeWild->nsSet = NULL;
 		}
 		completeWild->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-		if (completeWild->negNsSet == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4428]) {
+		  if ((completeWild -> negNsSet == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4428\n");
+		  else
+		    fprintf(stderr, "reached bug index 4428\n");
+		}
+		if ((!FIXREVERTER[4428] && (completeWild -> negNsSet == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (-1);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		completeWild->negNsSet->value = curWild->negNsSet->value;
 	    }
 	}
@@ -13801,8 +17507,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 		completeWild->nsSet = NULL;
 	    }
 	    completeWild->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-	    if (completeWild->negNsSet == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4429]) {
+	      if ((completeWild -> negNsSet == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4429\n");
+	      else
+	        fprintf(stderr, "reached bug index 4429\n");
+	    }
+	    if ((!FIXREVERTER[4429] && (completeWild -> negNsSet == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (-1);
+		#ifdef FRCOV
+		}
+		#endif
 	    completeWild->negNsSet->value = NULL;
 	}
 	return (0);
@@ -13897,7 +17618,19 @@ xmlSchemaIntersectWildcards(xmlSchemaParserCtxtPtr ctxt,
 	prev = NULL;
 	cur = completeWild->nsSet;
 	while (cur != NULL) {
-	    if (cur->value == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4430]) {
+	      if ((cur -> value == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4430\n");
+	      else
+	        fprintf(stderr, "reached bug index 4430\n");
+	    }
+	    if ((!FIXREVERTER[4430] && (cur -> value == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if (prev == NULL)
 		    completeWild->nsSet = cur->next;
 		else
@@ -13905,6 +17638,9 @@ xmlSchemaIntersectWildcards(xmlSchemaParserCtxtPtr ctxt,
 		xmlFree(cur);
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    prev = cur;
 	    cur = cur->next;
 	}
@@ -14107,8 +17843,23 @@ static int
 xmlSchemaCheckCVCWildcardNamespace(xmlSchemaWildcardPtr wild,
 				   const xmlChar* ns)
 {
-    if (wild == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4431]) {
+      if ((wild == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4431\n");
+      else
+        fprintf(stderr, "reached bug index 4431\n");
+    }
+    if ((!FIXREVERTER[4431] && (wild == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (wild->any)
 	return(0);
@@ -14164,8 +17915,23 @@ xmlSchemaCheckDerivationOKRestriction2to4(xmlSchemaParserCtxtPtr pctxt,
 	for (i = 0; i < uses->nbItems; i++) {
 	    cur = uses->items[i];
 	    found = 0;
-	    if (baseUses == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4432]) {
+	      if ((baseUses == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4432\n");
+	      else
+	        fprintf(stderr, "reached bug index 4432\n");
+	    }
+	    if ((!FIXREVERTER[4432] && (baseUses == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto not_found;
+		#ifdef FRCOV
+		}
+		#endif
 	    for (j = 0; j < baseUses->nbItems; j++) {
 		bcur = baseUses->items[j];
 		if ((WXS_ATTRUSE_DECL_NAME(cur) ==
@@ -14246,8 +18012,22 @@ xmlSchemaCheckDerivationOKRestriction2to4(xmlSchemaParserCtxtPtr pctxt,
 			* 2.1.3.1 B's `effective value constraint` is
 			* `absent` or default.
 			*/
-			if ((bEffValue != NULL) &&
-			    (effFixed == 1)) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[4433]) {
+			  fprintf(stderr, "reached bug index 4433\n");
+			}
+			if ((FIXREVERTER[4433] && (bEffValue != (void *) 0 )) || (!FIXREVERTER[4433] && (bEffValue != (void *) 0 && effFixed == 1 ))
+			#else
+			if (bEffValue != (void *) 0 
+			#endif
+			) {
+			      
+			    #ifdef FRCOV
+			      if (!(effFixed == 1 ))
+			        fprintf(stderr, "triggered bug index 4433\n");
+			      #endif
+			    
 			    const xmlChar *rEffValue = NULL;
 
 			    xmlSchemaGetEffectiveValueConstraint(bcur,
@@ -14278,6 +18058,9 @@ xmlSchemaCheckDerivationOKRestriction2to4(xmlSchemaParserCtxtPtr pctxt,
 				/* err = pctxt->err; */
 			    }
 			}
+			#ifdef FRCOV
+			}
+			#endif
 		    }
 		    break;
 		}
@@ -14322,8 +18105,23 @@ not_found:
     if (baseUses != NULL) {
 	for (j = 0; j < baseUses->nbItems; j++) {
 	    bcur = baseUses->items[j];
-	    if (bcur->occurs != XML_SCHEMAS_ATTR_USE_REQUIRED)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4434]) {
+	      if ((bcur -> occurs != 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4434\n");
+	      else
+	        fprintf(stderr, "reached bug index 4434\n");
+	    }
+	    if ((!FIXREVERTER[4434] && (bcur -> occurs != 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    found = 0;
 	    if (uses != NULL) {
 		for (i = 0; i < uses->nbItems; i++) {
@@ -14456,11 +18254,26 @@ xmlSchemaFixupTypeAttributeUses(xmlSchemaParserCtxtPtr pctxt,
     xmlSchemaAttributeUsePtr use;
     xmlSchemaItemListPtr uses, baseUses, prohibs = NULL;
 
-    if (type->baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4435]) {
+      if ((type -> baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4435\n");
+      else
+        fprintf(stderr, "reached bug index 4435\n");
+    }
+    if ((!FIXREVERTER[4435] && (type -> baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaFixupTypeAttributeUses",
 	    "no base type");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     baseType = type->baseType;
     if (WXS_IS_TYPE_NOT_FIXED(baseType))
 	if (xmlSchemaTypeFixup(baseType, ACTXT_CAST pctxt) == -1)
@@ -14548,8 +18361,23 @@ xmlSchemaFixupTypeAttributeUses(xmlSchemaParserCtxtPtr pctxt,
 		}
 		if (uses == NULL) {
 		    type->attrUses = xmlSchemaItemListCreate();
-		    if (type->attrUses == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4436]) {
+		      if ((type -> attrUses == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4436\n");
+		      else
+		        fprintf(stderr, "reached bug index 4436\n");
+		    }
+		    if ((!FIXREVERTER[4436] && (type -> attrUses == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    uses = type->attrUses;
 		}
 		xmlSchemaItemListAddSize(uses, 2, use);
@@ -14561,8 +18389,23 @@ inherit_next: {}
 		use = baseUses->items[i];
 		if (uses == NULL) {
 		    type->attrUses = xmlSchemaItemListCreate();
-		    if (type->attrUses == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4437]) {
+		      if ((type -> attrUses == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4437\n");
+		      else
+		        fprintf(stderr, "reached bug index 4437\n");
+		    }
+		    if ((!FIXREVERTER[4437] && (type -> attrUses == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    uses = type->attrUses;
 		}
 		xmlSchemaItemListAddSize(uses, baseUses->nbItems, use);
@@ -14649,8 +18492,23 @@ exit_failure:
 static int
 xmlSchemaTypeFinalContains(xmlSchemaTypePtr type, int final)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4438]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4438\n");
+      else
+        fprintf(stderr, "reached bug index 4438\n");
+    }
+    if ((!FIXREVERTER[4438] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     if (type->flags & final)
 	return (1);
     else
@@ -14688,16 +18546,45 @@ xmlSchemaGetUnionSimpleTypeMemberTypes(xmlSchemaTypePtr type)
 static int
 xmlSchemaGetParticleTotalRangeMin(xmlSchemaParticlePtr particle)
 {
-    if ((particle->children == NULL) ||
-	(particle->minOccurs == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4439]) {
+      if ((particle -> children == (void *) 0 || particle -> minOccurs == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4439\n");
+      else
+        fprintf(stderr, "reached bug index 4439\n");
+    }
+    if ((!FIXREVERTER[4439] && (particle -> children == (void *) 0 || particle -> minOccurs == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     if (particle->children->type == XML_SCHEMA_TYPE_CHOICE) {
 	int min = -1, cur;
 	xmlSchemaParticlePtr part =
 	    (xmlSchemaParticlePtr) particle->children->children;
 
-	if (part == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4440]) {
+	  if ((part == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4440\n");
+	  else
+	    fprintf(stderr, "reached bug index 4440\n");
+	}
+	if ((!FIXREVERTER[4440] && (part == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	while (part != NULL) {
 	    if ((part->children->type == XML_SCHEMA_TYPE_ELEMENT) ||
 		(part->children->type == XML_SCHEMA_TYPE_ANY))
@@ -14717,8 +18604,23 @@ xmlSchemaGetParticleTotalRangeMin(xmlSchemaParticlePtr particle)
 	xmlSchemaParticlePtr part =
 	    (xmlSchemaParticlePtr) particle->children->children;
 
-	if (part == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4442]) {
+	  if ((part == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4442\n");
+	  else
+	    fprintf(stderr, "reached bug index 4442\n");
+	}
+	if ((!FIXREVERTER[4442] && (part == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	do {
 	    if ((part->children->type == XML_SCHEMA_TYPE_ELEMENT) ||
 		(part->children->type == XML_SCHEMA_TYPE_ANY))
@@ -14808,9 +18710,23 @@ xmlSchemaIsParticleEmptiable(xmlSchemaParticlePtr particle)
     /*
     * SPEC (1) "Its {min occurs} is 0."
     */
-    if ((particle == NULL) || (particle->minOccurs == 0) ||
-	(particle->children == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4443]) {
+      if ((particle == (void *) 0 || particle -> minOccurs == 0 || particle -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4443\n");
+      else
+        fprintf(stderr, "reached bug index 4443\n");
+    }
+    if ((!FIXREVERTER[4443] && (particle == (void *) 0 || particle -> minOccurs == 0 || particle -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (1);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * SPEC (2) "Its {term} is a group and the minimum part of the
     * effective total range of that group, [...] is 0."
@@ -15061,8 +18977,23 @@ static void
 xmlSchemaResolveTypeReferences(xmlSchemaTypePtr typeDef,
 			 xmlSchemaParserCtxtPtr ctxt)
 {
-    if (typeDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4445]) {
+      if ((typeDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4445\n");
+      else
+        fprintf(stderr, "reached bug index 4445\n");
+    }
+    if ((!FIXREVERTER[4445] && (typeDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Resolve the base type.
@@ -15070,7 +19001,19 @@ xmlSchemaResolveTypeReferences(xmlSchemaTypePtr typeDef,
     if (typeDef->baseType == NULL) {
 	typeDef->baseType = xmlSchemaGetType(ctxt->schema,
 	    typeDef->base, typeDef->baseNs);
-	if (typeDef->baseType == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4446]) {
+	  if ((typeDef -> baseType == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4446\n");
+	  else
+	    fprintf(stderr, "reached bug index 4446\n");
+	}
+	if ((!FIXREVERTER[4446] && (typeDef -> baseType == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPResCompAttrErr(ctxt,
 		XML_SCHEMAP_SRC_RESOLVE,
 		WXS_BASIC_CAST typeDef, typeDef->node,
@@ -15078,6 +19021,9 @@ xmlSchemaResolveTypeReferences(xmlSchemaTypePtr typeDef,
 		XML_SCHEMA_TYPE_SIMPLE, NULL);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     if (WXS_IS_SIMPLE(typeDef)) {
 	if (WXS_IS_UNION(typeDef)) {
@@ -15204,7 +19150,19 @@ xmlSchemaCheckSTPropsCorrect(xmlSchemaParserCtxtPtr ctxt,
     * then the Simple Type Definition component from which it is `derived`,
     * otherwise the Simple Type Definition for anySimpleType ($4.1.6).
     */
-    if (baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4447]) {
+      if ((baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4447\n");
+      else
+        fprintf(stderr, "reached bug index 4447\n");
+    }
+    if ((!FIXREVERTER[4447] && (baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* TODO: Think about: "modulo the impact of Missing
 	* Sub-components ($5.3)."
@@ -15216,6 +19174,9 @@ xmlSchemaCheckSTPropsCorrect(xmlSchemaParserCtxtPtr ctxt,
 	return (XML_SCHEMAP_ST_PROPS_CORRECT_1);
 
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (! WXS_IS_SIMPLE(baseType)) {
 	xmlSchemaPCustomErr(ctxt,
 	    XML_SCHEMAP_ST_PROPS_CORRECT_1,
@@ -15343,11 +19304,26 @@ xmlSchemaCheckCOSSTRestricts(xmlSchemaParserCtxtPtr pctxt,
 	    int ok = 1;
 
 	    primitive = xmlSchemaGetPrimitiveType(type);
-	    if (primitive == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4448]) {
+	      if ((primitive == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4448\n");
+	      else
+	        fprintf(stderr, "reached bug index 4448\n");
+	    }
+	    if ((!FIXREVERTER[4448] && (primitive == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		PERROR_INT("xmlSchemaCheckCOSSTRestricts",
 		    "failed to get primitive type");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    facet = type->facets;
 	    do {
 		if (xmlSchemaIsBuiltInTypeFacet(primitive, facet->type) == 0) {
@@ -15705,8 +19681,23 @@ xmlSchemaCheckCOSSTRestricts(xmlSchemaParserCtxtPtr pctxt,
 			    return (XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3);
 			}
 			member = member->next;
-                        if (baseMember != NULL)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[4451]) {
+                          if ((baseMember != (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 4451\n");
+                          else
+                            fprintf(stderr, "reached bug index 4451\n");
+                        }
+                        if ((!FIXREVERTER[4451] && (baseMember != (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             baseMember = baseMember->next;
+                            #ifdef FRCOV
+                            }
+                            #endif
 		    }
 		}
 	    }
@@ -15797,7 +19788,19 @@ xmlSchemaCreateVCtxtOnPCtxt(xmlSchemaParserCtxtPtr ctxt)
 {
    if (ctxt->vctxt == NULL) {
 	ctxt->vctxt = xmlSchemaNewValidCtxt(NULL);
-	if (ctxt->vctxt == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4453]) {
+	  if ((ctxt -> vctxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4453\n");
+	  else
+	    fprintf(stderr, "reached bug index 4453\n");
+	}
+	if ((!FIXREVERTER[4453] && (ctxt -> vctxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErr(ctxt, NULL,
 		XML_SCHEMAP_INTERNAL,
 		"Internal error: xmlSchemaCreateVCtxtOnPCtxt, "
@@ -15805,6 +19808,9 @@ xmlSchemaCreateVCtxtOnPCtxt(xmlSchemaParserCtxtPtr ctxt)
 		NULL, NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/* TODO: Pass user data. */
 	xmlSchemaSetValidErrors(ctxt->vctxt,
 	    ctxt->error, ctxt->warning, ctxt->errCtxt);
@@ -16314,7 +20320,19 @@ xmlSchemaCheckCOSCTExtends(xmlSchemaParserCtxtPtr ctxt,
 	    /*
 	    * SPEC (1.4.3) "All of the following must be true:"
 	    */
-	    if (type->subtypes == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4455]) {
+	      if ((type -> subtypes == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4455\n");
+	      else
+	        fprintf(stderr, "reached bug index 4455\n");
+	    }
+	    if ((!FIXREVERTER[4455] && (type -> subtypes == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/*
 		* SPEC 1.4.3.1 The {content type} of the complex type
 		* definition itself must specify a particle.
@@ -16325,6 +20343,9 @@ xmlSchemaCheckCOSCTExtends(xmlSchemaParserCtxtPtr ctxt,
 		    "The content type must specify a particle", NULL);
 		return (XML_SCHEMAP_COS_CT_EXTENDS_1_1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * SPEC (1.4.3.2) "One of the following must be true:"
 	    */
@@ -16708,7 +20729,19 @@ xmlSchemaCheckSRCCT(xmlSchemaParserCtxtPtr ctxt,
 		* simple type definition;
 		* PASS
 		*/
-		if (base->contentTypeDef == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4457]) {
+		  if ((base -> contentTypeDef == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4457\n");
+		  else
+		    fprintf(stderr, "reached bug index 4457\n");
+		}
+		if ((!FIXREVERTER[4457] && (base -> contentTypeDef == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaPCustomErr(ctxt, XML_SCHEMAP_INTERNAL,
 			WXS_BASIC_CAST type, NULL,
 			"Internal error: xmlSchemaCheckSRCCT, "
@@ -16716,6 +20749,9 @@ xmlSchemaCheckSRCCT(xmlSchemaParserCtxtPtr ctxt,
 			type->name);
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    } else if ((base->contentType == XML_SCHEMA_CONTENT_MIXED) &&
 		(WXS_IS_RESTRICTION(type))) {
 
@@ -17224,8 +21260,23 @@ xmlSchemaDeriveFacetErr(xmlSchemaParserCtxtPtr pctxt,
     msg = xmlStrdup(BAD_CAST "'");
     msg = xmlStrcat(msg, xmlSchemaFacetTypeToString(facet1->type));
     msg = xmlStrcat(msg, BAD_CAST "' has to be");
-    if (lessGreater == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4458]) {
+      if ((lessGreater == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4458\n");
+      else
+        fprintf(stderr, "reached bug index 4458\n");
+    }
+    if ((!FIXREVERTER[4458] && (lessGreater == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	msg = xmlStrcat(msg, BAD_CAST " equal to");
+	#ifdef FRCOV
+	}
+	#endif
     if (lessGreater == 1)
 	msg = xmlStrcat(msg, BAD_CAST " greater than");
     else
@@ -17771,11 +21822,26 @@ xmlSchemaDeriveAndValidateFacets(xmlSchemaParserCtxtPtr pctxt,
 	if (link == NULL) {
 	    link = (xmlSchemaFacetLinkPtr)
 		xmlMalloc(sizeof(xmlSchemaFacetLink));
-	    if (link == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4459]) {
+	      if ((link == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4459\n");
+	      else
+	        fprintf(stderr, "reached bug index 4459\n");
+	    }
+	    if ((!FIXREVERTER[4459] && (link == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaPErrMemory(pctxt,
 		    "deriving facets, creating a facet link", NULL);
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    link->facet = cur->facet;
 	    link->next = NULL;
 	    if (last == NULL)
@@ -17825,11 +21891,26 @@ xmlSchemaFinishMemberTypeDefinitionsProperty(xmlSchemaParserCtxtPtr pctxt,
 		    while (subLink != NULL) {
 			newLink = (xmlSchemaTypeLinkPtr)
 			    xmlMalloc(sizeof(xmlSchemaTypeLink));
-			if (newLink == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[4460]) {
+			  if ((newLink == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 4460\n");
+			  else
+			    fprintf(stderr, "reached bug index 4460\n");
+			}
+			if ((!FIXREVERTER[4460] && (newLink == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    xmlSchemaPErrMemory(pctxt, "allocating a type link",
 				NULL);
 			    return (-1);
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			newLink->type = subLink->type;
 			prevLink->next = newLink;
 			prevLink = newLink;
@@ -17942,9 +22023,22 @@ xmlSchemaTypeFixupWhitespace(xmlSchemaTypePtr type)
     {
 	xmlSchemaTypePtr anc;
 
-	for (anc = type->baseType; anc != NULL &&
-		anc->builtInType != XML_SCHEMAS_ANYTYPE;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4462])
+	  fprintf(stderr, "reached bug index 4462\n");
+	for (anc = type->baseType; (FIXREVERTER[4462] && (anc != (void *) 0 )) || (!FIXREVERTER[4462] && (anc != (void *) 0 && anc -> builtInType != XML_SCHEMAS_ANYTYPE ))
+	#else
+	for (anc = type->baseType; anc != (void *) 0 
+	#endif
+	;
 		anc = anc->baseType) {
+		  
+		#ifdef FRCOV
+		  if (!(anc -> builtInType != XML_SCHEMAS_ANYTYPE ))
+		    fprintf(stderr, "triggered bug index 4462\n");
+		  #endif
+		
 
 	    if (anc->type == XML_SCHEMA_TYPE_BASIC) {
 		if (anc->builtInType == XML_SCHEMAS_NORMSTRING) {
@@ -17959,6 +22053,9 @@ xmlSchemaTypeFixupWhitespace(xmlSchemaTypePtr type)
 		break;
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return (0);
 }
@@ -17977,7 +22074,19 @@ xmlSchemaFixupSimpleTypeStageOne(xmlSchemaParserCtxtPtr pctxt,
 	/*
 	* Corresponds to <simpleType><list>...
 	*/
-	if (type->subtypes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4463]) {
+	  if ((type -> subtypes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4463\n");
+	  else
+	    fprintf(stderr, "reached bug index 4463\n");
+	}
+	if ((!FIXREVERTER[4463] && (type -> subtypes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * This one is really needed, so get out.
 	    */
@@ -17985,11 +22094,26 @@ xmlSchemaFixupSimpleTypeStageOne(xmlSchemaParserCtxtPtr pctxt,
 		"list type has no item-type assigned");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (WXS_IS_UNION(type)) {
 	/*
 	* Corresponds to <simpleType><union>...
 	*/
-	if (type->memberTypes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4464]) {
+	  if ((type -> memberTypes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4464\n");
+	  else
+	    fprintf(stderr, "reached bug index 4464\n");
+	}
+	if ((!FIXREVERTER[4464] && (type -> memberTypes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * This one is really needed, so get out.
 	    */
@@ -17997,15 +22121,33 @@ xmlSchemaFixupSimpleTypeStageOne(xmlSchemaParserCtxtPtr pctxt,
 		"union type has no member-types assigned");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
 	/*
 	* Corresponds to <simpleType><restriction>...
 	*/
-	if (type->baseType == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4465]) {
+	  if ((type -> baseType == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4465\n");
+	  else
+	    fprintf(stderr, "reached bug index 4465\n");
+	}
+	if ((!FIXREVERTER[4465] && (type -> baseType == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    PERROR_INT("xmlSchemaFixupSimpleTypeStageOne",
 		"type has no base-type assigned");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (WXS_IS_TYPE_NOT_FIXED_1(type->baseType))
 	    if (xmlSchemaFixupSimpleTypeStageOne(pctxt, type->baseType) == -1)
 		return(-1);
@@ -18105,11 +22247,26 @@ xmlSchemaFixupSimpleTypeStageTwo(xmlSchemaParserCtxtPtr pctxt,
     type->flags |= XML_SCHEMAS_TYPE_INTERNAL_RESOLVED;
     type->contentType = XML_SCHEMA_CONTENT_SIMPLE;
 
-    if (type->baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4466]) {
+      if ((type -> baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4466\n");
+      else
+        fprintf(stderr, "reached bug index 4466\n");
+    }
+    if ((!FIXREVERTER[4466] && (type -> baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaFixupSimpleTypeStageTwo",
 	    "missing baseType");
 	goto exit_failure;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (WXS_IS_TYPE_NOT_FIXED(type->baseType))
 	xmlSchemaTypeFixup(type->baseType, ACTXT_CAST pctxt);
     /*
@@ -18172,8 +22329,23 @@ exit_error:
 #ifdef DEBUG_TYPE
     xmlSchemaDebugFixedType(pctxt, type);
 #endif
-    if (olderrs != pctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4467]) {
+      if ((olderrs != pctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 4467\n");
+      else
+        fprintf(stderr, "reached bug index 4467\n");
+    }
+    if ((!FIXREVERTER[4467] && (olderrs != pctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	return(pctxt->err);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 
 exit_failure:
@@ -18193,11 +22365,26 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
     if (! WXS_IS_TYPE_NOT_FIXED(type))
 	return(0);
     type->flags |= XML_SCHEMAS_TYPE_INTERNAL_RESOLVED;
-    if (baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4468]) {
+      if ((baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4468\n");
+      else
+        fprintf(stderr, "reached bug index 4468\n");
+    }
+    if ((!FIXREVERTER[4468] && (baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaFixupComplexType",
 	    "missing baseType");
 	goto exit_failure;
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Fixup the base type.
     */
@@ -18272,8 +22459,23 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		XML_SCHEMA_TYPE_SIMPLE, NULL, type->targetNamespace,
 		type->node, 0);
 #endif
-	    if (content == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4469]) {
+	      if ((content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4469\n");
+	      else
+	        fprintf(stderr, "reached bug index 4469\n");
+	    }
+	    if ((!FIXREVERTER[4469] && (content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit_failure;
+		#ifdef FRCOV
+		}
+		#endif
 	    /*
 	    * We will use the same node as for the <complexType>
 	    * to have it somehow anchored in the schema doc.
@@ -18329,7 +22531,19 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 	    * <simpleType> content, "...then the {content type} of that
 	    * complex type definition"
 	    */
-	    if (baseType->contentTypeDef == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4470]) {
+	      if ((baseType -> contentTypeDef == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4470\n");
+	      else
+	        fprintf(stderr, "reached bug index 4470\n");
+	    }
+	    if ((!FIXREVERTER[4470] && (baseType -> contentTypeDef == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/*
 		* TODO: Check if this ever happens. xmlSchemaCheckSRCCT
 		* should have catched this already.
@@ -18343,6 +22557,9 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		    type->name);
 		goto exit_failure;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    type->contentTypeDef = baseType->contentTypeDef;
 	} else if ((WXS_IS_SIMPLE(baseType)) && WXS_IS_EXTENSION(type)) {
 	    /*
@@ -18400,16 +22617,46 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		    */
 		    particle = xmlSchemaAddParticle(pctxt,
 			type->node, 1, 1);
-		    if (particle == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4471]) {
+		      if ((particle == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4471\n");
+		      else
+		        fprintf(stderr, "reached bug index 4471\n");
+		    }
+		    if ((!FIXREVERTER[4471] && (particle == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * Create the model group.
 		    */ /* URGENT TODO: avoid adding to pending items. */
 		    particle->children = (xmlSchemaTreeItemPtr)
 			xmlSchemaAddModelGroup(pctxt, pctxt->schema,
 			XML_SCHEMA_TYPE_SEQUENCE, type->node);
-		    if (particle->children == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4472]) {
+		      if ((particle -> children == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4472\n");
+		      else
+		        fprintf(stderr, "reached bug index 4472\n");
+		    }
+		    if ((!FIXREVERTER[4472] && (particle -> children == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 
 		    type->subtypes = (xmlSchemaTypePtr) particle;
 		}
@@ -18525,16 +22772,46 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		    */
 		    particle = xmlSchemaAddParticle(pctxt,
 			type->node, 1, 1);
-		    if (particle == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4473]) {
+		      if ((particle == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4473\n");
+		      else
+		        fprintf(stderr, "reached bug index 4473\n");
+		    }
+		    if ((!FIXREVERTER[4473] && (particle == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * Create the "sequence" model group.
 		    */
 		    particle->children = (xmlSchemaTreeItemPtr)
 			xmlSchemaAddModelGroup(pctxt, pctxt->schema,
 			XML_SCHEMA_TYPE_SEQUENCE, type->node);
-		    if (particle->children == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4474]) {
+		      if ((particle -> children == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4474\n");
+		      else
+		        fprintf(stderr, "reached bug index 4474\n");
+		    }
+		    if ((!FIXREVERTER[4474] && (particle -> children == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    WXS_TYPE_CONTENTTYPE(type) = (xmlSchemaTypePtr) particle;
 		    /*
 		    * SPEC "the particle of the {content type} of
@@ -18637,13 +22914,43 @@ static int
 xmlSchemaTypeFixup(xmlSchemaTypePtr type,
                    xmlSchemaAbstractCtxtPtr actxt)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4475]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4475\n");
+      else
+        fprintf(stderr, "reached bug index 4475\n");
+    }
+    if ((!FIXREVERTER[4475] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
-    if (actxt->type != XML_SCHEMA_CTXT_PARSER) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4476]) {
+      if ((actxt -> type != 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 4476\n");
+      else
+        fprintf(stderr, "reached bug index 4476\n");
+    }
+    if ((!FIXREVERTER[4476] && (actxt -> type != 1 ))
+    #else
+    if (0
+    #endif
+    ) {
 	AERROR_INT("xmlSchemaTypeFixup",
 	    "this function needs a parser context");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (! WXS_IS_TYPE_NOT_FIXED(type))
 	return(0);
     if (type->type == XML_SCHEMA_TYPE_COMPLEX)
@@ -18673,8 +22980,23 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 {
     int ret = 0, ctxtGiven;
 
-    if ((facet == NULL) || (typeDecl == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4477]) {
+      if ((facet == (void *) 0 || typeDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4477\n");
+      else
+        fprintf(stderr, "reached bug index 4477\n");
+    }
+    if ((!FIXREVERTER[4477] && (facet == (void *) 0 || typeDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * TODO: will the parser context be given if used from
     * the relaxNG module?
@@ -18716,11 +23038,26 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		*/
 		if (typeDecl->type != XML_SCHEMA_TYPE_BASIC) {
 		    base = typeDecl->baseType;
-		    if (base == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4478]) {
+		      if ((base == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4478\n");
+		      else
+		        fprintf(stderr, "reached bug index 4478\n");
+		    }
+		    if ((!FIXREVERTER[4478] && (base == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			PERROR_INT("xmlSchemaCheckFacet",
 			    "a type user derived type has no base type");
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		} else
 		    base = typeDecl;
 
@@ -18729,8 +23066,23 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    * A context is needed if called from RelaxNG.
 		    */
 		    pctxt = xmlSchemaNewParserCtxt("*");
-		    if (pctxt == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4479]) {
+		      if ((pctxt == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4479\n");
+		      else
+		        fprintf(stderr, "reached bug index 4479\n");
+		    }
+		    if ((!FIXREVERTER[4479] && (pctxt == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		}
 		/*
 		* NOTE: This call does not check the content nodes,
@@ -18743,7 +23095,19 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    ACTXT_CAST pctxt, facet->node, base,
 		    facet->value, &(facet->val), 1, 1, 0);
                 if (ret != 0) {
-		    if (ret < 0) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4480]) {
+		      if ((ret < 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4480\n");
+		      else
+		        fprintf(stderr, "reached bug index 4480\n");
+		    }
+		    if ((!FIXREVERTER[4480] && (ret < 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			/* No error message for RelaxNG. */
 			if (ctxtGiven) {
 			    xmlSchemaCustomErr(ACTXT_CAST pctxt,
@@ -18755,6 +23119,9 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 			}
 			goto internal_error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    ret = XML_SCHEMAP_INVALID_FACET_VALUE;
 		    /* No error message for RelaxNG. */
 		    if (ctxtGiven) {
@@ -18809,7 +23176,19 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    facet->value, &(facet->val));
 	    }
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4481]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4481\n");
+		  else
+		    fprintf(stderr, "reached bug index 4481\n");
+		}
+		if ((!FIXREVERTER[4481] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    /* No error message for RelaxNG. */
 		    if (ctxtGiven) {
 			PERROR_INT("xmlSchemaCheckFacet",
@@ -18817,6 +23196,9 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    }
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAP_INVALID_FACET_VALUE;
 		/* No error message for RelaxNG. */
 		if (ctxtGiven) {
@@ -18902,8 +23284,23 @@ xmlSchemaCheckFacetValues(xmlSchemaTypePtr typeDecl,
 	}
 	pctxt->vctxt->schema = NULL;
     }
-    if (olderrs != pctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4482]) {
+      if ((olderrs != pctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 4482\n");
+      else
+        fprintf(stderr, "reached bug index 4482\n");
+    }
+    if ((!FIXREVERTER[4482] && (olderrs != pctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	return(pctxt->err);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 exit_failure:
     return(-1);
@@ -18931,8 +23328,23 @@ xmlSchemaGetCircModelGrDefRef(xmlSchemaModelGroupDefPtr groupDef,
 
     for (; particle != NULL; particle = particle->next) {
 	term = particle->children;
-	if (term == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4483]) {
+	  if ((term == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4483\n");
+	  else
+	    fprintf(stderr, "reached bug index 4483\n");
+	}
+	if ((!FIXREVERTER[4483] && (term == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	switch (term->type) {
 	    case XML_SCHEMA_TYPE_GROUP:
 		gdef = (xmlSchemaModelGroupDefPtr) term;
@@ -19213,11 +23625,26 @@ xmlSchemaExpandAttributeGroupRefs(xmlSchemaParserCtxtPtr pctxt,
 	use = list->items[i];
 
 	if (use->type == XML_SCHEMA_EXTRA_ATTR_USE_PROHIB) {
-	    if (prohibs == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4484]) {
+	      if ((prohibs == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4484\n");
+	      else
+	        fprintf(stderr, "reached bug index 4484\n");
+	    }
+	    if ((!FIXREVERTER[4484] && (prohibs == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		PERROR_INT("xmlSchemaExpandAttributeGroupRefs",
 		    "unexpected attr prohibition found");
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Remove from attribute uses.
 	    */
@@ -19271,8 +23698,23 @@ xmlSchemaExpandAttributeGroupRefs(xmlSchemaParserCtxtPtr pctxt,
 			tmpWild =  xmlSchemaAddWildcard(pctxt, pctxt->schema,
 			    XML_SCHEMA_TYPE_ANY_ATTRIBUTE,
 			    WXS_ITEM_NODE(item));
-			if (tmpWild == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[4485]) {
+			  if ((tmpWild == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 4485\n");
+			  else
+			    fprintf(stderr, "reached bug index 4485\n");
+			}
+			if ((!FIXREVERTER[4485] && (tmpWild == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    return(-1);
+			    #ifdef FRCOV
+			    }
+			    #endif
 			if (xmlSchemaCloneWildcardNsConstraints(pctxt,
 			    tmpWild, *completeWild) == -1)
 			    return (-1);
@@ -19291,12 +23733,27 @@ xmlSchemaExpandAttributeGroupRefs(xmlSchemaParserCtxtPtr pctxt,
 	    * contain any attribute uses.
 	    */
 	    sublist = ((xmlSchemaItemListPtr) gr->attrUses);
-	    if ((sublist == NULL) || sublist->nbItems == 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4486]) {
+	      if ((sublist == (void *) 0 || sublist -> nbItems == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4486\n");
+	      else
+	        fprintf(stderr, "reached bug index 4486\n");
+	    }
+	    if ((!FIXREVERTER[4486] && (sublist == (void *) 0 || sublist -> nbItems == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if (xmlSchemaItemListRemove(list, i) == -1)
 		    return(-1);
 		i--;
 		continue;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Add the attribute uses.
 	    */
@@ -19497,7 +23954,19 @@ xmlSchemaResolveAttrGroupReferences(xmlSchemaQNameRefPtr ref,
     group = xmlSchemaGetAttributeGroup(ctxt->schema,
 	ref->name,
 	ref->targetNamespace);
-    if (group == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4487]) {
+      if ((group == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4487\n");
+      else
+        fprintf(stderr, "reached bug index 4487\n");
+    }
+    if ((!FIXREVERTER[4487] && (group == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPResCompAttrErr(ctxt,
 	    XML_SCHEMAP_SRC_RESOLVE,
 	    NULL, ref->node,
@@ -19505,6 +23974,9 @@ xmlSchemaResolveAttrGroupReferences(xmlSchemaQNameRefPtr ref,
 	    ref->itemType, NULL);
 	return(ctxt->err);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ref->item = WXS_BASIC_CAST group;
     return(0);
 }
@@ -19536,8 +24008,23 @@ xmlSchemaCheckAttrPropsCorrect(xmlSchemaParserCtxtPtr pctxt,
     * Missing Sub-components ($5.3)."
     */
 
-    if (WXS_ATTR_TYPEDEF(attr) == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4488]) {
+      if ((attr -> subtypes == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4488\n");
+      else
+        fprintf(stderr, "reached bug index 4488\n");
+    }
+    if ((!FIXREVERTER[4488] && (attr -> subtypes == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (attr->defValue != NULL) {
 	int ret;
@@ -19594,8 +24081,23 @@ xmlSchemaCheckSubstGroupCircular(xmlSchemaElementPtr elemDecl,
 {
     xmlSchemaElementPtr ret;
 
-    if (WXS_SUBST_HEAD(ancestor) == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4491]) {
+      if ((ancestor -> refDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4491\n");
+      else
+        fprintf(stderr, "reached bug index 4491\n");
+    }
+    if ((!FIXREVERTER[4491] && (ancestor -> refDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (WXS_SUBST_HEAD(ancestor) == elemDecl)
 	return (ancestor);
 
@@ -19752,7 +24254,19 @@ xmlSchemaCheckElemPropsCorrect(xmlSchemaParserCtxtPtr pctxt,
 	* {type definition} as defined in Element Default Valid (Immediate)
 	* ($3.3.6)."
 	*/
-	if (typeDef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4492]) {
+	  if ((typeDef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4492\n");
+	  else
+	    fprintf(stderr, "reached bug index 4492\n");
+	}
+	if ((!FIXREVERTER[4492] && (typeDef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErr(pctxt, elemDecl->node,
 		XML_SCHEMAP_INTERNAL,
 		"Internal error: xmlSchemaCheckElemPropsCorrect, "
@@ -19760,6 +24274,9 @@ xmlSchemaCheckElemPropsCorrect(xmlSchemaParserCtxtPtr pctxt,
 		"the value constraint", NULL, NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (elemDecl->node != NULL) {
 	    if (elemDecl->flags & XML_SCHEMAS_ELEM_FIXED)
 		node = (xmlNodePtr) xmlHasProp(elemDecl->node,
@@ -20032,8 +24549,23 @@ static void
 xmlSchemaCheckElementDeclComponent(xmlSchemaElementPtr elemDecl,
 				   xmlSchemaParserCtxtPtr ctxt)
 {
-    if (elemDecl == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4495]) {
+      if ((elemDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4495\n");
+      else
+        fprintf(stderr, "reached bug index 4495\n");
+    }
+    if ((!FIXREVERTER[4495] && (elemDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (elemDecl->flags & XML_SCHEMAS_ELEM_INTERNAL_CHECKED)
 	return;
     elemDecl->flags |= XML_SCHEMAS_ELEM_INTERNAL_CHECKED;
@@ -20081,13 +24613,28 @@ xmlSchemaResolveModelGroupParticleReferences(
 
 	refItem = xmlSchemaGetNamedComponent(ctxt->schema,
 	    ref->itemType, ref->name, ref->targetNamespace);
-	if (refItem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4496]) {
+	  if ((refItem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4496\n");
+	  else
+	    fprintf(stderr, "reached bug index 4496\n");
+	}
+	if ((!FIXREVERTER[4496] && (refItem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPResCompAttrErr(ctxt, XML_SCHEMAP_SRC_RESOLVE,
 		NULL, WXS_ITEM_NODE(particle), "ref", ref->name,
 		ref->targetNamespace, ref->itemType, NULL);
 	    /* TODO: remove the particle. */
 	    goto next_particle;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (refItem->type == XML_SCHEMA_TYPE_GROUP) {
 	    if (WXS_MODELGROUPDEF_MODEL(refItem) == NULL)
 		/* TODO: remove the particle. */
@@ -20184,8 +24731,23 @@ xmlSchemaAreValuesEqual(xmlSchemaValPtr x,
 	x = xmlSchemaValueGetNext(x);
 	if (x != NULL) {
 	    y = xmlSchemaValueGetNext(y);
-	    if (y == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4498]) {
+	      if ((y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4498\n");
+	      else
+	        fprintf(stderr, "reached bug index 4498\n");
+	    }
+	    if ((!FIXREVERTER[4498] && (y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (0);
+		#ifdef FRCOV
+		}
+		#endif
 	} else if (xmlSchemaValueGetNext(y) != NULL)
 	    return (0);
 	else
@@ -20205,8 +24767,23 @@ static int
 xmlSchemaResolveAttrUseReferences(xmlSchemaAttributeUsePtr ause,
 				  xmlSchemaParserCtxtPtr ctxt)
 {
-    if ((ctxt == NULL) || (ause == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4499]) {
+      if ((ctxt == (void *) 0 || ause == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4499\n");
+      else
+        fprintf(stderr, "reached bug index 4499\n");
+    }
+    if ((!FIXREVERTER[4499] && (ctxt == (void *) 0 || ause == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if ((ause->attrDecl == NULL) ||
 	(ause->attrDecl->type != XML_SCHEMA_EXTRA_QNAMEREF))
 	return(0);
@@ -20245,8 +24822,23 @@ static int
 xmlSchemaCheckAttrUsePropsCorrect(xmlSchemaParserCtxtPtr ctxt,
 			     xmlSchemaAttributeUsePtr use)
 {
-    if ((ctxt == NULL) || (use == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4500]) {
+      if ((ctxt == (void *) 0 || use == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4500\n");
+      else
+        fprintf(stderr, "reached bug index 4500\n");
+    }
+    if ((!FIXREVERTER[4500] && (ctxt == (void *) 0 || use == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if ((use->defValue == NULL) || (WXS_ATTRUSE_DECL(use) == NULL) ||
 	((WXS_ATTRUSE_DECL(use))->type != XML_SCHEMA_TYPE_ATTRIBUTE))
 	return(0);
@@ -20495,8 +25087,23 @@ xmlSchemaCheckSRCRedefineFirst(xmlSchemaParserCtxtPtr pctxt)
     xmlSchemaBasicItemPtr prev, item;
     int wasRedefined;
 
-    if (redef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4503]) {
+      if ((redef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4503\n");
+      else
+        fprintf(stderr, "reached bug index 4503\n");
+    }
+    if ((!FIXREVERTER[4503] && (redef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     do {
 	item = redef->item;
@@ -20669,14 +25276,44 @@ xmlSchemaCheckSRCRedefineSecond(xmlSchemaParserCtxtPtr pctxt)
     xmlSchemaRedefPtr redef = WXS_CONSTRUCTOR(pctxt)->redefs;
     xmlSchemaBasicItemPtr item;
 
-    if (redef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4504]) {
+      if ((redef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4504\n");
+      else
+        fprintf(stderr, "reached bug index 4504\n");
+    }
+    if ((!FIXREVERTER[4504] && (redef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     do {
-	if (redef->target == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4505]) {
+	  if ((redef -> target == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4505\n");
+	  else
+	    fprintf(stderr, "reached bug index 4505\n");
+	}
+	if ((!FIXREVERTER[4505] && (redef -> target == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    redef = redef->next;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	item = redef->item;
 
 	switch (item->type) {
@@ -20766,8 +25403,23 @@ xmlSchemaAddComponents(xmlSchemaParserCtxtPtr pctxt,
     *   components as well to be able to catch clashing components.
     *   (I hope I'll still know what this means after some months :-()
     */
-    if (bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4506]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4506\n");
+      else
+        fprintf(stderr, "reached bug index 4506\n");
+    }
+    if ((!FIXREVERTER[4506] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (bucket->flags & XML_SCHEMA_BUCKET_COMPS_ADDED)
 	return(0);
     bucket->flags |= XML_SCHEMA_BUCKET_COMPS_ADDED;
@@ -20880,8 +25532,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
     * a bucket.
     * TODO: Think about storing locals _only_ on the main bucket.
     */
-    if (con->bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4507]) {
+      if ((con -> bucket == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4507\n");
+      else
+        fprintf(stderr, "reached bug index 4507\n");
+    }
+    if ((!FIXREVERTER[4507] && (con -> bucket == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	con->bucket = rootBucket;
+	#ifdef FRCOV
+	}
+	#endif
 
     /* TODO:
     * SPEC (src-redefine):
@@ -20990,8 +25657,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4508]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4508\n");
+      else
+        fprintf(stderr, "reached bug index 4508\n");
+    }
+    if ((!FIXREVERTER[4508] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Now that all references are resolved we
@@ -21012,29 +25694,89 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		xmlSchemaCheckTypeDefCircular(
 		    (xmlSchemaTypePtr) item, pctxt);
 		FIXHFAILURE;
-		if (pctxt->nberrors != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4509]) {
+		  if ((pctxt -> nberrors != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4509\n");
+		  else
+		    fprintf(stderr, "reached bug index 4509\n");
+		}
+		if ((!FIXREVERTER[4509] && (pctxt -> nberrors != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto exit_error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_SCHEMA_TYPE_GROUP:
 		xmlSchemaCheckGroupDefCircular(
 		    (xmlSchemaModelGroupDefPtr) item, pctxt);
 		FIXHFAILURE;
-		if (pctxt->nberrors != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4510]) {
+		  if ((pctxt -> nberrors != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4510\n");
+		  else
+		    fprintf(stderr, "reached bug index 4510\n");
+		}
+		if ((!FIXREVERTER[4510] && (pctxt -> nberrors != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto exit_error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_SCHEMA_TYPE_ATTRIBUTEGROUP:
 		xmlSchemaCheckAttrGroupCircular(
 		    (xmlSchemaAttributeGroupPtr) item, pctxt);
 		FIXHFAILURE;
-		if (pctxt->nberrors != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4511]) {
+		  if ((pctxt -> nberrors != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4511\n");
+		  else
+		    fprintf(stderr, "reached bug index 4511\n");
+		}
+		if ((!FIXREVERTER[4511] && (pctxt -> nberrors != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto exit_error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    default:
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4512]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4512\n");
+      else
+        fprintf(stderr, "reached bug index 4512\n");
+    }
+    if ((!FIXREVERTER[4512] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Model group definition references:
     * Such a reference is reflected by a particle at the component
@@ -21055,8 +25797,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4513]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4513\n");
+      else
+        fprintf(stderr, "reached bug index 4513\n");
+    }
+    if ((!FIXREVERTER[4513] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Expand attribute group references of attribute group definitions.
     */
@@ -21076,8 +25833,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4514]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4514\n");
+      else
+        fprintf(stderr, "reached bug index 4514\n");
+    }
+    if ((!FIXREVERTER[4514] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * First compute the variety of simple types. This is needed as
     * a seperate step, since otherwise we won't be able to detect
@@ -21097,8 +25869,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4515]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4515\n");
+      else
+        fprintf(stderr, "reached bug index 4515\n");
+    }
+    if ((!FIXREVERTER[4515] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Detect circular union types. Note that this needs the variety to
     * be already computed.
@@ -21117,8 +25904,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4516]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4516\n");
+      else
+        fprintf(stderr, "reached bug index 4516\n");
+    }
+    if ((!FIXREVERTER[4516] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Do the complete type fixup for simple types.
@@ -21136,8 +25938,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4517]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4517\n");
+      else
+        fprintf(stderr, "reached bug index 4517\n");
+    }
+    if ((!FIXREVERTER[4517] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * At this point we need build and check all simple types.
     */
@@ -21155,8 +25972,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4518]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4518\n");
+      else
+        fprintf(stderr, "reached bug index 4518\n");
+    }
+    if ((!FIXREVERTER[4518] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Apply constraints for attribute uses.
     */
@@ -21174,8 +26006,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4519]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4519\n");
+      else
+        fprintf(stderr, "reached bug index 4519\n");
+    }
+    if ((!FIXREVERTER[4519] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Apply constraints for attribute group definitions.
@@ -21195,16 +26042,46 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 	    break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4520]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4520\n");
+      else
+        fprintf(stderr, "reached bug index 4520\n");
+    }
+    if ((!FIXREVERTER[4520] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Apply constraints for redefinitions.
     */
     if (WXS_CONSTRUCTOR(pctxt)->redefs != NULL)
 	xmlSchemaCheckSRCRedefineSecond(pctxt);
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4521]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4521\n");
+      else
+        fprintf(stderr, "reached bug index 4521\n");
+    }
+    if ((!FIXREVERTER[4521] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Complex types are builded and checked.
@@ -21222,8 +26099,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4522]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4522\n");
+      else
+        fprintf(stderr, "reached bug index 4522\n");
+    }
+    if ((!FIXREVERTER[4522] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * The list could have changed, since xmlSchemaFixupComplexType()
@@ -21268,8 +26160,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4523]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4523\n");
+      else
+        fprintf(stderr, "reached bug index 4523\n");
+    }
+    if ((!FIXREVERTER[4523] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Finally we can build the automaton from the content model of
@@ -21287,8 +26194,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4524]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4524\n");
+      else
+        fprintf(stderr, "reached bug index 4524\n");
+    }
+    if ((!FIXREVERTER[4524] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * URGENT TODO: cos-element-consistent
     */
@@ -21457,8 +26379,23 @@ xmlSchemaSetParserErrors(xmlSchemaParserCtxtPtr ctxt,
                          xmlSchemaValidityErrorFunc err,
                          xmlSchemaValidityWarningFunc warn, void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4531]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4531\n");
+      else
+        fprintf(stderr, "reached bug index 4531\n");
+    }
+    if ((!FIXREVERTER[4531] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->error = err;
     ctxt->warning = warn;
     ctxt->errCtxt = ctx;
@@ -21479,8 +26416,23 @@ xmlSchemaSetParserStructuredErrors(xmlSchemaParserCtxtPtr ctxt,
 				   xmlStructuredErrorFunc serror,
 				   void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4532]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4532\n");
+      else
+        fprintf(stderr, "reached bug index 4532\n");
+    }
+    if ((!FIXREVERTER[4532] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     ctxt->serror = serror;
     ctxt->errCtxt = ctx;
     if (ctxt->vctxt != NULL)
@@ -21638,20 +26590,65 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaParserCtxtPtr pctxt;
     xmlSchemaBucketPtr bucket = NULL;
 
-    if ((vctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4534]) {
+      if ((vctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4534\n");
+      else
+        fprintf(stderr, "reached bug index 4534\n");
+    }
+    if ((!FIXREVERTER[4534] && (vctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
-
-    if (vctxt->pctxt == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4535]) {
+      if ((vctxt -> pctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4535\n");
+      else
+        fprintf(stderr, "reached bug index 4535\n");
+    }
+    if ((!FIXREVERTER[4535] && (vctxt -> pctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaAssembleByLocation",
 	    "no parser context available");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     pctxt = vctxt->pctxt;
-    if (pctxt->constructor == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4536]) {
+      if ((pctxt -> constructor == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4536\n");
+      else
+        fprintf(stderr, "reached bug index 4536\n");
+    }
+    if ((!FIXREVERTER[4536] && (pctxt -> constructor == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaAssembleByLocation",
 	    "no constructor");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Acquire the schema document.
     */
@@ -21665,9 +26662,36 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
     ret = xmlSchemaAddSchemaDoc(pctxt, XML_SCHEMA_SCHEMA_IMPORT,
 	location, NULL, NULL, 0, node, NULL, nsName,
 	&bucket);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4537]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4537\n");
+      else
+        fprintf(stderr, "reached bug index 4537\n");
+    }
+    if ((!FIXREVERTER[4537] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(ret);
-    if (bucket == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4538]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4538\n");
+      else
+        fprintf(stderr, "reached bug index 4538\n");
+    }
+    if ((!FIXREVERTER[4538] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Generate a warning that the document could not be located.
 	*/
@@ -21677,6 +26701,9 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
 	    location, NULL, NULL);
 	return(ret);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * The first located schema will be handled as if all other
     * schemas imported by XSI were imported by this first schema.
@@ -21704,8 +26731,25 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
 	goto exit_failure;
     }
     /* Paranoid error channelling. */
-    if ((ret == 0) && (pctxt->nberrors != 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4539]) {
+      fprintf(stderr, "reached bug index 4539\n");
+    }
+    if ((FIXREVERTER[4539] && (ret == 0 )) || (!FIXREVERTER[4539] && (ret == 0 && pctxt -> nberrors != 0 ))
+    #else
+    if (ret == 0 
+    #endif
+    )
+	
+	#ifdef FRCOV
+	{if (!(pctxt -> nberrors != 0 ))
+	  fprintf(stderr, "triggered bug index 4539\n");
+	#endif
 	ret = pctxt->err;
+	#ifdef FRCOV
+	}}
+	#endif
     if (pctxt->nberrors == 0) {
 	/*
 	* Only bother to fixup pending components, if there was
@@ -21719,8 +26763,25 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
 	* Not nice, but we need somehow to channel the schema parser
 	* error to the validation context.
 	*/
-	if ((ret != 0) && (vctxt->err == 0))
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4540]) {
+	  fprintf(stderr, "reached bug index 4540\n");
+	}
+	if ((FIXREVERTER[4540] && (ret != 0 )) || (!FIXREVERTER[4540] && (ret != 0 && vctxt -> err == 0  ))
+	#else
+	if (ret != 0 
+	#endif
+	)
+	    
+	    #ifdef FRCOV
+	    {if (!(vctxt -> err == 0  ))
+	      fprintf(stderr, "triggered bug index 4540\n");
+	    #endif
 	    vctxt->err = ret;
+	    #ifdef FRCOV
+	    }}
+	    #endif
 	vctxt->nberrors += pctxt->nberrors;
     } else {
 	/* Add to validation error sum. */
@@ -21737,16 +26798,46 @@ static xmlSchemaAttrInfoPtr
 xmlSchemaGetMetaAttrInfo(xmlSchemaValidCtxtPtr vctxt,
 			 int metaType)
 {
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4541]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4541\n");
+      else
+        fprintf(stderr, "reached bug index 4541\n");
+    }
+    if ((!FIXREVERTER[4541] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     {
 	int i;
 	xmlSchemaAttrInfoPtr iattr;
 
 	for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	    iattr = vctxt->attrInfos[i];
-	    if (iattr->metaType == metaType)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4542]) {
+	      if ((iattr -> metaType == metaType ) && !(0))
+	        fprintf(stderr, "triggered bug index 4542\n");
+	      else
+	        fprintf(stderr, "reached bug index 4542\n");
+	    }
+	    if ((!FIXREVERTER[4542] && (iattr -> metaType == metaType ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (iattr);
+		#ifdef FRCOV
+		}
+		#endif
 	}
 
     }
@@ -21784,11 +26875,41 @@ xmlSchemaAssembleByXSI(xmlSchemaValidCtxtPtr vctxt)
     */
     iattr = xmlSchemaGetMetaAttrInfo(vctxt,
 	XML_SCHEMA_ATTR_INFO_META_XSI_SCHEMA_LOC);
-    if (iattr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4543]) {
+      if ((iattr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4543\n");
+      else
+        fprintf(stderr, "reached bug index 4543\n");
+    }
+    if ((!FIXREVERTER[4543] && (iattr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	iattr = xmlSchemaGetMetaAttrInfo(vctxt,
 	XML_SCHEMA_ATTR_INFO_META_XSI_NO_NS_SCHEMA_LOC);
-    if (iattr == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4544]) {
+      if ((iattr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4544\n");
+      else
+        fprintf(stderr, "reached bug index 4544\n");
+    }
+    if ((!FIXREVERTER[4544] && (iattr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     cur = iattr->value;
     do {
 	/*
@@ -21923,8 +27044,23 @@ xmlSchemaValidateNotation(xmlSchemaValidCtxtPtr vctxt,
 	return (-1);
     }
     ret = xmlValidateQName(value, 1);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4545]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4545\n");
+      else
+        fprintf(stderr, "reached bug index 4545\n");
+    }
+    if ((!FIXREVERTER[4545] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (ret);
+	#ifdef FRCOV
+	}
+	#endif
     {
 	xmlChar *localName = NULL;
 	xmlChar *prefix = NULL;
@@ -21937,18 +27073,48 @@ xmlSchemaValidateNotation(xmlSchemaValidCtxtPtr vctxt,
 		nsName = xmlSchemaLookupNamespace(vctxt, BAD_CAST prefix);
 	    else if (node != NULL) {
 		xmlNsPtr ns = xmlSearchNs(node->doc, node, prefix);
-		if (ns != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4546]) {
+		  if ((ns != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4546\n");
+		  else
+		    fprintf(stderr, "reached bug index 4546\n");
+		}
+		if ((!FIXREVERTER[4546] && (ns != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    nsName = ns->href;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    } else {
 		xmlFree(prefix);
 		xmlFree(localName);
 		return (1);
 	    }
-	    if (nsName == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4547]) {
+	      if ((nsName == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4547\n");
+	      else
+	        fprintf(stderr, "reached bug index 4547\n");
+	    }
+	    if ((!FIXREVERTER[4547] && (nsName == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFree(prefix);
 		xmlFree(localName);
 		return (1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (xmlSchemaGetNotation(schema, localName, nsName) != NULL) {
 		if ((valNeeded) && (val != NULL)) {
 		    (*val) = xmlSchemaNewNOTATIONValue(xmlStrdup(localName),
@@ -21983,12 +27149,42 @@ xmlSchemaVAddNodeQName(xmlSchemaValidCtxtPtr vctxt,
     int i;
 
     lname = xmlDictLookup(vctxt->dict, lname, -1);
-    if (lname == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4548]) {
+      if ((lname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4548\n");
+      else
+        fprintf(stderr, "reached bug index 4548\n");
+    }
+    if ((!FIXREVERTER[4548] && (lname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (nsname != NULL) {
 	nsname = xmlDictLookup(vctxt->dict, nsname, -1);
-	if (nsname == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4549]) {
+	  if ((nsname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4549\n");
+	  else
+	    fprintf(stderr, "reached bug index 4549\n");
+	}
+	if ((!FIXREVERTER[4549] && (nsname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     for (i = 0; i < vctxt->nodeQNames->nbItems; i += 2) {
 	if ((vctxt->nodeQNames->items [i] == lname) &&
@@ -22026,12 +27222,27 @@ xmlSchemaAugmentIDC(void *payload, void *data,
     xmlSchemaIDCAugPtr aidc;
 
     aidc = (xmlSchemaIDCAugPtr) xmlMalloc(sizeof(xmlSchemaIDCAug));
-    if (aidc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4550]) {
+      if ((aidc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4550\n");
+      else
+        fprintf(stderr, "reached bug index 4550\n");
+    }
+    if ((!FIXREVERTER[4550] && (aidc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaVErrMemory(vctxt,
 	    "xmlSchemaAugmentIDC: allocating an augmented IDC definition",
 	    NULL);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     aidc->keyrefDepth = -1;
     aidc->def = idcDef;
     aidc->next = NULL;
@@ -22080,11 +27291,26 @@ xmlSchemaIDCNewBinding(xmlSchemaIDCPtr idcDef)
 
     ret = (xmlSchemaPSVIIDCBindingPtr) xmlMalloc(
 	    sizeof(xmlSchemaPSVIIDCBinding));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4551]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4551\n");
+      else
+        fprintf(stderr, "reached bug index 4551\n");
+    }
+    if ((!FIXREVERTER[4551] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaVErrMemory(NULL,
 	    "allocating a PSVI IDC binding item", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaPSVIIDCBinding));
     ret->definition = idcDef;
     return (ret);
@@ -22111,22 +27337,52 @@ xmlSchemaIDCStoreNodeTableItem(xmlSchemaValidCtxtPtr vctxt,
     if (vctxt->idcNodes == NULL) {
 	vctxt->idcNodes = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlMalloc(20 * sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (vctxt->idcNodes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4552]) {
+	  if ((vctxt -> idcNodes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4552\n");
+	  else
+	    fprintf(stderr, "reached bug index 4552\n");
+	}
+	if ((!FIXREVERTER[4552] && (vctxt -> idcNodes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"allocating the IDC node table item list", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	vctxt->sizeIdcNodes = 20;
     } else if (vctxt->sizeIdcNodes <= vctxt->nbIdcNodes) {
 	vctxt->sizeIdcNodes *= 2;
 	vctxt->idcNodes = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlRealloc(vctxt->idcNodes, vctxt->sizeIdcNodes *
 	    sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (vctxt->idcNodes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4553]) {
+	  if ((vctxt -> idcNodes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4553\n");
+	  else
+	    fprintf(stderr, "reached bug index 4553\n");
+	}
+	if ((!FIXREVERTER[4553] && (vctxt -> idcNodes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"re-allocating the IDC node table item list", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     vctxt->idcNodes[vctxt->nbIdcNodes++] = item;
 
@@ -22152,22 +27408,52 @@ xmlSchemaIDCStoreKey(xmlSchemaValidCtxtPtr vctxt,
     if (vctxt->idcKeys == NULL) {
 	vctxt->idcKeys = (xmlSchemaPSVIIDCKeyPtr *)
 	    xmlMalloc(40 * sizeof(xmlSchemaPSVIIDCKeyPtr));
-	if (vctxt->idcKeys == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4554]) {
+	  if ((vctxt -> idcKeys == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4554\n");
+	  else
+	    fprintf(stderr, "reached bug index 4554\n");
+	}
+	if ((!FIXREVERTER[4554] && (vctxt -> idcKeys == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"allocating the IDC key storage list", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	vctxt->sizeIdcKeys = 40;
     } else if (vctxt->sizeIdcKeys <= vctxt->nbIdcKeys) {
 	vctxt->sizeIdcKeys *= 2;
 	vctxt->idcKeys = (xmlSchemaPSVIIDCKeyPtr *)
 	    xmlRealloc(vctxt->idcKeys, vctxt->sizeIdcKeys *
 	    sizeof(xmlSchemaPSVIIDCKeyPtr));
-	if (vctxt->idcKeys == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4555]) {
+	  if ((vctxt -> idcKeys == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4555\n");
+	  else
+	    fprintf(stderr, "reached bug index 4555\n");
+	}
+	if ((!FIXREVERTER[4555] && (vctxt -> idcKeys == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"re-allocating the IDC key storage list", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     vctxt->idcKeys[vctxt->nbIdcKeys++] = key;
 
@@ -22191,21 +27477,51 @@ xmlSchemaIDCAppendNodeTableItem(xmlSchemaPSVIIDCBindingPtr bind,
 	bind->sizeNodes = 10;
 	bind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlMalloc(10 * sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (bind->nodeTable == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4556]) {
+	  if ((bind -> nodeTable == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4556\n");
+	  else
+	    fprintf(stderr, "reached bug index 4556\n");
+	}
+	if ((!FIXREVERTER[4556] && (bind -> nodeTable == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(NULL,
 		"allocating an array of IDC node-table items", NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (bind->sizeNodes <= bind->nbNodes) {
 	bind->sizeNodes *= 2;
 	bind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlRealloc(bind->nodeTable, bind->sizeNodes *
 		sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (bind->nodeTable == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4557]) {
+	  if ((bind -> nodeTable == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4557\n");
+	  else
+	    fprintf(stderr, "reached bug index 4557\n");
+	}
+	if ((!FIXREVERTER[4557] && (bind -> nodeTable == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(NULL,
 		"re-allocating an array of IDC node-table items", NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     bind->nodeTable[bind->nbNodes++] = ntItem;
     return(0);
@@ -22232,8 +27548,23 @@ xmlSchemaIDCAcquireBinding(xmlSchemaValidCtxtPtr vctxt,
 
     if (ielem->idcTable == NULL) {
 	ielem->idcTable = xmlSchemaIDCNewBinding(matcher->aidc->def);
-	if (ielem->idcTable == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4558]) {
+	  if ((ielem -> idcTable == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4558\n");
+	  else
+	    fprintf(stderr, "reached bug index 4558\n");
+	}
+	if ((!FIXREVERTER[4558] && (ielem -> idcTable == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return(ielem->idcTable);
     } else {
 	xmlSchemaPSVIIDCBindingPtr bind = NULL;
@@ -22242,12 +27573,42 @@ xmlSchemaIDCAcquireBinding(xmlSchemaValidCtxtPtr vctxt,
 	do {
 	    if (bind->definition == matcher->aidc->def)
 		return(bind);
-	    if (bind->next == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4560]) {
+	      if ((bind -> next == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4560\n");
+	      else
+	        fprintf(stderr, "reached bug index 4560\n");
+	    }
+	    if ((!FIXREVERTER[4560] && (bind -> next == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		bind->next = xmlSchemaIDCNewBinding(matcher->aidc->def);
-		if (bind->next == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4559]) {
+		  if ((bind -> next == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4559\n");
+		  else
+		    fprintf(stderr, "reached bug index 4559\n");
+		}
+		if ((!FIXREVERTER[4559] && (bind -> next == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (NULL);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		return(bind->next);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    bind = bind->next;
 	} while (bind != NULL);
     }
@@ -22258,8 +27619,23 @@ static xmlSchemaItemListPtr
 xmlSchemaIDCAcquireTargetList(xmlSchemaValidCtxtPtr vctxt ATTRIBUTE_UNUSED,
 			     xmlSchemaIDCMatcherPtr matcher)
 {
-    if (matcher->targets == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4561]) {
+      if ((matcher -> targets == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4561\n");
+      else
+        fprintf(stderr, "reached bug index 4561\n");
+    }
+    if ((!FIXREVERTER[4561] && (matcher -> targets == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	matcher->targets = xmlSchemaItemListCreate();
+	#ifdef FRCOV
+	}
+	#endif
     return(matcher->targets);
 }
 
@@ -22403,8 +27779,23 @@ xmlSchemaIDCReleaseMatcherList(xmlSchemaValidCtxtPtr vctxt,
 	/*
 	* Cache the matcher.
 	*/
-	if (vctxt->idcMatcherCache != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4562]) {
+	  if ((vctxt -> idcMatcherCache != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 4562\n");
+	  else
+	    fprintf(stderr, "reached bug index 4562\n");
+	}
+	if ((!FIXREVERTER[4562] && (vctxt -> idcMatcherCache != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    matcher->nextCached = vctxt->idcMatcherCache;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	vctxt->idcMatcherCache = matcher;
 
 	matcher = next;
@@ -22445,18 +27836,48 @@ xmlSchemaIDCAddStateObject(xmlSchemaValidCtxtPtr vctxt,
 	* Create a new state object.
 	*/
 	sto = (xmlSchemaIDCStateObjPtr) xmlMalloc(sizeof(xmlSchemaIDCStateObj));
-	if (sto == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4563]) {
+	  if ((sto == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4563\n");
+	  else
+	    fprintf(stderr, "reached bug index 4563\n");
+	}
+	if ((!FIXREVERTER[4563] && (sto == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(NULL,
 		"allocating an IDC state object", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(sto, 0, sizeof(xmlSchemaIDCStateObj));
     }
     /*
     * Add to global list.
     */
-    if (vctxt->xpathStates != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4564]) {
+      if ((vctxt -> xpathStates != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4564\n");
+      else
+        fprintf(stderr, "reached bug index 4564\n");
+    }
+    if ((!FIXREVERTER[4564] && (vctxt -> xpathStates != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	sto->next = vctxt->xpathStates;
+	#ifdef FRCOV
+	}
+	#endif
     vctxt->xpathStates = sto;
 
     /*
@@ -22470,11 +27891,26 @@ xmlSchemaIDCAddStateObject(xmlSchemaValidCtxtPtr vctxt,
     */
     sto->xpathCtxt = (void *) xmlPatternGetStreamCtxt(
 	(xmlPatternPtr) sel->xpathComp);
-    if (sto->xpathCtxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4565]) {
+      if ((sto -> xpathCtxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4565\n");
+      else
+        fprintf(stderr, "reached bug index 4565\n");
+    }
+    if ((!FIXREVERTER[4565] && (sto -> xpathCtxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaIDCAddStateObject",
 	    "failed to create an XPath validation context");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     sto->type = type;
     sto->depth = vctxt->depth;
     sto->matcher = matcher;
@@ -22505,8 +27941,23 @@ xmlSchemaXPathEvaluate(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaIDCStateObjPtr sto, head = NULL, first;
     int res, resolved = 0, depth = vctxt->depth;
 
-    if (vctxt->xpathStates == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4566]) {
+      if ((vctxt -> xpathStates == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4566\n");
+      else
+        fprintf(stderr, "reached bug index 4566\n");
+    }
+    if ((!FIXREVERTER[4566] && (vctxt -> xpathStates == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (nodeType == XML_ATTRIBUTE_NODE)
 	depth++;
@@ -22560,21 +28011,51 @@ xmlSchemaXPathEvaluate(xmlSchemaValidCtxtPtr vctxt,
 	*/
 	if (sto->history == NULL) {
 	    sto->history = (int *) xmlMalloc(5 * sizeof(int));
-	    if (sto->history == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4568]) {
+	      if ((sto -> history == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4568\n");
+	      else
+	        fprintf(stderr, "reached bug index 4568\n");
+	    }
+	    if ((!FIXREVERTER[4568] && (sto -> history == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaVErrMemory(NULL,
 		    "allocating the state object history", NULL);
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    sto->sizeHistory = 5;
 	} else if (sto->sizeHistory <= sto->nbHistory) {
 	    sto->sizeHistory *= 2;
 	    sto->history = (int *) xmlRealloc(sto->history,
 		sto->sizeHistory * sizeof(int));
-	    if (sto->history == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4569]) {
+	      if ((sto -> history == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4569\n");
+	      else
+	        fprintf(stderr, "reached bug index 4569\n");
+	    }
+	    if ((!FIXREVERTER[4569] && (sto -> history == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaVErrMemory(NULL,
 		    "re-allocating the state object history", NULL);
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	sto->history[sto->nbHistory++] = depth;
 
@@ -22682,8 +28163,23 @@ xmlSchemaXPathPop(xmlSchemaValidCtxtPtr vctxt)
     xmlSchemaIDCStateObjPtr sto;
     int res;
 
-    if (vctxt->xpathStates == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4570]) {
+      if ((vctxt -> xpathStates == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4570\n");
+      else
+        fprintf(stderr, "reached bug index 4570\n");
+    }
+    if ((!FIXREVERTER[4570] && (vctxt -> xpathStates == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     sto = vctxt->xpathStates;
     do {
 	res = xmlStreamPop((xmlStreamCtxtPtr) sto->xpathCtxt);
@@ -22714,8 +28210,23 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaPSVIIDCKeyPtr key = NULL;
     xmlSchemaTypePtr type = vctxt->inode->typeDef, simpleType = NULL;
 
-    if (vctxt->xpathStates == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4571]) {
+      if ((vctxt -> xpathStates == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4571\n");
+      else
+        fprintf(stderr, "reached bug index 4571\n");
+    }
+    if ((!FIXREVERTER[4571] && (vctxt -> xpathStates == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     sto = vctxt->xpathStates;
 
 #ifdef DEBUG_IDC
@@ -22742,18 +28253,48 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 	xmlGenericError(xmlGenericErrorContext, "IDC:   stream pop '%s'\n",
 	    sto->sel->xpath);
 #endif
-	if (sto->nbHistory == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4572]) {
+	  if ((sto -> nbHistory == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4572\n");
+	  else
+	    fprintf(stderr, "reached bug index 4572\n");
+	}
+	if ((!FIXREVERTER[4572] && (sto -> nbHistory == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto deregister_check;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	matchDepth = sto->history[sto->nbHistory -1];
 
 	/*
 	* Only matches at the current depth are of interest.
 	*/
-	if (matchDepth != depth) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4573]) {
+	  if ((matchDepth != depth ) && !(0))
+	    fprintf(stderr, "triggered bug index 4573\n");
+	  else
+	    fprintf(stderr, "reached bug index 4573\n");
+	}
+	if ((!FIXREVERTER[4573] && (matchDepth != depth ))
+	#else
+	if (0
+	#endif
+	) {
 	    sto = sto->next;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (sto->type == XPATH_STATE_OBJ_TYPE_IDC_FIELD) {
 	    /*
 	    * NOTE: According to
@@ -22767,12 +28308,27 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 		    * Sanity check for complex types with simple content.
 		    */
 		    simpleType = type->contentTypeDef;
-		    if (simpleType == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4574]) {
+		      if ((simpleType == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4574\n");
+		      else
+		        fprintf(stderr, "reached bug index 4574\n");
+		    }
+		    if ((!FIXREVERTER[4574] && (simpleType == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			VERROR_INT("xmlSchemaXPathProcessHistory",
 			    "field resolves to a CT with simple content "
 			    "but the CT is missing the ST definition");
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		} else
 		    simpleType = NULL;
 	    } else
@@ -22844,12 +28400,27 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 		    matcher->keySeqs = (xmlSchemaPSVIIDCKeyPtr **)
 			xmlMalloc(matcher->sizeKeySeqs *
 			sizeof(xmlSchemaPSVIIDCKeyPtr *));
-		    if (matcher->keySeqs == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4575]) {
+		      if ((matcher -> keySeqs == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4575\n");
+		      else
+		        fprintf(stderr, "reached bug index 4575\n");
+		    }
+		    if ((!FIXREVERTER[4575] && (matcher -> keySeqs == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlSchemaVErrMemory(NULL,
 			    "allocating an array of key-sequences",
 			    NULL);
 			return(-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    memset(matcher->keySeqs, 0,
 			matcher->sizeKeySeqs *
 			sizeof(xmlSchemaPSVIIDCKeyPtr *));
@@ -22861,12 +28432,27 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 			xmlRealloc(matcher->keySeqs,
 			matcher->sizeKeySeqs *
 			sizeof(xmlSchemaPSVIIDCKeyPtr *));
-		    if (matcher->keySeqs == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4576]) {
+		      if ((matcher -> keySeqs == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4576\n");
+		      else
+		        fprintf(stderr, "reached bug index 4576\n");
+		    }
+		    if ((!FIXREVERTER[4576] && (matcher -> keySeqs == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlSchemaVErrMemory(NULL,
 			    "reallocating an array of key-sequences",
 			    NULL);
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    /*
 		    * The array needs to be NULLed.
 		    * TODO: Use memset?
@@ -22913,11 +28499,26 @@ create_sequence:
 		keySeq = (xmlSchemaPSVIIDCKeyPtr *) xmlMalloc(
 		    matcher->aidc->def->nbFields *
 		    sizeof(xmlSchemaPSVIIDCKeyPtr));
-		if (keySeq == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4577]) {
+		  if ((keySeq == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4577\n");
+		  else
+		    fprintf(stderr, "reached bug index 4577\n");
+		}
+		if ((!FIXREVERTER[4577] && (keySeq == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaVErrMemory(NULL,
 			"allocating an IDC key-sequence", NULL);
 		    return(-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		memset(keySeq, 0, matcher->aidc->def->nbFields *
 		    sizeof(xmlSchemaPSVIIDCKeyPtr));
 		matcher->keySeqs[pos] = keySeq;
@@ -23218,8 +28819,23 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaIDCAugPtr aidc;
 
     idc = (xmlSchemaIDCPtr) elemDecl->idcs;
-    if (idc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4580]) {
+      if ((idc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4580\n");
+      else
+        fprintf(stderr, "reached bug index 4580\n");
+    }
+    if ((!FIXREVERTER[4580] && (idc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifdef DEBUG_IDC
     {
@@ -23260,12 +28876,27 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
 			break;
 		    aidc = aidc->next;
 		}
-		if (aidc == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4581]) {
+		  if ((aidc == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4581\n");
+		  else
+		    fprintf(stderr, "reached bug index 4581\n");
+		}
+		if ((!FIXREVERTER[4581] && (aidc == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaIDCRegisterMatchers",
 			"Could not find an augmented IDC item for an IDC "
 			"definition");
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		if ((aidc->keyrefDepth == -1) ||
 		    (vctxt->depth < aidc->keyrefDepth))
 		    aidc->keyrefDepth = vctxt->depth;
@@ -23280,11 +28911,26 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
 		break;
 	    aidc = aidc->next;
 	}
-	if (aidc == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4582]) {
+	  if ((aidc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4582\n");
+	  else
+	    fprintf(stderr, "reached bug index 4582\n");
+	}
+	if ((!FIXREVERTER[4582] && (aidc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    VERROR_INT("xmlSchemaIDCRegisterMatchers",
 		"Could not find an augmented IDC item for an IDC definition");
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Create an IDC matcher for every IDC definition.
 	*/
@@ -23298,11 +28944,26 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
 	} else {
 	    matcher = (xmlSchemaIDCMatcherPtr)
 		xmlMalloc(sizeof(xmlSchemaIDCMatcher));
-	    if (matcher == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4583]) {
+	      if ((matcher == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4583\n");
+	      else
+	        fprintf(stderr, "reached bug index 4583\n");
+	    }
+	    if ((!FIXREVERTER[4583] && (matcher == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaVErrMemory(vctxt,
 		    "allocating an IDC matcher", NULL);
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memset(matcher, 0, sizeof(xmlSchemaIDCMatcher));
 	}
 	if (last == NULL)
@@ -23366,8 +29027,23 @@ xmlSchemaIDCFillNodeTables(xmlSchemaValidCtxtPtr vctxt,
 	* Get/create the IDC binding on this element for the IDC definition.
 	*/
 	bind = xmlSchemaIDCAcquireBinding(vctxt, matcher);
-	if (bind == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4584]) {
+	  if ((bind == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4584\n");
+	  else
+	    fprintf(stderr, "reached bug index 4584\n");
+	}
+	if ((!FIXREVERTER[4584] && (bind == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	   goto internal_error;
+	   #ifdef FRCOV
+	   }
+	   #endif
 
 	if (! WXS_ILIST_IS_EMPTY(bind->dupls)) {
 	    dupls = (xmlSchemaPSVIIDCNodePtr *) bind->dupls->items;
@@ -23481,8 +29157,23 @@ xmlSchemaIDCFillNodeTables(xmlSchemaValidCtxtPtr vctxt,
 			*/
 			if (bind->dupls == NULL) {
 			    bind->dupls = xmlSchemaItemListCreate();
-			    if (bind->dupls == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[4590]) {
+			      if ((bind -> dupls == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 4590\n");
+			      else
+			        fprintf(stderr, "reached bug index 4590\n");
+			    }
+			    if ((!FIXREVERTER[4590] && (bind -> dupls == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				goto internal_error;
+				#ifdef FRCOV
+				}
+				#endif
 			}
 			if (xmlSchemaItemListAdd(bind->dupls, bind->nodeTable[j]) == -1)
 			    goto internal_error;
@@ -23538,10 +29229,25 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
     int i, j, k, ret = 0, nbFields, oldNum, oldDupls;
 
     bind = vctxt->inode->idcTable;
-    if (bind == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4592]) {
+      if ((bind == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4592\n");
+      else
+        fprintf(stderr, "reached bug index 4592\n");
+    }
+    if ((!FIXREVERTER[4592] && (bind == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/* Fine, no table, no bubbles. */
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     parTable = &(vctxt->elemInfos[vctxt->depth -1]->idcTable);
     /*
@@ -23569,8 +29275,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 	    } while (aidc != NULL);
 	}
 
-	if (parTable != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4593]) {
+	  if ((parTable != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4593\n");
+	  else
+	    fprintf(stderr, "reached bug index 4593\n");
+	}
+	if ((!FIXREVERTER[4593] && (parTable != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    parBind = *parTable;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Search a matching parent binding for the
 	* IDC definition.
@@ -23601,8 +29322,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 
 	    for (i = 0; i < bind->nbNodes; i++) {
 		node = bind->nodeTable[i];
-		if (node == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4594]) {
+		  if ((node == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4594\n");
+		  else
+		    fprintf(stderr, "reached bug index 4594\n");
+		}
+		if ((!FIXREVERTER[4594] && (node == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    continue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		/*
 		* ...with every key-sequence of the parent node, already
 		* evaluated to be a duplicate key-sequence.
@@ -23637,10 +29373,25 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 			    break;
 			j++;
 		    }
-		    if (j != oldDupls) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4598]) {
+		      if ((j != oldDupls ) && !(0))
+		        fprintf(stderr, "triggered bug index 4598\n");
+		      else
+		        fprintf(stderr, "reached bug index 4598\n");
+		    }
+		    if ((!FIXREVERTER[4598] && (j != oldDupls ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			/* Duplicate found. Skip this entry. */
 			continue;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		}
 		/*
 		* ... and with every key-sequence of the parent node.
@@ -23698,8 +29449,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 			}
 			if (parBind->dupls == NULL) {
 			    parBind->dupls = xmlSchemaItemListCreate();
-			    if (parBind->dupls == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[4602]) {
+			      if ((parBind -> dupls == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 4602\n");
+			      else
+			        fprintf(stderr, "reached bug index 4602\n");
+			    }
+			    if ((!FIXREVERTER[4602] && (parBind -> dupls == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				goto internal_error;
+				#ifdef FRCOV
+				}
+				#endif
 			}
 			xmlSchemaItemListAdd(parBind->dupls, parNode);
 		    } else {
@@ -23710,22 +29476,52 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 			if (parBind->nodeTable == NULL) {
 			    parBind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 				xmlMalloc(10 * sizeof(xmlSchemaPSVIIDCNodePtr));
-			    if (parBind->nodeTable == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[4603]) {
+			      if ((parBind -> nodeTable == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 4603\n");
+			      else
+			        fprintf(stderr, "reached bug index 4603\n");
+			    }
+			    if ((!FIXREVERTER[4603] && (parBind -> nodeTable == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 				xmlSchemaVErrMemory(NULL,
 				    "allocating IDC list of node-table items", NULL);
 				goto internal_error;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 			    parBind->sizeNodes = 1;
 			} else if (parBind->nbNodes >= parBind->sizeNodes) {
 			    parBind->sizeNodes *= 2;
 			    parBind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 				xmlRealloc(parBind->nodeTable, parBind->sizeNodes *
 				sizeof(xmlSchemaPSVIIDCNodePtr));
-			    if (parBind->nodeTable == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[4604]) {
+			      if ((parBind -> nodeTable == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 4604\n");
+			      else
+			        fprintf(stderr, "reached bug index 4604\n");
+			    }
+			    if ((!FIXREVERTER[4604] && (parBind -> nodeTable == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 				xmlSchemaVErrMemory(NULL,
 				    "re-allocating IDC list of node-table items", NULL);
 				goto internal_error;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 			}
 			parNodes = parBind->nodeTable;
 			/*
@@ -23744,8 +29540,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 	    * copy all node-tables.
 	    */
 	    parBind = xmlSchemaIDCNewBinding(bind->definition);
-	    if (parBind == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4605]) {
+	      if ((parBind == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4605\n");
+	      else
+	        fprintf(stderr, "reached bug index 4605\n");
+	    }
+	    if ((!FIXREVERTER[4605] && (parBind == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto internal_error;
+		#ifdef FRCOV
+		}
+		#endif
 
 	    /*
 	    * TODO: Hmm, how to optimize the initial number of
@@ -23775,13 +29586,28 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 		    parBind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 			xmlMalloc(bind->nbNodes *
 			sizeof(xmlSchemaPSVIIDCNodePtr));
-		    if (parBind->nodeTable == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4606]) {
+		      if ((parBind -> nodeTable == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4606\n");
+		      else
+		        fprintf(stderr, "reached bug index 4606\n");
+		    }
+		    if ((!FIXREVERTER[4606] && (parBind -> nodeTable == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlSchemaVErrMemory(NULL,
 			    "allocating an array of IDC node-table "
 			    "items", NULL);
 			xmlSchemaIDCFreeBinding(parBind);
 			goto internal_error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    parBind->sizeNodes = bind->nbNodes;
 		    parBind->nbNodes = bind->nbNodes;
 		    memcpy(parBind->nodeTable, bind->nodeTable,
@@ -23956,21 +29782,51 @@ xmlSchemaGetFreshAttrInfo(xmlSchemaValidCtxtPtr vctxt)
 	vctxt->attrInfos = (xmlSchemaAttrInfoPtr *)
 	    xmlMalloc(sizeof(xmlSchemaAttrInfoPtr));
 	vctxt->sizeAttrInfos = 1;
-	if (vctxt->attrInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4608]) {
+	  if ((vctxt -> attrInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4608\n");
+	  else
+	    fprintf(stderr, "reached bug index 4608\n");
+	}
+	if ((!FIXREVERTER[4608] && (vctxt -> attrInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"allocating attribute info list", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (vctxt->sizeAttrInfos <= vctxt->nbAttrInfos) {
 	vctxt->sizeAttrInfos++;
 	vctxt->attrInfos = (xmlSchemaAttrInfoPtr *)
 	    xmlRealloc(vctxt->attrInfos,
 		vctxt->sizeAttrInfos * sizeof(xmlSchemaAttrInfoPtr));
-	if (vctxt->attrInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4609]) {
+	  if ((vctxt -> attrInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4609\n");
+	  else
+	    fprintf(stderr, "reached bug index 4609\n");
+	}
+	if ((!FIXREVERTER[4609] && (vctxt -> attrInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"re-allocating attribute info list", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
 	iattr = vctxt->attrInfos[vctxt->nbAttrInfos++];
 	if (iattr->localName != NULL) {
@@ -23986,10 +29842,25 @@ xmlSchemaGetFreshAttrInfo(xmlSchemaValidCtxtPtr vctxt)
     */
     iattr = (xmlSchemaAttrInfoPtr)
 	xmlMalloc(sizeof(xmlSchemaAttrInfo));
-    if (iattr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4610]) {
+      if ((iattr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4610\n");
+      else
+        fprintf(stderr, "reached bug index 4610\n");
+    }
+    if ((!FIXREVERTER[4610] && (iattr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaVErrMemory(vctxt, "creating new attribute info", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(iattr, 0, sizeof(xmlSchemaAttrInfo));
     iattr->nodeType = XML_ATTRIBUTE_NODE;
     vctxt->attrInfos[vctxt->nbAttrInfos++] = iattr;
@@ -24010,11 +29881,26 @@ xmlSchemaValidatorPushAttribute(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaAttrInfoPtr attr;
 
     attr = xmlSchemaGetFreshAttrInfo(vctxt);
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4611]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4611\n");
+      else
+        fprintf(stderr, "reached bug index 4611\n");
+    }
+    if ((!FIXREVERTER[4611] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaPushAttribute",
 	    "calling xmlSchemaGetFreshAttrInfo()");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     attr->node = attrNode;
     attr->nodeLine = nodeLine;
     attr->state = XML_SCHEMAS_ATTR_UNKNOWN;
@@ -24049,8 +29935,23 @@ xmlSchemaValidatorPushAttribute(xmlSchemaValidCtxtPtr vctxt,
     attr->value = value;
     if (ownedValue)
 	attr->flags |= XML_SCHEMA_NODE_INFO_FLAG_OWNED_VALUES;
-    if (attr->metaType != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4612]) {
+      if ((attr -> metaType != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4612\n");
+      else
+        fprintf(stderr, "reached bug index 4612\n");
+    }
+    if ((!FIXREVERTER[4612] && (attr -> metaType != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	attr->state = XML_SCHEMAS_ATTR_META;
+	#ifdef FRCOV
+	}
+	#endif
     return (0);
 }
 
@@ -24129,19 +30030,49 @@ xmlSchemaGetFreshElemInfo(xmlSchemaValidCtxtPtr vctxt)
 {
     xmlSchemaNodeInfoPtr info = NULL;
 
-    if (vctxt->depth > vctxt->sizeElemInfos) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4613]) {
+      if ((vctxt -> depth > vctxt -> sizeElemInfos ) && !(0))
+        fprintf(stderr, "triggered bug index 4613\n");
+      else
+        fprintf(stderr, "reached bug index 4613\n");
+    }
+    if ((!FIXREVERTER[4613] && (vctxt -> depth > vctxt -> sizeElemInfos ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaGetFreshElemInfo",
 	    "inconsistent depth encountered");
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (vctxt->elemInfos == NULL) {
 	vctxt->elemInfos = (xmlSchemaNodeInfoPtr *)
 	    xmlMalloc(10 * sizeof(xmlSchemaNodeInfoPtr));
-	if (vctxt->elemInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4614]) {
+	  if ((vctxt -> elemInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4614\n");
+	  else
+	    fprintf(stderr, "reached bug index 4614\n");
+	}
+	if ((!FIXREVERTER[4614] && (vctxt -> elemInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"allocating the element info array", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(vctxt->elemInfos, 0, 10 * sizeof(xmlSchemaNodeInfoPtr));
 	vctxt->sizeElemInfos = 10;
     } else if (vctxt->sizeElemInfos <= vctxt->depth) {
@@ -24151,11 +30082,26 @@ xmlSchemaGetFreshElemInfo(xmlSchemaValidCtxtPtr vctxt)
 	vctxt->elemInfos = (xmlSchemaNodeInfoPtr *)
 	    xmlRealloc(vctxt->elemInfos, vctxt->sizeElemInfos *
 	    sizeof(xmlSchemaNodeInfoPtr));
-	if (vctxt->elemInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4615]) {
+	  if ((vctxt -> elemInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4615\n");
+	  else
+	    fprintf(stderr, "reached bug index 4615\n");
+	}
+	if ((!FIXREVERTER[4615] && (vctxt -> elemInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"re-allocating the element info array", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* We need the new memory to be NULLed.
 	* TODO: Use memset instead?
@@ -24168,11 +30114,26 @@ xmlSchemaGetFreshElemInfo(xmlSchemaValidCtxtPtr vctxt)
     if (info == NULL) {
 	info = (xmlSchemaNodeInfoPtr)
 	    xmlMalloc(sizeof(xmlSchemaNodeInfo));
-	if (info == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4616]) {
+	  if ((info == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4616\n");
+	  else
+	    fprintf(stderr, "reached bug index 4616\n");
+	}
+	if ((!FIXREVERTER[4616] && (info == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"allocating an element info", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	vctxt->elemInfos[vctxt->depth] = info;
     } else {
 	if (info->localName != NULL) {
@@ -24221,8 +30182,23 @@ xmlSchemaValidateFacets(xmlSchemaAbstractCtxtPtr actxt,
     * empty: until now, "pattern" and "enumeration" facets of the
     * *base types* need to be checked as well.
     */
-    if (type->facetSet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4617]) {
+      if ((type -> facetSet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4617\n");
+      else
+        fprintf(stderr, "reached bug index 4617\n");
+    }
+    if ((!FIXREVERTER[4617] && (type -> facetSet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto pattern_and_enum;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (! WXS_IS_ATOMIC(type)) {
 	if (WXS_IS_LIST(type))
@@ -24283,8 +30259,23 @@ xmlSchemaValidateFacets(xmlSchemaAbstractCtxtPtr actxt,
 		value, len, type, facetLink->facet, NULL, NULL, NULL);
 	    else
 		return (ret);
-	    if (error == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4618]) {
+	      if ((error == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4618\n");
+	      else
+	        fprintf(stderr, "reached bug index 4618\n");
+	    }
+	    if ((!FIXREVERTER[4618] && (error == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		error = ret;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	ret = 0;
     }
@@ -24319,8 +30310,23 @@ WXS_IS_LIST:
 		value, length, type, facetLink->facet, NULL, NULL, NULL);
 	    else
 		return (ret);
-	    if (error == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4619]) {
+	      if ((error == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4619\n");
+	      else
+	        fprintf(stderr, "reached bug index 4619\n");
+	    }
+	    if ((!FIXREVERTER[4619] && (error == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		error = ret;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	ret = 0;
     }
@@ -24345,14 +30351,44 @@ pattern_and_enum:
 		ret = xmlSchemaAreValuesEqual(facet->val, val);
 		if (ret == 1)
 		    break;
-		else if (ret < 0) {
+		else 
+		#ifdef FRCOV
+		{if (FIXREVERTER[4620]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4620\n");
+		  else
+		    fprintf(stderr, "reached bug index 4620\n");
+		}
+		if ((!FIXREVERTER[4620] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaValidateFacets",
 			"validating against an enumeration facet");
 		    return (-1);
 		}
-	    }
-	    if (ret != 0)
+		#ifdef FRCOV
+		}
+		#endif
+	    }
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4621]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4621\n");
+	      else
+	        fprintf(stderr, "reached bug index 4621\n");
+	    }
+	    if ((!FIXREVERTER[4621] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    /*
 	    * Break on the first set of enumerations. Any additional
 	    *  enumerations which might be existent on the ancestors
@@ -24371,8 +30407,23 @@ pattern_and_enum:
 		    value, 0, type, NULL, NULL, NULL, NULL);
 	    } else
 		return (ret);
-	    if (error == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4622]) {
+	      if ((error == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4622\n");
+	      else
+	        fprintf(stderr, "reached bug index 4622\n");
+	    }
+	    if ((!FIXREVERTER[4622] && (error == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		error = ret;
+		#ifdef FRCOV
+		}
+		#endif
 	}
     }
 
@@ -24416,8 +30467,23 @@ pattern_and_enum:
 			value, 0, type, facet, NULL, NULL, NULL);
 		} else
 		    return (ret);
-		if (error == 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4623]) {
+		  if ((error == 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4623\n");
+		  else
+		    fprintf(stderr, "reached bug index 4623\n");
+		}
+		if ((!FIXREVERTER[4623] && (error == 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    error = ret;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    }
 	    tmpType = tmpType->baseType;
@@ -24452,7 +30518,19 @@ xmlSchemaValidateQName(xmlSchemaValidCtxtPtr vctxt,
     xmlChar *local, *prefix = NULL;
 
     ret = xmlValidateQName(value, 1);
-    if (ret != 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4624]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4624\n");
+      else
+        fprintf(stderr, "reached bug index 4624\n");
+    }
+    if ((!FIXREVERTER[4624] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (ret == -1) {
 	    VERROR_INT("xmlSchemaValidateQName",
 		"calling xmlValidateQName()");
@@ -24460,13 +30538,31 @@ xmlSchemaValidateQName(xmlSchemaValidCtxtPtr vctxt,
 	}
 	return( XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * NOTE: xmlSplitQName2 will always return a duplicated
     * strings.
     */
     local = xmlSplitQName2(value, &prefix);
-    if (local == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4625]) {
+      if ((local == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4625\n");
+      else
+        fprintf(stderr, "reached bug index 4625\n");
+    }
+    if ((!FIXREVERTER[4625] && (local == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	local = xmlStrdup(value);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * OPTIMIZE TODO: Use flags for:
     *  - is there any namespace binding?
@@ -24559,8 +30655,23 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
     */
     if ((! valNeeded) && (type->flags & XML_SCHEMAS_TYPE_FACETSNEEDVALUE))
 	valNeeded = 1;
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4626]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4626\n");
+      else
+        fprintf(stderr, "reached bug index 4626\n");
+    }
+    if ((!FIXREVERTER[4626] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	value = BAD_CAST "";
+	#ifdef FRCOV
+	}
+	#endif
     if (WXS_IS_ANY_SIMPLE_TYPE(type) || WXS_IS_ATOMIC(type)) {
 	xmlSchemaTypePtr biType; /* The built-in type. */
 	/*
@@ -24580,11 +30691,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		(biType->type != XML_SCHEMA_TYPE_BASIC))
 		biType = biType->baseType;
 
-	    if (biType == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4627]) {
+	      if ((biType == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4627\n");
+	      else
+	        fprintf(stderr, "reached bug index 4627\n");
+	    }
+	    if ((!FIXREVERTER[4627] && (biType == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		    "could not get the built-in type");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	} else
 	    biType = type;
 	/*
@@ -24638,11 +30764,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 	    goto internal_error;
 	}
 	if (ret != 0) {
-	    if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4628]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4628\n");
+	      else
+	        fprintf(stderr, "reached bug index 4628\n");
+	    }
+	    if ((!FIXREVERTER[4628] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		    "validating against a built-in type");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (WXS_IS_LIST(type))
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 	    else
@@ -24656,11 +30797,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		(xmlSchemaValType) biType->builtInType, value, val,
 		0, fireErrors);
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4629]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4629\n");
+		  else
+		    fprintf(stderr, "reached bug index 4629\n");
+		}
+		if ((!FIXREVERTER[4629] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating facets of atomic simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		if (WXS_IS_LIST(type))
 		    ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 		else
@@ -24720,15 +30876,45 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		prevVal = curVal;
 		curVal = NULL;
 	    }
-	    if (ret != 0) {
-		if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4631]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4631\n");
+	      else
+	        fprintf(stderr, "reached bug index 4631\n");
+	    }
+	    if ((!FIXREVERTER[4631] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4630]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4630\n");
+		  else
+		    fprintf(stderr, "reached bug index 4630\n");
+		}
+		if ((!FIXREVERTER[4630] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating an item of list simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    cur = end;
 	} while (*cur != 0);
 	FREE_AND_NULL(tmpValue);
@@ -24740,11 +30926,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		XML_SCHEMAS_UNKNOWN, value, val,
 		len, fireErrors);
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4632]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4632\n");
+		  else
+		    fprintf(stderr, "reached bug index 4632\n");
+		}
+		if ((!FIXREVERTER[4632] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating facets of list simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 	    }
 	}
@@ -24775,11 +30976,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 	* {member type definitions}
 	*/
 	memberLink = xmlSchemaGetUnionSimpleTypeMemberTypes(type);
-	if (memberLink == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4633]) {
+	  if ((memberLink == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4633\n");
+	  else
+	    fprintf(stderr, "reached bug index 4633\n");
+	}
+	if ((!FIXREVERTER[4633] && (memberLink == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		"union simple type has no member types");
 	    goto internal_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Always normalize union type values, since we currently
 	* cannot store the whitespace information with the value
@@ -24793,16 +31009,46 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 	    else
 		ret = xmlSchemaVCheckCVCSimpleType(actxt, node,
 		    memberLink->type, value, NULL, 0, 1, 0);
-	    if (ret <= 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4634]) {
+	      if ((ret <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4634\n");
+	      else
+	        fprintf(stderr, "reached bug index 4634\n");
+	    }
+	    if ((!FIXREVERTER[4634] && (ret <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    memberLink = memberLink->next;
 	}
 	if (ret != 0) {
-	    if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4635]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4635\n");
+	      else
+	        fprintf(stderr, "reached bug index 4635\n");
+	    }
+	    if ((!FIXREVERTER[4635] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		    "validating members of union simple type");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3;
 	}
 	/*
@@ -24819,11 +31065,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		XML_SCHEMAS_UNKNOWN, value, val,
 		0, fireErrors);
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4636]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4636\n");
+		  else
+		    fprintf(stderr, "reached bug index 4636\n");
+		}
+		if ((!FIXREVERTER[4636] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating facets of union simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3;
 	    }
 	}
@@ -24857,8 +31118,23 @@ xmlSchemaVExpandQName(xmlSchemaValidCtxtPtr vctxt,
 {
     int ret = 0;
 
-    if ((nsName == NULL) || (localName == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4637]) {
+      if ((nsName == (void *) 0 || localName == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4637\n");
+      else
+        fprintf(stderr, "reached bug index 4637\n");
+    }
+    if ((!FIXREVERTER[4637] && (nsName == (void *) 0 || localName == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     *nsName = NULL;
     *localName = NULL;
 
@@ -24922,8 +31198,23 @@ xmlSchemaProcessXSIType(xmlSchemaValidCtxtPtr vctxt,
     *   (1.2.1.2.1) - (1.2.1.2.4)
     * Handle 'xsi:type'.
     */
-    if (localType == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4639]) {
+      if ((localType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4639\n");
+      else
+        fprintf(stderr, "reached bug index 4639\n");
+    }
+    if ((!FIXREVERTER[4639] && (localType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     *localType = NULL;
     if (iattr == NULL)
 	return (0);
@@ -24940,15 +31231,45 @@ xmlSchemaProcessXSIType(xmlSchemaValidCtxtPtr vctxt,
 	*/
 	ret = xmlSchemaVExpandQName(vctxt, iattr->value,
 	    &nsName, &local);
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4641]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4641\n");
+	  else
+	    fprintf(stderr, "reached bug index 4641\n");
+	}
+	if ((!FIXREVERTER[4641] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4640]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4640\n");
+	      else
+	        fprintf(stderr, "reached bug index 4640\n");
+	    }
+	    if ((!FIXREVERTER[4640] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateElementByDeclaration",
 		    "calling xmlSchemaQNameExpand() to validate the "
 		    "attribute 'xsi:type'");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* (cvc-elt) (3.3.4) : (4.2)
 	* (cvc-assess-elt) (1.2.1.2.3)
@@ -25047,11 +31368,26 @@ xmlSchemaValidateElemDecl(xmlSchemaValidCtxtPtr vctxt)
     /*
     * cvc-elt (3.3.4) : 1
     */
-    if (elemDecl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4642]) {
+      if ((elemDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4642\n");
+      else
+        fprintf(stderr, "reached bug index 4642\n");
+    }
+    if ((!FIXREVERTER[4642] && (elemDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR(XML_SCHEMAV_CVC_ELT_1, NULL,
 	    "No matching declaration available");
         return (vctxt->err);
     }
+    #ifdef FRCOV
+    }
+    #endif
     actualType = WXS_ELEM_TYPEDEF(elemDecl);
     /*
     * cvc-elt (3.3.4) : 2
@@ -25061,11 +31397,26 @@ xmlSchemaValidateElemDecl(xmlSchemaValidCtxtPtr vctxt)
 	    "The element declaration is abstract");
         return (vctxt->err);
     }
-    if (actualType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4643]) {
+      if ((actualType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4643\n");
+      else
+        fprintf(stderr, "reached bug index 4643\n");
+    }
+    if ((!FIXREVERTER[4643] && (actualType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR(XML_SCHEMAV_CVC_TYPE_1, NULL,
 	    "The type definition is absent");
 	return (XML_SCHEMAV_CVC_TYPE_1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (vctxt->nbAttrInfos != 0) {
 	int ret;
 	xmlSchemaAttrInfoPtr iattr;
@@ -25153,11 +31504,26 @@ xmlSchemaValidateElemDecl(xmlSchemaValidCtxtPtr vctxt)
     /*
     * No actual type definition.
     */
-    if (actualType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4645]) {
+      if ((actualType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4645\n");
+      else
+        fprintf(stderr, "reached bug index 4645\n");
+    }
+    if ((!FIXREVERTER[4645] && (actualType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR(XML_SCHEMAV_CVC_TYPE_1, NULL,
 	    "The type definition is absent");
 	return (XML_SCHEMAV_CVC_TYPE_1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Remember the actual type definition.
     */
@@ -25179,8 +31545,23 @@ xmlSchemaVAttributesSimple(xmlSchemaValidCtxtPtr vctxt)
     * whose local name is one of type, nil, schemaLocation or
     * noNamespaceSchemaLocation."
     */
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4646]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4646\n");
+      else
+        fprintf(stderr, "reached bug index 4646\n");
+    }
+    if ((!FIXREVERTER[4646] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	iattr = vctxt->attrInfos[i];
 	if (! iattr->metaType) {
@@ -25203,8 +31584,23 @@ xmlSchemaClearAttrInfos(xmlSchemaValidCtxtPtr vctxt)
     int i;
     xmlSchemaAttrInfoPtr attr;
 
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4647]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4647\n");
+      else
+        fprintf(stderr, "reached bug index 4647\n");
+    }
+    if ((!FIXREVERTER[4647] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	attr = vctxt->attrInfos[i];
 	if (attr->flags & XML_SCHEMA_NODE_INFO_FLAG_OWNED_NAMES) {
@@ -25335,12 +31731,27 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * item's [attributes] as per clause 3.1 above."
 	    */
 	    tmpiattr = xmlSchemaGetFreshAttrInfo(vctxt);
-	    if (tmpiattr == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4648]) {
+	      if ((tmpiattr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4648\n");
+	      else
+	        fprintf(stderr, "reached bug index 4648\n");
+	    }
+	    if ((!FIXREVERTER[4648] && (tmpiattr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT(
 		    "xmlSchemaVAttributesComplex",
 		    "calling xmlSchemaGetFreshAttrInfo()");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    tmpiattr->state = XML_SCHEMAS_ATTR_ERR_MISSING;
 	    tmpiattr->use = attrUse;
 	    tmpiattr->decl = attrDecl;
@@ -25351,12 +31762,27 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * Handle non-existent, optional, default/fixed attributes.
 	    */
 	    tmpiattr = xmlSchemaGetFreshAttrInfo(vctxt);
-	    if (tmpiattr == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4649]) {
+	      if ((tmpiattr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4649\n");
+	      else
+	        fprintf(stderr, "reached bug index 4649\n");
+	    }
+	    if ((!FIXREVERTER[4649] && (tmpiattr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT(
 		    "xmlSchemaVAttributesComplex",
 		    "calling xmlSchemaGetFreshAttrInfo()");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    tmpiattr->state = XML_SCHEMAS_ATTR_DEFAULT;
 	    tmpiattr->use = attrUse;
 	    tmpiattr->decl = attrDecl;
@@ -25366,8 +31792,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	}
     }
 
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4650]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4650\n");
+      else
+        fprintf(stderr, "reached bug index 4650\n");
+    }
+    if ((!FIXREVERTER[4650] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Validate against the wildcard.
     */
@@ -25382,8 +31823,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * SPEC (cvc-complex-type) (3)
 	    * Skip meta attributes.
 	    */
-	    if (iattr->state != XML_SCHEMAS_ATTR_UNKNOWN)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4651]) {
+	      if ((iattr -> state != 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4651\n");
+	      else
+	        fprintf(stderr, "reached bug index 4651\n");
+	    }
+	    if ((!FIXREVERTER[4651] && (iattr -> state != 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    /*
 	    * SPEC (cvc-complex-type)
 	    * (3.2.2) "The attribute information item must be `valid` with
@@ -25486,8 +31942,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	}
     }
 
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4653]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4653\n");
+      else
+        fprintf(stderr, "reached bug index 4653\n");
+    }
+    if ((!FIXREVERTER[4653] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Get the owner element; needed for creation of default attributes.
@@ -25514,10 +31985,25 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	/*
 	* VAL TODO: What to do if the type definition is missing?
 	*/
-	if (iattr->typeDef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4654]) {
+	  if ((iattr -> typeDef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4654\n");
+	  else
+	    fprintf(stderr, "reached bug index 4654\n");
+	}
+	if ((!FIXREVERTER[4654] && (iattr -> typeDef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    iattr->state = XML_SCHEMAS_ATTR_ERR_NO_TYPE;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	ACTIVATE_ATTRIBUTE(iattr);
 	fixed = 0;
@@ -25536,7 +32022,19 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    }
 	}
 
-	if (iattr->state == XML_SCHEMAS_ATTR_DEFAULT) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4658]) {
+	  if ((iattr -> state == 8 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4658\n");
+	  else
+	    fprintf(stderr, "reached bug index 4658\n");
+	}
+	if ((!FIXREVERTER[4658] && (iattr -> state == 8 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * Default/fixed attributes.
 	    * We need the value only if we need to resolve IDCs or
@@ -25554,18 +32052,48 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 		* IDCs will consume the precomputed default value,
 		* so we need to clone it.
 		*/
-		if (iattr->val == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4655]) {
+		  if ((iattr -> val == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4655\n");
+		  else
+		    fprintf(stderr, "reached bug index 4655\n");
+		}
+		if ((!FIXREVERTER[4655] && (iattr -> val == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaVAttributesComplex",
 			"default/fixed value on an attribute use was "
 			"not precomputed");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		iattr->val = xmlSchemaCopyValue(iattr->val);
-		if (iattr->val == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4656]) {
+		  if ((iattr -> val == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4656\n");
+		  else
+		    fprintf(stderr, "reached bug index 4656\n");
+		}
+		if ((!FIXREVERTER[4656] && (iattr -> val == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaVAttributesComplex",
 			"calling xmlSchemaCopyValue()");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 	    /*
 	    * PSVI: Add the default attribute to the current element.
@@ -25583,8 +32111,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 		*/
 		normValue = xmlSchemaNormalizeValue(iattr->typeDef,
 		    iattr->value);
-		if (normValue != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4657]) {
+		  if ((normValue != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4657\n");
+		  else
+		    fprintf(stderr, "reached bug index 4657\n");
+		}
+		if ((!FIXREVERTER[4657] && (normValue != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    value = BAD_CAST normValue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 
 		if (iattr->nsName == NULL) {
 		    if (xmlNewProp(defAttrOwnerElem,
@@ -25641,6 +32184,9 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    */
 	    goto eval_idcs;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Validate the value.
 	*/
@@ -25717,11 +32263,26 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * (4) "The item's *actual* value must match the *value* of
 	    * the {value constraint}, if it is present and fixed."
 	    */
-	    if (iattr->val == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4660]) {
+	      if ((iattr -> val == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4660\n");
+	      else
+	        fprintf(stderr, "reached bug index 4660\n");
+	    }
+	    if ((!FIXREVERTER[4660] && (iattr -> val == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/* VAL TODO: A value was not precomputed. */
 		TODO
 		goto eval_idcs;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if ((iattr->use != NULL) &&
 		(iattr->use->defValue != NULL)) {
 		if (iattr->use->defVal == NULL) {
@@ -25778,11 +32339,23 @@ eval_idcs:
     */
     for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	iattr = vctxt->attrInfos[i];
-	if ((iattr->state == XML_SCHEMAS_ATTR_META) ||
-	    (iattr->state == XML_SCHEMAS_ATTR_ASSESSED) ||
-	    (iattr->state == XML_SCHEMAS_ATTR_WILD_SKIP) ||
-	    (iattr->state == XML_SCHEMAS_ATTR_WILD_LAX_NO_DECL))
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4661]) {
+	  if ((iattr -> state == 17 || iattr -> state == 2 || iattr -> state == 13 || iattr -> state == 14 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4661\n");
+	  else
+	    fprintf(stderr, "reached bug index 4661\n");
+	}
+	if ((!FIXREVERTER[4661] && (iattr -> state == 17 || iattr -> state == 2 || iattr -> state == 13 || iattr -> state == 14 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ACTIVATE_ATTRIBUTE(iattr);
 	switch (iattr->state) {
 	    case XML_SCHEMAS_ATTR_ERR_MISSING: {
@@ -25857,7 +32430,19 @@ xmlSchemaValidateElemWildcard(xmlSchemaValidCtxtPtr vctxt,
 	return (-1);
     }
     *skip = 0;
-    if (wild->processContents == XML_SCHEMAS_ANY_SKIP) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4662]) {
+      if ((wild -> processContents == 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 4662\n");
+      else
+        fprintf(stderr, "reached bug index 4662\n");
+    }
+    if ((!FIXREVERTER[4662] && (wild -> processContents == 1 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* URGENT VAL TODO: Either we need to position the stream to the
 	* next sibling, or walk the whole subtree.
@@ -25865,6 +32450,9 @@ xmlSchemaValidateElemWildcard(xmlSchemaValidCtxtPtr vctxt,
 	*skip = 1;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     {
 	xmlSchemaElementPtr decl = NULL;
 
@@ -25875,13 +32463,28 @@ xmlSchemaValidateElemWildcard(xmlSchemaValidCtxtPtr vctxt,
 	    return (0);
 	}
     }
-    if (wild->processContents == XML_SCHEMAS_ANY_STRICT) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4663]) {
+      if ((wild -> processContents == 3 ) && !(0))
+        fprintf(stderr, "triggered bug index 4663\n");
+      else
+        fprintf(stderr, "reached bug index 4663\n");
+    }
+    if ((!FIXREVERTER[4663] && (wild -> processContents == 3 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/* VAL TODO: Change to proper error code. */
 	VERROR(XML_SCHEMAV_CVC_ELT_1, NULL, /* WXS_BASIC_CAST wild */
 	    "No matching global element declaration available, but "
 	    "demanded by the strict wildcard");
 	return (vctxt->err);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (vctxt->nbAttrInfos != 0) {
 	xmlSchemaAttrInfoPtr iattr;
 	/*
@@ -26020,11 +32623,26 @@ static int
 xmlSchemaValidatorPushElem(xmlSchemaValidCtxtPtr vctxt)
 {
     vctxt->inode = xmlSchemaGetFreshElemInfo(vctxt);
-    if (vctxt->inode == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4664]) {
+      if ((vctxt -> inode == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4664\n");
+      else
+        fprintf(stderr, "reached bug index 4664\n");
+    }
+    if ((!FIXREVERTER[4664] && (vctxt -> inode == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaValidatorPushElem",
 	    "calling xmlSchemaGetFreshElemInfo()");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     vctxt->nbAttrInfos = 0;
     return (0);
 }
@@ -26099,11 +32717,26 @@ xmlSchemaValidatorPopElem(xmlSchemaValidCtxtPtr vctxt)
 		inode->regexCtxt =
 		    xmlRegNewExecCtxt(inode->typeDef->contModel,
 		    xmlSchemaVContentModelCallback, vctxt);
-		if (inode->regexCtxt == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4665]) {
+		  if ((inode -> regexCtxt == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4665\n");
+		  else
+		    fprintf(stderr, "reached bug index 4665\n");
+		}
+		if ((!FIXREVERTER[4665] && (inode -> regexCtxt == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaValidatorPopElem",
 			"failed to create a regex context");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 #ifdef DEBUG_AUTOMATA
 		xmlGenericError(xmlGenericErrorContext,
 		    "AUTOMATON create on '%s'\n", inode->localName);
@@ -26175,7 +32808,19 @@ character_content:
     /*
     * Check character content.
     */
-    if (inode->decl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4667]) {
+      if ((inode -> decl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4667\n");
+      else
+        fprintf(stderr, "reached bug index 4667\n");
+    }
+    if ((!FIXREVERTER[4667] && (inode -> decl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Speedup if no declaration exists.
 	*/
@@ -26187,13 +32832,31 @@ character_content:
 		inode, inode->typeDef->contentTypeDef,
 		inode->value);
 	}
-	if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4666]) {
+	  if ((ret < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4666\n");
+	  else
+	    fprintf(stderr, "reached bug index 4666\n");
+	}
+	if ((!FIXREVERTER[4666] && (ret < 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    VERROR_INT("xmlSchemaValidatorPopElem",
 		"calling xmlSchemaVCheckCVCSimpleType()");
 	    goto internal_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	goto end_elem;
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * cvc-elt (3.3.4) : 5
     * The appropriate case among the following must be true:
@@ -26224,14 +32887,44 @@ character_content:
 
 	    ret = xmlSchemaCheckCOSValidDefault(vctxt,
 		inode->decl->value, &(inode->val));
-	    if (ret != 0) {
-		if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4669]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4669\n");
+	      else
+	        fprintf(stderr, "reached bug index 4669\n");
+	    }
+	    if ((!FIXREVERTER[4669] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4668]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4668\n");
+		  else
+		    fprintf(stderr, "reached bug index 4668\n");
+		}
+		if ((!FIXREVERTER[4668] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaValidatorPopElem",
 			"calling xmlSchemaCheckCOSValidDefault()");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		goto end_elem;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Stop here, to avoid redundant validation of the value
 	    * (see following).
@@ -26254,14 +32947,44 @@ character_content:
 		inode, inode->typeDef->contentTypeDef,
 		inode->decl->value);
 	}
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4671]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4671\n");
+	  else
+	    fprintf(stderr, "reached bug index 4671\n");
+	}
+	if ((!FIXREVERTER[4671] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4670]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4670\n");
+	      else
+	        fprintf(stderr, "reached bug index 4670\n");
+	    }
+	    if ((!FIXREVERTER[4670] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidatorPopElem",
 		    "calling xmlSchemaVCheckCVCSimpleType()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto end_elem;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 default_psvi:
 	/*
@@ -26322,14 +33045,44 @@ default_psvi:
 	    ret = xmlSchemaVCheckINodeDataType(vctxt,
 		inode, inode->typeDef->contentTypeDef, inode->value);
 	}
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4673]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4673\n");
+	  else
+	    fprintf(stderr, "reached bug index 4673\n");
+	}
+	if ((!FIXREVERTER[4673] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4672]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4672\n");
+	      else
+	        fprintf(stderr, "reached bug index 4672\n");
+	    }
+	    if ((!FIXREVERTER[4672] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidatorPopElem",
 		    "calling xmlSchemaVCheckCVCSimpleType()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto end_elem;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* 5.2.2 If there is a fixed {value constraint} and clause 3.2 has
 	* not applied, all of the following must be true:
@@ -26412,12 +33165,42 @@ default_psvi:
     }
 
 end_elem:
-    if (vctxt->depth < 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4674]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4674\n");
+      else
+        fprintf(stderr, "reached bug index 4674\n");
+    }
+    if ((!FIXREVERTER[4674] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/* TODO: raise error? */
 	return (0);
     }
-    if (vctxt->depth == vctxt->skipDepth)
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4675]) {
+      if ((vctxt -> depth == vctxt -> skipDepth  ) && !(0))
+        fprintf(stderr, "triggered bug index 4675\n");
+      else
+        fprintf(stderr, "reached bug index 4675\n");
+    }
+    if ((!FIXREVERTER[4675] && (vctxt -> depth == vctxt -> skipDepth  ))
+    #else
+    if (0
+    #endif
+    )
 	vctxt->skipDepth = -1;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Evaluate the history of XPath state objects.
     */
@@ -26481,11 +33264,26 @@ end_elem:
     /*
     * Skip further processing if we are on the validation root.
     */
-    if (vctxt->depth == 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4676]) {
+      if ((vctxt -> depth == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4676\n");
+      else
+        fprintf(stderr, "reached bug index 4676\n");
+    }
+    if ((!FIXREVERTER[4676] && (vctxt -> depth == 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	vctxt->depth--;
 	vctxt->inode = NULL;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Reset the keyrefDepth if needed.
     */
@@ -26527,11 +33325,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
     xmlSchemaTypePtr ptype;
     int ret = 0;
 
-    if (vctxt->depth <= 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4677]) {
+      if ((vctxt -> depth <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4677\n");
+      else
+        fprintf(stderr, "reached bug index 4677\n");
+    }
+    if ((!FIXREVERTER[4677] && (vctxt -> depth <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaValidateChildElem",
 	    "not intended for the validation root");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     pielem = vctxt->elemInfos[vctxt->depth -1];
     if (pielem->flags & XML_SCHEMA_ELEM_INFO_EMPTY)
 	pielem->flags ^= XML_SCHEMA_ELEM_INFO_EMPTY;
@@ -26553,7 +33366,19 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 
     ptype = pielem->typeDef;
 
-    if (ptype->builtInType == XML_SCHEMAS_ANYTYPE) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4679]) {
+      if ((ptype -> builtInType == XML_SCHEMAS_ANYTYPE ) && !(0))
+        fprintf(stderr, "triggered bug index 4679\n");
+      else
+        fprintf(stderr, "reached bug index 4679\n");
+    }
+    if ((!FIXREVERTER[4679] && (ptype -> builtInType == XML_SCHEMAS_ANYTYPE ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Workaround for "anyType": we have currently no content model
 	* assigned for "anyType", so handle it explicitely.
@@ -26574,7 +33399,19 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 	    if (iattr != NULL) {
 		ret = xmlSchemaProcessXSIType(vctxt, iattr,
 		    &(vctxt->inode->typeDef), NULL);
-		if (ret != 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4678]) {
+		  if ((ret != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4678\n");
+		  else
+		    fprintf(stderr, "reached bug index 4678\n");
+		}
+		if ((!FIXREVERTER[4678] && (ret != 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    if (ret == -1) {
 			VERROR_INT("xmlSchemaValidateChildElem",
 			    "calling xmlSchemaProcessXSIType() to "
@@ -26583,6 +33420,9 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 		    }
 		    return (ret);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    } else {
 		 /*
 		 * Fallback to "anyType".
@@ -26600,6 +33440,9 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 	}
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     switch (ptype->contentType) {
 	case XML_SCHEMA_CONTENT_EMPTY:
@@ -26625,11 +33468,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 
 	    /* VAL TODO: Optimized "anyType" validation.*/
 
-	    if (ptype->contModel == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4680]) {
+	      if ((ptype -> contModel == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4680\n");
+	      else
+	        fprintf(stderr, "reached bug index 4680\n");
+	    }
+	    if ((!FIXREVERTER[4680] && (ptype -> contModel == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateChildElem",
 		    "type has elem content but no content model");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Safety belf for evaluation if the cont. model was already
 	    * examined to be invalid.
@@ -26647,11 +33505,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 		*/
 		regexCtxt = xmlRegNewExecCtxt(ptype->contModel,
 		    xmlSchemaVContentModelCallback, vctxt);
-		if (regexCtxt == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4681]) {
+		  if ((regexCtxt == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4681\n");
+		  else
+		    fprintf(stderr, "reached bug index 4681\n");
+		}
+		if ((!FIXREVERTER[4681] && (regexCtxt == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaValidateChildElem",
 			"failed to create a regex context");
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		pielem->regexCtxt = regexCtxt;
 #ifdef DEBUG_AUTOMATA
 		xmlGenericError(xmlGenericErrorContext, "AUTOMATA create on '%s'\n",
@@ -26681,11 +33554,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 		"AUTOMATON push OK for '%s' on '%s'\n",
 		vctxt->inode->localName, pielem->localName);
 #endif
-	    if (vctxt->err == XML_SCHEMAV_INTERNAL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4682]) {
+	      if ((vctxt -> err == XML_SCHEMAV_INTERNAL ) && !(0))
+	        fprintf(stderr, "triggered bug index 4682\n");
+	      else
+	        fprintf(stderr, "reached bug index 4682\n");
+	    }
+	    if ((!FIXREVERTER[4682] && (vctxt -> err == XML_SCHEMAV_INTERNAL ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateChildElem",
 		    "calling xmlRegExecPushString2()");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (ret < 0) {
 		xmlRegExecErrInfo(regexCtxt, NULL, &nbval, &nbneg,
 		    &values[0], &terminal);
@@ -26855,8 +33743,23 @@ xmlSchemaVPushText(xmlSchemaValidCtxtPtr vctxt,
 		break;
 	}
     } else {
-	if (len < 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4683]) {
+	  if ((len < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4683\n");
+	  else
+	    fprintf(stderr, "reached bug index 4683\n");
+	}
+	if ((!FIXREVERTER[4683] && (len < 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    len = xmlStrlen(value);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Concat the value.
 	*/
@@ -26896,12 +33799,27 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
 	*   instantly stop the validation.
 	*/
 	ret = xmlSchemaAssembleByXSI(vctxt);
-	if (ret != 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4684]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4684\n");
+	  else
+	    fprintf(stderr, "reached bug index 4684\n");
+	}
+	if ((!FIXREVERTER[4684] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    if (ret == -1)
 		goto internal_error;
 	    vctxt->skipDepth = 0;
 	    return(ret);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         /*
          * Augment the IDC definitions for the main schema and all imported ones
          * NOTE: main schema is the first in the imported list
@@ -26915,16 +33833,61 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
 	* of the parent.
 	*/
 	ret = xmlSchemaValidateChildElem(vctxt);
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4686]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4686\n");
+	  else
+	    fprintf(stderr, "reached bug index 4686\n");
+	}
+	if ((!FIXREVERTER[4686] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4685]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4685\n");
+	      else
+	        fprintf(stderr, "reached bug index 4685\n");
+	    }
+	    if ((!FIXREVERTER[4685] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateElem",
 		    "calling xmlSchemaStreamValidateChildElement()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto exit;
 	}
-	if (vctxt->depth == vctxt->skipDepth)
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4687]) {
+	  if ((vctxt -> depth == vctxt -> skipDepth ) && !(0))
+	    fprintf(stderr, "triggered bug index 4687\n");
+	  else
+	    fprintf(stderr, "reached bug index 4687\n");
+	}
+	if ((!FIXREVERTER[4687] && (vctxt -> depth == vctxt -> skipDepth ))
+	#else
+	if (0
+	#endif
+	)
 	    goto exit;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((vctxt->inode->decl == NULL) &&
 	    (vctxt->inode->typeDef == NULL)) {
 	    VERROR_INT("xmlSchemaValidateElem",
@@ -26957,14 +33920,44 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
 	* Wildcards.
 	*/
 	ret = xmlSchemaValidateElemWildcard(vctxt, &skip);
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4689]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4689\n");
+	  else
+	    fprintf(stderr, "reached bug index 4689\n");
+	}
+	if ((!FIXREVERTER[4689] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4688]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4688\n");
+	      else
+	        fprintf(stderr, "reached bug index 4688\n");
+	    }
+	    if ((!FIXREVERTER[4688] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateElem",
 		    "calling xmlSchemaValidateElemWildcard()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (skip) {
 	    vctxt->skipDepth = vctxt->depth;
 	    goto exit;
@@ -26985,14 +33978,44 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
     * Validate against the declaration.
     */
     ret = xmlSchemaValidateElemDecl(vctxt);
-    if (ret != 0) {
-	if (ret < 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4691]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4691\n");
+      else
+        fprintf(stderr, "reached bug index 4691\n");
+    }
+    if ((!FIXREVERTER[4691] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4690]) {
+	  if ((ret < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4690\n");
+	  else
+	    fprintf(stderr, "reached bug index 4690\n");
+	}
+	if ((!FIXREVERTER[4690] && (ret < 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    VERROR_INT("xmlSchemaValidateElem",
 		"calling xmlSchemaValidateElemDecl()");
 	    goto internal_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	goto exit;
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Validate against the type definition.
     */
@@ -27055,8 +34078,23 @@ type_validation:
     ret = 0;
 
 exit:
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4692]) {
+      if ((ret != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4692\n");
+      else
+        fprintf(stderr, "reached bug index 4692\n");
+    }
+    if ((!FIXREVERTER[4692] && (ret != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	vctxt->skipDepth = vctxt->depth;
+	#ifdef FRCOV
+	}
+	#endif
     return (ret);
 internal_error:
     return (-1);
@@ -27271,8 +34309,23 @@ xmlSchemaSAXHandleText(void *ctx,
 {
     xmlSchemaValidCtxtPtr vctxt = (xmlSchemaValidCtxtPtr) ctx;
 
-    if (vctxt->depth < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4693]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4693\n");
+      else
+        fprintf(stderr, "reached bug index 4693\n");
+    }
+    if ((!FIXREVERTER[4693] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((vctxt->skipDepth != -1) && (vctxt->depth >= vctxt->skipDepth))
 	return;
     if (vctxt->inode->flags & XML_SCHEMA_ELEM_INFO_EMPTY)
@@ -27296,8 +34349,23 @@ xmlSchemaSAXHandleCDataSection(void *ctx,
 {
     xmlSchemaValidCtxtPtr vctxt = (xmlSchemaValidCtxtPtr) ctx;
 
-    if (vctxt->depth < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4694]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4694\n");
+      else
+        fprintf(stderr, "reached bug index 4694\n");
+    }
+    if ((!FIXREVERTER[4694] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((vctxt->skipDepth != -1) && (vctxt->depth >= vctxt->skipDepth))
 	return;
     if (vctxt->inode->flags & XML_SCHEMA_ELEM_INFO_EMPTY)
@@ -27317,8 +34385,23 @@ xmlSchemaSAXHandleReference(void *ctx ATTRIBUTE_UNUSED,
 {
     xmlSchemaValidCtxtPtr vctxt = (xmlSchemaValidCtxtPtr) ctx;
 
-    if (vctxt->depth < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4695]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4695\n");
+      else
+        fprintf(stderr, "reached bug index 4695\n");
+    }
+    if ((!FIXREVERTER[4695] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((vctxt->skipDepth != -1) && (vctxt->depth >= vctxt->skipDepth))
 	return;
     /* SAX VAL TODO: What to do here? */
@@ -27382,12 +34465,27 @@ xmlSchemaSAXHandleStartElementNs(void *ctx,
 		ielem->nsBindings =
 		    (const xmlChar **) xmlMalloc(10 *
 			sizeof(const xmlChar *));
-		if (ielem->nsBindings == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4696]) {
+		  if ((ielem -> nsBindings == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4696\n");
+		  else
+		    fprintf(stderr, "reached bug index 4696\n");
+		}
+		if ((!FIXREVERTER[4696] && (ielem -> nsBindings == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaVErrMemory(vctxt,
 			"allocating namespace bindings for SAX validation",
 			NULL);
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ielem->nbNsBindings = 0;
 		ielem->sizeNsBindings = 5;
 	    } else if (ielem->sizeNsBindings <= ielem->nbNsBindings) {
@@ -27396,12 +34494,27 @@ xmlSchemaSAXHandleStartElementNs(void *ctx,
 		    (const xmlChar **) xmlRealloc(
 			(void *) ielem->nsBindings,
 			ielem->sizeNsBindings * 2 * sizeof(const xmlChar *));
-		if (ielem->nsBindings == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4697]) {
+		  if ((ielem -> nsBindings == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4697\n");
+		  else
+		    fprintf(stderr, "reached bug index 4697\n");
+		}
+		if ((!FIXREVERTER[4697] && (ielem -> nsBindings == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaVErrMemory(vctxt,
 			"re-allocating namespace bindings for SAX validation",
 			NULL);
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 
 	    ielem->nsBindings[ielem->nbNsBindings * 2] = namespaces[j];
@@ -27436,12 +34549,27 @@ xmlSchemaSAXHandleStartElementNs(void *ctx,
 	    */
 	    valueLen = attributes[j+4] - attributes[j+3];
 	    value = xmlMallocAtomic(valueLen + 1);
-	    if (value == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4698]) {
+	      if ((value == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4698\n");
+	      else
+	        fprintf(stderr, "reached bug index 4698\n");
+	    }
+	    if ((!FIXREVERTER[4698] && (value == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaVErrMemory(vctxt,
 		    "allocating string for decoded attribute",
 		    NULL);
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    for (k = 0, l = 0; k < valueLen; l++) {
 		if (k < valueLen - 4 &&
 		    attributes[j+3][k+0] == '&' &&
@@ -27555,10 +34683,25 @@ xmlSchemaNewValidCtxt(xmlSchemaPtr schema)
     xmlSchemaValidCtxtPtr ret;
 
     ret = (xmlSchemaValidCtxtPtr) xmlMalloc(sizeof(xmlSchemaValidCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4702]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4702\n");
+      else
+        fprintf(stderr, "reached bug index 4702\n");
+    }
+    if ((!FIXREVERTER[4702] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaVErrMemory(NULL, "allocating validation context", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaValidCtxt));
     ret->type = XML_SCHEMA_CTXT_VALIDATOR;
     ret->dict = xmlDictCreate();
@@ -27597,8 +34740,23 @@ xmlSchemaValidateSetFilename(xmlSchemaValidCtxtPtr vctxt, const char *filename)
 static void
 xmlSchemaClearValidCtxt(xmlSchemaValidCtxtPtr vctxt)
 {
-    if (vctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4704]) {
+      if ((vctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4704\n");
+      else
+        fprintf(stderr, "reached bug index 4704\n");
+    }
+    if ((!FIXREVERTER[4704] && (vctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
     * TODO: Should we clear the flags?
@@ -27688,8 +34846,23 @@ xmlSchemaClearValidCtxt(xmlSchemaValidCtxtPtr vctxt)
 
 	for (i = 0; i < vctxt->sizeElemInfos; i++) {
 	    ei = vctxt->elemInfos[i];
-	    if (ei == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4705]) {
+	      if ((ei == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4705\n");
+	      else
+	        fprintf(stderr, "reached bug index 4705\n");
+	    }
+	    if ((!FIXREVERTER[4705] && (ei == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    xmlSchemaClearElemInfo(vctxt, ei);
 	}
     }
@@ -27717,8 +34890,23 @@ xmlSchemaClearValidCtxt(xmlSchemaValidCtxtPtr vctxt)
 void
 xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr ctxt)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4706]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4706\n");
+      else
+        fprintf(stderr, "reached bug index 4706\n");
+    }
+    if ((!FIXREVERTER[4706] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->value != NULL)
         xmlSchemaFreeValue(ctxt->value);
     if (ctxt->pctxt != NULL)
@@ -27780,8 +34968,23 @@ xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr ctxt)
 
 	for (i = 0; i < ctxt->sizeElemInfos; i++) {
 	    ei = ctxt->elemInfos[i];
-	    if (ei == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4707]) {
+	      if ((ei == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4707\n");
+	      else
+	        fprintf(stderr, "reached bug index 4707\n");
+	    }
+	    if ((!FIXREVERTER[4707] && (ei == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    xmlSchemaClearElemInfo(ctxt, ei);
 	    xmlFree(ei);
 	}
@@ -27808,8 +35011,23 @@ xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr ctxt)
 int
 xmlSchemaIsValid(xmlSchemaValidCtxtPtr ctxt)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4708]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4708\n");
+      else
+        fprintf(stderr, "reached bug index 4708\n");
+    }
+    if ((!FIXREVERTER[4708] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     return(ctxt->err == 0);
 }
 
@@ -27827,8 +35045,23 @@ xmlSchemaSetValidErrors(xmlSchemaValidCtxtPtr ctxt,
                         xmlSchemaValidityErrorFunc err,
                         xmlSchemaValidityWarningFunc warn, void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4709]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4709\n");
+      else
+        fprintf(stderr, "reached bug index 4709\n");
+    }
+    if ((!FIXREVERTER[4709] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->error = err;
     ctxt->warning = warn;
     ctxt->errCtxt = ctx;
@@ -27848,8 +35081,23 @@ void
 xmlSchemaSetValidStructuredErrors(xmlSchemaValidCtxtPtr ctxt,
 				  xmlStructuredErrorFunc serror, void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4710]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4710\n");
+      else
+        fprintf(stderr, "reached bug index 4710\n");
+    }
+    if ((!FIXREVERTER[4710] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->serror = serror;
     ctxt->error = NULL;
     ctxt->warning = NULL;
@@ -28529,8 +35777,23 @@ static void
 charactersSplit(void *ctx, const xmlChar *ch, int len)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4725]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4725\n");
+      else
+        fprintf(stderr, "reached bug index 4725\n");
+    }
+    if ((!FIXREVERTER[4725] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) && (ctxt->user_sax->characters != NULL))
 	ctxt->user_sax->characters(ctxt->user_data, ch, len);
     if (ctxt->ctxt != NULL)
@@ -28541,8 +35804,23 @@ static void
 ignorableWhitespaceSplit(void *ctx, const xmlChar *ch, int len)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4726]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4726\n");
+      else
+        fprintf(stderr, "reached bug index 4726\n");
+    }
+    if ((!FIXREVERTER[4726] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->ignorableWhitespace != NULL))
 	ctxt->user_sax->ignorableWhitespace(ctxt->user_data, ch, len);
@@ -28554,8 +35832,23 @@ static void
 cdataBlockSplit(void *ctx, const xmlChar *value, int len)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4727]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4727\n");
+      else
+        fprintf(stderr, "reached bug index 4727\n");
+    }
+    if ((!FIXREVERTER[4727] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->cdataBlock != NULL))
 	ctxt->user_sax->cdataBlock(ctxt->user_data, value, len);
@@ -28567,8 +35860,23 @@ static void
 referenceSplit(void *ctx, const xmlChar *name)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4728]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4728\n");
+      else
+        fprintf(stderr, "reached bug index 4728\n");
+    }
+    if ((!FIXREVERTER[4728] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt != NULL) && (ctxt->user_sax != NULL) &&
         (ctxt->user_sax->reference != NULL))
 	ctxt->user_sax->reference(ctxt->user_data, name);
@@ -28583,8 +35891,23 @@ startElementNsSplit(void *ctx, const xmlChar * localname,
 		    int nb_attributes, int nb_defaulted,
 		    const xmlChar ** attributes) {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4729]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4729\n");
+      else
+        fprintf(stderr, "reached bug index 4729\n");
+    }
+    if ((!FIXREVERTER[4729] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->startElementNs != NULL))
 	ctxt->user_sax->startElementNs(ctxt->user_data, localname, prefix,
@@ -28602,8 +35925,23 @@ static void
 endElementNsSplit(void *ctx, const xmlChar * localname,
 		    const xmlChar * prefix, const xmlChar * URI) {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4730]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4730\n");
+      else
+        fprintf(stderr, "reached bug index 4730\n");
+    }
+    if ((!FIXREVERTER[4730] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->endElementNs != NULL))
 	ctxt->user_sax->endElementNs(ctxt->user_data, localname, prefix, URI);
@@ -28772,8 +36110,23 @@ xmlSchemaSAXUnplug(xmlSchemaSAXPlugPtr plug)
     xmlSAXHandlerPtr *sax;
     void **user_data;
 
-    if ((plug == NULL) || (plug->magic != XML_SAX_PLUG_MAGIC))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4733]) {
+      if ((plug == (void *) 0 || plug -> magic != -599541215 ) && !(0))
+        fprintf(stderr, "triggered bug index 4733\n");
+      else
+        fprintf(stderr, "reached bug index 4733\n");
+    }
+    if ((!FIXREVERTER[4733] && (plug == (void *) 0 || plug -> magic != -599541215 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     plug->magic = 0;
 
     xmlSchemaPostRun(plug->ctxt);
diff --git a/xmlschemastypes.c b/xmlschemastypes.c
old mode 100644
new mode 100755
index e49ef61a..1d398742
--- a/xmlschemastypes.c
+++ b/xmlschemastypes.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * schemastypes.c : implementation of the XML Schema Datatypes
  *             definition and validity checking
@@ -228,9 +232,24 @@ xmlSchemaNewValue(xmlSchemaValType type) {
     xmlSchemaValPtr value;
 
     value = (xmlSchemaValPtr) xmlMalloc(sizeof(xmlSchemaVal));
-    if (value == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1435]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1435\n");
+      else
+        fprintf(stderr, "reached bug index 1435\n");
+    }
+    if ((!FIXREVERTER[1435] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(value, 0, sizeof(xmlSchemaVal));
     value->type = type;
     return(value);
@@ -242,15 +261,45 @@ xmlSchemaNewMinLengthFacet(int value)
     xmlSchemaFacetPtr ret;
 
     ret = xmlSchemaNewFacet();
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1436]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1436\n");
+      else
+        fprintf(stderr, "reached bug index 1436\n");
+    }
+    if ((!FIXREVERTER[1436] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->type = XML_SCHEMA_FACET_MINLENGTH;
     ret->val = xmlSchemaNewValue(XML_SCHEMAS_NNINTEGER);
-    if (ret->val == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1437]) {
+      if ((ret -> val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1437\n");
+      else
+        fprintf(stderr, "reached bug index 1437\n");
+    }
+    if ((!FIXREVERTER[1437] && (ret -> val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->val->value.decimal.lo = value;
     return (ret);
 }
@@ -268,10 +317,25 @@ xmlSchemaInitBasicType(const char *name, xmlSchemaValType type,
     xmlSchemaTypePtr ret;
 
     ret = (xmlSchemaTypePtr) xmlMalloc(sizeof(xmlSchemaType));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1438]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1438\n");
+      else
+        fprintf(stderr, "reached bug index 1438\n");
+    }
+    if ((!FIXREVERTER[1438] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaTypeErrMemory(NULL, "could not initialize basic types");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaType));
     ret->name = (const xmlChar *)name;
     ret->targetNamespace = XML_SCHEMAS_NAMESPACE_NAME;
@@ -376,10 +440,25 @@ xmlSchemaAddParticle(void)
 
     ret = (xmlSchemaParticlePtr)
 	xmlMalloc(sizeof(xmlSchemaParticle));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1439]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1439\n");
+      else
+        fprintf(stderr, "reached bug index 1439\n");
+    }
+    if ((!FIXREVERTER[1439] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaTypeErrMemory(NULL, "allocating particle component");
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaParticle));
     ret->type = XML_SCHEMA_TYPE_PARTICLE;
     ret->minOccurs = 1;
@@ -418,32 +497,92 @@ xmlSchemaInitTypes(void)
 	xmlSchemaWildcardPtr wild;
 	/* First particle. */
 	particle = xmlSchemaAddParticle();
-	if (particle == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1441]) {
+	  if ((particle == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1441\n");
+	  else
+	    fprintf(stderr, "reached bug index 1441\n");
+	}
+	if ((!FIXREVERTER[1441] && (particle == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlSchemaTypeAnyTypeDef->subtypes = (xmlSchemaTypePtr) particle;
 	/* Sequence model group. */
 	sequence = (xmlSchemaModelGroupPtr)
 	    xmlMalloc(sizeof(xmlSchemaModelGroup));
-	if (sequence == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1442]) {
+	  if ((sequence == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1442\n");
+	  else
+	    fprintf(stderr, "reached bug index 1442\n");
+	}
+	if ((!FIXREVERTER[1442] && (sequence == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaTypeErrMemory(NULL, "allocating model group component");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(sequence, 0, sizeof(xmlSchemaModelGroup));
 	sequence->type = XML_SCHEMA_TYPE_SEQUENCE;
 	particle->children = (xmlSchemaTreeItemPtr) sequence;
 	/* Second particle. */
 	particle = xmlSchemaAddParticle();
-	if (particle == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1443]) {
+	  if ((particle == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1443\n");
+	  else
+	    fprintf(stderr, "reached bug index 1443\n");
+	}
+	if ((!FIXREVERTER[1443] && (particle == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	particle->minOccurs = 0;
 	particle->maxOccurs = UNBOUNDED;
 	sequence->children = (xmlSchemaTreeItemPtr) particle;
 	/* The wildcard */
 	wild = (xmlSchemaWildcardPtr) xmlMalloc(sizeof(xmlSchemaWildcard));
-	if (wild == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1444]) {
+	  if ((wild == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1444\n");
+	  else
+	    fprintf(stderr, "reached bug index 1444\n");
+	}
+	if ((!FIXREVERTER[1444] && (wild == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaTypeErrMemory(NULL, "allocating wildcard component");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(wild, 0, sizeof(xmlSchemaWildcard));
 	wild->type = XML_SCHEMA_TYPE_ANY;
 	wild->any = 1;
@@ -453,11 +592,26 @@ xmlSchemaInitTypes(void)
 	* Create the attribute wildcard.
 	*/
 	wild = (xmlSchemaWildcardPtr) xmlMalloc(sizeof(xmlSchemaWildcard));
-	if (wild == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1445]) {
+	  if ((wild == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1445\n");
+	  else
+	    fprintf(stderr, "reached bug index 1445\n");
+	}
+	if ((!FIXREVERTER[1445] && (wild == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaTypeErrMemory(NULL, "could not create an attribute "
 		"wildcard on anyType");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(wild, 0, sizeof(xmlSchemaWildcard));
 	wild->any = 1;
 	wild->processContents = XML_SCHEMAS_ANY_LAX;
@@ -669,8 +823,23 @@ xmlSchemaCleanupTypes(void) {
 int
 xmlSchemaIsBuiltInTypeFacet(xmlSchemaTypePtr type, int facetType)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1447]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1447\n");
+      else
+        fprintf(stderr, "reached bug index 1447\n");
+    }
+    if ((!FIXREVERTER[1447] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (type->type != XML_SCHEMA_TYPE_BASIC)
 	return (-1);
     switch (type->builtInType) {
@@ -860,8 +1029,23 @@ xmlSchemaGetBuiltInType(xmlSchemaValType type)
 int
 xmlSchemaValueAppend(xmlSchemaValPtr prev, xmlSchemaValPtr cur) {
 
-    if ((prev == NULL) || (cur == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1448]) {
+      if ((prev == (void *) 0 || cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1448\n");
+      else
+        fprintf(stderr, "reached bug index 1448\n");
+    }
+    if ((!FIXREVERTER[1448] && (prev == (void *) 0 || cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     prev->next = cur;
     return (0);
 }
@@ -878,8 +1062,23 @@ xmlSchemaValueAppend(xmlSchemaValPtr prev, xmlSchemaValPtr cur) {
 xmlSchemaValPtr
 xmlSchemaValueGetNext(xmlSchemaValPtr cur) {
 
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1449]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1449\n");
+      else
+        fprintf(stderr, "reached bug index 1449\n");
+    }
+    if ((!FIXREVERTER[1449] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return (cur->next);
 }
 
@@ -895,8 +1094,23 @@ xmlSchemaValueGetNext(xmlSchemaValPtr cur) {
 const xmlChar *
 xmlSchemaValueGetAsString(xmlSchemaValPtr val)
 {
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1450]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1450\n");
+      else
+        fprintf(stderr, "reached bug index 1450\n");
+    }
+    if ((!FIXREVERTER[1450] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     switch (val->type) {
 	case XML_SCHEMAS_STRING:
 	case XML_SCHEMAS_NORMSTRING:
@@ -981,8 +1195,23 @@ xmlSchemaNewNOTATIONValue(const xmlChar *name,
     xmlSchemaValPtr val;
 
     val = xmlSchemaNewValue(XML_SCHEMAS_NOTATION);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1452]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1452\n");
+      else
+        fprintf(stderr, "reached bug index 1452\n");
+    }
+    if ((!FIXREVERTER[1452] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     val->value.qname.name = (xmlChar *)name;
     if (ns != NULL)
@@ -1007,8 +1236,23 @@ xmlSchemaNewQNameValue(const xmlChar *namespaceName,
     xmlSchemaValPtr val;
 
     val = xmlSchemaNewValue(XML_SCHEMAS_QNAME);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1453]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1453\n");
+      else
+        fprintf(stderr, "reached bug index 1453\n");
+    }
+    if ((!FIXREVERTER[1453] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     val->value.qname.name = (xmlChar *) localName;
     val->value.qname.uri = (xmlChar *) namespaceName;
@@ -1082,8 +1326,23 @@ xmlSchemaTypePtr
 xmlSchemaGetPredefinedType(const xmlChar *name, const xmlChar *ns) {
     if (xmlSchemaTypesInitialized == 0)
 	xmlSchemaInitTypes();
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1454]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1454\n");
+      else
+        fprintf(stderr, "reached bug index 1454\n");
+    }
+    if ((!FIXREVERTER[1454] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return((xmlSchemaTypePtr) xmlHashLookup2(xmlSchemaTypesBank, name, ns));
 }
 
@@ -1414,8 +1673,23 @@ _xmlSchemaParseTimeZone (xmlSchemaValDatePtr dt, const xmlChar **str) {
     const xmlChar *cur;
     int ret = 0;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1460]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1460\n");
+      else
+        fprintf(stderr, "reached bug index 1460\n");
+    }
+    if ((!FIXREVERTER[1460] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
     cur = *str;
 
     switch (*cur) {
@@ -1579,8 +1853,23 @@ xmlSchemaValidateDates (xmlSchemaValType type,
 	}							\
     }
 
-    if (dateTime == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1463]) {
+      if ((dateTime == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1463\n");
+      else
+        fprintf(stderr, "reached bug index 1463\n");
+    }
+    if ((!FIXREVERTER[1463] && (dateTime == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (collapse)
 	while IS_WSP_BLANK_CH(*cur) cur++;
@@ -1589,8 +1878,23 @@ xmlSchemaValidateDates (xmlSchemaValType type,
 	return 1;
 
     dt = xmlSchemaNewValue(XML_SCHEMAS_UNKNOWN);
-    if (dt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1464]) {
+      if ((dt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1464\n");
+      else
+        fprintf(stderr, "reached bug index 1464\n");
+    }
+    if ((!FIXREVERTER[1464] && (dt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     if ((cur[0] == '-') && (cur[1] == '-')) {
 	/*
@@ -1796,8 +2100,23 @@ xmlSchemaValidateDuration (xmlSchemaTypePtr type ATTRIBUTE_UNUSED,
     const xmlChar  desig[]  = {'Y', 'M', 'D', 'H', 'M', 'S'};
     const double   multi[]  = { 0.0, 0.0, 86400.0, 3600.0, 60.0, 1.0, 0.0};
 
-    if (duration == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1470]) {
+      if ((duration == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1470\n");
+      else
+        fprintf(stderr, "reached bug index 1470\n");
+    }
+    if ((!FIXREVERTER[1470] && (duration == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (collapse)
 	while IS_WSP_BLANK_CH(*cur) cur++;
@@ -1815,8 +2134,23 @@ xmlSchemaValidateDuration (xmlSchemaTypePtr type ATTRIBUTE_UNUSED,
 	return 1;
 
     dur = xmlSchemaNewValue(XML_SCHEMAS_DURATION);
-    if (dur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1471]) {
+      if ((dur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1471\n");
+      else
+        fprintf(stderr, "reached bug index 1471\n");
+    }
+    if ((!FIXREVERTER[1471] && (dur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     while (*cur != 0) {
 
@@ -1831,8 +2165,23 @@ xmlSchemaValidateDuration (xmlSchemaTypePtr type ATTRIBUTE_UNUSED,
                 cur++;
             } else
                 return 1;
-        } else if (seq == 3)
+        } else 
+        #ifdef FRCOV
+        {if (FIXREVERTER[1472]) {
+          if ((seq == 3 ) && !(0))
+            fprintf(stderr, "triggered bug index 1472\n");
+          else
+            fprintf(stderr, "reached bug index 1472\n");
+        }
+        if ((!FIXREVERTER[1472] && (seq == 3 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
 
         /* parse the number portion of the item */
         PARSE_NUM(num, cur, num_type);
@@ -1904,7 +2253,22 @@ static xmlChar *
 xmlSchemaStrip(const xmlChar *value) {
     const xmlChar *start = value, *end, *f;
 
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1473]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1473\n");
+      else
+        fprintf(stderr, "reached bug index 1473\n");
+    }
+    if ((!FIXREVERTER[1473] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while ((*start != 0) && (IS_BLANK_CH(*start))) start++;
     end = start;
     while (*end != 0) end++;
@@ -1929,8 +2293,23 @@ xmlSchemaWhiteSpaceReplace(const xmlChar *value) {
     const xmlChar *cur = value;
     xmlChar *ret = NULL, *mcur;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1474]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1474\n");
+      else
+        fprintf(stderr, "reached bug index 1474\n");
+    }
+    if ((!FIXREVERTER[1474] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     while ((*cur != 0) &&
 	(((*cur) != 0xd) && ((*cur) != 0x9) && ((*cur) != 0xa))) {
@@ -1963,7 +2342,22 @@ xmlSchemaCollapseString(const xmlChar *value) {
     xmlChar *g;
     int col = 0;
 
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1475]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1475\n");
+      else
+        fprintf(stderr, "reached bug index 1475\n");
+    }
+    if ((!FIXREVERTER[1475] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while ((*start != 0) && (IS_BLANK_CH(*start))) start++;
     end = start;
     while (*end != 0) {
@@ -1985,7 +2379,22 @@ xmlSchemaCollapseString(const xmlChar *value) {
 	return(xmlStrndup(start, end - start));
     }
     start = xmlStrdup(start);
-    if (start == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1476]) {
+      if ((start == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1476\n");
+      else
+        fprintf(stderr, "reached bug index 1476\n");
+    }
+    if ((!FIXREVERTER[1476] && (start == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     g = (xmlChar *) (start + col);
     end = g;
     while (*end != 0) {
@@ -2021,13 +2430,43 @@ xmlSchemaValAtomicListNode(xmlSchemaTypePtr type, const xmlChar *value,
     int nb_values = 0;
     int tmp = 0;
 
-    if (value == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1477]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1477\n");
+      else
+        fprintf(stderr, "reached bug index 1477\n");
+    }
+    if ((!FIXREVERTER[1477] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     val = xmlStrdup(value);
-    if (val == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1478]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1478\n");
+      else
+        fprintf(stderr, "reached bug index 1478\n");
+    }
+    if ((!FIXREVERTER[1478] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ret != NULL) {
         *ret = NULL;
     }
@@ -2047,10 +2486,25 @@ xmlSchemaValAtomicListNode(xmlSchemaTypePtr type, const xmlChar *value,
 	    while ((*cur != 0) && (!IS_BLANK_CH(*cur))) cur++;
 	}
     }
-    if (nb_values == 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1479]) {
+      if ((nb_values == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1479\n");
+      else
+        fprintf(stderr, "reached bug index 1479\n");
+    }
+    if ((!FIXREVERTER[1479] && (nb_values == 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(val);
 	return(nb_values);
     }
+    #ifdef FRCOV
+    }
+    #endif
     endval = cur;
     cur = val;
     while ((*cur == 0) && (cur != endval)) cur++;
@@ -2151,31 +2605,110 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 
     if (xmlSchemaTypesInitialized == 0)
         xmlSchemaInitTypes();
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1483]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1483\n");
+      else
+        fprintf(stderr, "reached bug index 1483\n");
+    }
+    if ((!FIXREVERTER[1483] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * validating a non existant text node is similar to validating
      * an empty one.
      */
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1484]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1484\n");
+      else
+        fprintf(stderr, "reached bug index 1484\n");
+    }
+    if ((!FIXREVERTER[1484] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         value = BAD_CAST "";
+        #ifdef FRCOV
+        }
+        #endif
 
     if (val != NULL)
         *val = NULL;
-    if ((flags == 0) && (value != NULL)) {
-
-        if ((type->builtInType != XML_SCHEMAS_STRING) &&
-	  (type->builtInType != XML_SCHEMAS_ANYTYPE) &&
-	  (type->builtInType != XML_SCHEMAS_ANYSIMPLETYPE)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1487]) {
+      fprintf(stderr, "reached bug index 1487\n");
+    }
+    if ((FIXREVERTER[1487] && (flags == 0 )) || (!FIXREVERTER[1487] && (flags == 0 && value != (void *) 0 ))
+    #else
+    if (flags == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(value != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1487\n");
+      #endif
+    
+
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1486]) {
+          fprintf(stderr, "reached bug index 1486\n");
+        }
+        if ((FIXREVERTER[1486] && (type -> builtInType != XML_SCHEMAS_STRING && type -> builtInType != XML_SCHEMAS_ANYTYPE )) || (!FIXREVERTER[1486] && (type -> builtInType != XML_SCHEMAS_STRING && type -> builtInType != XML_SCHEMAS_ANYTYPE && type -> builtInType != XML_SCHEMAS_ANYSIMPLETYPE ))
+        #else
+        if (type -> builtInType != XML_SCHEMAS_STRING && type -> builtInType != XML_SCHEMAS_ANYTYPE 
+        #endif
+        ) {
+	    
+	  #ifdef FRCOV
+	    if (!(type -> builtInType != XML_SCHEMAS_ANYSIMPLETYPE ))
+	      fprintf(stderr, "triggered bug index 1486\n");
+	    #endif
+	  
 	    if (type->builtInType == XML_SCHEMAS_NORMSTRING)
 		norm = xmlSchemaWhiteSpaceReplace(value);
             else
 		norm = xmlSchemaCollapseString(value);
-            if (norm != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1485]) {
+              if ((norm != (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1485\n");
+              else
+                fprintf(stderr, "reached bug index 1485\n");
+            }
+            if ((!FIXREVERTER[1485] && (norm != (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 value = norm;
+                #ifdef FRCOV
+                }
+                #endif
+        }
+        #ifdef FRCOV
         }
+        #endif
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     switch (type->builtInType) {
         case XML_SCHEMAS_UNKNOWN:
@@ -2224,8 +2757,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 			norm = xmlSchemaCollapseString(value);
 		    else if (ws == XML_SCHEMA_WHITESPACE_REPLACE)
 			norm = xmlSchemaWhiteSpaceReplace(value);
-		    if (norm != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1488]) {
+		      if ((norm != (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1488\n");
+		      else
+		        fprintf(stderr, "reached bug index 1488\n");
+		    }
+		    if ((!FIXREVERTER[1488] && (norm != (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			value = norm;
+			#ifdef FRCOV
+			}
+			#endif
 		}
 		v = xmlSchemaNewValue(XML_SCHEMAS_STRING);
 		if (v != NULL) {
@@ -2243,8 +2791,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 			    norm = xmlSchemaCollapseString(value);
 			else
 			    norm = xmlSchemaWhiteSpaceReplace(value);
-			if (norm != NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1489]) {
+			  if ((norm != (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 1489\n");
+			  else
+			    fprintf(stderr, "reached bug index 1489\n");
+			}
+			if ((!FIXREVERTER[1489] && (norm != (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    value = norm;
+			    #ifdef FRCOV
+			    }
+			    #endif
 		    }
 		} else {
 		    const xmlChar *cur = value;
@@ -2638,8 +3201,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
         case XML_SCHEMAS_LANGUAGE:
 	    if (normOnTheFly) {
 		norm = xmlSchemaCollapseString(value);
-		if (norm != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1490]) {
+		  if ((norm != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1490\n");
+		  else
+		    fprintf(stderr, "reached bug index 1490\n");
+		}
+		if ((!FIXREVERTER[1490] && (norm != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    value = norm;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
             if (xmlCheckLanguageID(value) == 1) {
                 if (val != NULL) {
@@ -2678,7 +3256,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
             goto done;
         case XML_SCHEMAS_NAME:
             ret = xmlValidateName(value, 1);
-            if ((ret == 0) && (val != NULL) && (value != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1491]) {
+              fprintf(stderr, "reached bug index 1491\n");
+            }
+            if ((FIXREVERTER[1491] && (ret == 0 && val != (void *) 0 )) || (!FIXREVERTER[1491] && (ret == 0 && val != (void *) 0 && value != (void *) 0 ))
+            #else
+            if (ret == 0 && val != (void *) 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(value != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 1491\n");
+              #endif
+            
 		v = xmlSchemaNewValue(XML_SCHEMAS_NAME);
 		if (v != NULL) {
 		     const xmlChar *start = value, *end;
@@ -2691,14 +3284,32 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 		    goto error;
 		}
             }
+            #ifdef FRCOV
+            }
+            #endif
             goto done;
         case XML_SCHEMAS_QNAME:{
                 const xmlChar *uri = NULL;
                 xmlChar *local = NULL;
 
                 ret = xmlValidateQName(value, 1);
-		if (ret != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1492]) {
+		  if ((ret != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1492\n");
+		  else
+		    fprintf(stderr, "reached bug index 1492\n");
+		}
+		if ((!FIXREVERTER[1492] && (ret != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto done;
+		    #ifdef FRCOV
+		    }
+		    #endif
                 if (node != NULL) {
                     xmlChar *prefix;
 		    xmlNsPtr ns;
@@ -2711,18 +3322,48 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 			    xmlFree(local);
 			goto return1;
 		    }
-		    if (ns != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1493]) {
+		      if ((ns != (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1493\n");
+		      else
+		        fprintf(stderr, "reached bug index 1493\n");
+		    }
+		    if ((!FIXREVERTER[1493] && (ns != (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			uri = ns->href;
+			#ifdef FRCOV
+			}
+			#endif
                     if (prefix != NULL)
                         xmlFree(prefix);
                 }
                 if (val != NULL) {
                     v = xmlSchemaNewValue(XML_SCHEMAS_QNAME);
-                    if (v == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1494]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1494\n");
+                      else
+                        fprintf(stderr, "reached bug index 1494\n");
+                    }
+                    if ((!FIXREVERTER[1494] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 			if (local != NULL)
 			    xmlFree(local);
 			goto error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    if (local != NULL)
 			v->value.qname.name = local;
 		    else
@@ -2737,7 +3378,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
             }
         case XML_SCHEMAS_NCNAME:
             ret = xmlValidateNCName(value, 1);
-            if ((ret == 0) && (val != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1495]) {
+              fprintf(stderr, "reached bug index 1495\n");
+            }
+            if ((FIXREVERTER[1495] && (ret == 0 )) || (!FIXREVERTER[1495] && (ret == 0 && val != (void *) 0 ))
+            #else
+            if (ret == 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(val != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 1495\n");
+              #endif
+            
                 v = xmlSchemaNewValue(XML_SCHEMAS_NCNAME);
                 if (v != NULL) {
                     v->value.str = xmlStrdup(value);
@@ -2746,10 +3402,28 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                     goto error;
                 }
             }
+            #ifdef FRCOV
+            }
+            #endif
             goto done;
         case XML_SCHEMAS_ID:
             ret = xmlValidateNCName(value, 1);
-            if ((ret == 0) && (val != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1496]) {
+              fprintf(stderr, "reached bug index 1496\n");
+            }
+            if ((FIXREVERTER[1496] && (ret == 0 )) || (!FIXREVERTER[1496] && (ret == 0 && val != (void *) 0 ))
+            #else
+            if (ret == 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(val != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 1496\n");
+              #endif
+            
                 v = xmlSchemaNewValue(XML_SCHEMAS_ID);
                 if (v != NULL) {
                     v->value.str = xmlStrdup(value);
@@ -2758,6 +3432,9 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                     goto error;
                 }
             }
+            #ifdef FRCOV
+            }
+            #endif
             if ((ret == 0) && (node != NULL) &&
                 (node->type == XML_ATTRIBUTE_NODE)) {
                 xmlAttrPtr attr = (xmlAttrPtr) node;
@@ -2785,13 +3462,46 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
             goto done;
         case XML_SCHEMAS_IDREF:
             ret = xmlValidateNCName(value, 1);
-            if ((ret == 0) && (val != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1498]) {
+              fprintf(stderr, "reached bug index 1498\n");
+            }
+            if ((FIXREVERTER[1498] && (ret == 0 )) || (!FIXREVERTER[1498] && (ret == 0 && val != (void *) 0 ))
+            #else
+            if (ret == 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(val != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 1498\n");
+              #endif
+            
 		v = xmlSchemaNewValue(XML_SCHEMAS_IDREF);
-		if (v == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1497]) {
+		  if ((v == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1497\n");
+		  else
+		    fprintf(stderr, "reached bug index 1497\n");
+		}
+		if ((!FIXREVERTER[1497] && (v == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		v->value.str = xmlStrdup(value);
 		*val = v;
             }
+            #ifdef FRCOV
+            }
+            #endif
             if ((ret == 0) && (node != NULL) &&
                 (node->type == XML_ATTRIBUTE_NODE)) {
                 xmlAttrPtr attr = (xmlAttrPtr) node;
@@ -2841,9 +3551,27 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                          XML_EXTERNAL_GENERAL_UNPARSED_ENTITY))
                         ret = 4;
                 }
-                if ((ret == 0) && (val != NULL)) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1499]) {
+                  fprintf(stderr, "reached bug index 1499\n");
+                }
+                if ((FIXREVERTER[1499] && (ret == 0 )) || (!FIXREVERTER[1499] && (ret == 0 && val != (void *) 0 ))
+                #else
+                if (ret == 0 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(val != (void *) 0 ))
+                    fprintf(stderr, "triggered bug index 1499\n");
+                  #endif
+                
                     TODO;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 if ((ret == 0) && (node != NULL) &&
                     (node->type == XML_ATTRIBUTE_NODE)) {
                     xmlAttrPtr attr = (xmlAttrPtr) node;
@@ -2853,8 +3581,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 goto done;
             }
         case XML_SCHEMAS_ENTITIES:
-            if ((node == NULL) || (node->doc == NULL))
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1500]) {
+              if ((node == (void *) 0 || node -> doc == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1500\n");
+              else
+                fprintf(stderr, "reached bug index 1500\n");
+            }
+            if ((!FIXREVERTER[1500] && (node == (void *) 0 || node -> doc == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto return3;
+                #ifdef FRCOV
+                }
+                #endif
             ret = xmlSchemaValAtomicListNode(xmlSchemaTypeEntityDef,
                                              value, val, node);
             if (ret <= 0)
@@ -2873,7 +3616,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 xmlChar *local = NULL;
 
                 ret = xmlValidateQName(value, 1);
-                if ((ret == 0) && (node != NULL)) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1502]) {
+                  fprintf(stderr, "reached bug index 1502\n");
+                }
+                if ((FIXREVERTER[1502] && (ret == 0 )) || (!FIXREVERTER[1502] && (ret == 0 && node != (void *) 0 ))
+                #else
+                if (ret == 0 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(node != (void *) 0 ))
+                    fprintf(stderr, "triggered bug index 1502\n");
+                  #endif
+                
                     xmlChar *prefix;
 
                     local = xmlSplitQName2(value, &prefix);
@@ -2883,14 +3641,32 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                         ns = xmlSearchNs(node->doc, node, prefix);
                         if (ns == NULL)
                             ret = 1;
-                        else if (val != NULL)
+                        else 
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1501]) {
+                          if ((val != (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1501\n");
+                          else
+                            fprintf(stderr, "reached bug index 1501\n");
+                        }
+                        if ((!FIXREVERTER[1501] && (val != (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             uri = xmlStrdup(ns->href);
+                            #ifdef FRCOV
+                            }
+                            #endif
                     }
                     if ((local != NULL) && ((val == NULL) || (ret != 0)))
                         xmlFree(local);
                     if (prefix != NULL)
                         xmlFree(prefix);
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 if ((node == NULL) || (node->doc == NULL))
                     ret = 3;
                 if (ret == 0) {
@@ -2900,7 +3676,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                     else
                         ret = 1;
                 }
-                if ((ret == 0) && (val != NULL)) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1503]) {
+                  fprintf(stderr, "reached bug index 1503\n");
+                }
+                if ((FIXREVERTER[1503] && (ret == 0 )) || (!FIXREVERTER[1503] && (ret == 0 && val != (void *) 0 ))
+                #else
+                if (ret == 0 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(val != (void *) 0 ))
+                    fprintf(stderr, "triggered bug index 1503\n");
+                  #endif
+                
                     v = xmlSchemaNewValue(XML_SCHEMAS_NOTATION);
                     if (v != NULL) {
                         if (local != NULL)
@@ -2919,6 +3710,9 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                         goto error;
                     }
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 goto done;
             }
         case XML_SCHEMAS_ANYURI:{
@@ -2927,8 +3721,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 		    xmlChar *tmpval, *cur;
 		    if (normOnTheFly) {
 			norm = xmlSchemaCollapseString(value);
-			if (norm != NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1504]) {
+			  if ((norm != (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 1504\n");
+			  else
+			    fprintf(stderr, "reached bug index 1504\n");
+			}
+			if ((!FIXREVERTER[1504] && (norm != (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    value = norm;
+			    #ifdef FRCOV
+			    }
+			    #endif
 		    }
 		    tmpval = xmlStrdup(value);
 		    for (cur = tmpval; *cur; ++cur) {
@@ -2941,15 +3750,45 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 		    }
                     uri = xmlParseURI((const char *) tmpval);
 		    xmlFree(tmpval);
-                    if (uri == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1505]) {
+                      if ((uri == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1505\n");
+                      else
+                        fprintf(stderr, "reached bug index 1505\n");
+                    }
+                    if ((!FIXREVERTER[1505] && (uri == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     xmlFreeURI(uri);
                 }
 
                 if (val != NULL) {
                     v = xmlSchemaNewValue(XML_SCHEMAS_ANYURI);
-                    if (v == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1506]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1506\n");
+                      else
+                        fprintf(stderr, "reached bug index 1506\n");
+                    }
+                    if ((!FIXREVERTER[1506] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     v->value.str = xmlStrdup(value);
                     *val = v;
                 }
@@ -2960,8 +3799,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 xmlChar *base;
                 int total, i = 0;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1507]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1507\n");
+                  else
+                    fprintf(stderr, "reached bug index 1507\n");
+                }
+                if ((!FIXREVERTER[1507] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
 		if (normOnTheFly)
 		    while IS_WSP_BLANK_CH(*cur) cur++;
@@ -2984,18 +3838,48 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 if (val != NULL) {
 
                     v = xmlSchemaNewValue(XML_SCHEMAS_HEXBINARY);
-                    if (v == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1508]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1508\n");
+                      else
+                        fprintf(stderr, "reached bug index 1508\n");
+                    }
+                    if ((!FIXREVERTER[1508] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
 		    /*
 		    * Copy only the normalized piece.
 		    * CRITICAL TODO: Check this.
 		    */
                     cur = xmlStrndup(start, i);
-                    if (cur == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1509]) {
+                      if ((cur == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1509\n");
+                      else
+                        fprintf(stderr, "reached bug index 1509\n");
+                    }
+                    if ((!FIXREVERTER[1509] && (cur == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 		        xmlSchemaTypeErrMemory(node, "allocating hexbin data");
                         xmlFree(v);
                         goto return1;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                     total = i / 2;      /* number of octets */
 
@@ -3032,8 +3916,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 xmlChar *base;
                 int total, i = 0, pad = 0;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1510]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1510\n");
+                  else
+                    fprintf(stderr, "reached bug index 1510\n");
+                }
+                if ((!FIXREVERTER[1510] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 for (; *cur; ++cur) {
                     int decc;
@@ -3114,16 +4013,46 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 
                 if (val != NULL) {
                     v = xmlSchemaNewValue(XML_SCHEMAS_BASE64BINARY);
-                    if (v == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1512]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1512\n");
+                      else
+                        fprintf(stderr, "reached bug index 1512\n");
+                    }
+                    if ((!FIXREVERTER[1512] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     base =
                         (xmlChar *) xmlMallocAtomic((i + pad + 1) *
                                                     sizeof(xmlChar));
-                    if (base == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1513]) {
+                      if ((base == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1513\n");
+                      else
+                        fprintf(stderr, "reached bug index 1513\n");
+                    }
+                    if ((!FIXREVERTER[1513] && (base == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 		        xmlSchemaTypeErrMemory(node, "allocating base64 data");
                         xmlFree(v);
                         goto return1;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     v->value.base64.str = base;
                     for (cur = value; *cur; ++cur)
                         if (_xmlSchemaBase64Decode(*cur) >= 0) {
@@ -3145,8 +4074,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 unsigned long lo, mi, hi;
                 int sign = 0;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1514]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1514\n");
+                  else
+                    fprintf(stderr, "reached bug index 1514\n");
+                }
+                if ((!FIXREVERTER[1514] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 		if (normOnTheFly)
 		    while IS_WSP_BLANK_CH(*cur) cur++;
                 if (*cur == '-') {
@@ -3155,8 +4099,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 } else if (*cur == '+')
                     cur++;
                 ret = xmlSchemaParseUInt(&cur, &lo, &mi, &hi);
-                if (ret < 0)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1515]) {
+                  if ((ret < 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1515\n");
+                  else
+                    fprintf(stderr, "reached bug index 1515\n");
+                }
+                if ((!FIXREVERTER[1515] && (ret < 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 		if (normOnTheFly)
 		    while IS_WSP_BLANK_CH(*cur) cur++;
                 if (*cur != 0)
@@ -3166,13 +4125,43 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                         ((hi != 0) || (mi != 0) || (lo != 0)))
                         goto return1;
                 } else if (type->builtInType == XML_SCHEMAS_PINTEGER) {
-                    if (sign == 1)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1516]) {
+                      if ((sign == 1 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1516\n");
+                      else
+                        fprintf(stderr, "reached bug index 1516\n");
+                    }
+                    if ((!FIXREVERTER[1516] && (sign == 1 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if ((hi == 0) && (mi == 0) && (lo == 0))
                         goto return1;
                 } else if (type->builtInType == XML_SCHEMAS_NINTEGER) {
-                    if (sign == 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1517]) {
+                      if ((sign == 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1517\n");
+                      else
+                        fprintf(stderr, "reached bug index 1517\n");
+                    }
+                    if ((!FIXREVERTER[1517] && (sign == 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if ((hi == 0) && (mi == 0) && (lo == 0))
                         goto return1;
                 } else if (type->builtInType == XML_SCHEMAS_NNINTEGER) {
@@ -3204,25 +4193,85 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 unsigned long lo, mi, hi;
                 int sign = 0;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1518]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1518\n");
+                  else
+                    fprintf(stderr, "reached bug index 1518\n");
+                }
+                if ((!FIXREVERTER[1518] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 if (*cur == '-') {
                     sign = 1;
                     cur++;
                 } else if (*cur == '+')
                     cur++;
                 ret = xmlSchemaParseUInt(&cur, &lo, &mi, &hi);
-                if (ret < 0)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1519]) {
+                  if ((ret < 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1519\n");
+                  else
+                    fprintf(stderr, "reached bug index 1519\n");
+                }
+                if ((!FIXREVERTER[1519] && (ret < 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 if (*cur != 0)
                     goto return1;
                 if (type->builtInType == XML_SCHEMAS_LONG) {
                     if (hi >= 922) {
-                        if (hi > 922)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1520]) {
+                          if ((hi > 922 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1520\n");
+                          else
+                            fprintf(stderr, "reached bug index 1520\n");
+                        }
+                        if ((!FIXREVERTER[1520] && (hi > 922 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             goto return1;
+                            #ifdef FRCOV
+                            }
+                            #endif
                         if (mi >= 33720368) {
-                            if (mi > 33720368)
+                            
+                            #ifdef FRCOV
+                            {if (FIXREVERTER[1521]) {
+                              if ((mi > 33720368 ) && !(0))
+                                fprintf(stderr, "triggered bug index 1521\n");
+                              else
+                                fprintf(stderr, "reached bug index 1521\n");
+                            }
+                            if ((!FIXREVERTER[1521] && (mi > 33720368 ))
+                            #else
+                            if (0
+                            #endif
+                            )
                                 goto return1;
+                                #ifdef FRCOV
+                                }
+                                #endif
                             if ((sign == 0) && (lo > 54775807))
                                 goto return1;
                             if ((sign == 1) && (lo > 54775808))
@@ -3230,26 +4279,86 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                         }
                     }
                 } else if (type->builtInType == XML_SCHEMAS_INT) {
-                    if (hi != 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1522]) {
+                      if ((hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1522\n");
+                      else
+                        fprintf(stderr, "reached bug index 1522\n");
+                    }
+                    if ((!FIXREVERTER[1522] && (hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if (mi >= 21) {
-                        if (mi > 21)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1523]) {
+                          if ((mi > 21 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1523\n");
+                          else
+                            fprintf(stderr, "reached bug index 1523\n");
+                        }
+                        if ((!FIXREVERTER[1523] && (mi > 21 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             goto return1;
+                            #ifdef FRCOV
+                            }
+                            #endif
                         if ((sign == 0) && (lo > 47483647))
                             goto return1;
                         if ((sign == 1) && (lo > 47483648))
                             goto return1;
                     }
                 } else if (type->builtInType == XML_SCHEMAS_SHORT) {
-                    if ((mi != 0) || (hi != 0))
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1524]) {
+                      if ((mi != 0 || hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1524\n");
+                      else
+                        fprintf(stderr, "reached bug index 1524\n");
+                    }
+                    if ((!FIXREVERTER[1524] && (mi != 0 || hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if ((sign == 1) && (lo > 32768))
                         goto return1;
                     if ((sign == 0) && (lo > 32767))
                         goto return1;
                 } else if (type->builtInType == XML_SCHEMAS_BYTE) {
-                    if ((mi != 0) || (hi != 0))
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1525]) {
+                      if ((mi != 0 || hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1525\n");
+                      else
+                        fprintf(stderr, "reached bug index 1525\n");
+                    }
+                    if ((!FIXREVERTER[1525] && (mi != 0 || hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if ((sign == 1) && (lo > 128))
                         goto return1;
                     if ((sign == 0) && (lo > 127))
@@ -3276,43 +4385,223 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 const xmlChar *cur = value;
                 unsigned long lo, mi, hi;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1526]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1526\n");
+                  else
+                    fprintf(stderr, "reached bug index 1526\n");
+                }
+                if ((!FIXREVERTER[1526] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 ret = xmlSchemaParseUInt(&cur, &lo, &mi, &hi);
-                if (ret < 0)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1527]) {
+                  if ((ret < 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1527\n");
+                  else
+                    fprintf(stderr, "reached bug index 1527\n");
+                }
+                if ((!FIXREVERTER[1527] && (ret < 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 if (*cur != 0)
                     goto return1;
                 if (type->builtInType == XML_SCHEMAS_ULONG) {
                     if (hi >= 1844) {
-                        if (hi > 1844)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1528]) {
+                          if ((hi > 1844 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1528\n");
+                          else
+                            fprintf(stderr, "reached bug index 1528\n");
+                        }
+                        if ((!FIXREVERTER[1528] && (hi > 1844 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             goto return1;
+                            #ifdef FRCOV
+                            }
+                            #endif
                         if (mi >= 67440737) {
-                            if (mi > 67440737)
+                            
+                            #ifdef FRCOV
+                            {if (FIXREVERTER[1529]) {
+                              if ((mi > 67440737 ) && !(0))
+                                fprintf(stderr, "triggered bug index 1529\n");
+                              else
+                                fprintf(stderr, "reached bug index 1529\n");
+                            }
+                            if ((!FIXREVERTER[1529] && (mi > 67440737 ))
+                            #else
+                            if (0
+                            #endif
+                            )
                                 goto return1;
-                            if (lo > 9551615)
+                                #ifdef FRCOV
+                                }
+                                #endif
+                            
+                            #ifdef FRCOV
+                            {if (FIXREVERTER[1530]) {
+                              if ((lo > 9551615 ) && !(0))
+                                fprintf(stderr, "triggered bug index 1530\n");
+                              else
+                                fprintf(stderr, "reached bug index 1530\n");
+                            }
+                            if ((!FIXREVERTER[1530] && (lo > 9551615 ))
+                            #else
+                            if (0
+                            #endif
+                            )
                                 goto return1;
+                                #ifdef FRCOV
+                                }
+                                #endif
                         }
                     }
                 } else if (type->builtInType == XML_SCHEMAS_UINT) {
-                    if (hi != 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1531]) {
+                      if ((hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1531\n");
+                      else
+                        fprintf(stderr, "reached bug index 1531\n");
+                    }
+                    if ((!FIXREVERTER[1531] && (hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if (mi >= 42) {
-                        if (mi > 42)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1532]) {
+                          if ((mi > 42 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1532\n");
+                          else
+                            fprintf(stderr, "reached bug index 1532\n");
+                        }
+                        if ((!FIXREVERTER[1532] && (mi > 42 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             goto return1;
-                        if (lo > 94967295)
+                            #ifdef FRCOV
+                            }
+                            #endif
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1533]) {
+                          if ((lo > 94967295 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1533\n");
+                          else
+                            fprintf(stderr, "reached bug index 1533\n");
+                        }
+                        if ((!FIXREVERTER[1533] && (lo > 94967295 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             goto return1;
+                            #ifdef FRCOV
+                            }
+                            #endif
                     }
                 } else if (type->builtInType == XML_SCHEMAS_USHORT) {
-                    if ((mi != 0) || (hi != 0))
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1534]) {
+                      if ((mi != 0 || hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1534\n");
+                      else
+                        fprintf(stderr, "reached bug index 1534\n");
+                    }
+                    if ((!FIXREVERTER[1534] && (mi != 0 || hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
-                    if (lo > 65535)
+                        #ifdef FRCOV
+                        }
+                        #endif
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1535]) {
+                      if ((lo > 65535 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1535\n");
+                      else
+                        fprintf(stderr, "reached bug index 1535\n");
+                    }
+                    if ((!FIXREVERTER[1535] && (lo > 65535 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                 } else if (type->builtInType == XML_SCHEMAS_UBYTE) {
-                    if ((mi != 0) || (hi != 0))
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1536]) {
+                      if ((mi != 0 || hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1536\n");
+                      else
+                        fprintf(stderr, "reached bug index 1536\n");
+                    }
+                    if ((!FIXREVERTER[1536] && (mi != 0 || hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
-                    if (lo > 255)
+                        #ifdef FRCOV
+                        }
+                        #endif
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1537]) {
+                      if ((lo > 255 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1537\n");
+                      else
+                        fprintf(stderr, "reached bug index 1537\n");
+                    }
+                    if ((!FIXREVERTER[1537] && (lo > 255 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                 }
                 if (val != NULL) {
                     v = xmlSchemaNewValue(type->builtInType);
@@ -3579,8 +4868,23 @@ xmlSchemaCompareDurations(xmlSchemaValPtr x, xmlSchemaValPtr y)
         { 0, 28, 59, 89, 120, 150, 181, 212, 242, 273, 303, 334, },
         { 0, 31, 62, 92, 123, 153, 184, 215, 245, 276, 306, 337} };
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1539]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1539\n");
+      else
+        fprintf(stderr, "reached bug index 1539\n");
+    }
+    if ((!FIXREVERTER[1539] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return -2;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* months */
     mon = x->value.dur.mon - y->value.dur.mon;
@@ -3671,8 +4975,23 @@ static xmlSchemaValPtr
 xmlSchemaDupVal (xmlSchemaValPtr v)
 {
     xmlSchemaValPtr ret = xmlSchemaNewValue(v->type);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1542]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1542\n");
+      else
+        fprintf(stderr, "reached bug index 1542\n");
+    }
+    if ((!FIXREVERTER[1542] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     memcpy(ret, v, sizeof(xmlSchemaVal));
     ret->next = NULL;
@@ -3774,35 +5093,110 @@ _xmlSchemaDateAdd (xmlSchemaValPtr dt, xmlSchemaValPtr dur)
     xmlSchemaValDatePtr r, d;
     xmlSchemaValDurationPtr u;
 
-    if ((dt == NULL) || (dur == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1543]) {
+      if ((dt == (void *) 0 || dur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1543\n");
+      else
+        fprintf(stderr, "reached bug index 1543\n");
+    }
+    if ((!FIXREVERTER[1543] && (dt == (void *) 0 || dur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = xmlSchemaNewValue(dt->type);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1544]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1544\n");
+      else
+        fprintf(stderr, "reached bug index 1544\n");
+    }
+    if ((!FIXREVERTER[1544] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* make a copy so we don't alter the original value */
     tmp = xmlSchemaDupVal(dt);
-    if (tmp == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1545]) {
+      if ((tmp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1545\n");
+      else
+        fprintf(stderr, "reached bug index 1545\n");
+    }
+    if ((!FIXREVERTER[1545] && (tmp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaFreeValue(ret);
         return NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     r = &(ret->value.date);
     d = &(tmp->value.date);
     u = &(dur->value.dur);
 
     /* normalization */
-    if (d->mon == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1546]) {
+      if ((d -> mon == 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1546\n");
+      else
+        fprintf(stderr, "reached bug index 1546\n");
+    }
+    if ((!FIXREVERTER[1546] && (d -> mon == 0  ))
+    #else
+    if (0
+    #endif
+    )
         d->mon = 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* normalize for time zone offset */
     u->sec -= (d->tzo * 60);
     d->tzo = 0;
 
     /* normalization */
-    if (d->day == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1547]) {
+      if ((d -> day == 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1547\n");
+      else
+        fprintf(stderr, "reached bug index 1547\n");
+    }
+    if ((!FIXREVERTER[1547] && (d -> day == 0  ))
+    #else
+    if (0
+    #endif
+    )
         d->day = 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* month */
     carry  = d->mon + u->mon;
@@ -3864,10 +5258,40 @@ _xmlSchemaDateAdd (xmlSchemaValPtr dt, xmlSchemaValPtr dur)
 	     * Coverity detected an overrun in daysInMonth
 	     * of size 12 at position 12 with index variable "((r)->mon - 1)"
 	     */
-	    if (tmon < 1)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1548]) {
+	      if ((tmon < 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1548\n");
+	      else
+	        fprintf(stderr, "reached bug index 1548\n");
+	    }
+	    if ((!FIXREVERTER[1548] && (tmon < 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        tmon = 1;
-	    if (tmon > 12)
+	        #ifdef FRCOV
+	        }
+	        #endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1549]) {
+	      if ((tmon > 12 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1549\n");
+	      else
+	        fprintf(stderr, "reached bug index 1549\n");
+	    }
+	    if ((!FIXREVERTER[1549] && (tmon > 12 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        tmon = 12;
+	        #ifdef FRCOV
+	        }
+	        #endif
             tempdays += MAX_DAYINMONTH(tyr, tmon);
             carry = -1;
         } else if (VALID_YEAR(r->year) && VALID_MONTH(r->mon) &&
@@ -3924,8 +5348,23 @@ xmlSchemaDateNormalize (xmlSchemaValPtr dt, double offset)
 {
     xmlSchemaValPtr dur, ret;
 
-    if (dt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1550]) {
+      if ((dt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1550\n");
+      else
+        fprintf(stderr, "reached bug index 1550\n");
+    }
+    if ((!FIXREVERTER[1550] && (dt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (((dt->type != XML_SCHEMAS_TIME) &&
          (dt->type != XML_SCHEMAS_DATETIME) &&
@@ -3933,14 +5372,44 @@ xmlSchemaDateNormalize (xmlSchemaValPtr dt, double offset)
         return xmlSchemaDupVal(dt);
 
     dur = xmlSchemaNewValue(XML_SCHEMAS_DURATION);
-    if (dur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1551]) {
+      if ((dur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1551\n");
+      else
+        fprintf(stderr, "reached bug index 1551\n");
+    }
+    if ((!FIXREVERTER[1551] && (dur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     dur->value.date.sec -= offset;
 
     ret = _xmlSchemaDateAdd(dt, dur);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1552]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1552\n");
+      else
+        fprintf(stderr, "reached bug index 1552\n");
+    }
+    if ((!FIXREVERTER[1552] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlSchemaFreeValue(dur);
 
@@ -3966,7 +5435,22 @@ _xmlSchemaDateCastYMToDays (const xmlSchemaValPtr dt)
     int mon;
 
     mon = dt->value.date.mon;
-    if (mon <= 0) mon = 1; /* normalization */
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1553]) {
+      if ((mon <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1553\n");
+      else
+        fprintf(stderr, "reached bug index 1553\n");
+    }
+    if ((!FIXREVERTER[1553] && (mon <= 0 ))
+    #else
+    if (0
+    #endif
+    ) mon = 1;
+    #ifdef FRCOV
+    }
+    #endif /* normalization */
 
     if (dt->value.date.year <= 0)
         ret = (dt->value.date.year * 365) +
@@ -4013,8 +5497,23 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
     xmlSchemaValPtr p1, p2, q1, q2;
     long p1d, p2d, q1d, q2d;
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1554]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1554\n");
+      else
+        fprintf(stderr, "reached bug index 1554\n");
+    }
+    if ((!FIXREVERTER[1554] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return -2;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (x->value.date.tz_flag) {
 
@@ -4054,8 +5553,23 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
 		    xmlSchemaFreeValue(p1);
 		    xmlSchemaFreeValue(q1);
 		    xmlSchemaFreeValue(q2);
-		    if (ret != 0)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1555]) {
+		      if ((ret != 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1555\n");
+		      else
+		        fprintf(stderr, "reached bug index 1555\n");
+		    }
+		    if ((!FIXREVERTER[1555] && (ret != 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        return(ret);
+		        #ifdef FRCOV
+		        }
+		        #endif
                 }
             } else {
 		xmlSchemaFreeValue(p1);
@@ -4100,8 +5614,23 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
 		xmlSchemaFreeValue(p1);
 		xmlSchemaFreeValue(q1);
 		xmlSchemaFreeValue(p2);
-		if (ret != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1556]) {
+		  if ((ret != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1556\n");
+		  else
+		    fprintf(stderr, "reached bug index 1556\n");
+		}
+		if ((!FIXREVERTER[1556] && (ret != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(ret);
+		    #ifdef FRCOV
+		    }
+		    #endif
             }
 	} else {
 	    xmlSchemaFreeValue(p1);
@@ -4583,10 +6112,40 @@ xmlSchemaCompareNormStrings(const xmlChar *x,
 	    while (IS_BLANK_CH(*y)) y++;
 	} else {
 	    tmp = *x++ - *y++;
-	    if (tmp < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1561]) {
+	      if ((tmp < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1561\n");
+	      else
+	        fprintf(stderr, "reached bug index 1561\n");
+	    }
+	    if ((!FIXREVERTER[1561] && (tmp < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
-	    if (tmp > 0)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1562]) {
+	      if ((tmp > 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1562\n");
+	      else
+	        fprintf(stderr, "reached bug index 1562\n");
+	    }
+	    if ((!FIXREVERTER[1562] && (tmp > 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(1);
+		#ifdef FRCOV
+		}
+		#endif
 	}
     }
     if (*x != 0) {
@@ -4616,8 +6175,23 @@ static int
 xmlSchemaCompareFloats(xmlSchemaValPtr x, xmlSchemaValPtr y) {
     double d1, d2;
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1563]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1563\n");
+      else
+        fprintf(stderr, "reached bug index 1563\n");
+    }
+    if ((!FIXREVERTER[1563] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-2);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Cast everything to doubles.
@@ -4717,8 +6291,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
         case XML_SCHEMAS_BYTE:
         case XML_SCHEMAS_UBYTE:
 	case XML_SCHEMAS_DECIMAL:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1564]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1564\n");
+	      else
+	        fprintf(stderr, "reached bug index 1564\n");
+	    }
+	    if ((!FIXREVERTER[1564] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
 	    if (ytype == xtype)
 		return(xmlSchemaCompareDecimals(x, y));
 	    if ((ytype == XML_SCHEMAS_DECIMAL) ||
@@ -4738,8 +6327,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 		return(xmlSchemaCompareDecimals(x, y));
 	    return(-2);
         case XML_SCHEMAS_DURATION:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1565]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1565\n");
+	      else
+	        fprintf(stderr, "reached bug index 1565\n");
+	    }
+	    if ((!FIXREVERTER[1565] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
 	    if (ytype == XML_SCHEMAS_DURATION)
                 return(xmlSchemaCompareDurations(x, y));
             return(-2);
@@ -4751,8 +6355,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
         case XML_SCHEMAS_GYEARMONTH:
         case XML_SCHEMAS_DATE:
         case XML_SCHEMAS_DATETIME:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1566]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1566\n");
+	      else
+	        fprintf(stderr, "reached bug index 1566\n");
+	    }
+	    if ((!FIXREVERTER[1566] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if ((ytype == XML_SCHEMAS_DATETIME)  ||
                 (ytype == XML_SCHEMAS_TIME)      ||
                 (ytype == XML_SCHEMAS_GDAY)      ||
@@ -4795,8 +6414,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	    */
 	    if (ytype == XML_SCHEMAS_QNAME) {
 		TODO
-		if (y == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1567]) {
+		  if ((y == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1567\n");
+		  else
+		    fprintf(stderr, "reached bug index 1567\n");
+		}
+		if ((!FIXREVERTER[1567] && (y == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(-2);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		return (-2);
 	    }
             if ((ytype == XML_SCHEMAS_ANYSIMPLETYPE) ||
@@ -4850,8 +6484,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	}
         case XML_SCHEMAS_QNAME:
 	case XML_SCHEMAS_NOTATION:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1568]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1568\n");
+	      else
+	        fprintf(stderr, "reached bug index 1568\n");
+	    }
+	    if ((!FIXREVERTER[1568] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if ((ytype == XML_SCHEMAS_QNAME) ||
 		(ytype == XML_SCHEMAS_NOTATION)) {
 		if ((xmlStrEqual(x->value.qname.name, y->value.qname.name)) &&
@@ -4862,15 +6511,45 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	    return (-2);
         case XML_SCHEMAS_FLOAT:
         case XML_SCHEMAS_DOUBLE:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1569]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1569\n");
+	      else
+	        fprintf(stderr, "reached bug index 1569\n");
+	    }
+	    if ((!FIXREVERTER[1569] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if ((ytype == XML_SCHEMAS_FLOAT) ||
                 (ytype == XML_SCHEMAS_DOUBLE))
                 return (xmlSchemaCompareFloats(x, y));
             return (-2);
         case XML_SCHEMAS_BOOLEAN:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1570]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1570\n");
+	      else
+	        fprintf(stderr, "reached bug index 1570\n");
+	    }
+	    if ((!FIXREVERTER[1570] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if (ytype == XML_SCHEMAS_BOOLEAN) {
 		if (x->value.b == y->value.b)
 		    return(0);
@@ -4880,8 +6559,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	    }
 	    return (-2);
         case XML_SCHEMAS_HEXBINARY:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1571]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1571\n");
+	      else
+	        fprintf(stderr, "reached bug index 1571\n");
+	    }
+	    if ((!FIXREVERTER[1571] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if (ytype == XML_SCHEMAS_HEXBINARY) {
 	        if (x->value.hex.total == y->value.hex.total) {
 		    int ret = xmlStrcmp(x->value.hex.str, y->value.hex.str);
@@ -4897,8 +6591,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
             }
             return (-2);
         case XML_SCHEMAS_BASE64BINARY:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1573]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1573\n");
+	      else
+	        fprintf(stderr, "reached bug index 1573\n");
+	    }
+	    if ((!FIXREVERTER[1573] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if (ytype == XML_SCHEMAS_BASE64BINARY) {
                 if (x->value.base64.total == y->value.base64.total) {
                     int ret = xmlStrcmp(x->value.base64.str,
@@ -4939,8 +6648,23 @@ int
 xmlSchemaCompareValues(xmlSchemaValPtr x, xmlSchemaValPtr y) {
     xmlSchemaWhitespaceValueType xws, yws;
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1574]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1574\n");
+      else
+        fprintf(stderr, "reached bug index 1574\n");
+    }
+    if ((!FIXREVERTER[1574] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-2);
+        #ifdef FRCOV
+        }
+        #endif
     if (x->type == XML_SCHEMAS_STRING)
 	xws = XML_SCHEMA_WHITESPACE_PRESERVE;
     else if (x->type == XML_SCHEMAS_NORMSTRING)
@@ -4977,8 +6701,23 @@ xmlSchemaCompareValuesWhtsp(xmlSchemaValPtr x,
 			    xmlSchemaValPtr y,
 			    xmlSchemaWhitespaceValueType yws)
 {
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1575]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1575\n");
+      else
+        fprintf(stderr, "reached bug index 1575\n");
+    }
+    if ((!FIXREVERTER[1575] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-2);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlSchemaCompareValuesInternal(x->type, x, NULL, xws, y->type,
 	y, NULL, yws));
 }
@@ -5022,8 +6761,23 @@ xmlSchemaNormLen(const xmlChar *value) {
     const xmlChar *utf;
     int ret = 0;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1576]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1576\n");
+      else
+        fprintf(stderr, "reached bug index 1576\n");
+    }
+    if ((!FIXREVERTER[1576] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     utf = value;
     while (IS_BLANK_CH(*utf)) utf++;
     while (*utf != 0) {
@@ -5069,8 +6823,23 @@ xmlSchemaGetFacetValueAsULong(xmlSchemaFacetPtr facet)
     /*
     * TODO: Check if this is a decimal.
     */
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1577]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1577\n");
+      else
+        fprintf(stderr, "reached bug index 1577\n");
+    }
+    if ((!FIXREVERTER[1577] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     return ((unsigned long) facet->val->value.decimal.lo);
 }
 
@@ -5092,8 +6861,23 @@ xmlSchemaValidateListSimpleTypeFacet(xmlSchemaFacetPtr facet,
 				     unsigned long actualLen,
 				     unsigned long *expectedLen)
 {
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1578]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1578\n");
+      else
+        fprintf(stderr, "reached bug index 1578\n");
+    }
+    if ((!FIXREVERTER[1578] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * TODO: Check if this will work with large numbers.
     * (compare value.decimal.mi and value.decimal.hi as well?).
@@ -5151,8 +6935,23 @@ xmlSchemaValidateLengthFacetInternal(xmlSchemaFacetPtr facet,
 {
     unsigned int len = 0;
 
-    if ((length == NULL) || (facet == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1579]) {
+      if ((length == (void *) 0 || facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1579\n");
+      else
+        fprintf(stderr, "reached bug index 1579\n");
+    }
+    if ((!FIXREVERTER[1579] && (length == (void *) 0 || facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     *length = 0;
     if ((facet->type != XML_SCHEMA_FACET_LENGTH) &&
 	(facet->type != XML_SCHEMA_FACET_MAXLENGTH) &&
@@ -5209,8 +7008,23 @@ xmlSchemaValidateLengthFacetInternal(xmlSchemaFacetPtr facet,
 		* FIXME: What exactly to do with anyURI?
 		*/
 	    case XML_SCHEMAS_ANYURI:
-		if (value != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1580]) {
+		  if ((value != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1580\n");
+		  else
+		    fprintf(stderr, "reached bug index 1580\n");
+		}
+		if ((!FIXREVERTER[1580] && (value != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    len = xmlSchemaNormLen(value);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_SCHEMAS_QNAME:
 	    case XML_SCHEMAS_NOTATION:
@@ -5321,8 +7135,23 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
     int ret;
     int stringType;
 
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1582]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1582\n");
+      else
+        fprintf(stderr, "reached bug index 1582\n");
+    }
+    if ((!FIXREVERTER[1582] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     switch (facet->type) {
 	case XML_SCHEMA_FACET_PATTERN:
@@ -5330,8 +7159,23 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 	    * NOTE that for patterns, the @value needs to be the normalized
 	    * value, *not* the lexical initial value or the canonical value.
 	    */
-	    if (value == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1583]) {
+	      if ((value == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1583\n");
+	      else
+	        fprintf(stderr, "reached bug index 1583\n");
+	    }
+	    if ((!FIXREVERTER[1583] && (value == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
+		#ifdef FRCOV
+		}
+		#endif
 	    /*
 	    * If string-derived type, regexp must be tested on the value space of
 	    * the datatype.
@@ -5341,10 +7185,40 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 			      || (val->type >= XML_SCHEMAS_TOKEN && val->type <= XML_SCHEMAS_NCNAME));
 	    ret = xmlRegexpExec(facet->regexp,
 	                        (stringType && val->value.str) ? val->value.str : value);
-	    if (ret == 1)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1584]) {
+	      if ((ret == 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1584\n");
+	      else
+	        fprintf(stderr, "reached bug index 1584\n");
+	    }
+	    if ((!FIXREVERTER[1584] && (ret == 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
-	    if (ret == 0)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1585]) {
+	      if ((ret == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1585\n");
+	      else
+	        fprintf(stderr, "reached bug index 1585\n");
+	    }
+	    if ((!FIXREVERTER[1585] && (ret == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(XML_SCHEMAV_CVC_PATTERN_VALID);
+		#ifdef FRCOV
+		}
+		#endif
 	    return(ret);
 	case XML_SCHEMA_FACET_MAXEXCLUSIVE:
 	    ret = xmlSchemaCompareValues(val, facet->val);
@@ -5364,15 +7238,45 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 	    ret = xmlSchemaCompareValues(val, facet->val);
 	    if (ret == -2)
 		return(-1);
-	    if (ret == 1)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1586]) {
+	      if ((ret == 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1586\n");
+	      else
+	        fprintf(stderr, "reached bug index 1586\n");
+	    }
+	    if ((!FIXREVERTER[1586] && (ret == 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
+		#ifdef FRCOV
+		}
+		#endif
 	    return(XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID);
 	case XML_SCHEMA_FACET_MININCLUSIVE:
 	    ret = xmlSchemaCompareValues(val, facet->val);
 	    if (ret == -2)
 		return(-1);
-	    if ((ret == 1) || (ret == 0))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1587]) {
+	      if ((ret == 1 || ret == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1587\n");
+	      else
+	        fprintf(stderr, "reached bug index 1587\n");
+	    }
+	    if ((!FIXREVERTER[1587] && (ret == 1 || ret == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
+		#ifdef FRCOV
+		}
+		#endif
 	    return(XML_SCHEMAV_CVC_MININCLUSIVE_VALID);
 	case XML_SCHEMA_FACET_WHITESPACE:
 	    /* TODO whitespaces */
@@ -5398,8 +7302,23 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 		    value, ws);
 		if (ret == -2)
 		    return(-1);
-		if (ret == 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1588]) {
+		  if ((ret == 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1588\n");
+		  else
+		    fprintf(stderr, "reached bug index 1588\n");
+		}
+		if ((!FIXREVERTER[1588] && (ret == 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(0);
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	    return(XML_SCHEMAV_CVC_ENUMERATION_VALID);
 	case XML_SCHEMA_FACET_LENGTH:
@@ -5691,8 +7610,23 @@ xmlSchemaFormatFloat(double number, char buffer[], int buffersize)
 int
 xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 {
-    if ((retValue == NULL) || (val == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1590]) {
+      if ((retValue == (void *) 0 || val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1590\n");
+      else
+        fprintf(stderr, "reached bug index 1590\n");
+    }
+    if ((!FIXREVERTER[1590] && (retValue == (void *) 0 || val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     *retValue = NULL;
     switch (val->type) {
 	case XML_SCHEMAS_STRING:
@@ -5766,8 +7700,23 @@ xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 		if ((dec.frac == 0) || (dec.frac == dec.total))
 		    bufsize++;
 		buf = xmlMalloc(bufsize);
-		if (buf == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1591]) {
+		  if ((buf == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1591\n");
+		  else
+		    fprintf(stderr, "reached bug index 1591\n");
+		}
+		if ((!FIXREVERTER[1591] && (buf == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(-1);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		offs = buf;
 		if (dec.sign)
 		    *offs++ = '-';
@@ -5967,8 +7916,23 @@ xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 		    xmlSchemaValPtr norm;
 
 		    norm = xmlSchemaDateNormalize(val, 0);
-		    if (norm == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1592]) {
+		      if ((norm == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1592\n");
+		      else
+		        fprintf(stderr, "reached bug index 1592\n");
+		    }
+		    if ((!FIXREVERTER[1592] && (norm == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * TODO: Check if "%.14g" is portable.
 		    */
@@ -5996,8 +7960,23 @@ xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 		    xmlSchemaValPtr norm;
 
 		    norm = xmlSchemaDateNormalize(val, 0);
-		    if (norm == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1593]) {
+		      if ((norm == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1593\n");
+		      else
+		        fprintf(stderr, "reached bug index 1593\n");
+		    }
+		    if ((!FIXREVERTER[1593] && (norm == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * TODO: Append the canonical value of the
 		    * recoverable timezone and not "Z".
@@ -6024,8 +8003,23 @@ xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 		    xmlSchemaValPtr norm;
 
 		    norm = xmlSchemaDateNormalize(val, 0);
-		    if (norm == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1594]) {
+		      if ((norm == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1594\n");
+		      else
+		        fprintf(stderr, "reached bug index 1594\n");
+		    }
+		    if ((!FIXREVERTER[1594] && (norm == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * TODO: Check if "%.14g" is portable.
 		    */
@@ -6154,8 +8148,23 @@ xmlSchemaGetCanonValueWhtsp(xmlSchemaValPtr val,
 xmlSchemaValType
 xmlSchemaGetValType(xmlSchemaValPtr val)
 {
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1596]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1596\n");
+      else
+        fprintf(stderr, "reached bug index 1596\n");
+    }
+    if ((!FIXREVERTER[1596] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_SCHEMAS_UNKNOWN);
+        #ifdef FRCOV
+        }
+        #endif
     return (val->type);
 }
 
diff --git a/xmlstring.c b/xmlstring.c
old mode 100644
new mode 100755
index 8d2e06f6..72e38235
--- a/xmlstring.c
+++ b/xmlstring.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * string.c : an XML string utilities module
  *
@@ -41,12 +45,42 @@ xmlChar *
 xmlStrndup(const xmlChar *cur, int len) {
     xmlChar *ret;
 
-    if ((cur == NULL) || (len < 0)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[51]) {
+      if ((cur == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 51\n");
+      else
+        fprintf(stderr, "reached bug index 51\n");
+    }
+    if ((!FIXREVERTER[51] && (cur == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = (xmlChar *) xmlMallocAtomic((len + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[52]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 52\n");
+      else
+        fprintf(stderr, "reached bug index 52\n");
+    }
+    if ((!FIXREVERTER[52] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(NULL, NULL);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memcpy(ret, cur, len * sizeof(xmlChar));
     ret[len] = 0;
     return(ret);
@@ -86,12 +120,42 @@ xmlCharStrndup(const char *cur, int len) {
     int i;
     xmlChar *ret;
 
-    if ((cur == NULL) || (len < 0)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[54]) {
+      if ((cur == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 54\n");
+      else
+        fprintf(stderr, "reached bug index 54\n");
+    }
+    if ((!FIXREVERTER[54] && (cur == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = (xmlChar *) xmlMallocAtomic((len + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[55]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 55\n");
+      else
+        fprintf(stderr, "reached bug index 55\n");
+    }
+    if ((!FIXREVERTER[55] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(NULL, NULL);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     for (i = 0;i < len;i++) {
         ret[i] = (xmlChar) cur[i];
         if (ret[i] == 0) return(ret);
@@ -113,7 +177,22 @@ xmlChar *
 xmlCharStrdup(const char *cur) {
     const char *p = cur;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[56]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 56\n");
+      else
+        fprintf(stderr, "reached bug index 56\n");
+    }
+    if ((!FIXREVERTER[56] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while (*p != '\0') p++; /* non input consuming */
     return(xmlCharStrndup(cur, p - cur));
 }
@@ -133,8 +212,38 @@ xmlStrcmp(const xmlChar *str1, const xmlChar *str2) {
     register int tmp;
 
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[57]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 57\n");
+      else
+        fprintf(stderr, "reached bug index 57\n");
+    }
+    if ((!FIXREVERTER[57] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[58]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 58\n");
+      else
+        fprintf(stderr, "reached bug index 58\n");
+    }
+    if ((!FIXREVERTER[58] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
     do {
         tmp = *str1++ - *str2;
         if (tmp != 0) return(tmp);
@@ -156,8 +265,38 @@ xmlStrcmp(const xmlChar *str1, const xmlChar *str2) {
 int
 xmlStrEqual(const xmlChar *str1, const xmlChar *str2) {
     if (str1 == str2) return(1);
-    if (str1 == NULL) return(0);
-    if (str2 == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[60]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 60\n");
+      else
+        fprintf(stderr, "reached bug index 60\n");
+    }
+    if ((!FIXREVERTER[60] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[61]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 61\n");
+      else
+        fprintf(stderr, "reached bug index 61\n");
+    }
+    if ((!FIXREVERTER[61] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     do {
         if (*str1++ != *str2) return(0);
     } while (*str2++);
@@ -177,9 +316,54 @@ xmlStrEqual(const xmlChar *str1, const xmlChar *str2) {
 
 int
 xmlStrQEqual(const xmlChar *pref, const xmlChar *name, const xmlChar *str) {
-    if (pref == NULL) return(xmlStrEqual(name, str));
-    if (name == NULL) return(0);
-    if (str == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[62]) {
+      if ((pref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 62\n");
+      else
+        fprintf(stderr, "reached bug index 62\n");
+    }
+    if ((!FIXREVERTER[62] && (pref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(xmlStrEqual(name, str));
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[63]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 63\n");
+      else
+        fprintf(stderr, "reached bug index 63\n");
+    }
+    if ((!FIXREVERTER[63] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[64]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 64\n");
+      else
+        fprintf(stderr, "reached bug index 64\n");
+    }
+    if ((!FIXREVERTER[64] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     do {
         if (*pref++ != *str) return(0);
@@ -208,8 +392,38 @@ xmlStrncmp(const xmlChar *str1, const xmlChar *str2, int len) {
 
     if (len <= 0) return(0);
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[66]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 66\n");
+      else
+        fprintf(stderr, "reached bug index 66\n");
+    }
+    if ((!FIXREVERTER[66] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[67]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 67\n");
+      else
+        fprintf(stderr, "reached bug index 67\n");
+    }
+    if ((!FIXREVERTER[67] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef __GNUC__
     tmp = strncmp((const char *)str1, (const char *)str2, len);
     return tmp;
@@ -272,8 +486,38 @@ xmlStrcasecmp(const xmlChar *str1, const xmlChar *str2) {
     register int tmp;
 
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[68]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 68\n");
+      else
+        fprintf(stderr, "reached bug index 68\n");
+    }
+    if ((!FIXREVERTER[68] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[69]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 69\n");
+      else
+        fprintf(stderr, "reached bug index 69\n");
+    }
+    if ((!FIXREVERTER[69] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
     do {
         tmp = casemap[*str1++] - casemap[*str2];
         if (tmp != 0) return(tmp);
@@ -298,8 +542,38 @@ xmlStrncasecmp(const xmlChar *str1, const xmlChar *str2, int len) {
 
     if (len <= 0) return(0);
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[72]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 72\n");
+      else
+        fprintf(stderr, "reached bug index 72\n");
+    }
+    if ((!FIXREVERTER[72] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[73]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 73\n");
+      else
+        fprintf(stderr, "reached bug index 73\n");
+    }
+    if ((!FIXREVERTER[73] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
     do {
         tmp = casemap[*str1++] - casemap[*str2];
         if (tmp != 0 || --len == 0) return(tmp);
@@ -319,7 +593,22 @@ xmlStrncasecmp(const xmlChar *str1, const xmlChar *str2, int len) {
 
 const xmlChar *
 xmlStrchr(const xmlChar *str, xmlChar val) {
-    if (str == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[74]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 74\n");
+      else
+        fprintf(stderr, "reached bug index 74\n");
+    }
+    if ((!FIXREVERTER[74] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while (*str != 0) { /* non input consuming */
         if (*str == val) return((xmlChar *) str);
         str++;
@@ -341,8 +630,38 @@ const xmlChar *
 xmlStrstr(const xmlChar *str, const xmlChar *val) {
     int n;
 
-    if (str == NULL) return(NULL);
-    if (val == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[75]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 75\n");
+      else
+        fprintf(stderr, "reached bug index 75\n");
+    }
+    if ((!FIXREVERTER[75] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[76]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 76\n");
+      else
+        fprintf(stderr, "reached bug index 76\n");
+    }
+    if ((!FIXREVERTER[76] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     n = xmlStrlen(val);
 
     if (n == 0) return(str);
@@ -369,8 +688,38 @@ const xmlChar *
 xmlStrcasestr(const xmlChar *str, const xmlChar *val) {
     int n;
 
-    if (str == NULL) return(NULL);
-    if (val == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[78]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 78\n");
+      else
+        fprintf(stderr, "reached bug index 78\n");
+    }
+    if ((!FIXREVERTER[78] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[79]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 79\n");
+      else
+        fprintf(stderr, "reached bug index 79\n");
+    }
+    if ((!FIXREVERTER[79] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     n = xmlStrlen(val);
 
     if (n == 0) return(str);
@@ -422,7 +771,22 @@ int
 xmlStrlen(const xmlChar *str) {
     int len = 0;
 
-    if (str == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[84]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 84\n");
+      else
+        fprintf(stderr, "reached bug index 84\n");
+    }
+    if ((!FIXREVERTER[84] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     while (*str != 0) { /* non input consuming */
         str++;
         len++;
@@ -449,21 +813,96 @@ xmlStrncat(xmlChar *cur, const xmlChar *add, int len) {
     int size;
     xmlChar *ret;
 
-    if ((add == NULL) || (len == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[85]) {
+      if ((add == (void *) 0 || len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 85\n");
+      else
+        fprintf(stderr, "reached bug index 85\n");
+    }
+    if ((!FIXREVERTER[85] && (add == (void *) 0 || len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(cur);
-    if (len < 0)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[86]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 86\n");
+      else
+        fprintf(stderr, "reached bug index 86\n");
+    }
+    if ((!FIXREVERTER[86] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (cur == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[87]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 87\n");
+      else
+        fprintf(stderr, "reached bug index 87\n");
+    }
+    if ((!FIXREVERTER[87] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrndup(add, len));
+        #ifdef FRCOV
+        }
+        #endif
 
     size = xmlStrlen(cur);
-    if (size < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[88]) {
+      if ((size < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 88\n");
+      else
+        fprintf(stderr, "reached bug index 88\n");
+    }
+    if ((!FIXREVERTER[88] && (size < 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret = (xmlChar *) xmlRealloc(cur, (size + len + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[89]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 89\n");
+      else
+        fprintf(stderr, "reached bug index 89\n");
+    }
+    if ((!FIXREVERTER[89] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(NULL, NULL);
         return(cur);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memcpy(&ret[size], add, len * sizeof(xmlChar));
     ret[size + len] = 0;
     return(ret);
@@ -488,22 +927,97 @@ xmlStrncatNew(const xmlChar *str1, const xmlChar *str2, int len) {
 
     if (len < 0) {
         len = xmlStrlen(str2);
-        if (len < 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[90]) {
+          if ((len < 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 90\n");
+          else
+            fprintf(stderr, "reached bug index 90\n");
+        }
+        if ((!FIXREVERTER[90] && (len < 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(NULL);
+            #ifdef FRCOV
+            }
+            #endif
+    }
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[91]) {
+      if ((str2 == (void *) 0 || len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 91\n");
+      else
+        fprintf(stderr, "reached bug index 91\n");
     }
-    if ((str2 == NULL) || (len == 0))
+    if ((!FIXREVERTER[91] && (str2 == (void *) 0 || len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrdup(str1));
-    if (str1 == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[92]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 92\n");
+      else
+        fprintf(stderr, "reached bug index 92\n");
+    }
+    if ((!FIXREVERTER[92] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrndup(str2, len));
+        #ifdef FRCOV
+        }
+        #endif
 
     size = xmlStrlen(str1);
-    if (size < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[93]) {
+      if ((size < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 93\n");
+      else
+        fprintf(stderr, "reached bug index 93\n");
+    }
+    if ((!FIXREVERTER[93] && (size < 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret = (xmlChar *) xmlMalloc((size + len + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[94]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 94\n");
+      else
+        fprintf(stderr, "reached bug index 94\n");
+    }
+    if ((!FIXREVERTER[94] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(NULL, NULL);
         return(xmlStrndup(str1, size));
     }
+    #ifdef FRCOV
+    }
+    #endif
     memcpy(ret, str1, size * sizeof(xmlChar));
     memcpy(&ret[size], str2, len * sizeof(xmlChar));
     ret[size + len] = 0;
@@ -526,9 +1040,39 @@ xmlChar *
 xmlStrcat(xmlChar *cur, const xmlChar *add) {
     const xmlChar *p = add;
 
-    if (add == NULL) return(cur);
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[95]) {
+      if ((add == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 95\n");
+      else
+        fprintf(stderr, "reached bug index 95\n");
+    }
+    if ((!FIXREVERTER[95] && (add == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(cur);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[96]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 96\n");
+      else
+        fprintf(stderr, "reached bug index 96\n");
+    }
+    if ((!FIXREVERTER[96] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrdup(add));
+        #ifdef FRCOV
+        }
+        #endif
 
     while (*p != 0) p++; /* non input consuming */
     return(xmlStrncat(cur, add, p - add));
@@ -550,9 +1094,24 @@ xmlStrPrintf(xmlChar *buf, int len, const char *msg, ...) {
     va_list args;
     int ret;
 
-    if((buf == NULL) || (msg == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[97]) {
+      if ((buf == (void *) 0 || msg == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 97\n");
+      else
+        fprintf(stderr, "reached bug index 97\n");
+    }
+    if ((!FIXREVERTER[97] && (buf == (void *) 0 || msg == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     va_start(args, msg);
     ret = vsnprintf((char *) buf, len, (const char *) msg, args);
@@ -666,8 +1225,23 @@ int
 xmlUTF8Strlen(const xmlChar *utf) {
     int ret = 0;
 
-    if (utf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[102]) {
+      if ((utf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 102\n");
+      else
+        fprintf(stderr, "reached bug index 102\n");
+    }
+    if ((!FIXREVERTER[102] && (utf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (*utf != 0) {
         if (utf[0] & 0x80) {
@@ -710,10 +1284,40 @@ int
 xmlGetUTF8Char(const unsigned char *utf, int *len) {
     unsigned int c;
 
-    if (utf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[103]) {
+      if ((utf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 103\n");
+      else
+        fprintf(stderr, "reached bug index 103\n");
+    }
+    if ((!FIXREVERTER[103] && (utf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
-    if (len == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[104]) {
+      if ((len == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 104\n");
+      else
+        fprintf(stderr, "reached bug index 104\n");
+    }
+    if ((!FIXREVERTER[104] && (len == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     if (*len < 1)
         goto error;
 
@@ -783,8 +1387,23 @@ xmlCheckUTF8(const unsigned char *utf)
     int ix;
     unsigned char c;
 
-    if (utf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[105]) {
+      if ((utf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 105\n");
+      else
+        fprintf(stderr, "reached bug index 105\n");
+    }
+    if ((!FIXREVERTER[105] && (utf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * utf is a string of 1, 2, 3 or 4 bytes.  The valid strings
      * are as follows (in "bit format"):
@@ -834,8 +1453,23 @@ xmlUTF8Strsize(const xmlChar *utf, int len) {
     const xmlChar   *ptr=utf;
     xmlChar         ch;
 
-    if (utf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[106]) {
+      if ((utf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 106\n");
+      else
+        fprintf(stderr, "reached bug index 106\n");
+    }
+    if ((!FIXREVERTER[106] && (utf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (len <= 0)
         return(0);
@@ -867,15 +1501,45 @@ xmlUTF8Strndup(const xmlChar *utf, int len) {
     xmlChar *ret;
     int i;
 
-    if ((utf == NULL) || (len < 0)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[108]) {
+      if ((utf == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 108\n");
+      else
+        fprintf(stderr, "reached bug index 108\n");
+    }
+    if ((!FIXREVERTER[108] && (utf == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     i = xmlUTF8Strsize(utf, len);
     ret = (xmlChar *) xmlMallocAtomic((i + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[109]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 109\n");
+      else
+        fprintf(stderr, "reached bug index 109\n");
+    }
+    if ((!FIXREVERTER[109] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlGenericError(xmlGenericErrorContext,
                 "malloc of %ld byte failed\n",
                 (len + 1) * (long)sizeof(xmlChar));
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memcpy(ret, utf, i * sizeof(xmlChar));
     ret[i] = 0;
     return(ret);
@@ -895,7 +1559,22 @@ const xmlChar *
 xmlUTF8Strpos(const xmlChar *utf, int pos) {
     xmlChar ch;
 
-    if (utf == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[110]) {
+      if ((utf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 110\n");
+      else
+        fprintf(stderr, "reached bug index 110\n");
+    }
+    if ((!FIXREVERTER[110] && (utf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (pos < 0)
         return(NULL);
     while (pos--) {
@@ -928,7 +1607,22 @@ xmlUTF8Strloc(const xmlChar *utf, const xmlChar *utfchar) {
     int i, size;
     xmlChar ch;
 
-    if (utf==NULL || utfchar==NULL) return -1;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[112]) {
+      if ((utf == (void *) 0 || utfchar == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 112\n");
+      else
+        fprintf(stderr, "reached bug index 112\n");
+    }
+    if ((!FIXREVERTER[112] && (utf == (void *) 0 || utfchar == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
     size = xmlUTF8Strsize(utfchar, 1);
         for(i=0; (ch=*utf) != 0; i++) {
             if (xmlStrncmp(utf, utfchar, size)==0)
@@ -965,9 +1659,39 @@ xmlUTF8Strsub(const xmlChar *utf, int start, int len) {
     int            i;
     xmlChar ch;
 
-    if (utf == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[113]) {
+      if ((utf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 113\n");
+      else
+        fprintf(stderr, "reached bug index 113\n");
+    }
+    if ((!FIXREVERTER[113] && (utf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (start < 0) return(NULL);
-    if (len < 0) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[115]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 115\n");
+      else
+        fprintf(stderr, "reached bug index 115\n");
+    }
+    if ((!FIXREVERTER[115] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Skip over any leading chars
@@ -1016,8 +1740,23 @@ xmlEscapeFormatString(xmlChar **msg)
             ++count;
     }
 
-    if (count == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[116]) {
+      if ((count == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 116\n");
+      else
+        fprintf(stderr, "reached bug index 116\n");
+    }
+    if ((!FIXREVERTER[116] && (count == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(*msg);
+        #ifdef FRCOV
+        }
+        #endif
 
     resultLen = msgLen + count + 1;
     result = (xmlChar *) xmlMallocAtomic(resultLen * sizeof(xmlChar));
diff --git a/xmlunicode.c b/xmlunicode.c
old mode 100644
new mode 100755
index 6d0a96a0..74740afa
--- a/xmlunicode.c
+++ b/xmlunicode.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xmlunicode.c: this module implements the Unicode character APIs
  *
@@ -947,7 +951,22 @@ static xmlIntFunc
     int low, high, mid, cmp;
     const xmlUnicodeRange *sptr;
 
-    if ((tptr == NULL) || (tname == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[926]) {
+      if ((tptr == (void *) 0 || tname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 926\n");
+      else
+        fprintf(stderr, "reached bug index 926\n");
+    }
+    if ((!FIXREVERTER[926] && (tptr == (void *) 0 || tname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     low = 0;
     high = tptr->numentries - 1;
@@ -2644,8 +2663,23 @@ xmlUCSIsBlock(int code, const char *block) {
     xmlIntFunc *func;
 
     func = xmlUnicodeLookup(&xmlUnicodeBlockTbl, block);
-    if (func == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[927]) {
+      if ((func == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 927\n");
+      else
+        fprintf(stderr, "reached bug index 927\n");
+    }
+    if ((!FIXREVERTER[927] && (func == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     return (func(code));
 }
 
diff --git a/xmlwriter.c b/xmlwriter.c
old mode 100644
new mode 100755
diff --git a/xpath.c b/xpath.c
old mode 100644
new mode 100755
index 9e29f4a1..6a0de62d
--- a/xpath.c
+++ b/xpath.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xpath.c: XML Path Language implementation
  *          XPath is a language for addressing parts of an XML document,
@@ -162,8 +166,23 @@ xmlXPathCmpNodesExt(xmlNodePtr node1, xmlNodePtr node2) {
     xmlNodePtr cur, root;
     ptrdiff_t l1, l2;
 
-    if ((node1 == NULL) || (node2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[234]) {
+      if ((node1 == (void *) 0 || node2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 234\n");
+      else
+        fprintf(stderr, "reached bug index 234\n");
+    }
+    if ((!FIXREVERTER[234] && (node1 == (void *) 0 || node2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-2);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (node1 == node2)
 	return(0);
@@ -209,7 +228,19 @@ xmlXPathCmpNodesExt(xmlNodePtr node1, xmlNodePtr node2) {
 			precedence1 = 3; /* element in prev-sibl axis */
 			break;
 		    }
-		    if (node1->prev == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[237]) {
+		      if ((node1 -> prev == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 237\n");
+		      else
+		        fprintf(stderr, "reached bug index 237\n");
+		    }
+		    if ((!FIXREVERTER[237] && (node1 -> prev == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			precedence1 = 2; /* element is parent */
 			/*
 			* URGENT TODO: Are there any cases, where the
@@ -218,6 +249,9 @@ xmlXPathCmpNodesExt(xmlNodePtr node1, xmlNodePtr node2) {
 			node1 = node1->parent;
 			break;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		} while (1);
 	    } else {
 		precedence1 = 2; /* element is parent */
@@ -263,11 +297,26 @@ xmlXPathCmpNodesExt(xmlNodePtr node1, xmlNodePtr node2) {
 			precedence2 = 3; /* element in prev-sibl axis */
 			break;
 		    }
-		    if (node2->prev == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[238]) {
+		      if ((node2 -> prev == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 238\n");
+		      else
+		        fprintf(stderr, "reached bug index 238\n");
+		    }
+		    if ((!FIXREVERTER[238] && (node2 -> prev == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			precedence2 = 2; /* element is parent */
 			node2 = node2->parent;
 			break;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		} while (1);
 	    } else {
 		precedence2 = 2; /* element is parent */
@@ -400,8 +449,23 @@ turtle_comparison:
 	node1 = node1->parent;
 	node2 = node2->parent;
 	/* should not happen but just in case ... */
-	if ((node1 == NULL) || (node2 == NULL))
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[243]) {
+	  if ((node1 == (void *) 0 || node2 == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 243\n");
+	  else
+	    fprintf(stderr, "reached bug index 243\n");
+	}
+	if ((!FIXREVERTER[243] && (node1 == (void *) 0 || node2 == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-2);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     /*
      * Find who's first.
@@ -688,7 +752,19 @@ xmlXPathErr(xmlXPathParserContextPtr ctxt, int error)
 {
     if ((error < 0) || (error > MAXERRNO))
 	error = MAXERRNO;
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[246]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 246\n");
+      else
+        fprintf(stderr, "reached bug index 246\n");
+    }
+    if ((!FIXREVERTER[246] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	__xmlRaiseError(NULL, NULL, NULL,
 			NULL, NULL, XML_FROM_XPATH,
 			error + XML_XPATH_EXPRESSION_OK - XPATH_EXPRESSION_OK,
@@ -697,8 +773,23 @@ xmlXPathErr(xmlXPathParserContextPtr ctxt, int error)
 			"%s", xmlXPathErrorMessages[error]);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->error = error;
-    if (ctxt->context == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[247]) {
+      if ((ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 247\n");
+      else
+        fprintf(stderr, "reached bug index 247\n");
+    }
+    if ((!FIXREVERTER[247] && (ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	__xmlRaiseError(NULL, NULL, NULL,
 			NULL, NULL, XML_FROM_XPATH,
 			error + XML_XPATH_EXPRESSION_OK - XPATH_EXPRESSION_OK,
@@ -708,6 +799,9 @@ xmlXPathErr(xmlXPathParserContextPtr ctxt, int error)
 			"%s", xmlXPathErrorMessages[error]);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /* cleanup current last error */
     xmlResetError(&ctxt->context->lastError);
@@ -761,12 +855,26 @@ static int
 xmlXPathCheckOpLimit(xmlXPathParserContextPtr ctxt, unsigned long opCount) {
     xmlXPathContextPtr xpctxt = ctxt->context;
 
-    if ((opCount > xpctxt->opLimit) ||
-        (xpctxt->opCount > xpctxt->opLimit - opCount)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[248]) {
+      if ((opCount > xpctxt -> opLimit || xpctxt -> opCount > xpctxt -> opLimit - opCount ) && !(0))
+        fprintf(stderr, "triggered bug index 248\n");
+      else
+        fprintf(stderr, "reached bug index 248\n");
+    }
+    if ((!FIXREVERTER[248] && (opCount > xpctxt -> opLimit || xpctxt -> opCount > xpctxt -> opLimit - opCount ))
+    #else
+    if (0
+    #endif
+    ) {
         xpctxt->opCount = xpctxt->opLimit;
         xmlXPathErr(ctxt, XPATH_OP_LIMIT_EXCEEDED);
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     xpctxt->opCount += opCount;
     return(0);
@@ -803,31 +911,91 @@ xmlPointerListAddSize(xmlPointerListPtr list,
 		       int initialSize)
 {
     if (list->items == NULL) {
-	if (initialSize <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[249]) {
+	  if ((initialSize <= 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 249\n");
+	  else
+	    fprintf(stderr, "reached bug index 249\n");
+	}
+	if ((!FIXREVERTER[249] && (initialSize <= 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    initialSize = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	list->items = (void **) xmlMalloc(initialSize * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[250]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 250\n");
+	  else
+	    fprintf(stderr, "reached bug index 250\n");
+	}
+	if ((!FIXREVERTER[250] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPathErrMemory(NULL,
 		"xmlPointerListCreate: allocating item\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	list->number = 0;
 	list->size = initialSize;
     } else if (list->size <= list->number) {
-        if (list->size > 50000000) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[251]) {
+          if ((list -> size > 50000000 ) && !(0))
+            fprintf(stderr, "triggered bug index 251\n");
+          else
+            fprintf(stderr, "reached bug index 251\n");
+        }
+        if ((!FIXREVERTER[251] && (list -> size > 50000000 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlXPathErrMemory(NULL,
 		"xmlPointerListAddSize: re-allocating item\n");
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	list->size *= 2;
 	list->items = (void **) xmlRealloc(list->items,
 	    list->size * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[252]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 252\n");
+	  else
+	    fprintf(stderr, "reached bug index 252\n");
+	}
+	if ((!FIXREVERTER[252] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPathErrMemory(NULL,
 		"xmlPointerListAddSize: re-allocating item\n");
 	    list->size = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     list->items[list->number++] = item;
     return(0);
@@ -846,11 +1014,26 @@ xmlPointerListCreate(int initialSize)
     xmlPointerListPtr ret;
 
     ret = xmlMalloc(sizeof(xmlPointerList));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[253]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 253\n");
+      else
+        fprintf(stderr, "reached bug index 253\n");
+    }
+    if ((!FIXREVERTER[253] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXPathErrMemory(NULL,
 	    "xmlPointerListCreate: allocating item\n");
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlPointerList));
     if (initialSize > 0) {
 	xmlPointerListAddSize(ret, NULL, initialSize);
@@ -868,8 +1051,23 @@ xmlPointerListCreate(int initialSize)
 static void
 xmlPointerListFree(xmlPointerListPtr list)
 {
-    if (list == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[254]) {
+      if ((list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 254\n");
+      else
+        fprintf(stderr, "reached bug index 254\n");
+    }
+    if ((!FIXREVERTER[254] && (list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (list->items != NULL)
 	xmlFree(list->items);
     xmlFree(list);
@@ -1009,20 +1207,50 @@ xmlXPathNewCompExpr(void) {
     xmlXPathCompExprPtr cur;
 
     cur = (xmlXPathCompExprPtr) xmlMalloc(sizeof(xmlXPathCompExpr));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[255]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 255\n");
+      else
+        fprintf(stderr, "reached bug index 255\n");
+    }
+    if ((!FIXREVERTER[255] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "allocating component\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlXPathCompExpr));
     cur->maxStep = 10;
     cur->nbStep = 0;
     cur->steps = (xmlXPathStepOp *) xmlMalloc(cur->maxStep *
 	                                   sizeof(xmlXPathStepOp));
-    if (cur->steps == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[256]) {
+      if ((cur -> steps == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 256\n");
+      else
+        fprintf(stderr, "reached bug index 256\n");
+    }
+    if ((!FIXREVERTER[256] && (cur -> steps == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "allocating steps\n");
 	xmlFree(cur);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur->steps, 0, cur->maxStep * sizeof(xmlXPathStepOp));
     cur->last = -1;
 #ifdef DEBUG_EVAL_COUNTS
@@ -1043,8 +1271,23 @@ xmlXPathFreeCompExpr(xmlXPathCompExprPtr comp)
     xmlXPathStepOpPtr op;
     int i;
 
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[257]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 257\n");
+      else
+        fprintf(stderr, "reached bug index 257\n");
+    }
+    if ((!FIXREVERTER[257] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (comp->dict == NULL) {
 	for (i = 0; i < comp->nbStep; i++) {
 	    op = &comp->steps[i];
@@ -1110,18 +1353,48 @@ xmlXPathCompExprAdd(xmlXPathCompExprPtr comp, int ch1, int ch2,
     if (comp->nbStep >= comp->maxStep) {
 	xmlXPathStepOp *real;
 
-        if (comp->maxStep >= XPATH_MAX_STEPS) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[258]) {
+          if ((comp -> maxStep >= 1000000 ) && !(0))
+            fprintf(stderr, "triggered bug index 258\n");
+          else
+            fprintf(stderr, "reached bug index 258\n");
+        }
+        if ((!FIXREVERTER[258] && (comp -> maxStep >= 1000000 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlXPathErrMemory(NULL, "adding step\n");
 	    return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	comp->maxStep *= 2;
 	real = (xmlXPathStepOp *) xmlRealloc(comp->steps,
 		                      comp->maxStep * sizeof(xmlXPathStepOp));
-	if (real == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[259]) {
+	  if ((real == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 259\n");
+	  else
+	    fprintf(stderr, "reached bug index 259\n");
+	}
+	if ((!FIXREVERTER[259] && (real == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    comp->maxStep /= 2;
 	    xmlXPathErrMemory(NULL, "adding step\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->steps = real;
     }
     comp->last = comp->nbStep;
@@ -2209,8 +2482,23 @@ xmlXPathCacheFreeObjectList(xmlPointerListPtr list)
     int i;
     xmlXPathObjectPtr obj;
 
-    if (list == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[269]) {
+      if ((list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 269\n");
+      else
+        fprintf(stderr, "reached bug index 269\n");
+    }
+    if ((!FIXREVERTER[269] && (list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     for (i = 0; i < list->number; i++) {
 	obj = list->items[i];
@@ -2234,8 +2522,23 @@ xmlXPathCacheFreeObjectList(xmlPointerListPtr list)
 static void
 xmlXPathFreeCache(xmlXPathContextCachePtr cache)
 {
-    if (cache == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[270]) {
+      if ((cache == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 270\n");
+      else
+        fprintf(stderr, "reached bug index 270\n");
+    }
+    if ((!FIXREVERTER[270] && (cache == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (cache->nodesetObjs)
 	xmlXPathCacheFreeObjectList(cache->nodesetObjs);
     if (cache->stringObjs)
@@ -2317,7 +2620,22 @@ xmlXPathContextSetCache(xmlXPathContextPtr ctxt,
 static xmlXPathObjectPtr
 xmlXPathCacheWrapNodeSet(xmlXPathContextPtr ctxt, xmlNodeSetPtr val)
 {
-    if ((ctxt != NULL) && (ctxt->cache != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[274]) {
+      fprintf(stderr, "reached bug index 274\n");
+    }
+    if ((FIXREVERTER[274] && (ctxt != (void *) 0 )) || (!FIXREVERTER[274] && (ctxt != (void *) 0 && ctxt -> cache != (void *) 0 ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> cache != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 274\n");
+      #endif
+    
 	xmlXPathContextCachePtr cache =
 	    (xmlXPathContextCachePtr) ctxt->cache;
 
@@ -2336,6 +2654,9 @@ xmlXPathCacheWrapNodeSet(xmlXPathContextPtr ctxt, xmlNodeSetPtr val)
 	    return(ret);
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(xmlXPathWrapNodeSet(val));
 
@@ -2354,7 +2675,22 @@ xmlXPathCacheWrapNodeSet(xmlXPathContextPtr ctxt, xmlNodeSetPtr val)
 static xmlXPathObjectPtr
 xmlXPathCacheWrapString(xmlXPathContextPtr ctxt, xmlChar *val)
 {
-    if ((ctxt != NULL) && (ctxt->cache != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[275]) {
+      fprintf(stderr, "reached bug index 275\n");
+    }
+    if ((FIXREVERTER[275] && (ctxt != (void *) 0 )) || (!FIXREVERTER[275] && (ctxt != (void *) 0 && ctxt -> cache != (void *) 0 ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> cache != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 275\n");
+      #endif
+    
 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;
 
 	if ((cache->stringObjs != NULL) &&
@@ -2389,6 +2725,9 @@ xmlXPathCacheWrapString(xmlXPathContextPtr ctxt, xmlChar *val)
 	    return(ret);
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlXPathWrapString(val));
 }
 
@@ -2448,11 +2787,26 @@ xmlXPathCacheNewNodeSet(xmlXPathContextPtr ctxt, xmlNodePtr val)
 	    ret->type = XPATH_NODESET;
 	    ret->boolval = 0;
 	    ret->nodesetval = xmlXPathNodeSetCreate(val);
-	    if (ret->nodesetval == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[276]) {
+	      if ((ret -> nodesetval == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 276\n");
+	      else
+	        fprintf(stderr, "reached bug index 276\n");
+	    }
+	    if ((!FIXREVERTER[276] && (ret -> nodesetval == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		ctxt->lastError.domain = XML_FROM_XPATH;
 		ctxt->lastError.code = XML_ERR_NO_MEMORY;
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 #ifdef XP_DEBUG_OBJ_USAGE
 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_NODESET);
 #endif
@@ -2677,8 +3031,23 @@ static xmlXPathObjectPtr
 xmlXPathCacheConvertString(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {
     xmlChar *res = NULL;
 
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[277]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 277\n");
+      else
+        fprintf(stderr, "reached bug index 277\n");
+    }
+    if ((!FIXREVERTER[277] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(xmlXPathCacheNewCString(ctxt, ""));
+	#ifdef FRCOV
+	}
+	#endif
 
     switch (val->type) {
     case XPATH_UNDEFINED:
@@ -2706,8 +3075,23 @@ xmlXPathCacheConvertString(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {
 	break;
     }
     xmlXPathReleaseObject(ctxt, val);
-    if (res == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[278]) {
+      if ((res == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 278\n");
+      else
+        fprintf(stderr, "reached bug index 278\n");
+    }
+    if ((!FIXREVERTER[278] && (res == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(xmlXPathCacheNewCString(ctxt, ""));
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlXPathCacheWrapString(ctxt, res));
 }
 
@@ -2724,10 +3108,40 @@ xmlXPathCacheConvertString(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {
 static xmlXPathObjectPtr
 xmlXPathCacheObjectCopy(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val)
 {
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[279]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 279\n");
+      else
+        fprintf(stderr, "reached bug index 279\n");
+    }
+    if ((!FIXREVERTER[279] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-
-    if (XP_HAS_CACHE(ctxt)) {
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[280]) {
+      fprintf(stderr, "reached bug index 280\n");
+    }
+    if ((FIXREVERTER[280] && (ctxt != (void *) 0 )) || (!FIXREVERTER[280] && (ctxt != (void *) 0 && ctxt -> cache != (void *) 0 ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> cache != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 280\n");
+      #endif
+    
 	switch (val->type) {
 	    case XPATH_NODESET:
 		return(xmlXPathCacheWrapNodeSet(ctxt,
@@ -2742,6 +3156,9 @@ xmlXPathCacheObjectCopy(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val)
 		break;
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlXPathObjectCopy(val));
 }
 
@@ -2760,8 +3177,23 @@ static xmlXPathObjectPtr
 xmlXPathCacheConvertBoolean(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {
     xmlXPathObjectPtr ret;
 
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[281]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 281\n");
+      else
+        fprintf(stderr, "reached bug index 281\n");
+    }
+    if ((!FIXREVERTER[281] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(xmlXPathCacheNewBoolean(ctxt, 0));
+	#ifdef FRCOV
+	}
+	#endif
     if (val->type == XPATH_BOOLEAN)
 	return(val);
     ret = xmlXPathCacheNewBoolean(ctxt, xmlXPathCastToBoolean(val));
@@ -2784,8 +3216,23 @@ static xmlXPathObjectPtr
 xmlXPathCacheConvertNumber(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {
     xmlXPathObjectPtr ret;
 
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[282]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 282\n");
+      else
+        fprintf(stderr, "reached bug index 282\n");
+    }
+    if ((!FIXREVERTER[282] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(xmlXPathCacheNewFloat(ctxt, 0.0));
+	#ifdef FRCOV
+	}
+	#endif
     if (val->type == XPATH_NUMBER)
 	return(val);
     ret = xmlXPathCacheNewFloat(ctxt, xmlXPathCastToNumber(val));
@@ -2811,8 +3258,23 @@ static int
 xmlXPathSetFrame(xmlXPathParserContextPtr ctxt) {
     int ret;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[283]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 283\n");
+      else
+        fprintf(stderr, "reached bug index 283\n");
+    }
+    if ((!FIXREVERTER[283] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     ret = ctxt->valueFrame;
     ctxt->valueFrame = ctxt->valueNr;
     return(ret);
@@ -2827,8 +3289,23 @@ xmlXPathSetFrame(xmlXPathParserContextPtr ctxt) {
  */
 static void
 xmlXPathPopFrame(xmlXPathParserContextPtr ctxt, int frame) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[284]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 284\n");
+      else
+        fprintf(stderr, "reached bug index 284\n");
+    }
+    if ((!FIXREVERTER[284] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->valueNr < ctxt->valueFrame) {
         xmlXPatherror(ctxt, __FILE__, __LINE__, XPATH_STACK_ERROR);
     }
@@ -2848,13 +3325,43 @@ valuePop(xmlXPathParserContextPtr ctxt)
 {
     xmlXPathObjectPtr ret;
 
-    if ((ctxt == NULL) || (ctxt->valueNr <= 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[285]) {
+      if ((ctxt == (void *) 0 || ctxt -> valueNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 285\n");
+      else
+        fprintf(stderr, "reached bug index 285\n");
+    }
+    if ((!FIXREVERTER[285] && (ctxt == (void *) 0 || ctxt -> valueNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
-
-    if (ctxt->valueNr <= ctxt->valueFrame) {
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[286]) {
+      if ((ctxt -> valueNr <= ctxt -> valueFrame ) && !(0))
+        fprintf(stderr, "triggered bug index 286\n");
+      else
+        fprintf(stderr, "reached bug index 286\n");
+    }
+    if ((!FIXREVERTER[286] && (ctxt -> valueNr <= ctxt -> valueFrame ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPatherror(ctxt, __FILE__, __LINE__, XPATH_STACK_ERROR);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt->valueNr--;
     if (ctxt->valueNr > 0)
@@ -2877,23 +3384,68 @@ valuePop(xmlXPathParserContextPtr ctxt)
 int
 valuePush(xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr value)
 {
-    if ((ctxt == NULL) || (value == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[287]) {
+      if ((ctxt == (void *) 0 || value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 287\n");
+      else
+        fprintf(stderr, "reached bug index 287\n");
+    }
+    if ((!FIXREVERTER[287] && (ctxt == (void *) 0 || value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->valueNr >= ctxt->valueMax) {
         xmlXPathObjectPtr *tmp;
 
-        if (ctxt->valueMax >= XPATH_MAX_STACK_DEPTH) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[288]) {
+          if ((ctxt -> valueMax >= 1000000 ) && !(0))
+            fprintf(stderr, "triggered bug index 288\n");
+          else
+            fprintf(stderr, "reached bug index 288\n");
+        }
+        if ((!FIXREVERTER[288] && (ctxt -> valueMax >= 1000000 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlXPathErrMemory(NULL, "XPath stack depth limit reached\n");
             ctxt->error = XPATH_MEMORY_ERROR;
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         tmp = (xmlXPathObjectPtr *) xmlRealloc(ctxt->valueTab,
                                              2 * ctxt->valueMax *
                                              sizeof(ctxt->valueTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[289]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 289\n");
+          else
+            fprintf(stderr, "reached bug index 289\n");
+        }
+        if ((!FIXREVERTER[289] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlXPathErrMemory(NULL, "pushing value\n");
             ctxt->error = XPATH_MEMORY_ERROR;
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->valueMax *= 2;
 	ctxt->valueTab = tmp;
     }
@@ -2917,10 +3469,25 @@ xmlXPathPopBoolean (xmlXPathParserContextPtr ctxt) {
     int ret;
 
     obj = valuePop(ctxt);
-    if (obj == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[290]) {
+      if ((obj == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 290\n");
+      else
+        fprintf(stderr, "reached bug index 290\n");
+    }
+    if ((!FIXREVERTER[290] && (obj == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXPathSetError(ctxt, XPATH_INVALID_OPERAND);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (obj->type != XPATH_BOOLEAN)
 	ret = xmlXPathCastToBoolean(obj);
     else
@@ -3304,8 +3871,23 @@ xmlXPathCmpNodes(xmlNodePtr node1, xmlNodePtr node2) {
     xmlNodePtr attrNode1 = NULL, attrNode2 = NULL;
     xmlNodePtr cur, root;
 
-    if ((node1 == NULL) || (node2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[299]) {
+      if ((node1 == (void *) 0 || node2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 299\n");
+      else
+        fprintf(stderr, "reached bug index 299\n");
+    }
+    if ((!FIXREVERTER[299] && (node1 == (void *) 0 || node2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-2);
+	#ifdef FRCOV
+	}
+	#endif
     /*
      * a couple of optimizations which will avoid computations in most cases
      */
@@ -3400,8 +3982,23 @@ xmlXPathCmpNodes(xmlNodePtr node1, xmlNodePtr node2) {
 	node1 = node1->parent;
 	node2 = node2->parent;
 	/* should not happen but just in case ... */
-	if ((node1 == NULL) || (node2 == NULL))
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[305]) {
+	  if ((node1 == (void *) 0 || node2 == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 305\n");
+	  else
+	    fprintf(stderr, "reached bug index 305\n");
+	}
+	if ((!FIXREVERTER[305] && (node1 == (void *) 0 || node2 == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-2);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     /*
      * Find who's first.
@@ -3447,8 +4044,23 @@ xmlXPathNodeSetSort(xmlNodeSetPtr set) {
     xmlNodePtr tmp;
 #endif
 
-    if (set == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[308]) {
+      if ((set == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 308\n");
+      else
+        fprintf(stderr, "reached bug index 308\n");
+    }
+    if ((!FIXREVERTER[308] && (set == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifndef WITH_TIM_SORT
     /*
@@ -3507,16 +4119,61 @@ xmlXPathNodeSetDupNs(xmlNodePtr node, xmlNsPtr ns) {
      * Allocate a new Namespace and fill the fields.
      */
     cur = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[309]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 309\n");
+      else
+        fprintf(stderr, "reached bug index 309\n");
+    }
+    if ((!FIXREVERTER[309] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "duplicating namespace\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNs));
     cur->type = XML_NAMESPACE_DECL;
-    if (ns->href != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[310]) {
+      if ((ns -> href != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 310\n");
+      else
+        fprintf(stderr, "reached bug index 310\n");
+    }
+    if ((!FIXREVERTER[310] && (ns -> href != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->href = xmlStrdup(ns->href);
-    if (ns->prefix != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[311]) {
+      if ((ns -> prefix != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 311\n");
+      else
+        fprintf(stderr, "reached bug index 311\n");
+    }
+    if ((!FIXREVERTER[311] && (ns -> prefix != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->prefix = xmlStrdup(ns->prefix);
+	#ifdef FRCOV
+	}
+	#endif
     cur->next = (xmlNsPtr) node;
     return((xmlNodePtr) cur);
 }
@@ -3556,19 +4213,49 @@ xmlXPathNodeSetCreate(xmlNodePtr val) {
     xmlNodeSetPtr ret;
 
     ret = (xmlNodeSetPtr) xmlMalloc(sizeof(xmlNodeSet));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[312]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 312\n");
+      else
+        fprintf(stderr, "reached bug index 312\n");
+    }
+    if ((!FIXREVERTER[312] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "creating nodeset\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlNodeSet));
     if (val != NULL) {
         ret->nodeTab = (xmlNodePtr *) xmlMalloc(XML_NODESET_DEFAULT *
 					     sizeof(xmlNodePtr));
-	if (ret->nodeTab == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[313]) {
+	  if ((ret -> nodeTab == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 313\n");
+	  else
+	    fprintf(stderr, "reached bug index 313\n");
+	}
+	if ((!FIXREVERTER[313] && (ret -> nodeTab == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPathErrMemory(NULL, "creating nodeset\n");
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(ret->nodeTab, 0 ,
 	       XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
         ret->nodeMax = XML_NODESET_DEFAULT;
@@ -3658,26 +4345,71 @@ xmlXPathNodeSetAddNs(xmlNodeSetPtr cur, xmlNodePtr node, xmlNsPtr ns) {
     if (cur->nodeMax == 0) {
         cur->nodeTab = (xmlNodePtr *) xmlMalloc(XML_NODESET_DEFAULT *
 					     sizeof(xmlNodePtr));
-	if (cur->nodeTab == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[315]) {
+	  if ((cur -> nodeTab == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 315\n");
+	  else
+	    fprintf(stderr, "reached bug index 315\n");
+	}
+	if ((!FIXREVERTER[315] && (cur -> nodeTab == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPathErrMemory(NULL, "growing nodeset\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(cur->nodeTab, 0 ,
 	       XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
         cur->nodeMax = XML_NODESET_DEFAULT;
     } else if (cur->nodeNr == cur->nodeMax) {
         xmlNodePtr *temp;
 
-        if (cur->nodeMax >= XPATH_MAX_NODESET_LENGTH) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[316]) {
+          if ((cur -> nodeMax >= 10000000 ) && !(0))
+            fprintf(stderr, "triggered bug index 316\n");
+          else
+            fprintf(stderr, "reached bug index 316\n");
+        }
+        if ((!FIXREVERTER[316] && (cur -> nodeMax >= 10000000 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlXPathErrMemory(NULL, "growing nodeset hit limit\n");
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax * 2 *
 				      sizeof(xmlNodePtr));
-	if (temp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[317]) {
+	  if ((temp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 317\n");
+	  else
+	    fprintf(stderr, "reached bug index 317\n");
+	}
+	if ((!FIXREVERTER[317] && (temp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPathErrMemory(NULL, "growing nodeset\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         cur->nodeMax *= 2;
 	cur->nodeTab = temp;
     }
@@ -3698,7 +4430,22 @@ int
 xmlXPathNodeSetAdd(xmlNodeSetPtr cur, xmlNodePtr val) {
     int i;
 
-    if ((cur == NULL) || (val == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[318]) {
+      if ((cur == (void *) 0 || val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 318\n");
+      else
+        fprintf(stderr, "reached bug index 318\n");
+    }
+    if ((!FIXREVERTER[318] && (cur == (void *) 0 || val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     /* @@ with_ns to check whether namespace nodes should be looked at @@ */
     /*
@@ -3713,26 +4460,71 @@ xmlXPathNodeSetAdd(xmlNodeSetPtr cur, xmlNodePtr val) {
     if (cur->nodeMax == 0) {
         cur->nodeTab = (xmlNodePtr *) xmlMalloc(XML_NODESET_DEFAULT *
 					     sizeof(xmlNodePtr));
-	if (cur->nodeTab == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[319]) {
+	  if ((cur -> nodeTab == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 319\n");
+	  else
+	    fprintf(stderr, "reached bug index 319\n");
+	}
+	if ((!FIXREVERTER[319] && (cur -> nodeTab == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPathErrMemory(NULL, "growing nodeset\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(cur->nodeTab, 0 ,
 	       XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
         cur->nodeMax = XML_NODESET_DEFAULT;
     } else if (cur->nodeNr == cur->nodeMax) {
         xmlNodePtr *temp;
 
-        if (cur->nodeMax >= XPATH_MAX_NODESET_LENGTH) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[320]) {
+          if ((cur -> nodeMax >= 10000000 ) && !(0))
+            fprintf(stderr, "triggered bug index 320\n");
+          else
+            fprintf(stderr, "reached bug index 320\n");
+        }
+        if ((!FIXREVERTER[320] && (cur -> nodeMax >= 10000000 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlXPathErrMemory(NULL, "growing nodeset hit limit\n");
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax * 2 *
 				      sizeof(xmlNodePtr));
-	if (temp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[321]) {
+	  if ((temp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 321\n");
+	  else
+	    fprintf(stderr, "reached bug index 321\n");
+	}
+	if ((!FIXREVERTER[321] && (temp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPathErrMemory(NULL, "growing nodeset\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         cur->nodeMax *= 2;
 	cur->nodeTab = temp;
     }
@@ -3758,7 +4550,22 @@ xmlXPathNodeSetAdd(xmlNodeSetPtr cur, xmlNodePtr val) {
  */
 int
 xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr val) {
-    if ((cur == NULL) || (val == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[322]) {
+      if ((cur == (void *) 0 || val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 322\n");
+      else
+        fprintf(stderr, "reached bug index 322\n");
+    }
+    if ((!FIXREVERTER[322] && (cur == (void *) 0 || val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     /* @@ with_ns to check whether namespace nodes should be looked at @@ */
     /*
@@ -3767,26 +4574,71 @@ xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr val) {
     if (cur->nodeMax == 0) {
         cur->nodeTab = (xmlNodePtr *) xmlMalloc(XML_NODESET_DEFAULT *
 					     sizeof(xmlNodePtr));
-	if (cur->nodeTab == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[323]) {
+	  if ((cur -> nodeTab == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 323\n");
+	  else
+	    fprintf(stderr, "reached bug index 323\n");
+	}
+	if ((!FIXREVERTER[323] && (cur -> nodeTab == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPathErrMemory(NULL, "growing nodeset\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(cur->nodeTab, 0 ,
 	       XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
         cur->nodeMax = XML_NODESET_DEFAULT;
     } else if (cur->nodeNr == cur->nodeMax) {
         xmlNodePtr *temp;
 
-        if (cur->nodeMax >= XPATH_MAX_NODESET_LENGTH) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[324]) {
+          if ((cur -> nodeMax >= 10000000 ) && !(0))
+            fprintf(stderr, "triggered bug index 324\n");
+          else
+            fprintf(stderr, "reached bug index 324\n");
+        }
+        if ((!FIXREVERTER[324] && (cur -> nodeMax >= 10000000 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlXPathErrMemory(NULL, "growing nodeset hit limit\n");
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax * 2 *
 				      sizeof(xmlNodePtr));
-	if (temp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[325]) {
+	  if ((temp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 325\n");
+	  else
+	    fprintf(stderr, "reached bug index 325\n");
+	}
+	if ((!FIXREVERTER[325] && (temp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPathErrMemory(NULL, "growing nodeset\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	cur->nodeTab = temp;
         cur->nodeMax *= 2;
     }
@@ -3815,11 +4667,41 @@ xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr val2) {
     int i, j, initNr, skip;
     xmlNodePtr n1, n2;
 
-    if (val2 == NULL) return(val1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[326]) {
+      if ((val2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 326\n");
+      else
+        fprintf(stderr, "reached bug index 326\n");
+    }
+    if ((!FIXREVERTER[326] && (val2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(val1);
+    #ifdef FRCOV
+    }
+    #endif
     if (val1 == NULL) {
 	val1 = xmlXPathNodeSetCreate(NULL);
-    if (val1 == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[327]) {
+      if ((val1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 327\n");
+      else
+        fprintf(stderr, "reached bug index 327\n");
+    }
+    if ((!FIXREVERTER[327] && (val1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 #if 0
 	/*
 	* TODO: The optimization won't work in every case, since
@@ -3883,26 +4765,71 @@ xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr val2) {
 	if (val1->nodeMax == 0) {
 	    val1->nodeTab = (xmlNodePtr *) xmlMalloc(XML_NODESET_DEFAULT *
 						    sizeof(xmlNodePtr));
-	    if (val1->nodeTab == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[328]) {
+	      if ((val1 -> nodeTab == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 328\n");
+	      else
+	        fprintf(stderr, "reached bug index 328\n");
+	    }
+	    if ((!FIXREVERTER[328] && (val1 -> nodeTab == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlXPathErrMemory(NULL, "merging nodeset\n");
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memset(val1->nodeTab, 0 ,
 		   XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
 	    val1->nodeMax = XML_NODESET_DEFAULT;
 	} else if (val1->nodeNr == val1->nodeMax) {
 	    xmlNodePtr *temp;
 
-            if (val1->nodeMax >= XPATH_MAX_NODESET_LENGTH) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[329]) {
+              if ((val1 -> nodeMax >= 10000000 ) && !(0))
+                fprintf(stderr, "triggered bug index 329\n");
+              else
+                fprintf(stderr, "reached bug index 329\n");
+            }
+            if ((!FIXREVERTER[329] && (val1 -> nodeMax >= 10000000 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlXPathErrMemory(NULL, "merging nodeset hit limit\n");
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    temp = (xmlNodePtr *) xmlRealloc(val1->nodeTab, val1->nodeMax * 2 *
 					     sizeof(xmlNodePtr));
-	    if (temp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[330]) {
+	      if ((temp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 330\n");
+	      else
+	        fprintf(stderr, "reached bug index 330\n");
+	    }
+	    if ((!FIXREVERTER[330] && (temp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlXPathErrMemory(NULL, "merging nodeset\n");
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    val1->nodeTab = temp;
 	    val1->nodeMax *= 2;
 	}
@@ -3968,26 +4895,71 @@ xmlXPathNodeSetMergeAndClear(xmlNodeSetPtr set1, xmlNodeSetPtr set2)
 	    if (set1->nodeMax == 0) {
 		set1->nodeTab = (xmlNodePtr *) xmlMalloc(
 		    XML_NODESET_DEFAULT * sizeof(xmlNodePtr));
-		if (set1->nodeTab == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[331]) {
+		  if ((set1 -> nodeTab == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 331\n");
+		  else
+		    fprintf(stderr, "reached bug index 331\n");
+		}
+		if ((!FIXREVERTER[331] && (set1 -> nodeTab == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlXPathErrMemory(NULL, "merging nodeset\n");
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		memset(set1->nodeTab, 0,
 		    XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
 		set1->nodeMax = XML_NODESET_DEFAULT;
 	    } else if (set1->nodeNr >= set1->nodeMax) {
 		xmlNodePtr *temp;
 
-                if (set1->nodeMax >= XPATH_MAX_NODESET_LENGTH) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[332]) {
+                  if ((set1 -> nodeMax >= 10000000 ) && !(0))
+                    fprintf(stderr, "triggered bug index 332\n");
+                  else
+                    fprintf(stderr, "reached bug index 332\n");
+                }
+                if ((!FIXREVERTER[332] && (set1 -> nodeMax >= 10000000 ))
+                #else
+                if (0
+                #endif
+                ) {
                     xmlXPathErrMemory(NULL, "merging nodeset hit limit\n");
                     return(NULL);
                 }
+                #ifdef FRCOV
+                }
+                #endif
 		temp = (xmlNodePtr *) xmlRealloc(
 		    set1->nodeTab, set1->nodeMax * 2 * sizeof(xmlNodePtr));
-		if (temp == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[333]) {
+		  if ((temp == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 333\n");
+		  else
+		    fprintf(stderr, "reached bug index 333\n");
+		}
+		if ((!FIXREVERTER[333] && (temp == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlXPathErrMemory(NULL, "merging nodeset\n");
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		set1->nodeTab = temp;
 		set1->nodeMax *= 2;
 	    }
@@ -4022,26 +4994,71 @@ xmlXPathNodeSetMergeAndClearNoDupls(xmlNodeSetPtr set1, xmlNodeSetPtr set2)
 	    if (set1->nodeMax == 0) {
 		set1->nodeTab = (xmlNodePtr *) xmlMalloc(
 		    XML_NODESET_DEFAULT * sizeof(xmlNodePtr));
-		if (set1->nodeTab == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[334]) {
+		  if ((set1 -> nodeTab == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 334\n");
+		  else
+		    fprintf(stderr, "reached bug index 334\n");
+		}
+		if ((!FIXREVERTER[334] && (set1 -> nodeTab == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlXPathErrMemory(NULL, "merging nodeset\n");
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		memset(set1->nodeTab, 0,
 		    XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
 		set1->nodeMax = XML_NODESET_DEFAULT;
 	    } else if (set1->nodeNr >= set1->nodeMax) {
 		xmlNodePtr *temp;
 
-                if (set1->nodeMax >= XPATH_MAX_NODESET_LENGTH) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[335]) {
+                  if ((set1 -> nodeMax >= 10000000 ) && !(0))
+                    fprintf(stderr, "triggered bug index 335\n");
+                  else
+                    fprintf(stderr, "reached bug index 335\n");
+                }
+                if ((!FIXREVERTER[335] && (set1 -> nodeMax >= 10000000 ))
+                #else
+                if (0
+                #endif
+                ) {
                     xmlXPathErrMemory(NULL, "merging nodeset hit limit\n");
                     return(NULL);
                 }
+                #ifdef FRCOV
+                }
+                #endif
 		temp = (xmlNodePtr *) xmlRealloc(
 		    set1->nodeTab, set1->nodeMax * 2 * sizeof(xmlNodePtr));
-		if (temp == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[336]) {
+		  if ((temp == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 336\n");
+		  else
+		    fprintf(stderr, "reached bug index 336\n");
+		}
+		if ((!FIXREVERTER[336] && (temp == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlXPathErrMemory(NULL, "merging nodeset\n");
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		set1->nodeTab = temp;
 		set1->nodeMax *= 2;
 	    }
@@ -4117,7 +5134,22 @@ xmlXPathNodeSetRemove(xmlNodeSetPtr cur, int val) {
  */
 void
 xmlXPathFreeNodeSet(xmlNodeSetPtr obj) {
-    if (obj == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[342]) {
+      if ((obj == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 342\n");
+      else
+        fprintf(stderr, "reached bug index 342\n");
+    }
+    if ((!FIXREVERTER[342] && (obj == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (obj->nodeTab != NULL) {
 	int i;
 
@@ -4187,8 +5219,23 @@ xmlXPathNodeSetKeepLast(xmlNodeSetPtr set)
     int i;
     xmlNodePtr node;
 
-    if ((set == NULL) || (set->nodeNr <= 1))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[343]) {
+      if ((set == (void *) 0 || set -> nodeNr <= 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 343\n");
+      else
+        fprintf(stderr, "reached bug index 343\n");
+    }
+    if ((!FIXREVERTER[343] && (set == (void *) 0 || set -> nodeNr <= 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     for (i = 0; i < set->nodeNr - 1; i++) {
         node = set->nodeTab[i];
         if ((node != NULL) &&
@@ -4210,7 +5257,22 @@ static void
 xmlXPathFreeValueTree(xmlNodeSetPtr obj) {
     int i;
 
-    if (obj == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[344]) {
+      if ((obj == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 344\n");
+      else
+        fprintf(stderr, "reached bug index 344\n");
+    }
+    if ((!FIXREVERTER[344] && (obj == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (obj->nodeTab != NULL) {
 	for (i = 0;i < obj->nodeNr;i++) {
@@ -4282,10 +5344,25 @@ xmlXPathNewNodeSet(xmlNodePtr val) {
     xmlXPathObjectPtr ret;
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[345]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 345\n");
+      else
+        fprintf(stderr, "reached bug index 345\n");
+    }
+    if ((!FIXREVERTER[345] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "creating nodeset\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));
     ret->type = XPATH_NODESET;
     ret->boolval = 0;
@@ -4371,10 +5448,25 @@ xmlXPathWrapNodeSet(xmlNodeSetPtr val) {
     xmlXPathObjectPtr ret;
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[347]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 347\n");
+      else
+        fprintf(stderr, "reached bug index 347\n");
+    }
+    if ((!FIXREVERTER[347] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "creating node set object\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));
     ret->type = XPATH_NODESET;
     ret->nodesetval = val;
@@ -4810,17 +5902,92 @@ xmlXPathRegisterFunc(xmlXPathContextPtr ctxt, const xmlChar *name,
 int
 xmlXPathRegisterFuncNS(xmlXPathContextPtr ctxt, const xmlChar *name,
 		       const xmlChar *ns_uri, xmlXPathFunction f) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[368]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 368\n");
+      else
+        fprintf(stderr, "reached bug index 368\n");
+    }
+    if ((!FIXREVERTER[368] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (name == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[369]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 369\n");
+      else
+        fprintf(stderr, "reached bug index 369\n");
+    }
+    if ((!FIXREVERTER[369] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-
-    if (ctxt->funcHash == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[370]) {
+      if ((ctxt -> funcHash == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 370\n");
+      else
+        fprintf(stderr, "reached bug index 370\n");
+    }
+    if ((!FIXREVERTER[370] && (ctxt -> funcHash == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->funcHash = xmlHashCreate(0);
-    if (ctxt->funcHash == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[371]) {
+      if ((ctxt -> funcHash == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 371\n");
+      else
+        fprintf(stderr, "reached bug index 371\n");
+    }
+    if ((!FIXREVERTER[371] && (ctxt -> funcHash == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (f == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[372]) {
+      if ((f == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 372\n");
+      else
+        fprintf(stderr, "reached bug index 372\n");
+    }
+    if ((!FIXREVERTER[372] && (f == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlHashRemoveEntry2(ctxt->funcHash, name, ns_uri, NULL));
+        #ifdef FRCOV
+        }
+        #endif
 XML_IGNORE_PEDANTIC_WARNINGS
     return(xmlHashAddEntry2(ctxt->funcHash, name, ns_uri, (void *) f));
 XML_POP_WARNINGS
@@ -4856,8 +6023,23 @@ xmlXPathRegisterFuncLookup (xmlXPathContextPtr ctxt,
  */
 xmlXPathFunction
 xmlXPathFunctionLookup(xmlXPathContextPtr ctxt, const xmlChar *name) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[374]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 374\n");
+      else
+        fprintf(stderr, "reached bug index 374\n");
+    }
+    if ((!FIXREVERTER[374] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ctxt->funcLookupFunc != NULL) {
 	xmlXPathFunction ret;
@@ -4887,10 +6069,40 @@ xmlXPathFunctionLookupNS(xmlXPathContextPtr ctxt, const xmlChar *name,
 			 const xmlChar *ns_uri) {
     xmlXPathFunction ret;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[375]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 375\n");
+      else
+        fprintf(stderr, "reached bug index 375\n");
+    }
+    if ((!FIXREVERTER[375] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (name == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[376]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 376\n");
+      else
+        fprintf(stderr, "reached bug index 376\n");
+    }
+    if ((!FIXREVERTER[376] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ctxt->funcLookupFunc != NULL) {
 	xmlXPathFuncLookupFunc f;
@@ -4901,8 +6113,23 @@ xmlXPathFunctionLookupNS(xmlXPathContextPtr ctxt, const xmlChar *name,
 	    return(ret);
     }
 
-    if (ctxt->funcHash == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[377]) {
+      if ((ctxt -> funcHash == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 377\n");
+      else
+        fprintf(stderr, "reached bug index 377\n");
+    }
+    if ((!FIXREVERTER[377] && (ctxt -> funcHash == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
 XML_IGNORE_PEDANTIC_WARNINGS
     ret = (xmlXPathFunction) xmlHashLookup2(ctxt->funcHash, name, ns_uri);
@@ -4918,8 +6145,23 @@ XML_POP_WARNINGS
  */
 void
 xmlXPathRegisteredFuncsCleanup(xmlXPathContextPtr ctxt) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[378]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 378\n");
+      else
+        fprintf(stderr, "reached bug index 378\n");
+    }
+    if ((!FIXREVERTER[378] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     xmlHashFree(ctxt->funcHash, NULL);
     ctxt->funcHash = NULL;
@@ -5009,8 +6251,23 @@ xmlXPathRegisterVariableLookup(xmlXPathContextPtr ctxt,
  */
 xmlXPathObjectPtr
 xmlXPathVariableLookup(xmlXPathContextPtr ctxt, const xmlChar *name) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[385]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 385\n");
+      else
+        fprintf(stderr, "reached bug index 385\n");
+    }
+    if ((!FIXREVERTER[385] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ctxt->varLookupFunc != NULL) {
 	xmlXPathObjectPtr ret;
@@ -5036,8 +6293,23 @@ xmlXPathVariableLookup(xmlXPathContextPtr ctxt, const xmlChar *name) {
 xmlXPathObjectPtr
 xmlXPathVariableLookupNS(xmlXPathContextPtr ctxt, const xmlChar *name,
 			 const xmlChar *ns_uri) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[386]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 386\n");
+      else
+        fprintf(stderr, "reached bug index 386\n");
+    }
+    if ((!FIXREVERTER[386] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ctxt->varLookupFunc != NULL) {
 	xmlXPathObjectPtr ret;
@@ -5047,10 +6319,40 @@ xmlXPathVariableLookupNS(xmlXPathContextPtr ctxt, const xmlChar *name,
 	if (ret != NULL) return(ret);
     }
 
-    if (ctxt->varHash == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[387]) {
+      if ((ctxt -> varHash == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 387\n");
+      else
+        fprintf(stderr, "reached bug index 387\n");
+    }
+    if ((!FIXREVERTER[387] && (ctxt -> varHash == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (name == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[388]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 388\n");
+      else
+        fprintf(stderr, "reached bug index 388\n");
+    }
+    if ((!FIXREVERTER[388] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     return(xmlXPathCacheObjectCopy(ctxt, (xmlXPathObjectPtr)
 		xmlHashLookup2(ctxt->varHash, name, ns_uri)));
@@ -5064,8 +6366,23 @@ xmlXPathVariableLookupNS(xmlXPathContextPtr ctxt, const xmlChar *name,
  */
 void
 xmlXPathRegisteredVariablesCleanup(xmlXPathContextPtr ctxt) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[389]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 389\n");
+      else
+        fprintf(stderr, "reached bug index 389\n");
+    }
+    if ((!FIXREVERTER[389] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     xmlHashFree(ctxt->varHash, xmlXPathFreeObjectEntry);
     ctxt->varHash = NULL;
@@ -5085,20 +6402,95 @@ xmlXPathRegisteredVariablesCleanup(xmlXPathContextPtr ctxt) {
 int
 xmlXPathRegisterNs(xmlXPathContextPtr ctxt, const xmlChar *prefix,
 			   const xmlChar *ns_uri) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[390]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 390\n");
+      else
+        fprintf(stderr, "reached bug index 390\n");
+    }
+    if ((!FIXREVERTER[390] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (prefix == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[391]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 391\n");
+      else
+        fprintf(stderr, "reached bug index 391\n");
+    }
+    if ((!FIXREVERTER[391] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (prefix[0] == 0)
 	return(-1);
 
-    if (ctxt->nsHash == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[392]) {
+      if ((ctxt -> nsHash == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 392\n");
+      else
+        fprintf(stderr, "reached bug index 392\n");
+    }
+    if ((!FIXREVERTER[392] && (ctxt -> nsHash == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->nsHash = xmlHashCreate(10);
-    if (ctxt->nsHash == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[393]) {
+      if ((ctxt -> nsHash == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 393\n");
+      else
+        fprintf(stderr, "reached bug index 393\n");
+    }
+    if ((!FIXREVERTER[393] && (ctxt -> nsHash == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (ns_uri == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[394]) {
+      if ((ns_uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 394\n");
+      else
+        fprintf(stderr, "reached bug index 394\n");
+    }
+    if ((!FIXREVERTER[394] && (ns_uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlHashRemoveEntry(ctxt->nsHash, prefix,
 	                          xmlHashDefaultDeallocator));
+	                          #ifdef FRCOV
+	                          }
+	                          #endif
     return(xmlHashUpdateEntry(ctxt->nsHash, prefix, (void *) xmlStrdup(ns_uri),
 			      xmlHashDefaultDeallocator));
 }
@@ -5115,10 +6507,40 @@ xmlXPathRegisterNs(xmlXPathContextPtr ctxt, const xmlChar *prefix,
  */
 const xmlChar *
 xmlXPathNsLookup(xmlXPathContextPtr ctxt, const xmlChar *prefix) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[395]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 395\n");
+      else
+        fprintf(stderr, "reached bug index 395\n");
+    }
+    if ((!FIXREVERTER[395] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (prefix == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[396]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 396\n");
+      else
+        fprintf(stderr, "reached bug index 396\n");
+    }
+    if ((!FIXREVERTER[396] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifdef XML_XML_NAMESPACE
     if (xmlStrEqual(prefix, (const xmlChar *) "xml"))
@@ -5146,8 +6568,23 @@ xmlXPathNsLookup(xmlXPathContextPtr ctxt, const xmlChar *prefix) {
  */
 void
 xmlXPathRegisteredNsCleanup(xmlXPathContextPtr ctxt) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[397]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 397\n");
+      else
+        fprintf(stderr, "reached bug index 397\n");
+    }
+    if ((!FIXREVERTER[397] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     xmlHashFree(ctxt->nsHash, xmlHashDefaultDeallocator);
     ctxt->nsHash = NULL;
@@ -5174,10 +6611,25 @@ xmlXPathNewFloat(double val) {
     xmlXPathObjectPtr ret;
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[398]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 398\n");
+      else
+        fprintf(stderr, "reached bug index 398\n");
+    }
+    if ((!FIXREVERTER[398] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "creating float object\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));
     ret->type = XPATH_NUMBER;
     ret->floatval = val;
@@ -5200,10 +6652,25 @@ xmlXPathNewBoolean(int val) {
     xmlXPathObjectPtr ret;
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[399]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 399\n");
+      else
+        fprintf(stderr, "reached bug index 399\n");
+    }
+    if ((!FIXREVERTER[399] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "creating boolean object\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));
     ret->type = XPATH_BOOLEAN;
     ret->boolval = (val != 0);
@@ -5226,10 +6693,25 @@ xmlXPathNewString(const xmlChar *val) {
     xmlXPathObjectPtr ret;
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[400]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 400\n");
+      else
+        fprintf(stderr, "reached bug index 400\n");
+    }
+    if ((!FIXREVERTER[400] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "creating string object\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));
     ret->type = XPATH_STRING;
     if (val != NULL)
@@ -5255,10 +6737,25 @@ xmlXPathWrapString (xmlChar *val) {
     xmlXPathObjectPtr ret;
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[401]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 401\n");
+      else
+        fprintf(stderr, "reached bug index 401\n");
+    }
+    if ((!FIXREVERTER[401] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "creating string object\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));
     ret->type = XPATH_STRING;
     ret->stringval = val;
@@ -5281,10 +6778,25 @@ xmlXPathNewCString(const char *val) {
     xmlXPathObjectPtr ret;
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[402]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 402\n");
+      else
+        fprintf(stderr, "reached bug index 402\n");
+    }
+    if ((!FIXREVERTER[402] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "creating string object\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));
     ret->type = XPATH_STRING;
     ret->stringval = xmlStrdup(BAD_CAST val);
@@ -5345,14 +6857,44 @@ xmlXPathObjectPtr
 xmlXPathObjectCopy(xmlXPathObjectPtr val) {
     xmlXPathObjectPtr ret;
 
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[404]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 404\n");
+      else
+        fprintf(stderr, "reached bug index 404\n");
+    }
+    if ((!FIXREVERTER[404] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[405]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 405\n");
+      else
+        fprintf(stderr, "reached bug index 405\n");
+    }
+    if ((!FIXREVERTER[405] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "copying object\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memcpy(ret, val , (size_t) sizeof(xmlXPathObject));
 #ifdef XP_DEBUG_OBJ_USAGE
     xmlXPathDebugObjUsageRequested(NULL, val->type);
@@ -5432,7 +6974,22 @@ xmlXPathObjectCopy(xmlXPathObjectPtr val) {
  */
 void
 xmlXPathFreeObject(xmlXPathObjectPtr obj) {
-    if (obj == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[406]) {
+      if ((obj == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 406\n");
+      else
+        fprintf(stderr, "reached bug index 406\n");
+    }
+    if ((!FIXREVERTER[406] && (obj == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if ((obj->type == XPATH_NODESET) || (obj->type == XPATH_XSLT_TREE)) {
 	if (obj->boolval) {
 #if 0
@@ -5484,8 +7041,23 @@ xmlXPathReleaseObject(xmlXPathContextPtr ctxt, xmlXPathObjectPtr obj)
 
 #define XP_CACHE_WANTS(sl, n) ((sl == NULL) || ((sl)->number < n))
 
-    if (obj == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[407]) {
+      if ((obj == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 407\n");
+      else
+        fprintf(stderr, "reached bug index 407\n");
+    }
+    if ((!FIXREVERTER[407] && (obj == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((ctxt == NULL) || (ctxt->cache == NULL)) {
 	 xmlXPathFreeObject(obj);
     } else {
@@ -5697,8 +7269,23 @@ xmlChar *ret;
  */
 xmlChar *
 xmlXPathCastNodeSetToString (xmlNodeSetPtr ns) {
-    if ((ns == NULL) || (ns->nodeNr == 0) || (ns->nodeTab == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[408]) {
+      if ((ns == (void *) 0 || ns -> nodeNr == 0 || ns -> nodeTab == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 408\n");
+      else
+        fprintf(stderr, "reached bug index 408\n");
+    }
+    if ((!FIXREVERTER[408] && (ns == (void *) 0 || ns -> nodeNr == 0 || ns -> nodeTab == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(xmlStrdup((const xmlChar *) ""));
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ns->nodeNr > 1)
 	xmlXPathNodeSetSort(ns);
@@ -5839,11 +7426,41 @@ xmlXPathCastNodeToNumber (xmlNodePtr node) {
     xmlChar *strval;
     double ret;
 
-    if (node == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[412]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 412\n");
+      else
+        fprintf(stderr, "reached bug index 412\n");
+    }
+    if ((!FIXREVERTER[412] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NAN);
+	#ifdef FRCOV
+	}
+	#endif
     strval = xmlXPathCastNodeToString(node);
-    if (strval == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[413]) {
+      if ((strval == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 413\n");
+      else
+        fprintf(stderr, "reached bug index 413\n");
+    }
+    if ((!FIXREVERTER[413] && (strval == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NAN);
+	#ifdef FRCOV
+	}
+	#endif
     ret = xmlXPathCastStringToNumber(strval);
     xmlFree(strval);
 
@@ -5863,8 +7480,23 @@ xmlXPathCastNodeSetToNumber (xmlNodeSetPtr ns) {
     xmlChar *str;
     double ret;
 
-    if (ns == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[414]) {
+      if ((ns == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 414\n");
+      else
+        fprintf(stderr, "reached bug index 414\n");
+    }
+    if ((!FIXREVERTER[414] && (ns == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NAN);
+	#ifdef FRCOV
+	}
+	#endif
     str = xmlXPathCastNodeSetToString(ns);
     ret = xmlXPathCastStringToNumber(str);
     xmlFree(str);
@@ -5883,8 +7515,23 @@ double
 xmlXPathCastToNumber(xmlXPathObjectPtr val) {
     double ret = 0.0;
 
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[415]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 415\n");
+      else
+        fprintf(stderr, "reached bug index 415\n");
+    }
+    if ((!FIXREVERTER[415] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NAN);
+	#ifdef FRCOV
+	}
+	#endif
     switch (val->type) {
     case XPATH_UNDEFINED:
 #ifdef DEGUB_EXPR
@@ -5963,8 +7610,23 @@ xmlXPathCastNumberToBoolean (double val) {
  */
 int
 xmlXPathCastStringToBoolean (const xmlChar *val) {
-    if ((val == NULL) || (xmlStrlen(val) == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[417]) {
+      if ((val == (void *) 0 ) && !(xmlStrlen ( val ) == 0 ))
+        fprintf(stderr, "triggered bug index 417\n");
+      else
+        fprintf(stderr, "reached bug index 417\n");
+    }
+    if ((FIXREVERTER[417] && (xmlStrlen ( val ) == 0 )) || (!FIXREVERTER[417] && (val == (void *) 0 || xmlStrlen ( val ) == 0 ))
+    #else
+    if (xmlStrlen ( val ) == 0 
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     return(1);
 }
 
@@ -5978,8 +7640,23 @@ xmlXPathCastStringToBoolean (const xmlChar *val) {
  */
 int
 xmlXPathCastNodeSetToBoolean (xmlNodeSetPtr ns) {
-    if ((ns == NULL) || (ns->nodeNr == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[418]) {
+      if ((ns == (void *) 0 || ns -> nodeNr == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 418\n");
+      else
+        fprintf(stderr, "reached bug index 418\n");
+    }
+    if ((!FIXREVERTER[418] && (ns == (void *) 0 || ns -> nodeNr == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     return(1);
 }
 
@@ -5995,8 +7672,23 @@ int
 xmlXPathCastToBoolean (xmlXPathObjectPtr val) {
     int ret = 0;
 
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[419]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 419\n");
+      else
+        fprintf(stderr, "reached bug index 419\n");
+    }
+    if ((!FIXREVERTER[419] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     switch (val->type) {
     case XPATH_UNDEFINED:
 #ifdef DEBUG_EXPR
@@ -6070,10 +7762,25 @@ xmlXPathNewContext(xmlDocPtr doc) {
     xmlXPathContextPtr ret;
 
     ret = (xmlXPathContextPtr) xmlMalloc(sizeof(xmlXPathContext));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[421]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 421\n");
+      else
+        fprintf(stderr, "reached bug index 421\n");
+    }
+    if ((!FIXREVERTER[421] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "creating context\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathContext));
     ret->doc = doc;
     ret->node = NULL;
@@ -6119,7 +7826,22 @@ xmlXPathNewContext(xmlDocPtr doc) {
  */
 void
 xmlXPathFreeContext(xmlXPathContextPtr ctxt) {
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[422]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 422\n");
+      else
+        fprintf(stderr, "reached bug index 422\n");
+    }
+    if ((!FIXREVERTER[422] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (ctxt->cache != NULL)
 	xmlXPathFreeCache((xmlXPathContextCachePtr) ctxt->cache);
@@ -6181,24 +7903,72 @@ xmlXPathNewParserContext(const xmlChar *str, xmlXPathContextPtr ctxt) {
     xmlXPathParserContextPtr ret;
 
     ret = (xmlXPathParserContextPtr) xmlMalloc(sizeof(xmlXPathParserContext));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[423]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 423\n");
+      else
+        fprintf(stderr, "reached bug index 423\n");
+    }
+    if ((!FIXREVERTER[423] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(ctxt, "creating parser context\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathParserContext));
     ret->cur = ret->base = str;
     ret->context = ctxt;
 
     ret->comp = xmlXPathNewCompExpr();
-    if (ret->comp == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[424]) {
+      if ((ret -> comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 424\n");
+      else
+        fprintf(stderr, "reached bug index 424\n");
+    }
+    if ((!FIXREVERTER[424] && (ret -> comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(ret->valueTab);
 	xmlFree(ret);
 	return(NULL);
     }
-    if ((ctxt != NULL) && (ctxt->dict != NULL)) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[425]) {
+      fprintf(stderr, "reached bug index 425\n");
+    }
+    if ((FIXREVERTER[425] && (ctxt != (void *) 0 )) || (!FIXREVERTER[425] && (ctxt != (void *) 0 && ctxt -> dict != (void *) 0 ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> dict != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 425\n");
+      #endif
+    
         ret->comp->dict = ctxt->dict;
 	xmlDictReference(ret->comp->dict);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(ret);
 }
@@ -6295,8 +8065,23 @@ xmlXPathNodeValHash(xmlNodePtr node) {
     xmlNodePtr tmp = NULL;
     unsigned int ret = 0;
 
-    if (node == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[428]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 428\n");
+      else
+        fprintf(stderr, "reached bug index 428\n");
+    }
+    if ((!FIXREVERTER[428] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (node->type == XML_DOCUMENT_NODE) {
 	tmp = xmlDocGetRootElement((xmlDocPtr) node);
@@ -6305,8 +8090,23 @@ xmlXPathNodeValHash(xmlNodePtr node) {
 	else
 	    node = tmp;
 
-	if (node == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[429]) {
+	  if ((node == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 429\n");
+	  else
+	    fprintf(stderr, "reached bug index 429\n");
+	}
+	if ((!FIXREVERTER[429] && (node == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(0);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
     switch (node->type) {
@@ -6315,16 +8115,46 @@ xmlXPathNodeValHash(xmlNodePtr node) {
 	case XML_CDATA_SECTION_NODE:
 	case XML_TEXT_NODE:
 	    string = node->content;
-	    if (string == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[430]) {
+	      if ((string == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 430\n");
+	      else
+	        fprintf(stderr, "reached bug index 430\n");
+	    }
+	    if ((!FIXREVERTER[430] && (string == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
+		#ifdef FRCOV
+		}
+		#endif
 	    if (string[0] == 0)
 		return(0);
 	    return(((unsigned int) string[0]) +
 		   (((unsigned int) string[1]) << 8));
 	case XML_NAMESPACE_DECL:
 	    string = ((xmlNsPtr)node)->href;
-	    if (string == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[431]) {
+	      if ((string == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 431\n");
+	      else
+	        fprintf(stderr, "reached bug index 431\n");
+	    }
+	    if ((!FIXREVERTER[431] && (string == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
+		#ifdef FRCOV
+		}
+		#endif
 	    if (string[0] == 0)
 		return(0);
 	    return(((unsigned int) string[0]) +
@@ -6379,8 +8209,23 @@ xmlXPathNodeValHash(xmlNodePtr node) {
 
 	do {
 	    tmp = tmp->parent;
-	    if (tmp == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[433]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 433\n");
+	      else
+	        fprintf(stderr, "reached bug index 433\n");
+	    }
+	    if ((!FIXREVERTER[433] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    if (tmp == node) {
 		tmp = NULL;
 		break;
@@ -6405,8 +8250,23 @@ xmlXPathNodeValHash(xmlNodePtr node) {
  */
 static unsigned int
 xmlXPathStringHash(const xmlChar * string) {
-    if (string == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[434]) {
+      if ((string == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 434\n");
+      else
+        fprintf(stderr, "reached bug index 434\n");
+    }
+    if ((!FIXREVERTER[434] && (string == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return((unsigned int) 0);
+	#ifdef FRCOV
+	}
+	#endif
     if (string[0] == 0)
 	return(0);
     return(((unsigned int) string[0]) +
@@ -6576,16 +8436,46 @@ xmlXPathCompareNodeSets(int inf, int strict,
     ns1 = arg1->nodesetval;
     ns2 = arg2->nodesetval;
 
-    if ((ns1 == NULL) || (ns1->nodeNr <= 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[435]) {
+      if ((ns1 == (void *) 0 || ns1 -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 435\n");
+      else
+        fprintf(stderr, "reached bug index 435\n");
+    }
+    if ((!FIXREVERTER[435] && (ns1 == (void *) 0 || ns1 -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXPathFreeObject(arg1);
 	xmlXPathFreeObject(arg2);
 	return(0);
     }
-    if ((ns2 == NULL) || (ns2->nodeNr <= 0)) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[436]) {
+      if ((ns2 == (void *) 0 || ns2 -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 436\n");
+      else
+        fprintf(stderr, "reached bug index 436\n");
+    }
+    if ((!FIXREVERTER[436] && (ns2 == (void *) 0 || ns2 -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXPathFreeObject(arg1);
 	xmlXPathFreeObject(arg2);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     values2 = (double *) xmlMalloc(ns2->nodeNr * sizeof(double));
     if (values2 == NULL) {
@@ -6708,8 +8598,23 @@ xmlXPathEqualNodeSetString(xmlXPathObjectPtr arg, const xmlChar * str, int neq)
      * A NULL nodeset compared with a string is always false
      * (since there is no node equal, and no node not equal)
      */
-    if ((ns == NULL) || (ns->nodeNr <= 0) )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[437]) {
+      if ((ns == (void *) 0 || ns -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 437\n");
+      else
+        fprintf(stderr, "reached bug index 437\n");
+    }
+    if ((!FIXREVERTER[437] && (ns == (void *) 0 || ns -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+     )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     hash = xmlXPathStringHash(str);
     for (i = 0; i < ns->nodeNr; i++) {
         if (xmlXPathNodeValHash(ns->nodeTab[i]) == hash) {
@@ -6833,10 +8738,40 @@ xmlXPathEqualNodeSets(xmlXPathObjectPtr arg1, xmlXPathObjectPtr arg2, int neq) {
     ns1 = arg1->nodesetval;
     ns2 = arg2->nodesetval;
 
-    if ((ns1 == NULL) || (ns1->nodeNr <= 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[438]) {
+      if ((ns1 == (void *) 0 || ns1 -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 438\n");
+      else
+        fprintf(stderr, "reached bug index 438\n");
+    }
+    if ((!FIXREVERTER[438] && (ns1 == (void *) 0 || ns1 -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
-    if ((ns2 == NULL) || (ns2->nodeNr <= 0))
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[439]) {
+      if ((ns2 == (void *) 0 || ns2 -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 439\n");
+      else
+        fprintf(stderr, "reached bug index 439\n");
+    }
+    if ((!FIXREVERTER[439] && (ns2 == (void *) 0 || ns2 -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * for equal, check if there is a node pertaining to both sets
@@ -6848,16 +8783,46 @@ xmlXPathEqualNodeSets(xmlXPathObjectPtr arg1, xmlXPathObjectPtr arg2, int neq) {
 		    return(1);
 
     values1 = (xmlChar **) xmlMalloc(ns1->nodeNr * sizeof(xmlChar *));
-    if (values1 == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[440]) {
+      if ((values1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 440\n");
+      else
+        fprintf(stderr, "reached bug index 440\n");
+    }
+    if ((!FIXREVERTER[440] && (values1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "comparing nodesets\n");
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     hashs1 = (unsigned int *) xmlMalloc(ns1->nodeNr * sizeof(unsigned int));
-    if (hashs1 == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[441]) {
+      if ((hashs1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 441\n");
+      else
+        fprintf(stderr, "reached bug index 441\n");
+    }
+    if ((!FIXREVERTER[441] && (hashs1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathErrMemory(NULL, "comparing nodesets\n");
 	xmlFree(values1);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(values1, 0, ns1->nodeNr * sizeof(xmlChar *));
     values2 = (xmlChar **) xmlMalloc(ns2->nodeNr * sizeof(xmlChar *));
     if (values2 == NULL) {
@@ -7111,7 +9076,22 @@ xmlXPathEqualValues(xmlXPathParserContextPtr ctxt) {
     xmlXPathObjectPtr arg1, arg2, argtmp;
     int ret = 0;
 
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[442]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 442\n");
+      else
+        fprintf(stderr, "reached bug index 442\n");
+    }
+    if ((!FIXREVERTER[442] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     arg2 = valuePop(ctxt);
     arg1 = valuePop(ctxt);
     if ((arg1 == NULL) || (arg2 == NULL)) {
@@ -7196,7 +9176,22 @@ xmlXPathNotEqualValues(xmlXPathParserContextPtr ctxt) {
     xmlXPathObjectPtr arg1, arg2, argtmp;
     int ret = 0;
 
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[443]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 443\n");
+      else
+        fprintf(stderr, "reached bug index 443\n");
+    }
+    if ((!FIXREVERTER[443] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     arg2 = valuePop(ctxt);
     arg1 = valuePop(ctxt);
     if ((arg1 == NULL) || (arg2 == NULL)) {
@@ -7297,7 +9292,22 @@ xmlXPathCompareValues(xmlXPathParserContextPtr ctxt, int inf, int strict) {
     int ret = 0, arg1i = 0, arg2i = 0;
     xmlXPathObjectPtr arg1, arg2;
 
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[444]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 444\n");
+      else
+        fprintf(stderr, "reached bug index 444\n");
+    }
+    if ((!FIXREVERTER[444] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     arg2 = valuePop(ctxt);
     arg1 = valuePop(ctxt);
     if ((arg1 == NULL) || (arg2 == NULL)) {
@@ -7414,7 +9424,22 @@ xmlXPathCompareValues(xmlXPathParserContextPtr ctxt, int inf, int strict) {
  */
 void
 xmlXPathValueFlipSign(xmlXPathParserContextPtr ctxt) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[449]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 449\n");
+      else
+        fprintf(stderr, "reached bug index 449\n");
+    }
+    if ((!FIXREVERTER[449] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     CAST_TO_NUMBER;
     CHECK_TYPE(XPATH_NUMBER);
     ctxt->value->floatval = -ctxt->value->floatval;
@@ -7434,8 +9459,23 @@ xmlXPathAddValues(xmlXPathParserContextPtr ctxt) {
     double val;
 
     arg = valuePop(ctxt);
-    if (arg == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[450]) {
+      if ((arg == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 450\n");
+      else
+        fprintf(stderr, "reached bug index 450\n");
+    }
+    if ((!FIXREVERTER[450] && (arg == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	XP_ERROR(XPATH_INVALID_OPERAND);
+	#ifdef FRCOV
+	}
+	#endif
     val = xmlXPathCastToNumber(arg);
     xmlXPathReleaseObject(ctxt->context, arg);
     CAST_TO_NUMBER;
@@ -7457,8 +9497,23 @@ xmlXPathSubValues(xmlXPathParserContextPtr ctxt) {
     double val;
 
     arg = valuePop(ctxt);
-    if (arg == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[451]) {
+      if ((arg == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 451\n");
+      else
+        fprintf(stderr, "reached bug index 451\n");
+    }
+    if ((!FIXREVERTER[451] && (arg == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	XP_ERROR(XPATH_INVALID_OPERAND);
+	#ifdef FRCOV
+	}
+	#endif
     val = xmlXPathCastToNumber(arg);
     xmlXPathReleaseObject(ctxt->context, arg);
     CAST_TO_NUMBER;
@@ -7480,8 +9535,23 @@ xmlXPathMultValues(xmlXPathParserContextPtr ctxt) {
     double val;
 
     arg = valuePop(ctxt);
-    if (arg == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[452]) {
+      if ((arg == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 452\n");
+      else
+        fprintf(stderr, "reached bug index 452\n");
+    }
+    if ((!FIXREVERTER[452] && (arg == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	XP_ERROR(XPATH_INVALID_OPERAND);
+	#ifdef FRCOV
+	}
+	#endif
     val = xmlXPathCastToNumber(arg);
     xmlXPathReleaseObject(ctxt->context, arg);
     CAST_TO_NUMBER;
@@ -7527,8 +9597,23 @@ xmlXPathModValues(xmlXPathParserContextPtr ctxt) {
     double arg1, arg2;
 
     arg = valuePop(ctxt);
-    if (arg == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[453]) {
+      if ((arg == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 453\n");
+      else
+        fprintf(stderr, "reached bug index 453\n");
+    }
+    if ((!FIXREVERTER[453] && (arg == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	XP_ERROR(XPATH_INVALID_OPERAND);
+	#ifdef FRCOV
+	}
+	#endif
     arg2 = xmlXPathCastToNumber(arg);
     xmlXPathReleaseObject(ctxt->context, arg);
     CAST_TO_NUMBER;
@@ -7585,9 +9670,39 @@ typedef xmlNodeSetPtr (*xmlXPathNodeSetMergeFunction)
  */
 xmlNodePtr
 xmlXPathNextSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[454]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 454\n");
+      else
+        fprintf(stderr, "reached bug index 454\n");
+    }
+    if ((!FIXREVERTER[454] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[455]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 455\n");
+      else
+        fprintf(stderr, "reached bug index 455\n");
+    }
+    if ((!FIXREVERTER[455] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(ctxt->context->node);
+        #ifdef FRCOV
+        }
+        #endif
     return(NULL);
 }
 
@@ -7603,8 +9718,35 @@ xmlXPathNextSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
  */
 xmlNodePtr
 xmlXPathNextChild(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[456]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 456\n");
+      else
+        fprintf(stderr, "reached bug index 456\n");
+    }
+    if ((!FIXREVERTER[456] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[457]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 457\n");
+      else
+        fprintf(stderr, "reached bug index 457\n");
+    }
+    if ((!FIXREVERTER[457] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (ctxt->context->node == NULL) return(NULL);
 	switch (ctxt->context->node->type) {
             case XML_ELEMENT_NODE:
@@ -7636,6 +9778,9 @@ xmlXPathNextChild(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
 	}
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((cur->type == XML_DOCUMENT_NODE) ||
         (cur->type == XML_HTML_DOCUMENT_NODE))
 	return(NULL);
@@ -7654,10 +9799,40 @@ xmlXPathNextChild(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
  */
 static xmlNodePtr
 xmlXPathNextChildElement(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[458]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 458\n");
+      else
+        fprintf(stderr, "reached bug index 458\n");
+    }
+    if ((!FIXREVERTER[458] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (cur == NULL) {
 	cur = ctxt->context->node;
-	if (cur == NULL) return(NULL);
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[459]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 459\n");
+	  else
+	    fprintf(stderr, "reached bug index 459\n");
+	}
+	if ((!FIXREVERTER[459] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Get the first element child.
 	*/
@@ -7808,7 +9983,22 @@ next_sibling:
  */
 xmlNodePtr
 xmlXPathNextDescendant(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[460]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 460\n");
+      else
+        fprintf(stderr, "reached bug index 460\n");
+    }
+    if ((!FIXREVERTER[460] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (cur == NULL) {
 	if (ctxt->context->node == NULL)
 	    return(NULL);
@@ -7848,7 +10038,22 @@ xmlXPathNextDescendant(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
 
     do {
         cur = cur->parent;
-	if (cur == NULL) break;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[461]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 461\n");
+	  else
+	    fprintf(stderr, "reached bug index 461\n");
+	}
+	if ((!FIXREVERTER[461] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) break;
+	#ifdef FRCOV
+	}
+	#endif
 	if (cur == ctxt->context->node) return(NULL);
 	if (cur->next != NULL) {
 	    cur = cur->next;
@@ -7873,9 +10078,39 @@ xmlXPathNextDescendant(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
  */
 xmlNodePtr
 xmlXPathNextDescendantOrSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[462]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 462\n");
+      else
+        fprintf(stderr, "reached bug index 462\n");
+    }
+    if ((!FIXREVERTER[462] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[463]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 463\n");
+      else
+        fprintf(stderr, "reached bug index 463\n");
+    }
+    if ((!FIXREVERTER[463] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(ctxt->context->node);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (ctxt->context->node == NULL)
         return(NULL);
@@ -7898,7 +10133,22 @@ xmlXPathNextDescendantOrSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
  */
 xmlNodePtr
 xmlXPathNextParent(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[464]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 464\n");
+      else
+        fprintf(stderr, "reached bug index 464\n");
+    }
+    if ((!FIXREVERTER[464] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     /*
      * the parent of an attribute or namespace node is the element
      * to which the attribute or namespace node is attached
@@ -7971,13 +10221,40 @@ xmlXPathNextParent(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
  */
 xmlNodePtr
 xmlXPathNextAncestor(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[465]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 465\n");
+      else
+        fprintf(stderr, "reached bug index 465\n");
+    }
+    if ((!FIXREVERTER[465] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     /*
      * the parent of an attribute or namespace node is the element
      * to which the attribute or namespace node is attached
      * !!!!!!!!!!!!!
      */
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[466]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 466\n");
+      else
+        fprintf(stderr, "reached bug index 466\n");
+    }
+    if ((!FIXREVERTER[466] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (ctxt->context->node == NULL) return(NULL);
 	switch (ctxt->context->node->type) {
             case XML_ELEMENT_NODE:
@@ -8027,6 +10304,9 @@ xmlXPathNextAncestor(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
 	}
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (cur == ctxt->context->doc->children)
 	return((xmlNodePtr) ctxt->context->doc);
     if (cur == (xmlNodePtr) ctxt->context->doc)
@@ -8046,8 +10326,23 @@ xmlXPathNextAncestor(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
         case XML_ENTITY_DECL:
 	case XML_XINCLUDE_START:
 	case XML_XINCLUDE_END:
-	    if (cur->parent == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[467]) {
+	      if ((cur -> parent == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 467\n");
+	      else
+	        fprintf(stderr, "reached bug index 467\n");
+	    }
+	    if ((!FIXREVERTER[467] && (cur -> parent == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    if ((cur->parent->type == XML_ELEMENT_NODE) &&
 		((cur->parent->name[0] == ' ') ||
 		 (xmlStrEqual(cur->parent->name,
@@ -8095,9 +10390,39 @@ xmlXPathNextAncestor(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
  */
 xmlNodePtr
 xmlXPathNextAncestorOrSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[468]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 468\n");
+      else
+        fprintf(stderr, "reached bug index 468\n");
+    }
+    if ((!FIXREVERTER[468] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[469]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 469\n");
+      else
+        fprintf(stderr, "reached bug index 469\n");
+    }
+    if ((!FIXREVERTER[469] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(ctxt->context->node);
+        #ifdef FRCOV
+        }
+        #endif
     return(xmlXPathNextAncestor(ctxt, cur));
 }
 
@@ -8114,14 +10439,44 @@ xmlXPathNextAncestorOrSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
  */
 xmlNodePtr
 xmlXPathNextFollowingSibling(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[470]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 470\n");
+      else
+        fprintf(stderr, "reached bug index 470\n");
+    }
+    if ((!FIXREVERTER[470] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt->context->node->type == XML_ATTRIBUTE_NODE) ||
 	(ctxt->context->node->type == XML_NAMESPACE_DECL))
 	return(NULL);
     if (cur == (xmlNodePtr) ctxt->context->doc)
         return(NULL);
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[471]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 471\n");
+      else
+        fprintf(stderr, "reached bug index 471\n");
+    }
+    if ((!FIXREVERTER[471] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(ctxt->context->node->next);
+        #ifdef FRCOV
+        }
+        #endif
     return(cur->next);
 }
 
@@ -8139,18 +10494,63 @@ xmlXPathNextFollowingSibling(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
  */
 xmlNodePtr
 xmlXPathNextPrecedingSibling(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[472]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 472\n");
+      else
+        fprintf(stderr, "reached bug index 472\n");
+    }
+    if ((!FIXREVERTER[472] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt->context->node->type == XML_ATTRIBUTE_NODE) ||
 	(ctxt->context->node->type == XML_NAMESPACE_DECL))
 	return(NULL);
     if (cur == (xmlNodePtr) ctxt->context->doc)
         return(NULL);
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[473]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 473\n");
+      else
+        fprintf(stderr, "reached bug index 473\n");
+    }
+    if ((!FIXREVERTER[473] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(ctxt->context->node->prev);
+        #ifdef FRCOV
+        }
+        #endif
     if ((cur->prev != NULL) && (cur->prev->type == XML_DTD_NODE)) {
 	cur = cur->prev;
-	if (cur == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[474]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 474\n");
+	  else
+	    fprintf(stderr, "reached bug index 474\n");
+	}
+	if ((!FIXREVERTER[474] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(ctxt->context->node->prev);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     return(cur->prev);
 }
@@ -8170,7 +10570,22 @@ xmlXPathNextPrecedingSibling(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
  */
 xmlNodePtr
 xmlXPathNextFollowing(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[475]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 475\n");
+      else
+        fprintf(stderr, "reached bug index 475\n");
+    }
+    if ((!FIXREVERTER[475] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if ((cur != NULL) && (cur->type  != XML_ATTRIBUTE_NODE) &&
         (cur->type != XML_NAMESPACE_DECL) && (cur->children != NULL))
         return(cur->children);
@@ -8188,11 +10603,41 @@ xmlXPathNextFollowing(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
             cur = (xmlNodePtr) ns->next;
         }
     }
-    if (cur == NULL) return(NULL) ; /* ERROR */
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[476]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 476\n");
+      else
+        fprintf(stderr, "reached bug index 476\n");
+    }
+    if ((!FIXREVERTER[476] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL) ;
+    #ifdef FRCOV
+    }
+    #endif /* ERROR */
     if (cur->next != NULL) return(cur->next) ;
     do {
         cur = cur->parent;
-        if (cur == NULL) break;
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[477]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 477\n");
+          else
+            fprintf(stderr, "reached bug index 477\n");
+        }
+        if ((!FIXREVERTER[477] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) break;
+        #ifdef FRCOV
+        }
+        #endif
         if (cur == (xmlNodePtr) ctxt->context->doc) return(NULL);
         if (cur->next != NULL) return(cur->next);
     } while (cur != NULL);
@@ -8296,11 +10741,41 @@ static xmlNodePtr
 xmlXPathNextPrecedingInternal(xmlXPathParserContextPtr ctxt,
                               xmlNodePtr cur)
 {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[481]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 481\n");
+      else
+        fprintf(stderr, "reached bug index 481\n");
+    }
+    if ((!FIXREVERTER[481] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (cur == NULL) {
         cur = ctxt->context->node;
-        if (cur == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[482]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 482\n");
+          else
+            fprintf(stderr, "reached bug index 482\n");
+        }
+        if ((!FIXREVERTER[482] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (NULL);
+            #ifdef FRCOV
+            }
+            #endif
         if (cur->type == XML_ATTRIBUTE_NODE) {
             cur = cur->parent;
         } else if (cur->type == XML_NAMESPACE_DECL) {
@@ -8319,8 +10794,23 @@ xmlXPathNextPrecedingInternal(xmlXPathParserContextPtr ctxt,
 	cur = cur->prev;
     while (cur->prev == NULL) {
         cur = cur->parent;
-        if (cur == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[483]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 483\n");
+          else
+            fprintf(stderr, "reached bug index 483\n");
+        }
+        if ((!FIXREVERTER[483] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (NULL);
+            #ifdef FRCOV
+            }
+            #endif
         if (cur == ctxt->context->doc->children)
             return (NULL);
         if (cur != ctxt->ancestor)
@@ -8349,7 +10839,22 @@ xmlXPathNextPrecedingInternal(xmlXPathParserContextPtr ctxt,
  */
 xmlNodePtr
 xmlXPathNextNamespace(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[484]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 484\n");
+      else
+        fprintf(stderr, "reached bug index 484\n");
+    }
+    if ((!FIXREVERTER[484] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->context->node->type != XML_ELEMENT_NODE) return(NULL);
     if (cur == NULL) {
         if (ctxt->context->tmpNsList != NULL)
@@ -8386,16 +10891,46 @@ xmlXPathNextNamespace(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
  */
 xmlNodePtr
 xmlXPathNextAttribute(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
-    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[485]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 485\n");
+      else
+        fprintf(stderr, "reached bug index 485\n");
+    }
+    if ((!FIXREVERTER[485] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->context->node == NULL)
 	return(NULL);
     if (ctxt->context->node->type != XML_ELEMENT_NODE)
 	return(NULL);
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[486]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 486\n");
+      else
+        fprintf(stderr, "reached bug index 486\n");
+    }
+    if ((!FIXREVERTER[486] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (ctxt->context->node == (xmlNodePtr) ctxt->context->doc)
 	    return(NULL);
         return((xmlNodePtr)ctxt->context->node->properties);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return((xmlNodePtr)cur->next);
 }
 
@@ -8422,8 +10957,23 @@ xmlXPathNextAttribute(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
  */
 void
 xmlXPathRoot(xmlXPathParserContextPtr ctxt) {
-    if ((ctxt == NULL) || (ctxt->context == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[487]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 487\n");
+      else
+        fprintf(stderr, "reached bug index 487\n");
+    }
+    if ((!FIXREVERTER[487] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
 	(xmlNodePtr) ctxt->context->doc));
 }
@@ -8532,11 +11082,41 @@ xmlXPathGetElementsByIds (xmlDocPtr doc, const xmlChar *ids) {
     xmlAttrPtr attr;
     xmlNodePtr elem = NULL;
 
-    if (ids == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[488]) {
+      if ((ids == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 488\n");
+      else
+        fprintf(stderr, "reached bug index 488\n");
+    }
+    if ((!FIXREVERTER[488] && (ids == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = xmlXPathNodeSetCreate(NULL);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[489]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 489\n");
+      else
+        fprintf(stderr, "reached bug index 489\n");
+    }
+    if ((!FIXREVERTER[489] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(ret);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (IS_BLANK_CH(*cur)) cur++;
     while (*cur != 0) {
@@ -8598,7 +11178,22 @@ xmlXPathIdFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 
     CHECK_ARITY(1);
     obj = valuePop(ctxt);
-    if (obj == NULL) XP_ERROR(XPATH_INVALID_OPERAND);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[490]) {
+      if ((obj == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 490\n");
+      else
+        fprintf(stderr, "reached bug index 490\n");
+    }
+    if ((!FIXREVERTER[490] && (obj == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) XP_ERROR(XPATH_INVALID_OPERAND);
+    #ifdef FRCOV
+    }
+    #endif
     if ((obj->type == XPATH_NODESET) || (obj->type == XPATH_XSLT_TREE)) {
 	xmlNodeSetPtr ns;
 	int i;
@@ -8626,7 +11221,22 @@ xmlXPathIdFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 	return;
     }
     obj = xmlXPathCacheConvertString(ctxt->context, obj);
-    if (obj == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[491]) {
+      if ((obj == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 491\n");
+      else
+        fprintf(stderr, "reached bug index 491\n");
+    }
+    if ((!FIXREVERTER[491] && (obj == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlXPathGetElementsByIds(ctxt->context->doc, obj->stringval);
     valuePush(ctxt, xmlXPathCacheWrapNodeSet(ctxt->context, ret));
     xmlXPathReleaseObject(ctxt->context, obj);
@@ -8650,7 +11260,22 @@ void
 xmlXPathLocalNameFunction(xmlXPathParserContextPtr ctxt, int nargs) {
     xmlXPathObjectPtr cur;
 
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[492]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 492\n");
+      else
+        fprintf(stderr, "reached bug index 492\n");
+    }
+    if ((!FIXREVERTER[492] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (nargs == 0) {
 	valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
@@ -8709,7 +11334,22 @@ void
 xmlXPathNamespaceURIFunction(xmlXPathParserContextPtr ctxt, int nargs) {
     xmlXPathObjectPtr cur;
 
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[493]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 493\n");
+      else
+        fprintf(stderr, "reached bug index 493\n");
+    }
+    if ((!FIXREVERTER[493] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (nargs == 0) {
 	valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
@@ -8864,7 +11504,22 @@ void
 xmlXPathStringFunction(xmlXPathParserContextPtr ctxt, int nargs) {
     xmlXPathObjectPtr cur;
 
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[494]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 494\n");
+      else
+        fprintf(stderr, "reached bug index 494\n");
+    }
+    if ((!FIXREVERTER[494] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (nargs == 0) {
     valuePush(ctxt,
 	xmlXPathCacheWrapString(ctxt->context,
@@ -8874,7 +11529,22 @@ xmlXPathStringFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 
     CHECK_ARITY(1);
     cur = valuePop(ctxt);
-    if (cur == NULL) XP_ERROR(XPATH_INVALID_OPERAND);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[496]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 496\n");
+      else
+        fprintf(stderr, "reached bug index 496\n");
+    }
+    if ((!FIXREVERTER[496] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) XP_ERROR(XPATH_INVALID_OPERAND);
+    #ifdef FRCOV
+    }
+    #endif
     valuePush(ctxt, xmlXPathCacheConvertString(ctxt->context, cur));
 }
 
@@ -8895,8 +11565,23 @@ xmlXPathStringLengthFunction(xmlXPathParserContextPtr ctxt, int nargs) {
     xmlXPathObjectPtr cur;
 
     if (nargs == 0) {
-        if ((ctxt == NULL) || (ctxt->context == NULL))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[497]) {
+          if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 497\n");
+          else
+            fprintf(stderr, "reached bug index 497\n");
+        }
+        if ((!FIXREVERTER[497] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    return;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (ctxt->context->node == NULL) {
 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, 0));
 	} else {
@@ -8932,7 +11617,22 @@ xmlXPathConcatFunction(xmlXPathParserContextPtr ctxt, int nargs) {
     xmlXPathObjectPtr cur, newobj;
     xmlChar *tmp;
 
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[499]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 499\n");
+      else
+        fprintf(stderr, "reached bug index 499\n");
+    }
+    if ((!FIXREVERTER[499] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (nargs < 2) {
 	CHECK_ARITY(2);
     }
@@ -9237,7 +11937,22 @@ xmlXPathNormalizeFunction(xmlXPathParserContextPtr ctxt, int nargs) {
   xmlBufPtr target;
   xmlChar blank;
 
-  if (ctxt == NULL) return;
+  
+  #ifdef FRCOV
+  {if (FIXREVERTER[500]) {
+    if ((ctxt == (void *) 0 ) && !(0))
+      fprintf(stderr, "triggered bug index 500\n");
+    else
+      fprintf(stderr, "reached bug index 500\n");
+  }
+  if ((!FIXREVERTER[500] && (ctxt == (void *) 0 ))
+  #else
+  if (0
+  #endif
+  ) return;
+  #ifdef FRCOV
+  }
+  #endif
   if (nargs == 0) {
     /* Use current context node */
       valuePush(ctxt,
@@ -9385,7 +12100,22 @@ xmlXPathBooleanFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 
     CHECK_ARITY(1);
     cur = valuePop(ctxt);
-    if (cur == NULL) XP_ERROR(XPATH_INVALID_OPERAND);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[501]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 501\n");
+      else
+        fprintf(stderr, "reached bug index 501\n");
+    }
+    if ((!FIXREVERTER[501] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) XP_ERROR(XPATH_INVALID_OPERAND);
+    #ifdef FRCOV
+    }
+    #endif
     cur = xmlXPathCacheConvertBoolean(ctxt->context, cur);
     valuePush(ctxt, cur);
 }
@@ -9471,13 +12201,31 @@ xmlXPathLangFunction(xmlXPathParserContextPtr ctxt, int nargs) {
     val = valuePop(ctxt);
     lang = val->stringval;
     theLang = xmlNodeGetLang(ctxt->context->node);
-    if ((theLang != NULL) && (lang != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[502]) {
+      fprintf(stderr, "reached bug index 502\n");
+    }
+    if ((FIXREVERTER[502] && (theLang != (void *) 0 )) || (!FIXREVERTER[502] && (theLang != (void *) 0 && lang != (void *) 0 ))
+    #else
+    if (theLang != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(lang != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 502\n");
+      #endif
+    
         for (i = 0;lang[i] != 0;i++)
 	    if (toupper(lang[i]) != toupper(theLang[i]))
 	        goto not_equal;
 	if ((theLang[i] == 0) || (theLang[i] == '-'))
 	    ret = 1;
     }
+    #ifdef FRCOV
+    }
+    #endif
 not_equal:
     if (theLang != NULL)
 	xmlFree((void *)theLang);
@@ -9499,7 +12247,22 @@ xmlXPathNumberFunction(xmlXPathParserContextPtr ctxt, int nargs) {
     xmlXPathObjectPtr cur;
     double res;
 
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[503]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 503\n");
+      else
+        fprintf(stderr, "reached bug index 503\n");
+    }
+    if ((!FIXREVERTER[503] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (nargs == 0) {
 	if (ctxt->context->node == NULL) {
 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, 0.0));
@@ -9661,8 +12424,23 @@ xmlXPathCurrentChar(xmlXPathParserContextPtr ctxt, int *len) {
     unsigned int val;
     const xmlChar *cur;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[505]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 505\n");
+      else
+        fprintf(stderr, "reached bug index 505\n");
+    }
+    if ((!FIXREVERTER[505] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     cur = ctxt->cur;
 
     /*
@@ -9748,7 +12526,22 @@ xmlXPathParseNCName(xmlXPathParserContextPtr ctxt) {
     xmlChar *ret;
     int count = 0;
 
-    if ((ctxt == NULL) || (ctxt->cur == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[506]) {
+      if ((ctxt == (void *) 0 || ctxt -> cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 506\n");
+      else
+        fprintf(stderr, "reached bug index 506\n");
+    }
+    if ((!FIXREVERTER[506] && (ctxt == (void *) 0 || ctxt -> cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     /*
      * Accelerator for simple ASCII names
      */
@@ -9767,8 +12560,23 @@ xmlXPathParseNCName(xmlXPathParserContextPtr ctxt) {
             (*in == '[') || (*in == ']') || (*in == ':') ||
             (*in == '@') || (*in == '*')) {
 	    count = in - ctxt->cur;
-	    if (count == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[507]) {
+	      if ((count == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 507\n");
+	      else
+	        fprintf(stderr, "reached bug index 507\n");
+	    }
+	    if ((!FIXREVERTER[507] && (count == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    ret = xmlStrndup(ctxt->cur, count);
 	    ctxt->cur = in;
 	    return(ret);
@@ -9829,7 +12637,22 @@ xmlXPathParseName(xmlXPathParserContextPtr ctxt) {
     xmlChar *ret;
     size_t count = 0;
 
-    if ((ctxt == NULL) || (ctxt->cur == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[508]) {
+      if ((ctxt == (void *) 0 || ctxt -> cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 508\n");
+      else
+        fprintf(stderr, "reached bug index 508\n");
+    }
+    if ((!FIXREVERTER[508] && (ctxt == (void *) 0 || ctxt -> cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     /*
      * Accelerator for simple ASCII names
      */
@@ -9929,8 +12752,23 @@ xmlXPathParseNameComplex(xmlXPathParserContextPtr ctxt, int qualified) {
 	    return(buffer);
 	}
     }
-    if (len == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[509]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 509\n");
+      else
+        fprintf(stderr, "reached bug index 509\n");
+    }
+    if ((!FIXREVERTER[509] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlStrndup(buf, len));
 }
 
@@ -9964,7 +12802,22 @@ xmlXPathStringEvalNumber(const xmlChar *str) {
     unsigned long tmp = 0;
     double temp;
 #endif
-    if (cur == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[510]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 510\n");
+      else
+        fprintf(stderr, "reached bug index 510\n");
+    }
+    if ((!FIXREVERTER[510] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     while (IS_BLANK_CH(*cur)) cur++;
     if ((*cur != '.') && ((*cur < '0') || (*cur > '9')) && (*cur != '-')) {
         return(NAN);
@@ -10222,7 +13075,22 @@ xmlXPathCompLiteral(xmlXPathParserContextPtr ctxt) {
     } else {
 	XP_ERROR(XPATH_START_LITERAL_ERROR);
     }
-    if (ret == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[513]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 513\n");
+      else
+        fprintf(stderr, "reached bug index 513\n");
+    }
+    if ((!FIXREVERTER[513] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     PUSH_LONG_EXPR(XPATH_OP_VALUE, XPATH_STRING, 0, 0,
 	           xmlXPathCacheNewString(ctxt->context, ret), NULL);
     xmlFree(ret);
@@ -10284,8 +13152,23 @@ xmlXPathCompVariableReference(xmlXPathParserContextPtr ctxt) {
  */
 int
 xmlXPathIsNodeType(const xmlChar *name) {
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[514]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 514\n");
+      else
+        fprintf(stderr, "reached bug index 514\n");
+    }
+    if ((!FIXREVERTER[514] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (xmlStrEqual(name, BAD_CAST "node"))
 	return(1);
@@ -10352,11 +13235,26 @@ xmlXPathCompFunctionCall(xmlXPathParserContextPtr ctxt) {
 	    int op1 = ctxt->comp->last;
 	    ctxt->comp->last = -1;
 	    xmlXPathCompileExpr(ctxt, sort);
-	    if (ctxt->error != XPATH_EXPRESSION_OK) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[515]) {
+	      if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+	        fprintf(stderr, "triggered bug index 515\n");
+	      else
+	        fprintf(stderr, "reached bug index 515\n");
+	    }
+	    if ((!FIXREVERTER[515] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFree(name);
 		xmlFree(prefix);
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    PUSH_BINARY_EXPR(XPATH_OP_ARG, op1, ctxt->comp->last, 0, 0);
 	    nbargs++;
 	    if (CUR == ')') break;
@@ -10907,8 +13805,23 @@ xmlXPathCompileExpr(xmlXPathParserContextPtr ctxt, int sort) {
     xmlXPathContextPtr xpctxt = ctxt->context;
 
     if (xpctxt != NULL) {
-        if (xpctxt->depth >= xpctxt->maxParserDepth)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[516]) {
+          if ((xpctxt -> depth >= xpctxt -> maxParserDepth ) && !(0))
+            fprintf(stderr, "triggered bug index 516\n");
+          else
+            fprintf(stderr, "reached bug index 516\n");
+        }
+        if ((!FIXREVERTER[516] && (xpctxt -> depth >= xpctxt -> maxParserDepth ))
+        #else
+        if (0
+        #endif
+        )
             XP_ERROR(XPATH_RECURSION_LIMIT_EXCEEDED);
+            #ifdef FRCOV
+            }
+            #endif
         xpctxt->depth += 1;
     }
 
@@ -11015,10 +13928,25 @@ xmlXPathCompNodeTest(xmlXPathParserContextPtr ctxt, xmlXPathTestVal *test,
 		     xmlChar *name) {
     int blanks;
 
-    if ((test == NULL) || (type == NULL) || (prefix == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[517]) {
+      if ((test == (void *) 0 || type == (void *) 0 || prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 517\n");
+      else
+        fprintf(stderr, "reached bug index 517\n");
+    }
+    if ((!FIXREVERTER[517] && (test == (void *) 0 || type == (void *) 0 || prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	STRANGE;
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     *type = (xmlXPathTypeVal) 0;
     *test = (xmlXPathTestVal) 0;
     *prefix = NULL;
@@ -11033,8 +13961,23 @@ xmlXPathCompNodeTest(xmlXPathParserContextPtr ctxt, xmlXPathTestVal *test,
 	return(NULL);
     }
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[518]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 518\n");
+      else
+        fprintf(stderr, "reached bug index 518\n");
+    }
+    if ((!FIXREVERTER[518] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	name = xmlXPathParseNCName(ctxt);
+	#ifdef FRCOV
+	}
+	#endif
     if (name == NULL) {
 	XP_ERRORNULL(XPATH_EXPR_ERROR);
     }
@@ -11281,8 +14224,23 @@ xmlXPathCompStep(xmlXPathParserContextPtr ctxt) {
 	if (CUR == '*') {
 	    axis = AXIS_CHILD;
 	} else {
-	    if (name == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[519]) {
+	      if ((name == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 519\n");
+	      else
+	        fprintf(stderr, "reached bug index 519\n");
+	    }
+	    if ((!FIXREVERTER[519] && (name == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		name = xmlXPathParseNCName(ctxt);
+		#ifdef FRCOV
+		}
+		#endif
 	    if (name != NULL) {
 		axis = xmlXPathIsAxisName(name);
 		if (axis != 0) {
@@ -11306,10 +14264,25 @@ xmlXPathCompStep(xmlXPathParserContextPtr ctxt) {
 	    }
 	}
 
-        if (ctxt->error != XPATH_EXPRESSION_OK) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[520]) {
+          if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+            fprintf(stderr, "triggered bug index 520\n");
+          else
+            fprintf(stderr, "reached bug index 520\n");
+        }
+        if ((!FIXREVERTER[520] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFree(name);
             return;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
 	name = xmlXPathCompNodeTest(ctxt, &test, &type, &prefix, name);
 	if (test == 0)
@@ -11581,17 +14554,47 @@ xmlXPathNodeSetFilter(xmlXPathParserContextPtr ctxt,
     int oldcs, oldpp;
     int i, j, pos;
 
-    if ((set == NULL) || (set->nodeNr == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[521]) {
+      if ((set == (void *) 0 || set -> nodeNr == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 521\n");
+      else
+        fprintf(stderr, "reached bug index 521\n");
+    }
+    if ((!FIXREVERTER[521] && (set == (void *) 0 || set -> nodeNr == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
     * Check if the node set contains a sufficient number of nodes for
     * the requested range.
     */
-    if (set->nodeNr < minPos) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[522]) {
+      if ((set -> nodeNr < minPos ) && !(0))
+        fprintf(stderr, "triggered bug index 522\n");
+      else
+        fprintf(stderr, "reached bug index 522\n");
+    }
+    if ((!FIXREVERTER[522] && (set -> nodeNr < minPos ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPathNodeSetClear(set, hasNsNodes);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     xpctxt = ctxt->context;
     oldnode = xpctxt->node;
@@ -11621,8 +14624,23 @@ xmlXPathNodeSetFilter(xmlXPathParserContextPtr ctxt,
 
         res = xmlXPathCompOpEvalToBoolean(ctxt, filterOp, 1);
 
-        if (ctxt->error != XPATH_EXPRESSION_OK)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[523]) {
+          if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+            fprintf(stderr, "triggered bug index 523\n");
+          else
+            fprintf(stderr, "reached bug index 523\n");
+        }
+        if ((!FIXREVERTER[523] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+        #else
+        if (0
+        #endif
+        )
             goto exit;
+            #ifdef FRCOV
+            }
+            #endif
         if (res < 0) {
             /* Shouldn't happen */
             xmlXPathErr(ctxt, XPATH_EXPR_ERROR);
@@ -11664,13 +14682,42 @@ xmlXPathNodeSetFilter(xmlXPathParserContextPtr ctxt,
     set->nodeNr = j;
 
     /* If too many elements were removed, shrink table to preserve memory. */
-    if ((set->nodeMax > XML_NODESET_DEFAULT) &&
-        (set->nodeNr < set->nodeMax / 2)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[528]) {
+      fprintf(stderr, "reached bug index 528\n");
+    }
+    if ((FIXREVERTER[528] && (set -> nodeMax > 10 )) || (!FIXREVERTER[528] && (set -> nodeMax > 10 && set -> nodeNr < set -> nodeMax / 2 ))
+    #else
+    if (set -> nodeMax > 10 
+    #endif
+    ) {
+          
+        #ifdef FRCOV
+          if (!(set -> nodeNr < set -> nodeMax / 2 ))
+            fprintf(stderr, "triggered bug index 528\n");
+          #endif
+        
         xmlNodePtr *tmp;
         int nodeMax = set->nodeNr;
 
-        if (nodeMax < XML_NODESET_DEFAULT)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[527]) {
+          if ((nodeMax < 10 ) && !(0))
+            fprintf(stderr, "triggered bug index 527\n");
+          else
+            fprintf(stderr, "reached bug index 527\n");
+        }
+        if ((!FIXREVERTER[527] && (nodeMax < 10 ))
+        #else
+        if (0
+        #endif
+        )
             nodeMax = XML_NODESET_DEFAULT;
+            #ifdef FRCOV
+            }
+            #endif
         tmp = (xmlNodePtr *) xmlRealloc(set->nodeTab,
                 nodeMax * sizeof(xmlNodePtr));
         if (tmp == NULL) {
@@ -11680,6 +14727,9 @@ xmlXPathNodeSetFilter(xmlXPathParserContextPtr ctxt,
             set->nodeMax = nodeMax;
         }
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 exit:
     xpctxt->node = oldnode;
@@ -11745,8 +14795,23 @@ xmlXPathLocationSetFilter(xmlXPathParserContextPtr ctxt,
 
         res = xmlXPathCompOpEvalToBoolean(ctxt, filterOp, 1);
 
-        if (ctxt->error != XPATH_EXPRESSION_OK)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[529]) {
+          if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+            fprintf(stderr, "triggered bug index 529\n");
+          else
+            fprintf(stderr, "reached bug index 529\n");
+        }
+        if ((!FIXREVERTER[529] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+        #else
+        if (0
+        #endif
+        )
             goto exit;
+            #ifdef FRCOV
+            }
+            #endif
         if (res < 0) {
             /* Shouldn't happen */
             xmlXPathErr(ctxt, XPATH_EXPR_ERROR);
@@ -11782,13 +14847,42 @@ xmlXPathLocationSetFilter(xmlXPathParserContextPtr ctxt,
     locset->locNr = j;
 
     /* If too many elements were removed, shrink table to preserve memory. */
-    if ((locset->locMax > XML_NODESET_DEFAULT) &&
-        (locset->locNr < locset->locMax / 2)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[534]) {
+      fprintf(stderr, "reached bug index 534\n");
+    }
+    if ((FIXREVERTER[534] && (locset -> locMax > 10 )) || (!FIXREVERTER[534] && (locset -> locMax > 10 && locset -> locNr < locset -> locMax / 2 ))
+    #else
+    if (locset -> locMax > 10 
+    #endif
+    ) {
+          
+        #ifdef FRCOV
+          if (!(locset -> locNr < locset -> locMax / 2 ))
+            fprintf(stderr, "triggered bug index 534\n");
+          #endif
+        
         xmlXPathObjectPtr *tmp;
         int locMax = locset->locNr;
 
-        if (locMax < XML_NODESET_DEFAULT)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[533]) {
+          if ((locMax < 10 ) && !(0))
+            fprintf(stderr, "triggered bug index 533\n");
+          else
+            fprintf(stderr, "reached bug index 533\n");
+        }
+        if ((!FIXREVERTER[533] && (locMax < 10 ))
+        #else
+        if (0
+        #endif
+        )
             locMax = XML_NODESET_DEFAULT;
+            #ifdef FRCOV
+            }
+            #endif
         tmp = (xmlXPathObjectPtr *) xmlRealloc(locset->locTab,
                 locMax * sizeof(xmlXPathObjectPtr));
         if (tmp == NULL) {
@@ -11798,6 +14892,9 @@ xmlXPathLocationSetFilter(xmlXPathParserContextPtr ctxt,
             locset->locMax = locMax;
         }
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 exit:
     xpctxt->node = oldnode;
@@ -12076,16 +15173,46 @@ xmlXPathNodeCollectAndTest(xmlXPathParserContextPtr ctxt,
 	(obj->nodesetval != NULL) ? obj->nodesetval->nodeNr : 0);
 #endif
 
-    if (next == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[535]) {
+      if ((next == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 535\n");
+      else
+        fprintf(stderr, "reached bug index 535\n");
+    }
+    if ((!FIXREVERTER[535] && (next == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXPathReleaseObject(xpctxt, obj);
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     contextSeq = obj->nodesetval;
-    if ((contextSeq == NULL) || (contextSeq->nodeNr <= 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[536]) {
+      if ((contextSeq == (void *) 0 || contextSeq -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 536\n");
+      else
+        fprintf(stderr, "reached bug index 536\n");
+    }
+    if ((!FIXREVERTER[536] && (contextSeq == (void *) 0 || contextSeq -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXPathReleaseObject(xpctxt, obj);
         valuePush(ctxt, xmlXPathCacheWrapNodeSet(xpctxt, NULL));
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Predicate optimization ---------------------------------------------
     * If this step has a last predicate, which contains a position(),
@@ -12157,10 +15284,25 @@ xmlXPathNodeCollectAndTest(xmlXPathParserContextPtr ctxt,
 
 	if (seq == NULL) {
 	    seq = xmlXPathNodeSetCreate(NULL);
-	    if (seq == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[537]) {
+	      if ((seq == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 537\n");
+	      else
+	        fprintf(stderr, "reached bug index 537\n");
+	    }
+	    if ((!FIXREVERTER[537] && (seq == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		total = 0;
 		goto error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	/*
 	* Traverse the axis and test the nodes.
@@ -12173,8 +15315,23 @@ xmlXPathNodeCollectAndTest(xmlXPathParserContextPtr ctxt,
                 goto error;
 
             cur = next(ctxt, cur);
-            if (cur == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[538]) {
+              if ((cur == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 538\n");
+              else
+                fprintf(stderr, "reached bug index 538\n");
+            }
+            if ((!FIXREVERTER[538] && (cur == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
 
 	    /*
 	    * QUESTION TODO: What does the "first" and "last" stuff do?
@@ -12405,13 +15562,43 @@ first_hit: /* ---------------------------------------------------------- */
 #endif
 
 apply_predicates: /* --------------------------------------------------- */
-        if (ctxt->error != XPATH_EXPRESSION_OK)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[539]) {
+          if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+            fprintf(stderr, "triggered bug index 539\n");
+          else
+            fprintf(stderr, "reached bug index 539\n");
+        }
+        if ((!FIXREVERTER[539] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+        #else
+        if (0
+        #endif
+        )
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
         /*
 	* Apply predicates.
 	*/
-        if ((predOp != NULL) && (seq->nodeNr > 0)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[541]) {
+          fprintf(stderr, "reached bug index 541\n");
+        }
+        if ((FIXREVERTER[541] && (predOp != (void *) 0 )) || (!FIXREVERTER[541] && (predOp != (void *) 0 && seq -> nodeNr > 0 ))
+        #else
+        if (predOp != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(seq -> nodeNr > 0 ))
+            fprintf(stderr, "triggered bug index 541\n");
+          #endif
+        
 	    /*
 	    * E.g. when we have a "/foo[some expression][n]".
 	    */
@@ -12447,11 +15634,29 @@ apply_predicates: /* --------------------------------------------------- */
 		xmlXPathCompOpEvalPredicate(ctxt, predOp, seq, 1, seq->nodeNr,
 					    hasNsNodes);
 
-	    if (ctxt->error != XPATH_EXPRESSION_OK) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[540]) {
+	      if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+	        fprintf(stderr, "triggered bug index 540\n");
+	      else
+	        fprintf(stderr, "reached bug index 540\n");
+	    }
+	    if ((!FIXREVERTER[540] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		total = 0;
 		goto error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
+        }
+        #ifdef FRCOV
         }
+        #endif
 
         if (seq->nodeNr > 0) {
 	    /*
@@ -12855,8 +16060,23 @@ xmlXPathCompOpEvalFilterFirst(xmlXPathParserContextPtr ctxt,
     CHECK_ERROR0;
     if (op->ch2 == -1)
 	return (total);
-    if (ctxt->value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[542]) {
+      if ((ctxt -> value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 542\n");
+      else
+        fprintf(stderr, "reached bug index 542\n");
+    }
+    if ((!FIXREVERTER[542] && (ctxt -> value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (total);
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifdef LIBXML_XPTR_ENABLED
     /*
@@ -13069,24 +16289,69 @@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlXPathStepOpPtr op)
                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
                 if (op->value5 == NULL) {
 		    val = xmlXPathVariableLookup(ctxt->context, op->value4);
-		    if (val == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[543]) {
+		      if ((val == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 543\n");
+		      else
+		        fprintf(stderr, "reached bug index 543\n");
+		    }
+		    if ((!FIXREVERTER[543] && (val == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			XP_ERROR0(XPATH_UNDEF_VARIABLE_ERROR);
+			#ifdef FRCOV
+			}
+			#endif
                     valuePush(ctxt, val);
 		} else {
                     const xmlChar *URI;
 
                     URI = xmlXPathNsLookup(ctxt->context, op->value5);
-                    if (URI == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[544]) {
+                      if ((URI == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 544\n");
+                      else
+                        fprintf(stderr, "reached bug index 544\n");
+                    }
+                    if ((!FIXREVERTER[544] && (URI == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlGenericError(xmlGenericErrorContext,
             "xmlXPathCompOpEval: variable %s bound to undefined prefix %s\n",
                                     (char *) op->value4, (char *)op->value5);
                         ctxt->error = XPATH_UNDEF_PREFIX_ERROR;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
 		    val = xmlXPathVariableLookupNS(ctxt->context,
                                                        op->value4, URI);
-		    if (val == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[545]) {
+		      if ((val == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 545\n");
+		      else
+		        fprintf(stderr, "reached bug index 545\n");
+		    }
+		    if ((!FIXREVERTER[545] && (val == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			XP_ERROR0(XPATH_UNDEF_VARIABLE_ERROR);
+			#ifdef FRCOV
+			}
+			#endif
                     valuePush(ctxt, val);
                 }
                 break;
@@ -13101,10 +16366,25 @@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlXPathStepOpPtr op)
                 if (op->ch1 != -1) {
                     total +=
                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
-                    if (ctxt->error != XPATH_EXPRESSION_OK) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[546]) {
+                      if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+                        fprintf(stderr, "triggered bug index 546\n");
+                      else
+                        fprintf(stderr, "reached bug index 546\n");
+                    }
+                    if ((!FIXREVERTER[546] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlXPathPopFrame(ctxt, frame);
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
 		if (ctxt->valueNr < ctxt->valueFrame + op->value) {
 		    xmlGenericError(xmlGenericErrorContext,
@@ -13277,8 +16557,23 @@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlXPathStepOpPtr op)
 		CHECK_ERROR0;
                 if (op->ch2 == -1)
                     break;
-                if (ctxt->value == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[547]) {
+                  if ((ctxt -> value == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 547\n");
+                  else
+                    fprintf(stderr, "reached bug index 547\n");
+                }
+                if ((!FIXREVERTER[547] && (ctxt -> value == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     break;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
 #ifdef LIBXML_XPTR_ENABLED
                 /*
@@ -13368,10 +16663,25 @@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlXPathStepOpPtr op)
                             total +=
                                 xmlXPathCompOpEval(ctxt,
                                                    &comp->steps[op->ch2]);
-			if (ctxt->error != XPATH_EXPRESSION_OK) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[548]) {
+			  if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+			    fprintf(stderr, "triggered bug index 548\n");
+			  else
+			    fprintf(stderr, "reached bug index 548\n");
+			}
+			if ((!FIXREVERTER[548] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+			#else
+			if (0
+			#endif
+			) {
                             xmlXPtrFreeLocationSet(newlocset);
                             goto rangeto_error;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 
                         res = valuePop(ctxt);
 			if (res->type == XPATH_LOCATIONSET) {
@@ -13431,10 +16741,25 @@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlXPathStepOpPtr op)
                                 total +=
                                     xmlXPathCompOpEval(ctxt,
                                                    &comp->steps[op->ch2]);
-			    if (ctxt->error != XPATH_EXPRESSION_OK) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[549]) {
+			      if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+			        fprintf(stderr, "triggered bug index 549\n");
+			      else
+			        fprintf(stderr, "reached bug index 549\n");
+			    }
+			    if ((!FIXREVERTER[549] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
                                 xmlXPtrFreeLocationSet(newlocset);
                                 goto rangeto_error;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 
                             res = valuePop(ctxt);
                             range =
@@ -13522,28 +16847,103 @@ start:
 		return(0);
 
             xmlXPathCompOpEval(ctxt, &ctxt->comp->steps[op->ch1]);
-	    if (ctxt->error != XPATH_EXPRESSION_OK)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[550]) {
+	      if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+	        fprintf(stderr, "triggered bug index 550\n");
+	      else
+	        fprintf(stderr, "reached bug index 550\n");
+	    }
+	    if ((!FIXREVERTER[550] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
+		#ifdef FRCOV
+		}
+		#endif
 
             xmlXPathNodeCollectAndTest(ctxt, op, NULL, NULL, 1);
-	    if (ctxt->error != XPATH_EXPRESSION_OK)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[551]) {
+	      if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+	        fprintf(stderr, "triggered bug index 551\n");
+	      else
+	        fprintf(stderr, "reached bug index 551\n");
+	    }
+	    if ((!FIXREVERTER[551] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
+		#ifdef FRCOV
+		}
+		#endif
 
 	    resObj = valuePop(ctxt);
-	    if (resObj == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[552]) {
+	      if ((resObj == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 552\n");
+	      else
+	        fprintf(stderr, "reached bug index 552\n");
+	    }
+	    if ((!FIXREVERTER[552] && (resObj == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
+		#ifdef FRCOV
+		}
+		#endif
 	    break;
 	default:
 	    /*
 	    * Fallback to call xmlXPathCompOpEval().
 	    */
 	    xmlXPathCompOpEval(ctxt, op);
-	    if (ctxt->error != XPATH_EXPRESSION_OK)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[553]) {
+	      if ((ctxt -> error != XPATH_EXPRESSION_OK ) && !(0))
+	        fprintf(stderr, "triggered bug index 553\n");
+	      else
+	        fprintf(stderr, "reached bug index 553\n");
+	    }
+	    if ((!FIXREVERTER[553] && (ctxt -> error != XPATH_EXPRESSION_OK ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
+		#ifdef FRCOV
+		}
+		#endif
 
 	    resObj = valuePop(ctxt);
-	    if (resObj == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[554]) {
+	      if ((resObj == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 554\n");
+	      else
+	        fprintf(stderr, "reached bug index 554\n");
+	    }
+	    if ((!FIXREVERTER[554] && (resObj == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
+		#ifdef FRCOV
+		}
+		#endif
 	    break;
     }
 
@@ -13592,8 +16992,23 @@ xmlXPathRunStreamEval(xmlXPathContextPtr ctxt, xmlPatternPtr comp,
 
     int nb_nodes = 0;
 
-    if ((ctxt == NULL) || (comp == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[555]) {
+      if ((ctxt == (void *) 0 || comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 555\n");
+      else
+        fprintf(stderr, "reached bug index 555\n");
+    }
+    if ((!FIXREVERTER[555] && (ctxt == (void *) 0 || comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     max_depth = xmlPatternMaxDepth(comp);
     if (max_depth == -1)
         return(-1);
@@ -13610,8 +17025,23 @@ xmlXPathRunStreamEval(xmlXPathContextPtr ctxt, xmlPatternPtr comp,
 #endif
 
     if (! toBool) {
-	if (resultSeq == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[557]) {
+	  if ((resultSeq == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 557\n");
+	  else
+	    fprintf(stderr, "reached bug index 557\n");
+	}
+	if ((!FIXREVERTER[557] && (resultSeq == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	*resultSeq = xmlXPathCacheNewNodeSet(ctxt, NULL);
 	if (*resultSeq == NULL)
 	    return(-1);
@@ -13671,17 +17101,47 @@ xmlXPathRunStreamEval(xmlXPathContextPtr ctxt, xmlPatternPtr comp,
 	}
 	limit = cur;
     }
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[559]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 559\n");
+      else
+        fprintf(stderr, "reached bug index 559\n");
+    }
+    if ((!FIXREVERTER[559] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     patstream = xmlPatternGetStreamCtxt(comp);
-    if (patstream == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[560]) {
+      if ((patstream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 560\n");
+      else
+        fprintf(stderr, "reached bug index 560\n");
+    }
+    if ((!FIXREVERTER[560] && (patstream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* QUESTION TODO: Is this an error?
 	*/
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     eval_all_nodes = xmlStreamWantsAnyNode(patstream);
 
@@ -13699,12 +17159,27 @@ xmlXPathRunStreamEval(xmlXPathContextPtr ctxt, xmlPatternPtr comp,
 next_node:
     do {
         if (ctxt->opLimit != 0) {
-            if (ctxt->opCount >= ctxt->opLimit) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[561]) {
+              if ((ctxt -> opCount >= ctxt -> opLimit ) && !(0))
+                fprintf(stderr, "triggered bug index 561\n");
+              else
+                fprintf(stderr, "reached bug index 561\n");
+            }
+            if ((!FIXREVERTER[561] && (ctxt -> opCount >= ctxt -> opLimit ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlGenericError(xmlGenericErrorContext,
                         "XPath operation limit exceeded\n");
                 xmlFreeStreamCtxt(patstream);
                 return(-1);
             }
+            #ifdef FRCOV
+            }
+            #endif
             ctxt->opCount++;
         }
 
@@ -13750,7 +17225,22 @@ next_node:
 
 scan_children:
 	if (cur->type == XML_NAMESPACE_DECL) break;
-	if ((cur->children != NULL) && (depth < max_depth)) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[562]) {
+	  fprintf(stderr, "reached bug index 562\n");
+	}
+	if ((FIXREVERTER[562] && (depth < max_depth )) || (!FIXREVERTER[562] && (cur -> children != (void *) 0 && depth < max_depth ))
+	#else
+	if (depth < max_depth 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(cur -> children != (void *) 0 ))
+	    fprintf(stderr, "triggered bug index 562\n");
+	  #endif
+	
 	    /*
 	     * Do not descend on entities declarations
 	     */
@@ -13764,6 +17254,9 @@ scan_children:
 		    continue;
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	if (cur == limit)
 	    break;
@@ -13828,8 +17321,23 @@ xmlXPathRunEval(xmlXPathParserContextPtr ctxt, int toBool)
 {
     xmlXPathCompExprPtr comp;
 
-    if ((ctxt == NULL) || (ctxt->comp == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[563]) {
+      if ((ctxt == (void *) 0 || ctxt -> comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 563\n");
+      else
+        fprintf(stderr, "reached bug index 563\n");
+    }
+    if ((!FIXREVERTER[563] && (ctxt == (void *) 0 || ctxt -> comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     ctxt->context->depth = 0;
 
@@ -13881,11 +17389,26 @@ xmlXPathRunEval(xmlXPathParserContextPtr ctxt, int toBool)
     }
 #endif
     comp = ctxt->comp;
-    if (comp->last < 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[564]) {
+      if ((comp -> last < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 564\n");
+      else
+        fprintf(stderr, "reached bug index 564\n");
+    }
+    if ((!FIXREVERTER[564] && (comp -> last < 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlGenericError(xmlGenericErrorContext,
 	    "xmlXPathRunEval: last is less than zero\n");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (toBool)
 	return(xmlXPathCompOpEvalToBoolean(ctxt,
 	    &comp->steps[comp->last], 0));
@@ -13958,7 +17481,22 @@ xmlXPathEvalPredicate(xmlXPathContextPtr ctxt, xmlXPathObjectPtr res) {
 int
 xmlXPathEvaluatePredicateResult(xmlXPathParserContextPtr ctxt,
                                 xmlXPathObjectPtr res) {
-    if ((ctxt == NULL) || (res == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[567]) {
+      if ((ctxt == (void *) 0 || res == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 567\n");
+      else
+        fprintf(stderr, "reached bug index 567\n");
+    }
+    if ((!FIXREVERTER[567] && (ctxt == (void *) 0 || res == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     switch (res->type) {
         case XPATH_BOOLEAN:
 	    return(res->boolval);
@@ -13971,16 +17509,46 @@ xmlXPathEvaluatePredicateResult(xmlXPathParserContextPtr ctxt,
 #endif
         case XPATH_NODESET:
         case XPATH_XSLT_TREE:
-	    if (res->nodesetval == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[568]) {
+	      if ((res -> nodesetval == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 568\n");
+	      else
+	        fprintf(stderr, "reached bug index 568\n");
+	    }
+	    if ((!FIXREVERTER[568] && (res -> nodesetval == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
+		#ifdef FRCOV
+		}
+		#endif
 	    return(res->nodesetval->nodeNr != 0);
         case XPATH_STRING:
 	    return((res->stringval != NULL) && (res->stringval[0] != 0));
 #ifdef LIBXML_XPTR_ENABLED
 	case XPATH_LOCATIONSET:{
 	    xmlLocationSetPtr ptr = res->user;
-	    if (ptr == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[569]) {
+	      if ((ptr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 569\n");
+	      else
+	        fprintf(stderr, "reached bug index 569\n");
+	    }
+	    if ((!FIXREVERTER[569] && (ptr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(0);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    return (ptr->locNr != 0);
 	    }
 #endif
@@ -14035,10 +17603,25 @@ xmlXPathTryStreamCompile(xmlXPathContextPtr ctxt, const xmlChar *str) {
 	    dict = ctxt->dict;
 	    if (ctxt->nsNr > 0) {
 		namespaces = xmlMalloc(2 * (ctxt->nsNr + 1) * sizeof(xmlChar*));
-		if (namespaces == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[570]) {
+		  if ((namespaces == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 570\n");
+		  else
+		    fprintf(stderr, "reached bug index 570\n");
+		}
+		if ((!FIXREVERTER[570] && (namespaces == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlXPathErrMemory(ctxt, "allocating namespaces array\n");
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		for (i = 0, j = 0; (j < ctxt->nsNr); j++) {
 		    ns = ctxt->namespaces[j];
 		    namespaces[i++] = ns->href;
@@ -14056,10 +17639,25 @@ xmlXPathTryStreamCompile(xmlXPathContextPtr ctxt, const xmlChar *str) {
 	}
 	if ((stream != NULL) && (xmlPatternStreamable(stream) == 1)) {
 	    comp = xmlXPathNewCompExpr();
-	    if (comp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[571]) {
+	      if ((comp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 571\n");
+	      else
+	        fprintf(stderr, "reached bug index 571\n");
+	    }
+	    if ((!FIXREVERTER[571] && (comp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlXPathErrMemory(ctxt, "allocating streamable expression\n");
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    comp->stream = stream;
 	    comp->dict = dict;
 	    if (comp->dict)
@@ -14136,8 +17734,23 @@ xmlXPathOptimizeExpression(xmlXPathParserContextPtr pctxt,
     /* Recurse */
     ctxt = pctxt->context;
     if (ctxt != NULL) {
-        if (ctxt->depth >= ctxt->maxDepth)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[572]) {
+          if ((ctxt -> depth >= ctxt -> maxDepth ) && !(0))
+            fprintf(stderr, "triggered bug index 572\n");
+          else
+            fprintf(stderr, "reached bug index 572\n");
+        }
+        if ((!FIXREVERTER[572] && (ctxt -> depth >= ctxt -> maxDepth ))
+        #else
+        if (0
+        #endif
+        )
             return;
+            #ifdef FRCOV
+            }
+            #endif
         ctxt->depth += 1;
     }
     if (op->ch1 != -1)
@@ -14355,7 +17968,22 @@ xmlXPathEvalExpr(xmlXPathParserContextPtr ctxt) {
     xmlXPathCompExprPtr comp;
 #endif
 
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[580]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 580\n");
+      else
+        fprintf(stderr, "reached bug index 580\n");
+    }
+    if ((!FIXREVERTER[580] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef XPATH_STREAMING
     comp = xmlXPathTryStreamCompile(ctxt->context, ctxt->base);
diff --git a/xpointer.c b/xpointer.c
old mode 100644
new mode 100755
index 04674113..5125e32b
--- a/xpointer.c
+++ b/xpointer.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xpointer.c : Code to handle XML Pointer
  *
@@ -94,9 +98,36 @@ static void LIBXML_ATTR_FORMAT(3,0)
 xmlXPtrErr(xmlXPathParserContextPtr ctxt, int error,
            const char * msg, const xmlChar *extra)
 {
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3937]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3937\n");
+      else
+        fprintf(stderr, "reached bug index 3937\n");
+    }
+    if ((!FIXREVERTER[3937] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->error = error;
-    if ((ctxt == NULL) || (ctxt->context == NULL)) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3938]) {
+      if ((ctxt == (void *) 0 || ctxt -> context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3938\n");
+      else
+        fprintf(stderr, "reached bug index 3938\n");
+    }
+    if ((!FIXREVERTER[3938] && (ctxt == (void *) 0 || ctxt -> context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	__xmlRaiseError(NULL, NULL, NULL,
 			NULL, NULL, XML_FROM_XPOINTER, error,
 			XML_ERR_ERROR, NULL, 0,
@@ -104,6 +135,9 @@ xmlXPtrErr(xmlXPathParserContextPtr ctxt, int error,
 			msg, extra);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /* cleanup current last error */
     xmlResetError(&ctxt->context->lastError);
@@ -192,8 +226,23 @@ xmlXPtrGetNthChild(xmlNodePtr cur, int no) {
 	return(cur);
     cur = cur->children;
     for (i = 0;i <= no;cur = cur->next) {
-	if (cur == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3939]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3939\n");
+	  else
+	    fprintf(stderr, "reached bug index 3939\n");
+	}
+	if ((!FIXREVERTER[3939] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(cur);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((cur->type == XML_ELEMENT_NODE) ||
 	    (cur->type == XML_DOCUMENT_NODE) ||
 	    (cur->type == XML_HTML_DOCUMENT_NODE)) {
@@ -225,8 +274,23 @@ xmlXPtrGetNthChild(xmlNodePtr cur, int no) {
  */
 static int
 xmlXPtrCmpPoints(xmlNodePtr node1, int index1, xmlNodePtr node2, int index2) {
-    if ((node1 == NULL) || (node2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3941]) {
+      if ((node1 == (void *) 0 || node2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3941\n");
+      else
+        fprintf(stderr, "reached bug index 3941\n");
+    }
+    if ((!FIXREVERTER[3941] && (node1 == (void *) 0 || node2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-2);
+	#ifdef FRCOV
+	}
+	#endif
     /*
      * a couple of optimizations which will avoid computations in most cases
      */
@@ -253,16 +317,61 @@ static xmlXPathObjectPtr
 xmlXPtrNewPoint(xmlNodePtr node, int indx) {
     xmlXPathObjectPtr ret;
 
-    if (node == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3944]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3944\n");
+      else
+        fprintf(stderr, "reached bug index 3944\n");
+    }
+    if ((!FIXREVERTER[3944] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (indx < 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3945]) {
+      if ((indx < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3945\n");
+      else
+        fprintf(stderr, "reached bug index 3945\n");
+    }
+    if ((!FIXREVERTER[3945] && (indx < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3946]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3946\n");
+      else
+        fprintf(stderr, "reached bug index 3946\n");
+    }
+    if ((!FIXREVERTER[3946] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPtrErrMemory("allocating point");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));
     ret->type = XPATH_POINT;
     ret->user = (void *) node;
@@ -280,12 +389,42 @@ static void
 xmlXPtrRangeCheckOrder(xmlXPathObjectPtr range) {
     int tmp;
     xmlNodePtr tmp2;
-    if (range == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3947]) {
+      if ((range == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3947\n");
+      else
+        fprintf(stderr, "reached bug index 3947\n");
+    }
+    if ((!FIXREVERTER[3947] && (range == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (range->type != XPATH_RANGE)
 	return;
-    if (range->user2 == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3948]) {
+      if ((range -> user2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3948\n");
+      else
+        fprintf(stderr, "reached bug index 3948\n");
+    }
+    if ((!FIXREVERTER[3948] && (range -> user2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     tmp = xmlXPtrCmpPoints(range->user, range->index,
 	                     range->user2, range->index2);
     if (tmp == -1) {
@@ -311,20 +450,65 @@ static int
 xmlXPtrRangesEqual(xmlXPathObjectPtr range1, xmlXPathObjectPtr range2) {
     if (range1 == range2)
 	return(1);
-    if ((range1 == NULL) || (range2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3949]) {
+      if ((range1 == (void *) 0 || range2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3949\n");
+      else
+        fprintf(stderr, "reached bug index 3949\n");
+    }
+    if ((!FIXREVERTER[3949] && (range1 == (void *) 0 || range2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     if (range1->type != range2->type)
 	return(0);
     if (range1->type != XPATH_RANGE)
 	return(0);
     if (range1->user != range2->user)
 	return(0);
-    if (range1->index != range2->index)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3950]) {
+      if ((range1 -> index != range2 -> index ) && !(0))
+        fprintf(stderr, "triggered bug index 3950\n");
+      else
+        fprintf(stderr, "reached bug index 3950\n");
+    }
+    if ((!FIXREVERTER[3950] && (range1 -> index != range2 -> index ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     if (range1->user2 != range2->user2)
 	return(0);
-    if (range1->index2 != range2->index2)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3951]) {
+      if ((range1 -> index2 != range2 -> index2 ) && !(0))
+        fprintf(stderr, "triggered bug index 3951\n");
+      else
+        fprintf(stderr, "reached bug index 3951\n");
+    }
+    if ((!FIXREVERTER[3951] && (range1 -> index2 != range2 -> index2 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     return(1);
 }
 
@@ -354,10 +538,25 @@ xmlXPtrNewRangeInternal(xmlNodePtr start, int startindex,
 	return(NULL);
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3952]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3952\n");
+      else
+        fprintf(stderr, "reached bug index 3952\n");
+    }
+    if ((!FIXREVERTER[3952] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPtrErrMemory("allocating range");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlXPathObject));
     ret->type = XPATH_RANGE;
     ret->user = start;
@@ -383,14 +582,74 @@ xmlXPtrNewRange(xmlNodePtr start, int startindex,
 	        xmlNodePtr end, int endindex) {
     xmlXPathObjectPtr ret;
 
-    if (start == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3953]) {
+      if ((start == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3953\n");
+      else
+        fprintf(stderr, "reached bug index 3953\n");
+    }
+    if ((!FIXREVERTER[3953] && (start == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (end == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3954]) {
+      if ((end == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3954\n");
+      else
+        fprintf(stderr, "reached bug index 3954\n");
+    }
+    if ((!FIXREVERTER[3954] && (end == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (startindex < 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3955]) {
+      if ((startindex < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3955\n");
+      else
+        fprintf(stderr, "reached bug index 3955\n");
+    }
+    if ((!FIXREVERTER[3955] && (startindex < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (endindex < 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3956]) {
+      if ((endindex < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3956\n");
+      else
+        fprintf(stderr, "reached bug index 3956\n");
+    }
+    if ((!FIXREVERTER[3956] && (endindex < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlXPtrNewRangeInternal(start, startindex, end, endindex);
     xmlXPtrRangeCheckOrder(ret);
@@ -488,10 +747,40 @@ xmlXPathObjectPtr
 xmlXPtrNewRangeNodes(xmlNodePtr start, xmlNodePtr end) {
     xmlXPathObjectPtr ret;
 
-    if (start == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3963]) {
+      if ((start == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3963\n");
+      else
+        fprintf(stderr, "reached bug index 3963\n");
+    }
+    if ((!FIXREVERTER[3963] && (start == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (end == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3964]) {
+      if ((end == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3964\n");
+      else
+        fprintf(stderr, "reached bug index 3964\n");
+    }
+    if ((!FIXREVERTER[3964] && (end == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlXPtrNewRangeInternal(start, -1, end, -1);
     xmlXPtrRangeCheckOrder(ret);
@@ -510,8 +799,23 @@ xmlXPathObjectPtr
 xmlXPtrNewCollapsedRange(xmlNodePtr start) {
     xmlXPathObjectPtr ret;
 
-    if (start == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3965]) {
+      if ((start == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3965\n");
+      else
+        fprintf(stderr, "reached bug index 3965\n");
+    }
+    if ((!FIXREVERTER[3965] && (start == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlXPtrNewRangeInternal(start, -1, NULL, -1);
     return(ret);
@@ -532,10 +836,40 @@ xmlXPtrNewRangeNodeObject(xmlNodePtr start, xmlXPathObjectPtr end) {
     int endIndex;
     xmlXPathObjectPtr ret;
 
-    if (start == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3966]) {
+      if ((start == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3966\n");
+      else
+        fprintf(stderr, "reached bug index 3966\n");
+    }
+    if ((!FIXREVERTER[3966] && (start == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (end == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3967]) {
+      if ((end == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3967\n");
+      else
+        fprintf(stderr, "reached bug index 3967\n");
+    }
+    if ((!FIXREVERTER[3967] && (end == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     switch (end->type) {
 	case XPATH_POINT:
 	    endNode = end->user;
@@ -579,19 +913,49 @@ xmlXPtrLocationSetCreate(xmlXPathObjectPtr val) {
     xmlLocationSetPtr ret;
 
     ret = (xmlLocationSetPtr) xmlMalloc(sizeof(xmlLocationSet));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3968]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3968\n");
+      else
+        fprintf(stderr, "reached bug index 3968\n");
+    }
+    if ((!FIXREVERTER[3968] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPtrErrMemory("allocating locationset");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlLocationSet));
     if (val != NULL) {
         ret->locTab = (xmlXPathObjectPtr *) xmlMalloc(XML_RANGESET_DEFAULT *
 					     sizeof(xmlXPathObjectPtr));
-	if (ret->locTab == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3969]) {
+	  if ((ret -> locTab == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3969\n");
+	  else
+	    fprintf(stderr, "reached bug index 3969\n");
+	}
+	if ((!FIXREVERTER[3969] && (ret -> locTab == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPtrErrMemory("allocating locationset");
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(ret->locTab, 0 ,
 	       XML_RANGESET_DEFAULT * (size_t) sizeof(xmlXPathObjectPtr));
         ret->locMax = XML_RANGESET_DEFAULT;
@@ -612,7 +976,22 @@ void
 xmlXPtrLocationSetAdd(xmlLocationSetPtr cur, xmlXPathObjectPtr val) {
     int i;
 
-    if ((cur == NULL) || (val == NULL)) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3970]) {
+      if ((cur == (void *) 0 || val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3970\n");
+      else
+        fprintf(stderr, "reached bug index 3970\n");
+    }
+    if ((!FIXREVERTER[3970] && (cur == (void *) 0 || val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * check against doublons
@@ -630,10 +1009,25 @@ xmlXPtrLocationSetAdd(xmlLocationSetPtr cur, xmlXPathObjectPtr val) {
     if (cur->locMax == 0) {
         cur->locTab = (xmlXPathObjectPtr *) xmlMalloc(XML_RANGESET_DEFAULT *
 					     sizeof(xmlXPathObjectPtr));
-	if (cur->locTab == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3971]) {
+	  if ((cur -> locTab == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3971\n");
+	  else
+	    fprintf(stderr, "reached bug index 3971\n");
+	}
+	if ((!FIXREVERTER[3971] && (cur -> locTab == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPtrErrMemory("adding location to set");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(cur->locTab, 0 ,
 	       XML_RANGESET_DEFAULT * (size_t) sizeof(xmlXPathObjectPtr));
         cur->locMax = XML_RANGESET_DEFAULT;
@@ -643,10 +1037,25 @@ xmlXPtrLocationSetAdd(xmlLocationSetPtr cur, xmlXPathObjectPtr val) {
         cur->locMax *= 2;
 	temp = (xmlXPathObjectPtr *) xmlRealloc(cur->locTab, cur->locMax *
 				      sizeof(xmlXPathObjectPtr));
-	if (temp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3972]) {
+	  if ((temp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3972\n");
+	  else
+	    fprintf(stderr, "reached bug index 3972\n");
+	}
+	if ((!FIXREVERTER[3972] && (temp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPtrErrMemory("adding location to set");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	cur->locTab = temp;
     }
     cur->locTab[cur->locNr++] = val;
@@ -665,8 +1074,38 @@ xmlLocationSetPtr
 xmlXPtrLocationSetMerge(xmlLocationSetPtr val1, xmlLocationSetPtr val2) {
     int i;
 
-    if (val1 == NULL) return(NULL);
-    if (val2 == NULL) return(val1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3973]) {
+      if ((val1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3973\n");
+      else
+        fprintf(stderr, "reached bug index 3973\n");
+    }
+    if ((!FIXREVERTER[3973] && (val1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3974]) {
+      if ((val2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3974\n");
+      else
+        fprintf(stderr, "reached bug index 3974\n");
+    }
+    if ((!FIXREVERTER[3974] && (val2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(val1);
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * !!!!! this can be optimized a lot, knowing that both
@@ -739,7 +1178,22 @@ void
 xmlXPtrFreeLocationSet(xmlLocationSetPtr obj) {
     int i;
 
-    if (obj == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3980]) {
+      if ((obj == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3980\n");
+      else
+        fprintf(stderr, "reached bug index 3980\n");
+    }
+    if ((!FIXREVERTER[3980] && (obj == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (obj->locTab != NULL) {
 	for (i = 0;i < obj->locNr; i++) {
             xmlXPathFreeObject(obj->locTab[i]);
@@ -764,10 +1218,25 @@ xmlXPtrNewLocationSetNodes(xmlNodePtr start, xmlNodePtr end) {
     xmlXPathObjectPtr ret;
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3981]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3981\n");
+      else
+        fprintf(stderr, "reached bug index 3981\n");
+    }
+    if ((!FIXREVERTER[3981] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPtrErrMemory("allocating locationset");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));
     ret->type = XPATH_LOCATIONSET;
     if (end == NULL)
@@ -791,10 +1260,25 @@ xmlXPtrNewLocationSetNodeSet(xmlNodeSetPtr set) {
     xmlXPathObjectPtr ret;
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3982]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3982\n");
+      else
+        fprintf(stderr, "reached bug index 3982\n");
+    }
+    if ((!FIXREVERTER[3982] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPtrErrMemory("allocating locationset");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));
     ret->type = XPATH_LOCATIONSET;
     if (set != NULL) {
@@ -802,8 +1286,23 @@ xmlXPtrNewLocationSetNodeSet(xmlNodeSetPtr set) {
 	xmlLocationSetPtr newset;
 
 	newset = xmlXPtrLocationSetCreate(NULL);
-	if (newset == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3983]) {
+	  if ((newset == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3983\n");
+	  else
+	    fprintf(stderr, "reached bug index 3983\n");
+	}
+	if ((!FIXREVERTER[3983] && (newset == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(ret);
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	for (i = 0;i < set->nodeNr;i++)
 	    xmlXPtrLocationSetAdd(newset,
@@ -827,10 +1326,25 @@ xmlXPtrWrapLocationSet(xmlLocationSetPtr val) {
     xmlXPathObjectPtr ret;
 
     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3984]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3984\n");
+      else
+        fprintf(stderr, "reached bug index 3984\n");
+    }
+    if ((!FIXREVERTER[3984] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPtrErrMemory("allocating locationset");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));
     ret->type = XPATH_LOCATIONSET;
     ret->user = (void *) val;
@@ -896,17 +1410,47 @@ xmlXPtrGetChildNo(xmlXPathParserContextPtr ctxt, int indx) {
     CHECK_TYPE(XPATH_NODESET);
     obj = valuePop(ctxt);
     oldset = obj->nodesetval;
-    if ((indx <= 0) || (oldset == NULL) || (oldset->nodeNr != 1)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3985]) {
+      if ((oldset == (void *) 0 || oldset -> nodeNr != 1 ) && !(indx <= 0 ))
+        fprintf(stderr, "triggered bug index 3985\n");
+      else
+        fprintf(stderr, "reached bug index 3985\n");
+    }
+    if ((FIXREVERTER[3985] && (indx <= 0 )) || (!FIXREVERTER[3985] && (indx <= 0 || oldset == (void *) 0 || oldset -> nodeNr != 1 ))
+    #else
+    if (indx <= 0 
+    #endif
+    ) {
 	xmlXPathFreeObject(obj);
 	valuePush(ctxt, xmlXPathNewNodeSet(NULL));
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur = xmlXPtrGetNthChild(oldset->nodeTab[0], indx);
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3986]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3986\n");
+      else
+        fprintf(stderr, "reached bug index 3986\n");
+    }
+    if ((!FIXREVERTER[3986] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlXPathFreeObject(obj);
 	valuePush(ctxt, xmlXPathNewNodeSet(NULL));
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     oldset->nodeTab[0] = cur;
     valuePush(ctxt, obj);
 }
@@ -951,10 +1495,40 @@ xmlXPtrEvalXPtrPart(xmlXPathParserContextPtr ctxt, xmlChar *name) {
     int len;
     int level;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3987]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3987\n");
+      else
+        fprintf(stderr, "reached bug index 3987\n");
+    }
+    if ((!FIXREVERTER[3987] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
     name = xmlXPathParseName(ctxt);
-    if (name == NULL)
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3988]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3988\n");
+      else
+        fprintf(stderr, "reached bug index 3988\n");
+    }
+    if ((!FIXREVERTER[3988] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	XP_ERROR(XPATH_EXPR_ERROR);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (CUR != '(') {
         xmlFree(name);
@@ -966,11 +1540,26 @@ xmlXPtrEvalXPtrPart(xmlXPathParserContextPtr ctxt, xmlChar *name) {
     len = xmlStrlen(ctxt->cur);
     len++;
     buffer = (xmlChar *) xmlMallocAtomic(len * sizeof (xmlChar));
-    if (buffer == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3989]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3989\n");
+      else
+        fprintf(stderr, "reached bug index 3989\n");
+    }
+    if ((!FIXREVERTER[3989] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlXPtrErrMemory("allocating buffer");
         xmlFree(name);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     cur = buffer;
     while (CUR != 0) {
@@ -1115,10 +1704,40 @@ xmlXPtrEvalXPtrPart(xmlXPathParserContextPtr ctxt, xmlChar *name) {
  */
 static void
 xmlXPtrEvalFullXPtr(xmlXPathParserContextPtr ctxt, xmlChar *name) {
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3991]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3991\n");
+      else
+        fprintf(stderr, "reached bug index 3991\n");
+    }
+    if ((!FIXREVERTER[3991] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
     name = xmlXPathParseName(ctxt);
-    if (name == NULL)
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3992]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3992\n");
+      else
+        fprintf(stderr, "reached bug index 3992\n");
+    }
+    if ((!FIXREVERTER[3992] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	XP_ERROR(XPATH_EXPR_ERROR);
+	#ifdef FRCOV
+	}
+	#endif
     while (name != NULL) {
 	ctxt->error = XPATH_EXPRESSION_OK;
 	xmlXPtrEvalXPtrPart(ctxt, name);
@@ -1240,10 +1859,25 @@ xmlXPtrEvalXPointer(xmlXPathParserContextPtr ctxt) {
 	/* Allocate the value stack */
 	ctxt->valueTab = (xmlXPathObjectPtr *)
 			 xmlMalloc(10 * sizeof(xmlXPathObjectPtr));
-	if (ctxt->valueTab == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3993]) {
+	  if ((ctxt -> valueTab == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3993\n");
+	  else
+	    fprintf(stderr, "reached bug index 3993\n");
+	}
+	if ((!FIXREVERTER[3993] && (ctxt -> valueTab == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlXPtrErrMemory("allocating evaluation context");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->valueNr = 0;
 	ctxt->valueMax = 10;
 	ctxt->value = NULL;
@@ -1257,8 +1891,23 @@ xmlXPtrEvalXPointer(xmlXPathParserContextPtr ctxt) {
 	xmlChar *name;
 
 	name = xmlXPathParseName(ctxt);
-	if (name == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3994]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3994\n");
+	  else
+	    fprintf(stderr, "reached bug index 3994\n");
+	}
+	if ((!FIXREVERTER[3994] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    XP_ERROR(XPATH_EXPR_ERROR);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (CUR == '(') {
 	    xmlXPtrEvalFullXPtr(ctxt, name);
 	    /* Short evaluation */
@@ -1311,8 +1960,23 @@ xmlXPtrNewContext(xmlDocPtr doc, xmlNodePtr here, xmlNodePtr origin) {
     xmlXPathContextPtr ret;
 
     ret = xmlXPathNewContext(doc);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3995]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3995\n");
+      else
+        fprintf(stderr, "reached bug index 3995\n");
+    }
+    if ((!FIXREVERTER[3995] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(ret);
+	#ifdef FRCOV
+	}
+	#endif
     ret->xptr = 1;
     ret->here = here;
     ret->origin = origin;
@@ -1354,12 +2018,42 @@ xmlXPtrEval(const xmlChar *str, xmlXPathContextPtr ctx) {
 
     xmlXPathInit();
 
-    if ((ctx == NULL) || (str == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3996]) {
+      if ((ctx == (void *) 0 || str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3996\n");
+      else
+        fprintf(stderr, "reached bug index 3996\n");
+    }
+    if ((!FIXREVERTER[3996] && (ctx == (void *) 0 || str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ctxt = xmlXPathNewParserContext(str, ctx);
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3997]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3997\n");
+      else
+        fprintf(stderr, "reached bug index 3997\n");
+    }
+    if ((!FIXREVERTER[3997] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ctxt->xptr = 1;
     xmlXPtrEvalXPointer(ctxt);
 
@@ -1685,8 +2379,23 @@ xmlXPtrBuildNodeList(xmlXPathObjectPtr obj) {
 static int
 xmlXPtrNbLocChildren(xmlNodePtr node) {
     int ret = 0;
-    if (node == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4005]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4005\n");
+      else
+        fprintf(stderr, "reached bug index 4005\n");
+    }
+    if ((!FIXREVERTER[4005] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     switch (node->type) {
         case XML_HTML_DOCUMENT_NODE:
         case XML_DOCUMENT_NODE:
@@ -1792,8 +2501,23 @@ xmlXPtrStartPointFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 	 */
 	tmp = xmlXPtrNewLocationSetNodeSet(obj->nodesetval);
 	xmlXPathFreeObject(obj);
-	if (tmp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4006]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4006\n");
+	  else
+	    fprintf(stderr, "reached bug index 4006\n");
+	}
+	if ((!FIXREVERTER[4006] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
             XP_ERROR(XPATH_MEMORY_ERROR)
+            #ifdef FRCOV
+            }
+            #endif
 	obj = tmp;
     }
 
@@ -1808,8 +2532,23 @@ xmlXPtrStartPointFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 
 	for (i = 0; i < oldset->locNr; i++) {
 	    tmp = oldset->locTab[i];
-	    if (tmp == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4007]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4007\n");
+	      else
+	        fprintf(stderr, "reached bug index 4007\n");
+	    }
+	    if ((!FIXREVERTER[4007] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    point = NULL;
 	    switch (tmp->type) {
 		case XPATH_POINT:
@@ -1888,8 +2627,23 @@ xmlXPtrEndPointFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 	 */
 	tmp = xmlXPtrNewLocationSetNodeSet(obj->nodesetval);
 	xmlXPathFreeObject(obj);
-	if (tmp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4008]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4008\n");
+	  else
+	    fprintf(stderr, "reached bug index 4008\n");
+	}
+	if ((!FIXREVERTER[4008] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
             XP_ERROR(XPATH_MEMORY_ERROR)
+            #ifdef FRCOV
+            }
+            #endif
 	obj = tmp;
     }
 
@@ -1904,8 +2658,23 @@ xmlXPtrEndPointFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 
 	for (i = 0; i < oldset->locNr; i++) {
 	    tmp = oldset->locTab[i];
-	    if (tmp == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4009]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4009\n");
+	      else
+	        fprintf(stderr, "reached bug index 4009\n");
+	    }
+	    if ((!FIXREVERTER[4009] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    point = NULL;
 	    switch (tmp->type) {
 		case XPATH_POINT:
@@ -1957,8 +2726,23 @@ xmlXPtrEndPointFunction(xmlXPathParserContextPtr ctxt, int nargs) {
  */
 static xmlXPathObjectPtr
 xmlXPtrCoveringRange(xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr loc) {
-    if (loc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4010]) {
+      if ((loc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4010\n");
+      else
+        fprintf(stderr, "reached bug index 4010\n");
+    }
+    if ((!FIXREVERTER[4010] && (loc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((ctxt == NULL) || (ctxt->context == NULL) ||
 	(ctxt->context->doc == NULL))
 	return(NULL);
@@ -2042,8 +2826,23 @@ xmlXPtrRangeFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 	 */
 	tmp = xmlXPtrNewLocationSetNodeSet(set->nodesetval);
 	xmlXPathFreeObject(set);
-	if (tmp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4011]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4011\n");
+	  else
+	    fprintf(stderr, "reached bug index 4011\n");
+	}
+	if ((!FIXREVERTER[4011] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
             XP_ERROR(XPATH_MEMORY_ERROR)
+            #ifdef FRCOV
+            }
+            #endif
 	set = tmp;
     }
     oldset = (xmlLocationSetPtr) set->user;
@@ -2081,8 +2880,23 @@ xmlXPtrRangeFunction(xmlXPathParserContextPtr ctxt, int nargs) {
  */
 static xmlXPathObjectPtr
 xmlXPtrInsideRange(xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr loc) {
-    if (loc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4012]) {
+      if ((loc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4012\n");
+      else
+        fprintf(stderr, "reached bug index 4012\n");
+    }
+    if ((!FIXREVERTER[4012] && (loc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((ctxt == NULL) || (ctxt->context == NULL) ||
 	(ctxt->context->doc == NULL))
 	return(NULL);
@@ -2196,8 +3010,23 @@ xmlXPtrRangeInsideFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 	 */
 	tmp = xmlXPtrNewLocationSetNodeSet(set->nodesetval);
 	xmlXPathFreeObject(set);
-	if (tmp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4013]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4013\n");
+	  else
+	    fprintf(stderr, "reached bug index 4013\n");
+	}
+	if ((!FIXREVERTER[4013] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	     XP_ERROR(XPATH_MEMORY_ERROR)
+	     #ifdef FRCOV
+	     }
+	     #endif
 	set = tmp;
     }
     oldset = (xmlLocationSetPtr) set->user;
@@ -2268,7 +3097,22 @@ skip:		/* This label should only be needed if something is wrong! */
         cur = cur->parent;
 	if (level != NULL)
 	    (*level)--;
-        if (cur == NULL) return(NULL);
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4014]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4014\n");
+          else
+            fprintf(stderr, "reached bug index 4014\n");
+        }
+        if ((!FIXREVERTER[4014] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
         if (cur->next != NULL) {
 	    cur = cur->next;
 	    goto found;
@@ -2306,8 +3150,23 @@ xmlXPtrAdvanceChar(xmlNodePtr *node, int *indx, int bytes) {
     int pos;
     int len;
 
-    if ((node == NULL) || (indx == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4015]) {
+      if ((node == (void *) 0 || indx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4015\n");
+      else
+        fprintf(stderr, "reached bug index 4015\n");
+    }
+    if ((!FIXREVERTER[4015] && (node == (void *) 0 || indx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     cur = *node;
     if ((cur == NULL) || (cur->type == XML_NAMESPACE_DECL))
 	return(-1);
@@ -2331,21 +3190,66 @@ xmlXPtrAdvanceChar(xmlNodePtr *node, int *indx, int bytes) {
 	    }
 	}
 
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4016]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4016\n");
+	  else
+	    fprintf(stderr, "reached bug index 4016\n");
+	}
+	if ((!FIXREVERTER[4016] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    *node = NULL;
 	    *indx = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	/*
 	 * if there is no move needed return the current value.
 	 */
-	if (pos == 0) pos = 1;
-	if (bytes == 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4017]) {
+	  if ((pos == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4017\n");
+	  else
+	    fprintf(stderr, "reached bug index 4017\n");
+	}
+	if ((!FIXREVERTER[4017] && (pos == 0 ))
+	#else
+	if (0
+	#endif
+	) pos = 1;
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4018]) {
+	  if ((bytes == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4018\n");
+	  else
+	    fprintf(stderr, "reached bug index 4018\n");
+	}
+	if ((!FIXREVERTER[4018] && (bytes == 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    *node = cur;
 	    *indx = pos;
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	 * We should have a text (or cdata) node ...
 	 */
@@ -2398,8 +3302,23 @@ xmlXPtrMatchString(const xmlChar *string, xmlNodePtr start, int startindex,
     int stringlen; /* in bytes */
     int match;
 
-    if (string == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4019]) {
+      if ((string == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4019\n");
+      else
+        fprintf(stderr, "reached bug index 4019\n");
+    }
+    if ((!FIXREVERTER[4019] && (string == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if ((start == NULL) || (start->type == XML_NAMESPACE_DECL))
 	return(-1);
     if ((end == NULL) || (*end == NULL) ||
@@ -2450,8 +3369,23 @@ xmlXPtrMatchString(const xmlChar *string, xmlNodePtr start, int startindex,
 	    }
 	}
 	cur = xmlXPtrAdvanceNode(cur, NULL);
-	if (cur == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4020]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4020\n");
+	  else
+	    fprintf(stderr, "reached bug index 4020\n");
+	}
+	if ((!FIXREVERTER[4020] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	pos = 0;
     }
     return(1);
@@ -2482,13 +3416,43 @@ xmlXPtrSearchString(const xmlChar *string, xmlNodePtr *start, int *startindex,
     int len; /* in bytes */
     xmlChar first;
 
-    if (string == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4021]) {
+      if ((string == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4021\n");
+      else
+        fprintf(stderr, "reached bug index 4021\n");
+    }
+    if ((!FIXREVERTER[4021] && (string == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if ((start == NULL) || (*start == NULL) ||
         ((*start)->type == XML_NAMESPACE_DECL) || (startindex == NULL))
 	return(-1);
-    if ((end == NULL) || (endindex == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4022]) {
+      if ((end == (void *) 0 || endindex == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4022\n");
+      else
+        fprintf(stderr, "reached bug index 4022\n");
+    }
+    if ((!FIXREVERTER[4022] && (end == (void *) 0 || endindex == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     cur = *start;
     pos = *startindex - 1;
     first = string[0];
@@ -2542,8 +3506,23 @@ xmlXPtrSearchString(const xmlChar *string, xmlNodePtr *start, int *startindex,
 	if ((cur == *end) && (pos >= *endindex))
 	    return(0);
 	cur = xmlXPtrAdvanceNode(cur, NULL);
-	if (cur == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4023]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4023\n");
+	  else
+	    fprintf(stderr, "reached bug index 4023\n");
+	}
+	if ((!FIXREVERTER[4023] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	pos = 1;
     }
     return(0);
@@ -2587,8 +3566,23 @@ xmlXPtrGetLastChar(xmlNodePtr *node, int *indx) {
 	    return(-1);
 	}
     }
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4024]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4024\n");
+      else
+        fprintf(stderr, "reached bug index 4024\n");
+    }
+    if ((!FIXREVERTER[4024] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     *node = cur;
     *indx = len;
     return(0);
@@ -2606,8 +3600,23 @@ xmlXPtrGetLastChar(xmlNodePtr *node, int *indx) {
  */
 static int
 xmlXPtrGetStartPoint(xmlXPathObjectPtr obj, xmlNodePtr *node, int *indx) {
-    if ((obj == NULL) || (node == NULL) || (indx == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4025]) {
+      if ((obj == (void *) 0 || node == (void *) 0 || indx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4025\n");
+      else
+        fprintf(stderr, "reached bug index 4025\n");
+    }
+    if ((!FIXREVERTER[4025] && (obj == (void *) 0 || node == (void *) 0 || indx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     switch (obj->type) {
         case XPATH_POINT:
@@ -2642,8 +3651,23 @@ xmlXPtrGetStartPoint(xmlXPathObjectPtr obj, xmlNodePtr *node, int *indx) {
  */
 static int
 xmlXPtrGetEndPoint(xmlXPathObjectPtr obj, xmlNodePtr *node, int *indx) {
-    if ((obj == NULL) || (node == NULL) || (indx == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4026]) {
+      if ((obj == (void *) 0 || node == (void *) 0 || indx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4026\n");
+      else
+        fprintf(stderr, "reached bug index 4026\n");
+    }
+    if ((!FIXREVERTER[4026] && (obj == (void *) 0 || node == (void *) 0 || indx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     switch (obj->type) {
         case XPATH_POINT:
@@ -2723,14 +3747,44 @@ xmlXPtrStringRangeFunction(xmlXPathParserContextPtr ctxt, int nargs) {
     if (nargs >= 4) {
 	CHECK_TYPE(XPATH_NUMBER);
 	number = valuePop(ctxt);
-	if (number != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4028]) {
+	  if ((number != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4028\n");
+	  else
+	    fprintf(stderr, "reached bug index 4028\n");
+	}
+	if ((!FIXREVERTER[4028] && (number != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    num = (int) number->floatval;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     if (nargs >= 3) {
 	CHECK_TYPE(XPATH_NUMBER);
 	position = valuePop(ctxt);
-	if (position != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4029]) {
+	  if ((position != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4029\n");
+	  else
+	    fprintf(stderr, "reached bug index 4029\n");
+	}
+	if ((!FIXREVERTER[4029] && (position != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    pos = (int) position->floatval;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     CHECK_TYPE(XPATH_STRING);
     string = valuePop(ctxt);
@@ -2745,9 +3799,24 @@ xmlXPtrStringRangeFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 	xmlXPathFreeObject(set);
         XP_ERROR(XPATH_MEMORY_ERROR);
     }
-    if (set->nodesetval == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4030]) {
+      if ((set -> nodesetval == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4030\n");
+      else
+        fprintf(stderr, "reached bug index 4030\n");
+    }
+    if ((!FIXREVERTER[4030] && (set -> nodesetval == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         goto error;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (set->type == XPATH_NODESET) {
 	xmlXPathObjectPtr tmp;
 
@@ -2756,8 +3825,23 @@ xmlXPtrStringRangeFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 	 */
 	tmp = xmlXPtrNewLocationSetNodeSet(set->nodesetval);
 	xmlXPathFreeObject(set);
-	if (tmp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4031]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4031\n");
+	  else
+	    fprintf(stderr, "reached bug index 4031\n");
+	}
+	if ((!FIXREVERTER[4031] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	     XP_ERROR(XPATH_MEMORY_ERROR)
+	     #ifdef FRCOV
+	     }
+	     #endif
 	set = tmp;
     }
     oldset = (xmlLocationSetPtr) set->user;
@@ -2808,7 +3892,22 @@ xmlXPtrStringRangeFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 					xmlXPtrNewRange(start, startindex,
 							rend, rindx));
 			}
-		    } else if ((number != NULL) && (num <= 0)) {
+		    } else 
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4032]) {
+		      fprintf(stderr, "reached bug index 4032\n");
+		    }
+		    if ((FIXREVERTER[4032] && (num <= 0 )) || (!FIXREVERTER[4032] && (number != (void *) 0 && num <= 0 ))
+		    #else
+		    if (num <= 0 
+		    #endif
+		    ) {
+		      
+		    #ifdef FRCOV
+		      if (!(number != (void *) 0 ))
+		        fprintf(stderr, "triggered bug index 4032\n");
+		      #endif
+		    
 			xmlXPtrLocationSetAdd(newset,
 				    xmlXPtrNewRange(start, startindex,
 						    start, startindex));
@@ -2817,6 +3916,9 @@ xmlXPtrStringRangeFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 				    xmlXPtrNewRange(start, startindex,
 						    fend, fendindex));
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		}
 		start = fend;
 		startindex = fendindex;
diff --git a/xstc/Makefile.am b/xstc/Makefile.am
old mode 100644
new mode 100755
diff --git a/xzlib.c b/xzlib.c
old mode 100644
new mode 100755
diff --git a/xzlib.h b/xzlib.h
old mode 100644
new mode 100755
