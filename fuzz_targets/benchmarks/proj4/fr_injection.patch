diff --git a/src/PJ_aea.c b/src/PJ_aea.c
index 303a319..d82f94c 100644
--- a/src/PJ_aea.c
+++ b/src/PJ_aea.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Implementation of the aea (Albers Equal Area) projection.
@@ -80,11 +84,41 @@ struct pj_opaque {
 
 
 static void *freeup_new (PJ *P) {                        /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[226]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 226\n");
+      else
+        fprintf(stderr, "reached bug index 226\n");
+    }
+    if ((!FIXREVERTER[226] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[227]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 227\n");
+      else
+        fprintf(stderr, "reached bug index 227\n");
+    }
+    if ((!FIXREVERTER[227] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque->en);
     pj_dealloc (P->opaque);
diff --git a/src/PJ_aeqd.c b/src/PJ_aeqd.c
index 4a46cf1..b52678a 100644
--- a/src/PJ_aeqd.c
+++ b/src/PJ_aeqd.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Implementation of the aeqd (Azimuthal Equidistant) projection.
@@ -55,10 +59,40 @@ PROJ_HEAD(aeqd, "Azimuthal Equidistant") "\n\tAzi, Sph&Ell\n\tlat_0 guam";
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[36]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 36\n");
+      else
+        fprintf(stderr, "reached bug index 36\n");
+    }
+    if ((!FIXREVERTER[36] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[37]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 37\n");
+      else
+        fprintf(stderr, "reached bug index 37\n");
+    }
+    if ((!FIXREVERTER[37] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (P->opaque->en)
         pj_dealloc(P->opaque->en);
diff --git a/src/PJ_airy.c b/src/PJ_airy.c
index 2c58bb7..6a6355f 100644
--- a/src/PJ_airy.c
+++ b/src/PJ_airy.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Implementation of the airy (Airy) projection.
@@ -105,10 +109,40 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[177]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 177\n");
+      else
+        fprintf(stderr, "reached bug index 177\n");
+    }
+    if ((!FIXREVERTER[177] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[178]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 178\n");
+      else
+        fprintf(stderr, "reached bug index 178\n");
+    }
+    if ((!FIXREVERTER[178] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_aitoff.c b/src/PJ_aitoff.c
index 8b1d7f9..1294a68 100644
--- a/src/PJ_aitoff.c
+++ b/src/PJ_aitoff.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Implementation of the aitoff (Aitoff) and wintri (Winkel Tripel)
@@ -154,10 +158,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                        /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[97]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 97\n");
+      else
+        fprintf(stderr, "reached bug index 97\n");
+    }
+    if ((!FIXREVERTER[97] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[98]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 98\n");
+      else
+        fprintf(stderr, "reached bug index 98\n");
+    }
+    if ((!FIXREVERTER[98] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_bacon.c b/src/PJ_bacon.c
index a9c6da4..ef9555f 100644
--- a/src/PJ_bacon.c
+++ b/src/PJ_bacon.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 # define HLFPI2	2.46740110027233965467      /* (pi/2)^2 */
 # define EPS	1e-10
 #define PJ_LIB__
@@ -35,10 +39,40 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[8]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 8\n");
+      else
+        fprintf(stderr, "reached bug index 8\n");
+    }
+    if ((!FIXREVERTER[8] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[9]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 9\n");
+      else
+        fprintf(stderr, "reached bug index 9\n");
+    }
+    if ((!FIXREVERTER[9] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_bipc.c b/src/PJ_bipc.c
index 97284fc..f8da736 100644
--- a/src/PJ_bipc.c
+++ b/src/PJ_bipc.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -157,8 +161,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                        /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[244]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 244\n");
+      else
+        fprintf(stderr, "reached bug index 244\n");
+    }
+    if ((!FIXREVERTER[244] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
 }
diff --git a/src/PJ_bonne.c b/src/PJ_bonne.c
index 2a576c6..7aef377 100644
--- a/src/PJ_bonne.c
+++ b/src/PJ_bonne.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -84,10 +88,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                        /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[197]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 197\n");
+      else
+        fprintf(stderr, "reached bug index 197\n");
+    }
+    if ((!FIXREVERTER[197] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[198]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 198\n");
+      else
+        fprintf(stderr, "reached bug index 198\n");
+    }
+    if ((!FIXREVERTER[198] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque->en);
     pj_dealloc (P->opaque);
diff --git a/src/PJ_cass.c b/src/PJ_cass.c
index 8528020..097863d 100644
--- a/src/PJ_cass.c
+++ b/src/PJ_cass.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 # include   <projects.h>
 PROJ_HEAD(cass, "Cassini") "\n\tCyl, Sph&Ell";
@@ -79,10 +83,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new(PJ *P) {                        /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[84]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 84\n");
+      else
+        fprintf(stderr, "reached bug index 84\n");
+    }
+    if ((!FIXREVERTER[84] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[85]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 85\n");
+      else
+        fprintf(stderr, "reached bug index 85\n");
+    }
+    if ((!FIXREVERTER[85] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc(P->opaque->en);
     pj_dealloc(P->opaque);
diff --git a/src/PJ_cea.c b/src/PJ_cea.c
index 20f0354..26a9400 100644
--- a/src/PJ_cea.c
+++ b/src/PJ_cea.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -54,10 +58,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 2\n");
+      else
+        fprintf(stderr, "reached bug index 2\n");
+    }
+    if ((!FIXREVERTER[2] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 3\n");
+      else
+        fprintf(stderr, "reached bug index 3\n");
+    }
+    if ((!FIXREVERTER[3] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque->apa);
     pj_dealloc (P->opaque);
diff --git a/src/PJ_chamb.c b/src/PJ_chamb.c
index c6028a7..8596566 100644
--- a/src/PJ_chamb.c
+++ b/src/PJ_chamb.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -94,10 +98,40 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[257]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 257\n");
+      else
+        fprintf(stderr, "reached bug index 257\n");
+    }
+    if ((!FIXREVERTER[257] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[258]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 258\n");
+      else
+        fprintf(stderr, "reached bug index 258\n");
+    }
+    if ((!FIXREVERTER[258] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_eck3.c b/src/PJ_eck3.c
index 3fe5c49..c137be1 100644
--- a/src/PJ_eck3.c
+++ b/src/PJ_eck3.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -37,10 +41,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {               /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[245]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 245\n");
+      else
+        fprintf(stderr, "reached bug index 245\n");
+    }
+    if ((!FIXREVERTER[245] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[246]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 246\n");
+      else
+        fprintf(stderr, "reached bug index 246\n");
+    }
+    if ((!FIXREVERTER[246] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
 }
diff --git a/src/PJ_eck4.c b/src/PJ_eck4.c
index 358c022..8941af4 100644
--- a/src/PJ_eck4.c
+++ b/src/PJ_eck4.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include    <projects.h>
 
@@ -52,8 +56,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[196]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 196\n");
+      else
+        fprintf(stderr, "reached bug index 196\n");
+    }
+    if ((!FIXREVERTER[196] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     return pj_dealloc(P);
 }
 
diff --git a/src/PJ_eck5.c b/src/PJ_eck5.c
index 5fbdf7d..d48f41b 100644
--- a/src/PJ_eck5.c
+++ b/src/PJ_eck5.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -29,8 +33,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {              /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[21]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 21\n");
+      else
+        fprintf(stderr, "reached bug index 21\n");
+    }
+    if ((!FIXREVERTER[21] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     return pj_dealloc(P);
 }
 
diff --git a/src/PJ_eqc.c b/src/PJ_eqc.c
index 576e0e3..fe40e07 100644
--- a/src/PJ_eqc.c
+++ b/src/PJ_eqc.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -33,10 +37,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[249]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 249\n");
+      else
+        fprintf(stderr, "reached bug index 249\n");
+    }
+    if ((!FIXREVERTER[249] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[250]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 250\n");
+      else
+        fprintf(stderr, "reached bug index 250\n");
+    }
+    if ((!FIXREVERTER[250] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_eqdc.c b/src/PJ_eqdc.c
index eaf4db0..303c74b 100644
--- a/src/PJ_eqdc.c
+++ b/src/PJ_eqdc.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -67,10 +71,40 @@ static void special(LP lp, PJ *P, struct FACTORS *fac) {
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[183]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 183\n");
+      else
+        fprintf(stderr, "reached bug index 183\n");
+    }
+    if ((!FIXREVERTER[183] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[184]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 184\n");
+      else
+        fprintf(stderr, "reached bug index 184\n");
+    }
+    if ((!FIXREVERTER[184] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (P->opaque->en)
         pj_dealloc (P->opaque->en);
diff --git a/src/PJ_fahey.c b/src/PJ_fahey.c
index 4f4b92a..7e87fa2 100644
--- a/src/PJ_fahey.c
+++ b/src/PJ_fahey.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -30,8 +34,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[55]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 55\n");
+      else
+        fprintf(stderr, "reached bug index 55\n");
+    }
+    if ((!FIXREVERTER[55] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     return pj_dealloc(P);
 }
 
diff --git a/src/PJ_fouc_s.c b/src/PJ_fouc_s.c
index 32eeeb4..e34be2b 100644
--- a/src/PJ_fouc_s.c
+++ b/src/PJ_fouc_s.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -49,10 +53,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[217]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 217\n");
+      else
+        fprintf(stderr, "reached bug index 217\n");
+    }
+    if ((!FIXREVERTER[217] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[218]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 218\n");
+      else
+        fprintf(stderr, "reached bug index 218\n");
+    }
+    if ((!FIXREVERTER[218] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_gall.c b/src/PJ_gall.c
index bca36bc..ad8a8b1 100644
--- a/src/PJ_gall.c
+++ b/src/PJ_gall.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -32,8 +36,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {              /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[128]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 128\n");
+      else
+        fprintf(stderr, "reached bug index 128\n");
+    }
+    if ((!FIXREVERTER[128] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_geos.c b/src/PJ_geos.c
index b929c06..6d6c98a 100644
--- a/src/PJ_geos.c
+++ b/src/PJ_geos.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
 ** libproj -- library of cartographic projections
 **
@@ -190,10 +194,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[94]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 94\n");
+      else
+        fprintf(stderr, "reached bug index 94\n");
+    }
+    if ((!FIXREVERTER[94] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[95]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 95\n");
+      else
+        fprintf(stderr, "reached bug index 95\n");
+    }
+    if ((!FIXREVERTER[95] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_gins8.c b/src/PJ_gins8.c
index 48bdf3a..4c52fa8 100644
--- a/src/PJ_gins8.c
+++ b/src/PJ_gins8.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -23,8 +27,23 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {              /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[39]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 39\n");
+      else
+        fprintf(stderr, "reached bug index 39\n");
+    }
+    if ((!FIXREVERTER[39] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_gn_sinu.c b/src/PJ_gn_sinu.c
index 57bbecc..40a0fdf 100644
--- a/src/PJ_gn_sinu.c
+++ b/src/PJ_gn_sinu.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -87,14 +91,44 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_msg (PJ *P, int errlev) {         /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[63]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 63\n");
+      else
+        fprintf(stderr, "reached bug index 63\n");
+    }
+    if ((!FIXREVERTER[63] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (0!=P->ctx)
         pj_ctx_set_errno (P->ctx, errlev);
 
-    if (0==P->opaque)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[64]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 64\n");
+      else
+        fprintf(stderr, "reached bug index 64\n");
+    }
+    if ((!FIXREVERTER[64] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
@@ -102,10 +136,40 @@ static void *freeup_msg (PJ *P, int errlev) {         /* Destructor */
 
 
 static void *freeup_new (PJ *P) {              /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[65]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 65\n");
+      else
+        fprintf(stderr, "reached bug index 65\n");
+    }
+    if ((!FIXREVERTER[65] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[66]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 66\n");
+      else
+        fprintf(stderr, "reached bug index 66\n");
+    }
+    if ((!FIXREVERTER[66] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (P->opaque->en)
         pj_dalloc(P->opaque->en);
diff --git a/src/PJ_gnom.c b/src/PJ_gnom.c
index 099f32f..c179564 100644
--- a/src/PJ_gnom.c
+++ b/src/PJ_gnom.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -112,10 +116,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {              /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[48]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 48\n");
+      else
+        fprintf(stderr, "reached bug index 48\n");
+    }
+    if ((!FIXREVERTER[48] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[49]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 49\n");
+      else
+        fprintf(stderr, "reached bug index 49\n");
+    }
+    if ((!FIXREVERTER[49] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_goode.c b/src/PJ_goode.c
index fff12a7..08bcede 100644
--- a/src/PJ_goode.c
+++ b/src/PJ_goode.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -44,10 +48,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {              /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[135]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 135\n");
+      else
+        fprintf(stderr, "reached bug index 135\n");
+    }
+    if ((!FIXREVERTER[135] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[136]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 136\n");
+      else
+        fprintf(stderr, "reached bug index 136\n");
+    }
+    if ((!FIXREVERTER[136] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc(P);
+        #ifdef FRCOV
+        }
+        #endif
     if (P->opaque->sinu)
         pj_dealloc(P->opaque->sinu);
     if (P->opaque->moll)
diff --git a/src/PJ_gstmerc.c b/src/PJ_gstmerc.c
index a550ab2..7cbb7e5 100644
--- a/src/PJ_gstmerc.c
+++ b/src/PJ_gstmerc.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -47,10 +51,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {              /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[154]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 154\n");
+      else
+        fprintf(stderr, "reached bug index 154\n");
+    }
+    if ((!FIXREVERTER[154] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[155]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 155\n");
+      else
+        fprintf(stderr, "reached bug index 155\n");
+    }
+    if ((!FIXREVERTER[155] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_hammer.c b/src/PJ_hammer.c
index 5818239..9250184 100644
--- a/src/PJ_hammer.c
+++ b/src/PJ_hammer.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -44,10 +48,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {              /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[78]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 78\n");
+      else
+        fprintf(stderr, "reached bug index 78\n");
+    }
+    if ((!FIXREVERTER[78] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[79]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 79\n");
+      else
+        fprintf(stderr, "reached bug index 79\n");
+    }
+    if ((!FIXREVERTER[79] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_hatano.c b/src/PJ_hatano.c
index d75a96a..27a9813 100644
--- a/src/PJ_hatano.c
+++ b/src/PJ_hatano.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -72,8 +76,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[51]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 51\n");
+      else
+        fprintf(stderr, "reached bug index 51\n");
+    }
+    if ((!FIXREVERTER[51] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_healpix.c b/src/PJ_healpix.c
index ef53e58..671923b 100644
--- a/src/PJ_healpix.c
+++ b/src/PJ_healpix.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project: PROJ.4
  * Purpose: Implementation of the HEALPix and rHEALPix projections.
@@ -599,10 +603,40 @@ static LP e_rhealpix_inverse(XY xy, PJ *P) { /* ellipsoid */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[270]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 270\n");
+      else
+        fprintf(stderr, "reached bug index 270\n");
+    }
+    if ((!FIXREVERTER[270] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[271]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 271\n");
+      else
+        fprintf(stderr, "reached bug index 271\n");
+    }
+    if ((!FIXREVERTER[271] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (P->opaque->apa)
         pj_dealloc(P->opaque->apa);
diff --git a/src/PJ_helmert.c b/src/PJ_helmert.c
index e291c18..8a1ebd6 100644
--- a/src/PJ_helmert.c
+++ b/src/PJ_helmert.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /***********************************************************************
 
              3-, 4-and 7-parameter shifts, and their 6-, 8-
@@ -57,14 +61,44 @@ static LPZ helmert_reverse_3d (XYZ xyz, PJ *P);
 
 
 static void *freeup_msg (PJ *P, int errlev) {         /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[228]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 228\n");
+      else
+        fprintf(stderr, "reached bug index 228\n");
+    }
+    if ((!FIXREVERTER[228] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (0!=P->ctx)
         pj_ctx_set_errno (P->ctx, errlev);
 
-    if (0==P->opaque)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[229]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 229\n");
+      else
+        fprintf(stderr, "reached bug index 229\n");
+    }
+    if ((!FIXREVERTER[229] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_hgridshift.c b/src/PJ_hgridshift.c
index 41c2b62..49cd01b 100644
--- a/src/PJ_hgridshift.c
+++ b/src/PJ_hgridshift.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include "proj_internal.h"
 #include <projects.h>
@@ -5,8 +9,23 @@
 PROJ_HEAD(hgridshift, "Horizontal grid shift");
 
 static void *freeup_msg (PJ *P, int errlev) {
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[181]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 181\n");
+      else
+        fprintf(stderr, "reached bug index 181\n");
+    }
+    if ((!FIXREVERTER[181] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (0!=P->ctx)
         pj_ctx_set_errno (P->ctx, errlev);
diff --git a/src/PJ_horner.c b/src/PJ_horner.c
index 56980f7..d356c43 100644
--- a/src/PJ_horner.c
+++ b/src/PJ_horner.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include "proj_internal.h"
 #include <projects.h>
@@ -138,8 +142,23 @@ static HORNER *horner_alloc (size_t order, int complex_polynomia) {
     int polynomia_ok = 0;
     HORNER *h = horner_calloc (1, sizeof (HORNER));
 
-    if (0==h)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[88]) {
+      if ((0 == h ) && !(0))
+        fprintf(stderr, "triggered bug index 88\n");
+      else
+        fprintf(stderr, "reached bug index 88\n");
+    }
+    if ((!FIXREVERTER[88] && (0 == h ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (complex_polynomia)
         n = 2*(int)order + 2;
@@ -221,8 +240,23 @@ summing the tiny high order elements first.
     UV uv_error;
     uv_error.u = uv_error.v = HUGE_VAL;
 
-    if (0==transformation)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[89]) {
+      if ((0 == transformation ) && !(0))
+        fprintf(stderr, "triggered bug index 89\n");
+      else
+        fprintf(stderr, "reached bug index 89\n");
+    }
+    if ((!FIXREVERTER[89] && (0 == transformation ))
+    #else
+    if (0
+    #endif
+    )
         return uv_error;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* Check for valid value of direction (-1, 0, 1) */
     switch (direction) {
@@ -317,8 +351,23 @@ polynomial evaluation engine.
     UV uv_error;
     uv_error.u = uv_error.v = HUGE_VAL;
 
-    if (0==transformation)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[90]) {
+      if ((0 == transformation ) && !(0))
+        fprintf(stderr, "triggered bug index 90\n");
+      else
+        fprintf(stderr, "reached bug index 90\n");
+    }
+    if ((!FIXREVERTER[90] && (0 == transformation ))
+    #else
+    if (0
+    #endif
+    )
         return uv_error;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* Check for valid value of direction (-1, 0, 1) */
     switch (direction) {
@@ -381,10 +430,40 @@ static PJ_OBS complex_horner_reverse_obs (PJ_OBS point, PJ *P) {
 
 
 static void *horner_freeup (PJ *P) {                        /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[91]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 91\n");
+      else
+        fprintf(stderr, "reached bug index 91\n");
+    }
+    if ((!FIXREVERTER[91] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[92]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 92\n");
+      else
+        fprintf(stderr, "reached bug index 92\n");
+    }
+    if ((!FIXREVERTER[92] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
     horner_free ((HORNER *) P->opaque);
     return pj_dealloc(P);
 }
@@ -400,10 +479,25 @@ static int parse_coefs (PJ *P, double *coefs, char *param, int ncoefs) {
     int i;
 
     buf = pj_calloc (strlen (param) + 2, sizeof(char));
-    if (0==buf) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[93]) {
+      if ((0 == buf ) && !(0))
+        fprintf(stderr, "triggered bug index 93\n");
+      else
+        fprintf(stderr, "reached bug index 93\n");
+    }
+    if ((!FIXREVERTER[93] && (0 == buf ))
+    #else
+    if (0
+    #endif
+    ) {
         proj_log_error (P, "Horner: Out of core");
         return 0;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     sprintf (buf, "t%s", param);
     if (0==pj_param (P->ctx, P->params, buf).i)
diff --git a/src/PJ_igh.c b/src/PJ_igh.c
index 9b5f707..b9e3e4d 100644
--- a/src/PJ_igh.c
+++ b/src/PJ_igh.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include "projects.h"
 
@@ -132,10 +136,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
     int i;
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[26]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 26\n");
+      else
+        fprintf(stderr, "reached bug index 26\n");
+    }
+    if ((!FIXREVERTER[26] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[27]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 27\n");
+      else
+        fprintf(stderr, "reached bug index 27\n");
+    }
+    if ((!FIXREVERTER[27] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     for (i = 0; i < 12; ++i) {
         if (P->opaque->pj[i])
diff --git a/src/PJ_imw_p.c b/src/PJ_imw_p.c
index 0b2a660..c260e68 100644
--- a/src/PJ_imw_p.c
+++ b/src/PJ_imw_p.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -131,10 +135,40 @@ static void xy(PJ *P, double phi, double *x, double *y, double *sp, double *R) {
 
 
 static void *freeup_new (PJ *P) {              /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[28]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 28\n");
+      else
+        fprintf(stderr, "reached bug index 28\n");
+    }
+    if ((!FIXREVERTER[28] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[29]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 29\n");
+      else
+        fprintf(stderr, "reached bug index 29\n");
+    }
+    if ((!FIXREVERTER[29] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     if( P->opaque->en )
         pj_dealloc (P->opaque->en);
diff --git a/src/PJ_isea.c b/src/PJ_isea.c
index deaecb0..a63326b 100644
--- a/src/PJ_isea.c
+++ b/src/PJ_isea.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * This code was entirely written by Nathan Wagner
  * and is in the public domain.
@@ -1063,10 +1067,40 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[239]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 239\n");
+      else
+        fprintf(stderr, "reached bug index 239\n");
+    }
+    if ((!FIXREVERTER[239] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[240]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 240\n");
+      else
+        fprintf(stderr, "reached bug index 240\n");
+    }
+    if ((!FIXREVERTER[240] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_krovak.c b/src/PJ_krovak.c
index bee66b0..c947f3c 100644
--- a/src/PJ_krovak.c
+++ b/src/PJ_krovak.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
  /*
  * Project:  PROJ.4
  * Purpose:  Implementation of the krovak (Krovak) projection.
@@ -174,10 +178,40 @@ static LP e_inverse (XY xy, PJ *P) {                /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                   /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[202]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 202\n");
+      else
+        fprintf(stderr, "reached bug index 202\n");
+    }
+    if ((!FIXREVERTER[202] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[203]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 203\n");
+      else
+        fprintf(stderr, "reached bug index 203\n");
+    }
+    if ((!FIXREVERTER[203] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc(P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc(P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_labrd.c b/src/PJ_labrd.c
index dfc5447..be83593 100644
--- a/src/PJ_labrd.c
+++ b/src/PJ_labrd.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -96,10 +100,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[214]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 214\n");
+      else
+        fprintf(stderr, "reached bug index 214\n");
+    }
+    if ((!FIXREVERTER[214] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[215]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 215\n");
+      else
+        fprintf(stderr, "reached bug index 215\n");
+    }
+    if ((!FIXREVERTER[215] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_laea.c b/src/PJ_laea.c
index 0a638fb..bafdb09 100644
--- a/src/PJ_laea.c
+++ b/src/PJ_laea.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -220,10 +224,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[140]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 140\n");
+      else
+        fprintf(stderr, "reached bug index 140\n");
+    }
+    if ((!FIXREVERTER[140] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[141]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 141\n");
+      else
+        fprintf(stderr, "reached bug index 141\n");
+    }
+    if ((!FIXREVERTER[141] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque->apa);
     pj_dealloc (P->opaque);
diff --git a/src/PJ_lagrng.c b/src/PJ_lagrng.c
index 9850090..2381e70 100644
--- a/src/PJ_lagrng.c
+++ b/src/PJ_lagrng.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -36,10 +40,40 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[237]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 237\n");
+      else
+        fprintf(stderr, "reached bug index 237\n");
+    }
+    if ((!FIXREVERTER[237] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[238]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 238\n");
+      else
+        fprintf(stderr, "reached bug index 238\n");
+    }
+    if ((!FIXREVERTER[238] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_larr.c b/src/PJ_larr.c
index dba2534..177c8c6 100644
--- a/src/PJ_larr.c
+++ b/src/PJ_larr.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -17,8 +21,23 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[62]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 62\n");
+      else
+        fprintf(stderr, "reached bug index 62\n");
+    }
+    if ((!FIXREVERTER[62] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_lask.c b/src/PJ_lask.c
index 9aa9620..af0f0f9 100644
--- a/src/PJ_lask.c
+++ b/src/PJ_lask.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include    <projects.h>
 
@@ -29,8 +33,23 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 }
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[50]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 50\n");
+      else
+        fprintf(stderr, "reached bug index 50\n");
+    }
+    if ((!FIXREVERTER[50] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_lcc.c b/src/PJ_lcc.c
index 905f708..2d2469d 100644
--- a/src/PJ_lcc.c
+++ b/src/PJ_lcc.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -89,10 +93,40 @@ static void special(LP lp, PJ *P, struct FACTORS *fac) {
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[19]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 19\n");
+      else
+        fprintf(stderr, "reached bug index 19\n");
+    }
+    if ((!FIXREVERTER[19] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[20]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 20\n");
+      else
+        fprintf(stderr, "reached bug index 20\n");
+    }
+    if ((!FIXREVERTER[20] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_lcca.c b/src/PJ_lcca.c
index 7770437..5007345 100644
--- a/src/PJ_lcca.c
+++ b/src/PJ_lcca.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /* PROJ.4 Cartographic Projection System
 */
 #define PJ_LIB__
@@ -70,10 +74,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[11]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 11\n");
+      else
+        fprintf(stderr, "reached bug index 11\n");
+    }
+    if ((!FIXREVERTER[11] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[12]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 12\n");
+      else
+        fprintf(stderr, "reached bug index 12\n");
+    }
+    if ((!FIXREVERTER[12] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque->en);
     pj_dealloc (P->opaque);
diff --git a/src/PJ_loxim.c b/src/PJ_loxim.c
index 6cd56ee..2fe3f37 100644
--- a/src/PJ_loxim.c
+++ b/src/PJ_loxim.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -50,10 +54,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[152]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 152\n");
+      else
+        fprintf(stderr, "reached bug index 152\n");
+    }
+    if ((!FIXREVERTER[152] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[153]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 153\n");
+      else
+        fprintf(stderr, "reached bug index 153\n");
+    }
+    if ((!FIXREVERTER[153] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_lsat.c b/src/PJ_lsat.c
index 15009d6..4f11ea9 100644
--- a/src/PJ_lsat.c
+++ b/src/PJ_lsat.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /* based upon Snyder and Linck, USGS-NMD */
 #define PJ_LIB__
 #include <proj.h>
@@ -149,10 +153,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[24]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 24\n");
+      else
+        fprintf(stderr, "reached bug index 24\n");
+    }
+    if ((!FIXREVERTER[24] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[25]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 25\n");
+      else
+        fprintf(stderr, "reached bug index 25\n");
+    }
+    if ((!FIXREVERTER[25] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_mbt_fps.c b/src/PJ_mbt_fps.c
index 5a3f377..c78a8de 100644
--- a/src/PJ_mbt_fps.c
+++ b/src/PJ_mbt_fps.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -45,8 +49,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[77]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 77\n");
+      else
+        fprintf(stderr, "reached bug index 77\n");
+    }
+    if ((!FIXREVERTER[77] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_mbtfpp.c b/src/PJ_mbtfpp.c
index f8a5e80..032f14c 100644
--- a/src/PJ_mbtfpp.c
+++ b/src/PJ_mbtfpp.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -53,8 +57,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[199]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 199\n");
+      else
+        fprintf(stderr, "reached bug index 199\n");
+    }
+    if ((!FIXREVERTER[199] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_mbtfpq.c b/src/PJ_mbtfpq.c
index b6910a4..a7774cb 100644
--- a/src/PJ_mbtfpq.c
+++ b/src/PJ_mbtfpq.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -62,8 +66,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 4\n");
+      else
+        fprintf(stderr, "reached bug index 4\n");
+    }
+    if ((!FIXREVERTER[4] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_mill.c b/src/PJ_mill.c
index 1776341..e8073a2 100644
--- a/src/PJ_mill.c
+++ b/src/PJ_mill.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -26,8 +30,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[251]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 251\n");
+      else
+        fprintf(stderr, "reached bug index 251\n");
+    }
+    if ((!FIXREVERTER[251] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
    return pj_dealloc(P);
 }
diff --git a/src/PJ_misrsom.c b/src/PJ_misrsom.c
index 49be166..427af5d 100644
--- a/src/PJ_misrsom.c
+++ b/src/PJ_misrsom.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * This implements Space Oblique Mercator (SOM) projection, used by the
  * Multi-angle Imaging SpectroRadiometer (MISR) products, from the NASA EOS Terra
@@ -165,10 +169,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[138]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 138\n");
+      else
+        fprintf(stderr, "reached bug index 138\n");
+    }
+    if ((!FIXREVERTER[138] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[139]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 139\n");
+      else
+        fprintf(stderr, "reached bug index 139\n");
+    }
+    if ((!FIXREVERTER[139] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_mod_ster.c b/src/PJ_mod_ster.c
index f8c90bc..2f07518 100644
--- a/src/PJ_mod_ster.c
+++ b/src/PJ_mod_ster.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /* based upon Snyder and Linck, USGS-NMD */
 #define PJ_LIB__
 #include <projects.h>
@@ -99,10 +103,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[212]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 212\n");
+      else
+        fprintf(stderr, "reached bug index 212\n");
+    }
+    if ((!FIXREVERTER[212] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[213]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 213\n");
+      else
+        fprintf(stderr, "reached bug index 213\n");
+    }
+    if ((!FIXREVERTER[213] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_moll.c b/src/PJ_moll.c
index b975cc7..d3b9c48 100644
--- a/src/PJ_moll.c
+++ b/src/PJ_moll.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -52,10 +56,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[208]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 208\n");
+      else
+        fprintf(stderr, "reached bug index 208\n");
+    }
+    if ((!FIXREVERTER[208] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[209]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 209\n");
+      else
+        fprintf(stderr, "reached bug index 209\n");
+    }
+    if ((!FIXREVERTER[209] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_molodensky.c b/src/PJ_molodensky.c
index 49e2776..41b1c1f 100644
--- a/src/PJ_molodensky.c
+++ b/src/PJ_molodensky.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /***********************************************************************
 
                   (Abridged) Molodensky Transform
@@ -64,14 +68,44 @@ struct pj_opaque_molodensky {
 
 
 static void *freeup_msg(PJ *P, int errlev) {
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 5\n");
+      else
+        fprintf(stderr, "reached bug index 5\n");
+    }
+    if ((!FIXREVERTER[5] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (0!=P->ctx)
         pj_ctx_set_errno (P->ctx, errlev);
 
-    if (0==P->opaque)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[6]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 6\n");
+      else
+        fprintf(stderr, "reached bug index 6\n");
+    }
+    if ((!FIXREVERTER[6] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
 
diff --git a/src/PJ_natearth.c b/src/PJ_natearth.c
index 8d0dae0..f0d20a2 100644
--- a/src/PJ_natearth.c
+++ b/src/PJ_natearth.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
 The Natural Earth projection was designed by Tom Patterson, US National Park
 Service, in 2007, using Flex Projector. The shape of the original projection
@@ -89,8 +93,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[13]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 13\n");
+      else
+        fprintf(stderr, "reached bug index 13\n");
+    }
+    if ((!FIXREVERTER[13] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_natearth2.c b/src/PJ_natearth2.c
index aab9f9a..952762c 100644
--- a/src/PJ_natearth2.c
+++ b/src/PJ_natearth2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
 The Natural Earth II projection was designed by Tom Patterson, US National
 Park Service, in 2012, using Flex Projector. The polynomial equation was
@@ -86,8 +90,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[75]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 75\n");
+      else
+        fprintf(stderr, "reached bug index 75\n");
+    }
+    if ((!FIXREVERTER[75] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_nell.c b/src/PJ_nell.c
index 1b6af01..ec3e18c 100644
--- a/src/PJ_nell.c
+++ b/src/PJ_nell.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -39,8 +43,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[273]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 273\n");
+      else
+        fprintf(stderr, "reached bug index 273\n");
+    }
+    if ((!FIXREVERTER[273] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_nell_h.c b/src/PJ_nell_h.c
index dfad72b..783024a 100644
--- a/src/PJ_nell_h.c
+++ b/src/PJ_nell_h.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -42,8 +46,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[268]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 268\n");
+      else
+        fprintf(stderr, "reached bug index 268\n");
+    }
+    if ((!FIXREVERTER[268] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_nocol.c b/src/PJ_nocol.c
index 88836a1..a270340 100644
--- a/src/PJ_nocol.c
+++ b/src/PJ_nocol.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -44,8 +48,23 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[243]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 243\n");
+      else
+        fprintf(stderr, "reached bug index 243\n");
+    }
+    if ((!FIXREVERTER[243] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_nsper.c b/src/PJ_nsper.c
index 589b620..b8d016c 100644
--- a/src/PJ_nsper.c
+++ b/src/PJ_nsper.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -135,10 +139,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[162]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 162\n");
+      else
+        fprintf(stderr, "reached bug index 162\n");
+    }
+    if ((!FIXREVERTER[162] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[163]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 163\n");
+      else
+        fprintf(stderr, "reached bug index 163\n");
+    }
+    if ((!FIXREVERTER[163] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_nzmg.c b/src/PJ_nzmg.c
index 6c70550..746ee57 100644
--- a/src/PJ_nzmg.c
+++ b/src/PJ_nzmg.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Implementation of the nzmg (New Zealand Map Grid) projection.
@@ -104,8 +108,23 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[83]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 83\n");
+      else
+        fprintf(stderr, "reached bug index 83\n");
+    }
+    if ((!FIXREVERTER[83] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_ob_tran.c b/src/PJ_ob_tran.c
index 238dba6..c3c91e3 100644
--- a/src/PJ_ob_tran.c
+++ b/src/PJ_ob_tran.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -81,10 +85,40 @@ static LP t_inverse(XY xy, PJ *P) {             /* spheroid */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[158]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 158\n");
+      else
+        fprintf(stderr, "reached bug index 158\n");
+    }
+    if ((!FIXREVERTER[158] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[159]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 159\n");
+      else
+        fprintf(stderr, "reached bug index 159\n");
+    }
+    if ((!FIXREVERTER[159] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (P->opaque->link)
         P->opaque->link->pfree(P->opaque->link);
diff --git a/src/PJ_ocea.c b/src/PJ_ocea.c
index 1fbe276..343727e 100644
--- a/src/PJ_ocea.c
+++ b/src/PJ_ocea.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -45,10 +49,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[58]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 58\n");
+      else
+        fprintf(stderr, "reached bug index 58\n");
+    }
+    if ((!FIXREVERTER[58] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[59]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 59\n");
+      else
+        fprintf(stderr, "reached bug index 59\n");
+    }
+    if ((!FIXREVERTER[59] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_oea.c b/src/PJ_oea.c
index 2ba7917..cbe9a4f 100644
--- a/src/PJ_oea.c
+++ b/src/PJ_oea.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -53,10 +57,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[204]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 204\n");
+      else
+        fprintf(stderr, "reached bug index 204\n");
+    }
+    if ((!FIXREVERTER[204] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[205]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 205\n");
+      else
+        fprintf(stderr, "reached bug index 205\n");
+    }
+    if ((!FIXREVERTER[205] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_omerc.c b/src/PJ_omerc.c
index 0d86e46..a4b0f05 100644
--- a/src/PJ_omerc.c
+++ b/src/PJ_omerc.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
 ** Copyright (c) 2003, 2006   Gerald I. Evenden
 */
@@ -112,10 +116,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[22]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 22\n");
+      else
+        fprintf(stderr, "reached bug index 22\n");
+    }
+    if ((!FIXREVERTER[22] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[23]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 23\n");
+      else
+        fprintf(stderr, "reached bug index 23\n");
+    }
+    if ((!FIXREVERTER[23] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_ortho.c b/src/PJ_ortho.c
index bb150f0..d67c627 100644
--- a/src/PJ_ortho.c
+++ b/src/PJ_ortho.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -105,10 +109,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[60]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 60\n");
+      else
+        fprintf(stderr, "reached bug index 60\n");
+    }
+    if ((!FIXREVERTER[60] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[61]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 61\n");
+      else
+        fprintf(stderr, "reached bug index 61\n");
+    }
+    if ((!FIXREVERTER[61] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_patterson.c b/src/PJ_patterson.c
index 952b63e..6e0bd5b 100644
--- a/src/PJ_patterson.c
+++ b/src/PJ_patterson.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * Copyright (c) 2014 Bojan Savric
  *
@@ -106,8 +110,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[216]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 216\n");
+      else
+        fprintf(stderr, "reached bug index 216\n");
+    }
+    if ((!FIXREVERTER[216] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_pipeline.c b/src/PJ_pipeline.c
index 6e42c0c..a5885f4 100644
--- a/src/PJ_pipeline.c
+++ b/src/PJ_pipeline.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*******************************************************************************
 
                        Transformation pipeline manager
@@ -261,8 +265,23 @@ static LP pipeline_reverse (XY xy, PJ *P) {
 }
 
 static void freeup(PJ *P) {                                    /* Destructor */
-    if (P==0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[274]) {
+      if ((P == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 274\n");
+      else
+        fprintf(stderr, "reached bug index 274\n");
+    }
+    if ((!FIXREVERTER[274] && (P == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     /* Projection specific deallocation goes here */
     pj_dealloc (P->opaque);
     pj_dealloc (P);
@@ -272,14 +291,44 @@ static void freeup(PJ *P) {                                    /* Destructor */
 
 static void *pipeline_freeup (PJ *P, int errlev) {         /* Destructor */
     int i;
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[275]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 275\n");
+      else
+        fprintf(stderr, "reached bug index 275\n");
+    }
+    if ((!FIXREVERTER[275] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (errlev)
         proj_errno_set (P, errlev);
 
-    if (0==P->opaque)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[276]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 276\n");
+      else
+        fprintf(stderr, "reached bug index 276\n");
+    }
+    if ((!FIXREVERTER[276] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     for (i = 0;  i < P->opaque->steps; i++)
         pj_free (P->opaque->pipeline[i+1]);
@@ -344,8 +393,23 @@ static char **argv_params (paralist *params, size_t argc) {
     char **argv;
     size_t i = 0;
     argv = pj_calloc (argc, sizeof (char *));
-    if (0==argv)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[277]) {
+      if ((0 == argv ) && !(0))
+        fprintf(stderr, "triggered bug index 277\n");
+      else
+        fprintf(stderr, "reached bug index 277\n");
+    }
+    if ((!FIXREVERTER[277] && (0 == argv ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     for (; params != 0; params = params->next)
         argv[i++] = params->param;
     argv[i++] = argv_sentinel;
diff --git a/src/PJ_poly.c b/src/PJ_poly.c
index f5af36a..4c19c56 100644
--- a/src/PJ_poly.c
+++ b/src/PJ_poly.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -127,10 +131,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[133]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 133\n");
+      else
+        fprintf(stderr, "reached bug index 133\n");
+    }
+    if ((!FIXREVERTER[133] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[134]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 134\n");
+      else
+        fprintf(stderr, "reached bug index 134\n");
+    }
+    if ((!FIXREVERTER[134] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
     if (P->opaque->en)
         pj_dealloc (P->opaque->en);
     pj_dealloc (P->opaque);
diff --git a/src/PJ_putp2.c b/src/PJ_putp2.c
index 052d95b..a10fb42 100644
--- a/src/PJ_putp2.c
+++ b/src/PJ_putp2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -50,8 +54,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[195]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 195\n");
+      else
+        fprintf(stderr, "reached bug index 195\n");
+    }
+    if ((!FIXREVERTER[195] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_putp3.c b/src/PJ_putp3.c
index 9372091..9067bed 100644
--- a/src/PJ_putp3.c
+++ b/src/PJ_putp3.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -33,10 +37,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[192]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 192\n");
+      else
+        fprintf(stderr, "reached bug index 192\n");
+    }
+    if ((!FIXREVERTER[192] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[193]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 193\n");
+      else
+        fprintf(stderr, "reached bug index 193\n");
+    }
+    if ((!FIXREVERTER[193] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_putp4p.c b/src/PJ_putp4p.c
index f8b65ce..a3b5217 100644
--- a/src/PJ_putp4p.c
+++ b/src/PJ_putp4p.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -37,10 +41,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[46]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 46\n");
+      else
+        fprintf(stderr, "reached bug index 46\n");
+    }
+    if ((!FIXREVERTER[46] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[47]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 47\n");
+      else
+        fprintf(stderr, "reached bug index 47\n");
+    }
+    if ((!FIXREVERTER[47] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_putp5.c b/src/PJ_putp5.c
index 87b7af7..e87cee0 100644
--- a/src/PJ_putp5.c
+++ b/src/PJ_putp5.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -35,10 +39,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[100]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 100\n");
+      else
+        fprintf(stderr, "reached bug index 100\n");
+    }
+    if ((!FIXREVERTER[100] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[101]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 101\n");
+      else
+        fprintf(stderr, "reached bug index 101\n");
+    }
+    if ((!FIXREVERTER[101] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_putp6.c b/src/PJ_putp6.c
index 6c4fc24..042fb86 100644
--- a/src/PJ_putp6.c
+++ b/src/PJ_putp6.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -52,10 +56,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[73]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 73\n");
+      else
+        fprintf(stderr, "reached bug index 73\n");
+    }
+    if ((!FIXREVERTER[73] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[74]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 74\n");
+      else
+        fprintf(stderr, "reached bug index 74\n");
+    }
+    if ((!FIXREVERTER[74] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_qsc.c b/src/PJ_qsc.c
index e5fee0e..d3ecb99 100644
--- a/src/PJ_qsc.c
+++ b/src/PJ_qsc.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * This implements the Quadrilateralized Spherical Cube (QSC) projection.
  *
@@ -362,10 +366,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[190]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 190\n");
+      else
+        fprintf(stderr, "reached bug index 190\n");
+    }
+    if ((!FIXREVERTER[190] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[191]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 191\n");
+      else
+        fprintf(stderr, "reached bug index 191\n");
+    }
+    if ((!FIXREVERTER[191] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_robin.c b/src/PJ_robin.c
index 60a5232..f38ea66 100644
--- a/src/PJ_robin.c
+++ b/src/PJ_robin.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -81,11 +85,41 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
     (void) P;
 
     i = (int)floor((dphi = fabs(lp.phi)) * C1);
-    if( i < 0 ){
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[166]) {
+      if ((i < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 166\n");
+      else
+        fprintf(stderr, "reached bug index 166\n");
+    }
+    if ((!FIXREVERTER[166] && (i < 0 ))
+    #else
+    if (0
+    #endif
+     ){
         proj_errno_set(P, PJD_ERR_TOLERANCE_CONDITION);
         return xy;
     }
-    if (i >= NODES) i = NODES - 1;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[167]) {
+      if ((i >= 18 ) && !(0))
+        fprintf(stderr, "triggered bug index 167\n");
+      else
+        fprintf(stderr, "reached bug index 167\n");
+    }
+    if ((!FIXREVERTER[167] && (i >= 18 ))
+    #else
+    if (0
+    #endif
+    ) i = NODES - 1;
+    #ifdef FRCOV
+    }
+    #endif
     dphi = RAD_TO_DEG * (dphi - RC1 * i);
     xy.x = V(X[i], dphi) * FXC * lp.lam;
     xy.y = V(Y[i], dphi) * FYC;
@@ -116,10 +150,25 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
     } else { /* general problem */
         /* in Y space, reduce to table interval */
         i = (int)floor(lp.phi * NODES);
-        if( i < 0 || i >= NODES ) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[168]) {
+          if ((i < 0 || i >= 18 ) && !(0))
+            fprintf(stderr, "triggered bug index 168\n");
+          else
+            fprintf(stderr, "reached bug index 168\n");
+        }
+        if ((!FIXREVERTER[168] && (i < 0 || i >= 18 ))
+        #else
+        if (0
+        #endif
+         ) {
             proj_errno_set(P, PJD_ERR_TOLERANCE_CONDITION);
             return lp;
         }
+        #ifdef FRCOV
+        }
+        #endif
         for (;;) {
             if (Y[i].c0 > lp.phi) --i;
             else if (Y[i+1].c0 <= lp.phi) ++i;
@@ -146,8 +195,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[169]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 169\n");
+      else
+        fprintf(stderr, "reached bug index 169\n");
+    }
+    if ((!FIXREVERTER[169] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_rpoly.c b/src/PJ_rpoly.c
index d0ff831..7ff3e70 100644
--- a/src/PJ_rpoly.c
+++ b/src/PJ_rpoly.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -35,10 +39,40 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[200]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 200\n");
+      else
+        fprintf(stderr, "reached bug index 200\n");
+    }
+    if ((!FIXREVERTER[200] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[201]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 201\n");
+      else
+        fprintf(stderr, "reached bug index 201\n");
+    }
+    if ((!FIXREVERTER[201] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_sch.c b/src/PJ_sch.c
index 6c97a4f..72c67e8 100644
--- a/src/PJ_sch.c
+++ b/src/PJ_sch.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * $Id$
  *
@@ -139,10 +143,40 @@ static XYZ forward3d(LPZ lpz, PJ *P) {
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[210]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 210\n");
+      else
+        fprintf(stderr, "reached bug index 210\n");
+    }
+    if ((!FIXREVERTER[210] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[211]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 211\n");
+      else
+        fprintf(stderr, "reached bug index 211\n");
+    }
+    if ((!FIXREVERTER[211] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_sconics.c b/src/PJ_sconics.c
index 8759c66..69760d0 100644
--- a/src/PJ_sconics.c
+++ b/src/PJ_sconics.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -106,10 +110,40 @@ static LP s_inverse (XY xy, PJ *P) {  /* Spheroidal, (and ellipsoidal?) inverse
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[187]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 187\n");
+      else
+        fprintf(stderr, "reached bug index 187\n");
+    }
+    if ((!FIXREVERTER[187] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[188]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 188\n");
+      else
+        fprintf(stderr, "reached bug index 188\n");
+    }
+    if ((!FIXREVERTER[188] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
 }
@@ -124,8 +158,23 @@ static PJ *setup(PJ *P, int type) {
     double del, cs;
     int i;
     struct pj_opaque *Q = pj_calloc (1, sizeof (struct pj_opaque));
-    if (0==Q)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[189]) {
+      if ((0 == Q ) && !(0))
+        fprintf(stderr, "triggered bug index 189\n");
+      else
+        fprintf(stderr, "reached bug index 189\n");
+    }
+    if ((!FIXREVERTER[189] && (0 == Q ))
+    #else
+    if (0
+    #endif
+    )
         return freeup_new (P);
+        #ifdef FRCOV
+        }
+        #endif
     P->opaque = Q;
     Q->type = type;
 
diff --git a/src/PJ_somerc.c b/src/PJ_somerc.c
index 751d0c7..76fbd2d 100644
--- a/src/PJ_somerc.c
+++ b/src/PJ_somerc.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -69,10 +73,40 @@ FREEUP; if (P) pj_dalloc(P); }
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[164]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 164\n");
+      else
+        fprintf(stderr, "reached bug index 164\n");
+    }
+    if ((!FIXREVERTER[164] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[165]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 165\n");
+      else
+        fprintf(stderr, "reached bug index 165\n");
+    }
+    if ((!FIXREVERTER[165] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
 }
diff --git a/src/PJ_stere.c b/src/PJ_stere.c
index befca30..6edec70 100644
--- a/src/PJ_stere.c
+++ b/src/PJ_stere.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -214,8 +218,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[170]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 170\n");
+      else
+        fprintf(stderr, "reached bug index 170\n");
+    }
+    if ((!FIXREVERTER[170] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
 }
diff --git a/src/PJ_sterea.c b/src/PJ_sterea.c
index 73c6b48..7984a9d 100644
--- a/src/PJ_sterea.c
+++ b/src/PJ_sterea.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
 ** libproj -- library of cartographic projections
 **
@@ -79,10 +83,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[160]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 160\n");
+      else
+        fprintf(stderr, "reached bug index 160\n");
+    }
+    if ((!FIXREVERTER[160] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[161]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 161\n");
+      else
+        fprintf(stderr, "reached bug index 161\n");
+    }
+    if ((!FIXREVERTER[161] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque->en);
     pj_dealloc (P->opaque);
diff --git a/src/PJ_sts.c b/src/PJ_sts.c
index b6b6dc4..25db941 100644
--- a/src/PJ_sts.c
+++ b/src/PJ_sts.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 # include	<projects.h>
 
@@ -51,8 +55,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[80]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 80\n");
+      else
+        fprintf(stderr, "reached bug index 80\n");
+    }
+    if ((!FIXREVERTER[80] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
 }
diff --git a/src/PJ_times.c b/src/PJ_times.c
index 5d3b039..8e854e6 100644
--- a/src/PJ_times.c
+++ b/src/PJ_times.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Implementation of the Times projection.
@@ -67,8 +71,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {              /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[7]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 7\n");
+      else
+        fprintf(stderr, "reached bug index 7\n");
+    }
+    if ((!FIXREVERTER[7] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_tmerc.c b/src/PJ_tmerc.c
index 04afc64..d47077a 100644
--- a/src/PJ_tmerc.c
+++ b/src/PJ_tmerc.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -161,10 +165,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[185]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 185\n");
+      else
+        fprintf(stderr, "reached bug index 185\n");
+    }
+    if ((!FIXREVERTER[185] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[186]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 186\n");
+      else
+        fprintf(stderr, "reached bug index 186\n");
+    }
+    if ((!FIXREVERTER[186] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque->en);
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_tpeqd.c b/src/PJ_tpeqd.c
index 90dd756..d353d30 100644
--- a/src/PJ_tpeqd.c
+++ b/src/PJ_tpeqd.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -56,10 +60,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[175]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 175\n");
+      else
+        fprintf(stderr, "reached bug index 175\n");
+    }
+    if ((!FIXREVERTER[175] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[176]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 176\n");
+      else
+        fprintf(stderr, "reached bug index 176\n");
+    }
+    if ((!FIXREVERTER[176] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
 }
diff --git a/src/PJ_unitconvert.c b/src/PJ_unitconvert.c
index 27672c8..ebdab8b 100644
--- a/src/PJ_unitconvert.c
+++ b/src/PJ_unitconvert.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /***********************************************************************
 
             Unit conversion pseudo-projection for use with
@@ -194,8 +198,23 @@ struct pj_opaque_unitconvert {
 /***********************************************************************/
 static void *freeup_msg (PJ *P, int errlev) {
 /***********************************************************************/
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[14]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 14\n");
+      else
+        fprintf(stderr, "reached bug index 14\n");
+    }
+    if ((!FIXREVERTER[14] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (0!=P->ctx)
         pj_ctx_set_errno (P->ctx, errlev);
diff --git a/src/PJ_urm5.c b/src/PJ_urm5.c
index 9d904fc..21f52d9 100644
--- a/src/PJ_urm5.c
+++ b/src/PJ_urm5.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -23,8 +27,23 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[10]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 10\n");
+      else
+        fprintf(stderr, "reached bug index 10\n");
+    }
+    if ((!FIXREVERTER[10] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     if (P->opaque)
         pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_urmfps.c b/src/PJ_urmfps.c
index fcc7b85..70bf290 100644
--- a/src/PJ_urmfps.c
+++ b/src/PJ_urmfps.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -32,10 +36,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[56]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 56\n");
+      else
+        fprintf(stderr, "reached bug index 56\n");
+    }
+    if ((!FIXREVERTER[56] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[57]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 57\n");
+      else
+        fprintf(stderr, "reached bug index 57\n");
+    }
+    if ((!FIXREVERTER[57] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
 }
diff --git a/src/PJ_vandg.c b/src/PJ_vandg.c
index 282eb66..fafc1d2 100644
--- a/src/PJ_vandg.c
+++ b/src/PJ_vandg.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include "projects.h"
@@ -98,8 +102,23 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[255]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 255\n");
+      else
+        fprintf(stderr, "reached bug index 255\n");
+    }
+    if ((!FIXREVERTER[255] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_vandg2.c b/src/PJ_vandg2.c
index fac7e85..ab8d23f 100644
--- a/src/PJ_vandg2.c
+++ b/src/PJ_vandg2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -45,10 +49,40 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[206]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 206\n");
+      else
+        fprintf(stderr, "reached bug index 206\n");
+    }
+    if ((!FIXREVERTER[206] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[207]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 207\n");
+      else
+        fprintf(stderr, "reached bug index 207\n");
+    }
+    if ((!FIXREVERTER[207] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/PJ_vandg4.c b/src/PJ_vandg4.c
index 2dbb071..65782c3 100644
--- a/src/PJ_vandg4.c
+++ b/src/PJ_vandg4.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 
@@ -45,8 +49,23 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[182]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 182\n");
+      else
+        fprintf(stderr, "reached bug index 182\n");
+    }
+    if ((!FIXREVERTER[182] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/PJ_vgridshift.c b/src/PJ_vgridshift.c
index e790cd4..af8014c 100644
--- a/src/PJ_vgridshift.c
+++ b/src/PJ_vgridshift.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include "proj_internal.h"
 #include <projects.h>
@@ -5,8 +9,23 @@
 PROJ_HEAD(vgridshift, "Vertical grid shift");
 
 static void *freeup_msg (PJ *P, int errlev) {
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[194]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 194\n");
+      else
+        fprintf(stderr, "reached bug index 194\n");
+    }
+    if ((!FIXREVERTER[194] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (0!=P->ctx)
         pj_ctx_set_errno (P->ctx, errlev);
diff --git a/src/PJ_wink1.c b/src/PJ_wink1.c
index 320a4fb..1549910 100644
--- a/src/PJ_wink1.c
+++ b/src/PJ_wink1.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <projects.h>
 PROJ_HEAD(wink1, "Winkel I") "\n\tPCyl., Sph.\n\tlat_ts=";
@@ -26,10 +30,40 @@ static LP s_inverse (XY xy, PJ *P) {           /* Spheroidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[67]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 67\n");
+      else
+        fprintf(stderr, "reached bug index 67\n");
+    }
+    if ((!FIXREVERTER[67] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[68]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 68\n");
+      else
+        fprintf(stderr, "reached bug index 68\n");
+    }
+    if ((!FIXREVERTER[68] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
 }
diff --git a/src/PJ_wink2.c b/src/PJ_wink2.c
index 4b82e42..df91ce4 100644
--- a/src/PJ_wink2.c
+++ b/src/PJ_wink2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 # include	<projects.h>
 
@@ -34,10 +38,40 @@ static XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[179]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 179\n");
+      else
+        fprintf(stderr, "reached bug index 179\n");
+    }
+    if ((!FIXREVERTER[179] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[180]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 180\n");
+      else
+        fprintf(stderr, "reached bug index 180\n");
+    }
+    if ((!FIXREVERTER[180] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
 }
diff --git a/src/dmstor.c b/src/dmstor.c
index b994589..a307306 100644
--- a/src/dmstor.c
+++ b/src/dmstor.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /* Convert DMS string to radians */
 #include <projects.h>
 #include <string.h>
@@ -62,10 +66,25 @@ dmstor_ctx(projCtx ctx, const char *is, char **rs) {
 		skip:	n = 4;
 			continue;
 		}
-		if (n < nl) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[38]) {
+		  if ((n < nl ) && !(0))
+		    fprintf(stderr, "triggered bug index 38\n");
+		  else
+		    fprintf(stderr, "reached bug index 38\n");
+		}
+		if ((!FIXREVERTER[38] && (n < nl ))
+		#else
+		if (0
+		#endif
+		) {
 			pj_ctx_set_errno( ctx, -16 );
 			return HUGE_VAL;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		v += tv * vm[n];
 		++s;
 	}
diff --git a/src/nad_init.c b/src/nad_init.c
index 0a28e20..5bdbd2c 100644
--- a/src/nad_init.c
+++ b/src/nad_init.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Load datum shift files into memory.
@@ -222,11 +226,26 @@ struct CTABLE *nad_ctable2_init( projCtx ctx, PAFile fid )
 
     /* read the table header */
     ct = (struct CTABLE *) pj_malloc(sizeof(struct CTABLE));
-    if( ct == NULL )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[269]) {
+      if ((ct == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 269\n");
+      else
+        fprintf(stderr, "reached bug index 269\n");
+    }
+    if ((!FIXREVERTER[269] && (ct == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     )
     {
         pj_ctx_set_errno( ctx, -38 );
         return NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     memcpy( ct->id,       header +  16, 80 );
     memcpy( &ct->ll.lam,  header +  96, 8 );
diff --git a/src/pj_apply_gridshift.c b/src/pj_apply_gridshift.c
index 91e2de2..ecc6713 100644
--- a/src/pj_apply_gridshift.c
+++ b/src/pj_apply_gridshift.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Apply datum shifts based on grid shift files (normally NAD27 to
@@ -94,8 +98,23 @@ int pj_apply_gridshift_2( PJ *defn, int inverse,
                                        pj_param(defn->ctx, defn->params,"snadgrids").s,
                                        &(defn->gridlist_count) );
 
-        if( defn->gridlist == NULL || defn->gridlist_count == 0 )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[70]) {
+          if ((defn -> gridlist == (void *) 0 || defn -> gridlist_count == 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 70\n");
+          else
+            fprintf(stderr, "reached bug index 70\n");
+        }
+        if ((!FIXREVERTER[70] && (defn -> gridlist == (void *) 0 || defn -> gridlist_count == 0 ))
+        #else
+        if (0
+        #endif
+         )
             return defn->ctx->last_errno;
+            #ifdef FRCOV
+            }
+            #endif
     }
      
     return pj_apply_gridshift_3( pj_get_ctx( defn ),
@@ -119,11 +138,26 @@ int pj_apply_gridshift_3( projCtx ctx, PJ_GRIDINFO **tables, int grid_count,
     static int debug_count = 0;
     (void) z;
 
-    if( tables == NULL || grid_count == 0 )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[71]) {
+      if ((tables == (void *) 0 ) && !(grid_count == 0 ))
+        fprintf(stderr, "triggered bug index 71\n");
+      else
+        fprintf(stderr, "reached bug index 71\n");
+    }
+    if ((FIXREVERTER[71] && (grid_count == 0 )) || (!FIXREVERTER[71] && (tables == (void *) 0 || grid_count == 0 ))
+    #else
+    if (grid_count == 0 
+    #endif
+     )
     {
         pj_ctx_set_errno( ctx, -38);
         return -38;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ctx->last_errno = 0;
 
@@ -178,7 +212,22 @@ int pj_apply_gridshift_3( projCtx ctx, PJ_GRIDINFO **tables, int grid_count,
 
                 /* If we didn't find a child then nothing more to do */
 
-                if( child == NULL ) break;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[72]) {
+                  if ((child == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 72\n");
+                  else
+                    fprintf(stderr, "reached bug index 72\n");
+                }
+                if ((!FIXREVERTER[72] && (child == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                 ) break;
+                #ifdef FRCOV
+                }
+                #endif
 
                 /* Otherwise use the child, first checking it's children */
 
diff --git a/src/pj_apply_vgridshift.c b/src/pj_apply_vgridshift.c
index 35047a1..e909ad6 100644
--- a/src/pj_apply_vgridshift.c
+++ b/src/pj_apply_vgridshift.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Apply vertical datum shifts based on grid shift files, normally
@@ -121,10 +125,25 @@ int pj_apply_vgridshift( PJ *defn, const char *listname,
                 }
 
                 /* we didn't find a more refined child node to use, so go with current grid */
-                if( child == NULL )
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[256]) {
+                  if ((child == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 256\n");
+                  else
+                    fprintf(stderr, "reached bug index 256\n");
+                }
+                if ((!FIXREVERTER[256] && (child == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                 )
                 {
                     break;
                 }
+                #ifdef FRCOV
+                }
+                #endif
 
                 /* Otherwise let's try for childrens children .. */
                 gi = child;
diff --git a/src/pj_fileapi.c b/src/pj_fileapi.c
index 1e5bfa5..6c57ce2 100644
--- a/src/pj_fileapi.c
+++ b/src/pj_fileapi.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Implementation of the pj_ctx_* file api, and the default stdio
@@ -179,8 +183,23 @@ char *pj_ctx_fgets(projCtx ctx, char *line, int size, PAFile file)
 
     line[size-1] = '\0';
     bytes_read = pj_ctx_fread(ctx, line, 1, size-1, file);
-    if(bytes_read == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[132]) {
+      if ((bytes_read == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 132\n");
+      else
+        fprintf(stderr, "reached bug index 132\n");
+    }
+    if ((!FIXREVERTER[132] && (bytes_read == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
     if(bytes_read < (size_t)size)
     {
         line[bytes_read] = '\0';
diff --git a/src/pj_fwd.c b/src/pj_fwd.c
index 02f18d1..1bfcc57 100644
--- a/src/pj_fwd.c
+++ b/src/pj_fwd.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /* general forward projection */
 #define PJ_LIB__
 #include <proj.h>
@@ -13,8 +17,23 @@ pj_fwd(LP lp, PJ *P) {
     /* cannot const-initialize this due to MSVC's broken (non const) HUGE_VAL */
     err.x = err.y = HUGE_VAL;
 
-    if (0==P->fwd)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[130]) {
+      if ((0 == P -> fwd ) && !(0))
+        fprintf(stderr, "triggered bug index 130\n");
+      else
+        fprintf(stderr, "reached bug index 130\n");
+    }
+    if ((!FIXREVERTER[130] && (0 == P -> fwd ))
+    #else
+    if (0
+    #endif
+    )
         return err;
+        #ifdef FRCOV
+        }
+        #endif
     last_errno = proj_errno_reset (P);
 
     /* Check input coordinates if angular */
diff --git a/src/pj_fwd3d.c b/src/pj_fwd3d.c
index be68374..d9bbd62 100644
--- a/src/pj_fwd3d.c
+++ b/src/pj_fwd3d.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include <projects.h>
@@ -15,8 +19,23 @@ XYZ pj_fwd3d(LPZ lpz, PJ *P) {
     /* cannot const-initialize this due to MSVC's broken (non const) HUGE_VAL */
     err.x = err.y = err.z = HUGE_VAL;
 
-    if (0==P->fwd3d)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[129]) {
+      if ((0 == P -> fwd3d ) && !(0))
+        fprintf(stderr, "triggered bug index 129\n");
+      else
+        fprintf(stderr, "reached bug index 129\n");
+    }
+    if ((!FIXREVERTER[129] && (0 == P -> fwd3d ))
+    #else
+    if (0
+    #endif
+    )
         return err;
+        #ifdef FRCOV
+        }
+        #endif
 
     last_errno = proj_errno_reset(P);
 
diff --git a/src/pj_gc_reader.c b/src/pj_gc_reader.c
index dc528b5..89b7b6e 100644
--- a/src/pj_gc_reader.c
+++ b/src/pj_gc_reader.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Code to read a grid catalog from a .cvs file.
@@ -47,8 +51,23 @@ PJ_GridCatalog *pj_gc_readcatalog( projCtx ctx, const char *catalog_name )
     char line[302];
     
     fid = pj_open_lib( ctx, (char *) catalog_name, "r" );
-    if (fid == NULL) 
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[156]) {
+      if ((fid == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 156\n");
+      else
+        fprintf(stderr, "reached bug index 156\n");
+    }
+    if ((!FIXREVERTER[156] && (fid == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) 
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* discard title line */
     pj_ctx_fgets(ctx, line, sizeof(line)-1, fid);
@@ -204,8 +223,23 @@ static int pj_gc_readentry(projCtx ctx, PAFile fid, PJ_GridCatalogEntry *entry)
         entry->region.ll_lat = dmstor_ctx( ctx, tokens[2], NULL );
         entry->region.ur_long = dmstor_ctx( ctx, tokens[3], NULL );
         entry->region.ur_lat = dmstor_ctx( ctx, tokens[4], NULL );
-        if( token_count > 5 )
-            entry->priority = atoi( tokens[5] ); /* defaults to zero */
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[157]) {
+          if ((token_count > 5  ) && !(0))
+            fprintf(stderr, "triggered bug index 157\n");
+          else
+            fprintf(stderr, "reached bug index 157\n");
+        }
+        if ((!FIXREVERTER[157] && (token_count > 5  ))
+        #else
+        if (0
+        #endif
+         )
+            entry->priority = atoi( tokens[5] );
+            #ifdef FRCOV
+            }
+            #endif /* defaults to zero */
         if( token_count > 6 )
             entry->date = pj_gc_parsedate( ctx, tokens[6] );
     }
diff --git a/src/pj_geocent.c b/src/pj_geocent.c
index a00fc99..8461eba 100644
--- a/src/pj_geocent.c
+++ b/src/pj_geocent.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Stub projection for geocentric.  The transformation isn't
@@ -50,8 +54,23 @@ static LP inverse(XY xy, PJ *P) {
 
 
 static void *freeup_new (PJ *P) {
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[219]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 219\n");
+      else
+        fprintf(stderr, "reached bug index 219\n");
+    }
+    if ((!FIXREVERTER[219] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/pj_gridcatalog.c b/src/pj_gridcatalog.c
index 053de5e..ecfdcee 100644
--- a/src/pj_gridcatalog.c
+++ b/src/pj_gridcatalog.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Code in support of grid catalogs
@@ -84,8 +88,23 @@ PJ_GridCatalog *pj_gc_findcatalog( projCtx ctx, const char *name )
     pj_release_lock();
 
     catalog = pj_gc_readcatalog( ctx, name );
-    if( catalog == NULL )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[30]) {
+      if ((catalog == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 30\n");
+      else
+        fprintf(stderr, "reached bug index 30\n");
+    }
+    if ((!FIXREVERTER[30] && (catalog == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_acquire_lock();
     catalog->next = grid_catalog_list;
@@ -110,8 +129,23 @@ int pj_gc_apply_gridshift( PJ *defn, int inverse,
     if( defn->catalog == NULL ) 
     {
         defn->catalog = pj_gc_findcatalog( defn->ctx, defn->catalog_name );
-        if( defn->catalog == NULL )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[31]) {
+          if ((defn -> catalog == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 31\n");
+          else
+            fprintf(stderr, "reached bug index 31\n");
+        }
+        if ((!FIXREVERTER[31] && (defn -> catalog == (void *) 0 ))
+        #else
+        if (0
+        #endif
+         )
             return defn->ctx->last_errno;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     defn->ctx->last_errno = 0;
@@ -137,11 +171,26 @@ int pj_gc_apply_gridshift( PJ *defn, int inverse,
                                 1, input, defn->datum_date, 
                                 &(defn->last_after_region), 
                                 &(defn->last_after_date));
-            if( defn->last_after_grid == NULL )
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[32]) {
+              if ((defn -> last_after_grid == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 32\n");
+              else
+                fprintf(stderr, "reached bug index 32\n");
+            }
+            if ((!FIXREVERTER[32] && (defn -> last_after_grid == (void *) 0 ))
+            #else
+            if (0
+            #endif
+             )
             {
                 pj_ctx_set_errno( defn->ctx, -38 );
                 return -38;
             }
+            #ifdef FRCOV
+            }
+            #endif
         }
         gi = defn->last_after_grid;
         assert( gi->child == NULL );
@@ -185,11 +234,26 @@ int pj_gc_apply_gridshift( PJ *defn, int inverse,
                                 0, input, defn->datum_date, 
                                 &(defn->last_before_region), 
                                 &(defn->last_before_date));
-            if( defn->last_before_grid == NULL )
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[33]) {
+              if ((defn -> last_before_grid == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 33\n");
+              else
+                fprintf(stderr, "reached bug index 33\n");
+            }
+            if ((!FIXREVERTER[33] && (defn -> last_before_grid == (void *) 0 ))
+            #else
+            if (0
+            #endif
+             )
             {
                 pj_ctx_set_errno( defn->ctx, -38 );
                 return -38;
             }
+            #ifdef FRCOV
+            }
+            #endif
         }
 
         gi = defn->last_before_grid;
@@ -260,7 +324,19 @@ PJ_GRIDINFO *pj_gc_findgrid( projCtx ctx, PJ_GridCatalog *catalog, int after,
         break;
     }
 
-    if( iEntry == catalog->entry_count )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[34]) {
+      if ((iEntry == catalog -> entry_count ) && !(0))
+        fprintf(stderr, "triggered bug index 34\n");
+      else
+        fprintf(stderr, "reached bug index 34\n");
+    }
+    if ((!FIXREVERTER[34] && (iEntry == catalog -> entry_count ))
+    #else
+    if (0
+    #endif
+     )
     {
         if( grid_date )
             *grid_date = 0.0;
@@ -268,6 +344,9 @@ PJ_GRIDINFO *pj_gc_findgrid( projCtx ctx, PJ_GridCatalog *catalog, int after,
             memset( optimal_region, 0, sizeof(PJ_Region));
         return NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if( grid_date )
         *grid_date = entry->date;
@@ -283,8 +362,23 @@ PJ_GRIDINFO *pj_gc_findgrid( projCtx ctx, PJ_GridCatalog *catalog, int after,
         int grid_count = 0;
         gridlist = pj_gridlist_from_nadgrids( ctx, entry->definition, 
                                               &grid_count);
-        if( grid_count == 1 )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[35]) {
+          if ((grid_count == 1  ) && !(0))
+            fprintf(stderr, "triggered bug index 35\n");
+          else
+            fprintf(stderr, "reached bug index 35\n");
+        }
+        if ((!FIXREVERTER[35] && (grid_count == 1  ))
+        #else
+        if (0
+        #endif
+         )
             entry->gridinfo = gridlist[0];
+            #ifdef FRCOV
+            }
+            #endif
     }
     
     return entry->gridinfo;
diff --git a/src/pj_gridinfo.c b/src/pj_gridinfo.c
index 458f0f2..ee3dfc4 100644
--- a/src/pj_gridinfo.c
+++ b/src/pj_gridinfo.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Functions for handling individual PJ_GRIDINFO's.  Includes
@@ -81,8 +85,23 @@ static void swap_words( unsigned char *data, int word_size, int word_count )
 void pj_gridinfo_free( projCtx ctx, PJ_GRIDINFO *gi )
 
 {
-    if( gi == NULL )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[142]) {
+      if ((gi == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 142\n");
+      else
+        fprintf(stderr, "reached bug index 142\n");
+    }
+    if ((!FIXREVERTER[142] && (gi == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if( gi->child != NULL )
     {
@@ -118,8 +137,23 @@ int pj_gridinfo_load( projCtx ctx, PJ_GRIDINFO *gi )
 {
     struct CTABLE ct_tmp;
 
-    if( gi == NULL || gi->ct == NULL )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[143]) {
+      if ((gi == (void *) 0 || gi -> ct == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 143\n");
+      else
+        fprintf(stderr, "reached bug index 143\n");
+    }
+    if ((!FIXREVERTER[143] && (gi == (void *) 0 || gi -> ct == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_acquire_lock();
     if( gi->ct->cvs != NULL )
@@ -140,12 +174,27 @@ int pj_gridinfo_load( projCtx ctx, PJ_GRIDINFO *gi )
 
         fid = pj_open_lib( ctx, gi->filename, "rb" );
 
-        if( fid == NULL )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[144]) {
+          if ((fid == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 144\n");
+          else
+            fprintf(stderr, "reached bug index 144\n");
+        }
+        if ((!FIXREVERTER[144] && (fid == (void *) 0 ))
+        #else
+        if (0
+        #endif
+         )
         {
             pj_ctx_set_errno( ctx, -38 );
             pj_release_lock();
             return 0;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         result = nad_ctable_load( ctx, &ct_tmp, fid );
 
@@ -167,12 +216,27 @@ int pj_gridinfo_load( projCtx ctx, PJ_GRIDINFO *gi )
 
         fid = pj_open_lib( ctx, gi->filename, "rb" );
 
-        if( fid == NULL )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[145]) {
+          if ((fid == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 145\n");
+          else
+            fprintf(stderr, "reached bug index 145\n");
+        }
+        if ((!FIXREVERTER[145] && (fid == (void *) 0 ))
+        #else
+        if (0
+        #endif
+         )
         {
             pj_ctx_set_errno( ctx, -38 );
             pj_release_lock();
             return 0;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         result = nad_ctable2_load( ctx, &ct_tmp, fid );
 
@@ -199,23 +263,53 @@ int pj_gridinfo_load( projCtx ctx, PJ_GRIDINFO *gi )
 
         fid = pj_open_lib( ctx, gi->filename, "rb" );
 
-        if( fid == NULL )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[146]) {
+          if ((fid == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 146\n");
+          else
+            fprintf(stderr, "reached bug index 146\n");
+        }
+        if ((!FIXREVERTER[146] && (fid == (void *) 0 ))
+        #else
+        if (0
+        #endif
+         )
         {
             pj_ctx_set_errno( ctx, -38 );
             pj_release_lock();
             return 0;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         pj_ctx_fseek( ctx, fid, gi->grid_offset, SEEK_SET );
 
         row_buf = (double *) pj_malloc(gi->ct->lim.lam * sizeof(double) * 2);
         ct_tmp.cvs = (FLP *) pj_malloc(gi->ct->lim.lam*gi->ct->lim.phi*sizeof(FLP));
-        if( row_buf == NULL || ct_tmp.cvs == NULL )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[147]) {
+          if ((row_buf == (void *) 0 || ct_tmp . cvs == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 147\n");
+          else
+            fprintf(stderr, "reached bug index 147\n");
+        }
+        if ((!FIXREVERTER[147] && (row_buf == (void *) 0 || ct_tmp . cvs == (void *) 0 ))
+        #else
+        if (0
+        #endif
+         )
         {
             pj_ctx_set_errno( ctx, -38 );
             pj_release_lock();
             return 0;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         for( row = 0; row < gi->ct->lim.phi; row++ )
         {
@@ -277,23 +371,53 @@ int pj_gridinfo_load( projCtx ctx, PJ_GRIDINFO *gi )
 
         fid = pj_open_lib( ctx, gi->filename, "rb" );
 
-        if( fid == NULL )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[148]) {
+          if ((fid == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 148\n");
+          else
+            fprintf(stderr, "reached bug index 148\n");
+        }
+        if ((!FIXREVERTER[148] && (fid == (void *) 0 ))
+        #else
+        if (0
+        #endif
+         )
         {
             pj_ctx_set_errno( ctx, -38 );
             pj_release_lock();
             return 0;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         pj_ctx_fseek( ctx, fid, gi->grid_offset, SEEK_SET );
 
         row_buf = (float *) pj_malloc(gi->ct->lim.lam * sizeof(float) * 4);
         ct_tmp.cvs = (FLP *) pj_malloc(gi->ct->lim.lam*gi->ct->lim.phi*sizeof(FLP));
-        if( row_buf == NULL || ct_tmp.cvs == NULL )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[149]) {
+          if ((row_buf == (void *) 0 || ct_tmp . cvs == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 149\n");
+          else
+            fprintf(stderr, "reached bug index 149\n");
+        }
+        if ((!FIXREVERTER[149] && (row_buf == (void *) 0 || ct_tmp . cvs == (void *) 0 ))
+        #else
+        if (0
+        #endif
+         )
         {
             pj_ctx_set_errno( ctx, -38 );
             pj_release_lock();
             return 0;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         for( row = 0; row < gi->ct->lim.phi; row++ )
         {
@@ -350,22 +474,52 @@ int pj_gridinfo_load( projCtx ctx, PJ_GRIDINFO *gi )
 
         fid = pj_open_lib( ctx, gi->filename, "rb" );
 
-        if( fid == NULL )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[150]) {
+          if ((fid == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 150\n");
+          else
+            fprintf(stderr, "reached bug index 150\n");
+        }
+        if ((!FIXREVERTER[150] && (fid == (void *) 0 ))
+        #else
+        if (0
+        #endif
+         )
         {
             pj_ctx_set_errno( ctx, -38 );
             pj_release_lock();
             return 0;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         pj_ctx_fseek( ctx, fid, gi->grid_offset, SEEK_SET );
 
         ct_tmp.cvs = (FLP *) pj_malloc(words*sizeof(float));
-        if( ct_tmp.cvs == NULL )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[151]) {
+          if ((ct_tmp . cvs == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 151\n");
+          else
+            fprintf(stderr, "reached bug index 151\n");
+        }
+        if ((!FIXREVERTER[151] && (ct_tmp . cvs == (void *) 0 ))
+        #else
+        if (0
+        #endif
+         )
         {
             pj_ctx_set_errno( ctx, -38 );
             pj_release_lock();
             return 0;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         if( pj_ctx_fread( ctx, ct_tmp.cvs, sizeof(float), words, fid )
             != (size_t)words )
diff --git a/src/pj_gridlist.c b/src/pj_gridlist.c
index 4193526..52ffc21 100644
--- a/src/pj_gridlist.c
+++ b/src/pj_gridlist.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Code to manage the list of currently loaded (cached) PJ_GRIDINFOs
@@ -93,8 +97,23 @@ static int pj_gridlist_merge_gridfile( projCtx ctx,
             got_match = 1;
 
             /* don't add to the list if it is invalid. */
-            if( this_grid->ct == NULL )
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[81]) {
+              if ((this_grid -> ct == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 81\n");
+              else
+                fprintf(stderr, "reached bug index 81\n");
+            }
+            if ((!FIXREVERTER[81] && (this_grid -> ct == (void *) 0 ))
+            #else
+            if (0
+            #endif
+             )
                 return 0;
+                #ifdef FRCOV
+                }
+                #endif
 
             /* do we need to grow the list? */
             if( *p_gridcount >= *p_gridmax - 2 )
@@ -130,12 +149,27 @@ static int pj_gridlist_merge_gridfile( projCtx ctx,
 /* -------------------------------------------------------------------- */
     this_grid = pj_gridinfo_init( ctx, gridname );
 
-    if( this_grid == NULL )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[82]) {
+      if ((this_grid == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 82\n");
+      else
+        fprintf(stderr, "reached bug index 82\n");
+    }
+    if ((!FIXREVERTER[82] && (this_grid == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     )
     {
         /* we should get at least a stub grid with a missing "ct" member */
         assert( FALSE );
         return 0;
     }
+    #ifdef FRCOV
+    }
+    #endif
     
     if( tail != NULL )
         tail->next = this_grid;
diff --git a/src/pj_init.c b/src/pj_init.c
index 7448fdb..35db4ee 100644
--- a/src/pj_init.c
+++ b/src/pj_init.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Initialize projection object from string definition.  Includes
@@ -59,8 +63,23 @@ static const char *fill_buffer(pj_read_state *state, const char *last_char)
 /*      Don't bother trying to read more if we are at eof, or if the    */
 /*      buffer is still over half full.                                 */
 /* -------------------------------------------------------------------- */
-    if (last_char == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[220]) {
+      if ((last_char == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 220\n");
+      else
+        fprintf(stderr, "reached bug index 220\n");
+    }
+    if ((!FIXREVERTER[220] && (last_char == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         last_char = state->buffer;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (state->at_eof)
         return last_char;
@@ -142,8 +161,23 @@ get_opt(projCtx ctx, paralist **start, PAFile fid, char *name, paralist *next,
     len = (int)strlen(name);
     *sword = 't';
 
-    if (0==next_char)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[221]) {
+      if ((0 == next_char ) && !(0))
+        fprintf(stderr, "triggered bug index 221\n");
+      else
+        fprintf(stderr, "reached bug index 221\n");
+    }
+    if ((!FIXREVERTER[221] && (0 == next_char ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* loop till we find our target keyword */
     while (*next_char)
@@ -155,8 +189,23 @@ get_opt(projCtx ctx, paralist **start, PAFile fid, char *name, paralist *next,
             next_char++;
 
         next_char = fill_buffer(state, next_char);
-        if (0==next_char)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[222]) {
+          if ((0 == next_char ) && !(0))
+            fprintf(stderr, "triggered bug index 222\n");
+          else
+            fprintf(stderr, "reached bug index 222\n");
+        }
+        if ((!FIXREVERTER[222] && (0 == next_char ))
+        #else
+        if (0
+        #endif
+        )
             return 0;
+            #ifdef FRCOV
+            }
+            #endif
 
         /* for comments, skip past end of line. */
         if( *next_char == '#' )
@@ -165,8 +214,23 @@ get_opt(projCtx ctx, paralist **start, PAFile fid, char *name, paralist *next,
                 next_char++;
 
             next_char = fill_buffer(state, next_char);
-            if (0==next_char)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[223]) {
+              if ((0 == next_char ) && !(0))
+                fprintf(stderr, "triggered bug index 223\n");
+              else
+                fprintf(stderr, "reached bug index 223\n");
+            }
+            if ((!FIXREVERTER[223] && (0 == next_char ))
+            #else
+            if (0
+            #endif
+            )
                 return 0;
+                #ifdef FRCOV
+                }
+                #endif
             if (*next_char == '\n')
                 next_char++;
             if (*next_char == '\r')
@@ -377,11 +441,26 @@ pj_init_plus_ctx( projCtx ctx, const char *definition )
                     blank_count = 0;
                 }
 
-                if( argc+1 == MAX_ARG )
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[224]) {
+                  if ((argc + 1 == 200 ) && !(0))
+                    fprintf(stderr, "triggered bug index 224\n");
+                  else
+                    fprintf(stderr, "reached bug index 224\n");
+                }
+                if ((!FIXREVERTER[224] && (argc + 1 == 200 ))
+                #else
+                if (0
+                #endif
+                 )
                 {
                     pj_ctx_set_errno( ctx, -44 );
                     goto bum_call;
                 }
+                #ifdef FRCOV
+                }
+                #endif
 
                 argv[argc++] = defn_copy + i + 1;
             }
diff --git a/src/pj_internal.c b/src/pj_internal.c
index 31c299a..b24a8d3 100644
--- a/src/pj_internal.c
+++ b/src/pj_internal.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  This is primarily material originating from pj_obs_api.c,
@@ -221,8 +225,23 @@ size_t pj_strlcpy(char *dst, const char *src, size_t siz) {
 
 
 void proj_context_errno_set (PJ_CONTEXT *ctx, int err) {
-    if (0==ctx)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[231]) {
+      if ((0 == ctx ) && !(0))
+        fprintf(stderr, "triggered bug index 231\n");
+      else
+        fprintf(stderr, "reached bug index 231\n");
+    }
+    if ((!FIXREVERTER[231] && (0 == ctx ))
+    #else
+    if (0
+    #endif
+    )
         ctx = pj_get_default_ctx();
+        #ifdef FRCOV
+        }
+        #endif
     pj_ctx_set_errno (ctx, err);
     return;
 }
@@ -232,10 +251,40 @@ void proj_context_errno_set (PJ_CONTEXT *ctx, int err) {
 /* Set logging level 0-3. Higher number means more debug info. 0 turns it off */
 enum proj_log_level proj_log_level (PJ_CONTEXT *ctx, enum proj_log_level log_level) {
     enum proj_log_level previous;
-    if (0==ctx)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[232]) {
+      if ((0 == ctx ) && !(0))
+        fprintf(stderr, "triggered bug index 232\n");
+      else
+        fprintf(stderr, "reached bug index 232\n");
+    }
+    if ((!FIXREVERTER[232] && (0 == ctx ))
+    #else
+    if (0
+    #endif
+    )
         ctx = pj_get_default_ctx();
-    if (0==ctx)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[233]) {
+      if ((0 == ctx ) && !(0))
+        fprintf(stderr, "triggered bug index 233\n");
+      else
+        fprintf(stderr, "reached bug index 233\n");
+    }
+    if ((!FIXREVERTER[233] && (0 == ctx ))
+    #else
+    if (0
+    #endif
+    )
         return PJ_LOG_TELL;
+        #ifdef FRCOV
+        }
+        #endif
     previous = ctx->debug_level;
     if (PJ_LOG_TELL==log_level)
         return previous;
diff --git a/src/pj_inv.c b/src/pj_inv.c
index 55fc917..d1a3db9 100644
--- a/src/pj_inv.c
+++ b/src/pj_inv.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /* general inverse projection */
 #define PJ_LIB__
 #include <proj.h>
@@ -14,8 +18,23 @@ LP pj_inv(XY xy, PJ *P) {
     /* cannot const-initialize this due to MSVC's broken (non const) HUGE_VAL */
     err.lam = err.phi = HUGE_VAL;
 
-    if (0==P->inv)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[137]) {
+      if ((0 == P -> inv ) && !(0))
+        fprintf(stderr, "triggered bug index 137\n");
+      else
+        fprintf(stderr, "reached bug index 137\n");
+    }
+    if ((!FIXREVERTER[137] && (0 == P -> inv ))
+    #else
+    if (0
+    #endif
+    )
         return err;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* can't do as much preliminary checking as with forward */
     if (xy.x == HUGE_VAL || xy.y == HUGE_VAL) {
diff --git a/src/pj_inv3d.c b/src/pj_inv3d.c
index a01cfa7..746d4e7 100644
--- a/src/pj_inv3d.c
+++ b/src/pj_inv3d.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 #define PJ_LIB__
 #include <proj.h>
 #include <projects.h>
@@ -14,8 +18,23 @@ LPZ pj_inv3d (XYZ xyz, PJ *P) {
     /* cannot const-initialize this due to MSVC's broken (non const) HUGE_VAL */
     err.lam = err.phi = err.z = HUGE_VAL;
 
-    if (0==P->inv3d)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[272]) {
+      if ((0 == P -> inv3d ) && !(0))
+        fprintf(stderr, "triggered bug index 272\n");
+      else
+        fprintf(stderr, "reached bug index 272\n");
+    }
+    if ((!FIXREVERTER[272] && (0 == P -> inv3d ))
+    #else
+    if (0
+    #endif
+    )
         return err;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* can't do as much preliminary checking as with forward */
     if (xyz.x == HUGE_VAL || xyz.y == HUGE_VAL || xyz.z == HUGE_VAL ) {
diff --git a/src/pj_latlong.c b/src/pj_latlong.c
index 761eadc..ec88c0e 100644
--- a/src/pj_latlong.c
+++ b/src/pj_latlong.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Stub projection implementation for lat/long coordinates. We 
@@ -54,8 +58,23 @@ static LP inverse(XY xy, PJ *P) {
 
 
 static void *freeup_new (PJ *P) {
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[174]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 174\n");
+      else
+        fprintf(stderr, "reached bug index 174\n");
+    }
+    if ((!FIXREVERTER[174] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     return pj_dealloc(P);
 }
diff --git a/src/pj_log.c b/src/pj_log.c
index 2525d05..19b4d5a 100644
--- a/src/pj_log.c
+++ b/src/pj_log.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Implementation of pj_log() function.
@@ -52,12 +56,42 @@ void pj_vlog( projCtx ctx, int level, const char *fmt, va_list args )
 {
     char *msg_buf;
 
-    if( level > ctx->debug_level )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[252]) {
+      if ((level > ctx -> debug_level ) && !(0))
+        fprintf(stderr, "triggered bug index 252\n");
+      else
+        fprintf(stderr, "reached bug index 252\n");
+    }
+    if ((!FIXREVERTER[252] && (level > ctx -> debug_level ))
+    #else
+    if (0
+    #endif
+     )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     msg_buf = (char *) malloc(100000);
-    if( msg_buf == NULL )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[253]) {
+      if ((msg_buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 253\n");
+      else
+        fprintf(stderr, "reached bug index 253\n");
+    }
+    if ((!FIXREVERTER[253] && (msg_buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* we should use vsnprintf where available once we add configure detect.*/
     vsprintf( msg_buf, fmt, args );
@@ -77,8 +111,23 @@ void pj_log( projCtx ctx, int level, const char *fmt, ... )
 {
     va_list args;
 
-    if( level > ctx->debug_level )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[254]) {
+      if ((level > ctx -> debug_level ) && !(0))
+        fprintf(stderr, "triggered bug index 254\n");
+      else
+        fprintf(stderr, "reached bug index 254\n");
+    }
+    if ((!FIXREVERTER[254] && (level > ctx -> debug_level ))
+    #else
+    if (0
+    #endif
+     )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     va_start( args, fmt );
     pj_vlog( ctx, level, fmt, args );
diff --git a/src/pj_malloc.c b/src/pj_malloc.c
index 330b14a..3c0d174 100644
--- a/src/pj_malloc.c
+++ b/src/pj_malloc.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Memory management for proj.4.
@@ -78,8 +82,23 @@ The array is initialized to zeros.
 
 ***********************************************************************/
     void *res = pj_malloc (n*size);
-    if (0==res)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[15]) {
+      if ((0 == res ) && !(0))
+        fprintf(stderr, "triggered bug index 15\n");
+      else
+        fprintf(stderr, "reached bug index 15\n");
+    }
+    if ((!FIXREVERTER[15] && (0 == res ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     memset (res, 0, n*size);
     return res;
 }
@@ -105,8 +124,23 @@ pointer" to signal an error in a multi level allocation:
     return p;  // success
 
 ***********************************************************************/
-    if (0==ptr)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[16]) {
+      if ((0 == ptr ) && !(0))
+        fprintf(stderr, "triggered bug index 16\n");
+      else
+        fprintf(stderr, "reached bug index 16\n");
+    }
+    if ((!FIXREVERTER[16] && (0 == ptr ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     pj_dalloc (ptr);
     return 0;
 }
@@ -121,14 +155,44 @@ static void *pj_freeup_msg_plain (PJ *P, int errlev) {         /* Destructor */
     of PJs where the opaque object does not contain any additionally
     allocated memory.
 ******************************************************************************/
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[17]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 17\n");
+      else
+        fprintf(stderr, "reached bug index 17\n");
+    }
+    if ((!FIXREVERTER[17] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (0!=errlev)
         pj_ctx_set_errno (P->ctx, errlev);
 
-    if (0==P->opaque)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[18]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 18\n");
+      else
+        fprintf(stderr, "reached bug index 18\n");
+    }
+    if ((!FIXREVERTER[18] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
diff --git a/src/pj_obs_api.c b/src/pj_obs_api.c
index b2929a0..744fe36 100644
--- a/src/pj_obs_api.c
+++ b/src/pj_obs_api.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Implement a (currently minimalistic) proj API based primarily
@@ -126,8 +130,23 @@ double proj_roundtrip (PJ *P, enum proj_direction direction, int n, PJ_OBS obs)
 
 /* Apply the transformation P to the coordinate coo */
 PJ_OBS proj_trans_obs (PJ *P, enum proj_direction direction, PJ_OBS obs) {
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[104]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 104\n");
+      else
+        fprintf(stderr, "reached bug index 104\n");
+    }
+    if ((!FIXREVERTER[104] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return obs;
+        #ifdef FRCOV
+        }
+        #endif
 
     switch (direction) {
         case PJ_FWD:
@@ -410,10 +429,40 @@ PJ *proj_destroy (PJ *P) {
 /* For now, if PJ itself is clean, we return the thread local error level. */
 /* This may change as OBS_API error reporting matures */
 int proj_errno (PJ *P) {
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[121]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 121\n");
+      else
+        fprintf(stderr, "reached bug index 121\n");
+    }
+    if ((!FIXREVERTER[121] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return pj_ctx_get_errno (pj_get_default_ctx ());
-    if (0 != P->last_errno)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[122]) {
+      if ((0 != P -> last_errno ) && !(0))
+        fprintf(stderr, "triggered bug index 122\n");
+      else
+        fprintf(stderr, "reached bug index 122\n");
+    }
+    if ((!FIXREVERTER[122] && (0 != P -> last_errno ))
+    #else
+    if (0
+    #endif
+    )
         return P->last_errno;
+        #ifdef FRCOV
+        }
+        #endif
     return pj_ctx_get_errno (pj_get_ctx (P));
 }
 
@@ -423,14 +472,44 @@ void proj_errno_set (PJ *P, int err) {
     Sets errno in the PJ, and bubbles it up to the context and pj_errno levels
     through the low level pj_ctx interface.
 ******************************************************************************/
-    if (0==P) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[123]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 123\n");
+      else
+        fprintf(stderr, "reached bug index 123\n");
+    }
+    if ((!FIXREVERTER[123] && (0 == P ))
+    #else
+    if (0
+    #endif
+    ) {
         errno = EINVAL;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /* Use proj_errno_reset to explicitly clear the error status */
-    if (0==err)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[124]) {
+      if ((0 == err ) && !(0))
+        fprintf(stderr, "triggered bug index 124\n");
+      else
+        fprintf(stderr, "reached bug index 124\n");
+    }
+    if ((!FIXREVERTER[124] && (0 == err ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* set local error level */
     P->last_errno = err;
@@ -480,10 +559,25 @@ int proj_errno_reset (PJ *P) {
     }
 ******************************************************************************/
     int last_errno;
-    if (0==P) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[125]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 125\n");
+      else
+        fprintf(stderr, "reached bug index 125\n");
+    }
+    if ((!FIXREVERTER[125] && (0 == P ))
+    #else
+    if (0
+    #endif
+    ) {
         errno = EINVAL;
         return EINVAL;
     }
+    #ifdef FRCOV
+    }
+    #endif
     last_errno = proj_errno (P);
 
     /* set local error level */
diff --git a/src/pj_open_lib.c b/src/pj_open_lib.c
index 08532be..0cbf09c 100644
--- a/src/pj_open_lib.c
+++ b/src/pj_open_lib.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Implementation of pj_open_lib(), and pj_set_finder().  These
@@ -165,11 +169,29 @@ pj_open_lib_ex(projCtx ctx, const char *name, const char *mode,
 
     if ((fid = pj_ctx_fopen(ctx, sysname, mode)) != NULL)
     {
-        if( out_full_filename != NULL && out_full_filename_size > 0 )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[53]) {
+          fprintf(stderr, "reached bug index 53\n");
+        }
+        if ((FIXREVERTER[53] && (out_full_filename != (void *) 0 )) || (!FIXREVERTER[53] && (out_full_filename != (void *) 0 && out_full_filename_size > 0 ))
+        #else
+        if (out_full_filename != (void *) 0 
+        #endif
+         )
         {
+          
+        #ifdef FRCOV
+          if (!(out_full_filename_size > 0 ))
+            fprintf(stderr, "triggered bug index 53\n");
+          #endif
+        
             strncpy(out_full_filename, sysname, out_full_filename_size);
             out_full_filename[out_full_filename_size-1] = '\0';
         }
+        #ifdef FRCOV
+        }
+        #endif
         errno = 0;
     }
 
@@ -187,11 +209,29 @@ pj_open_lib_ex(projCtx ctx, const char *name, const char *mode,
         }
         if (fid)
         {
-            if( out_full_filename != NULL && out_full_filename_size > 0 )
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[54]) {
+              fprintf(stderr, "reached bug index 54\n");
+            }
+            if ((FIXREVERTER[54] && (out_full_filename != (void *) 0 )) || (!FIXREVERTER[54] && (out_full_filename != (void *) 0 && out_full_filename_size > 0 ))
+            #else
+            if (out_full_filename != (void *) 0 
+            #endif
+             )
             {
+              
+            #ifdef FRCOV
+              if (!(out_full_filename_size > 0 ))
+                fprintf(stderr, "triggered bug index 54\n");
+              #endif
+            
                 strncpy(out_full_filename, sysname, out_full_filename_size);
                 out_full_filename[out_full_filename_size-1] = '\0';
             }
+            #ifdef FRCOV
+            }
+            #endif
             errno = 0;
         }
     }
diff --git a/src/pj_param.c b/src/pj_param.c
index 93f5cf5..ad1afc3 100644
--- a/src/pj_param.c
+++ b/src/pj_param.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /* put parameters in linked list and retrieve */
 #include <projects.h>
 #include <stdio.h>
@@ -40,8 +44,23 @@ pj_param(projCtx ctx, paralist *pl, const char *opt) {
 	unsigned l;
 	PROJVALUE value;
 
-	if( ctx == NULL )
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[87]) {
+	  if ((ctx == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 87\n");
+	  else
+	    fprintf(stderr, "reached bug index 87\n");
+	}
+	if ((!FIXREVERTER[87] && (ctx == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	 )
 		ctx = pj_get_default_ctx();
+		#ifdef FRCOV
+		}
+		#endif
 
 	type = *opt++;
 	/* simple linear lookup */
diff --git a/src/pj_transform.c b/src/pj_transform.c
index a842ba7..a6100d0 100644
--- a/src/pj_transform.c
+++ b/src/pj_transform.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /******************************************************************************
  * Project:  PROJ.4
  * Purpose:  Perform overall coordinate system to coordinate system
@@ -89,8 +93,23 @@ int pj_transform( PJ *srcdefn, PJ *dstdefn, long point_count, int point_offset,
     srcdefn->ctx->last_errno = 0;
     dstdefn->ctx->last_errno = 0;
 
-    if( point_offset == 0 )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[259]) {
+      if ((point_offset == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 259\n");
+      else
+        fprintf(stderr, "reached bug index 259\n");
+    }
+    if ((!FIXREVERTER[259] && (point_offset == 0 ))
+    #else
+    if (0
+    #endif
+     )
         point_offset = 1;
+        #ifdef FRCOV
+        }
+        #endif
 
 /* -------------------------------------------------------------------- */
 /*      Transform unusual input coordinate axis orientation to          */
@@ -121,11 +140,26 @@ int pj_transform( PJ *srcdefn, PJ *dstdefn, long point_count, int point_offset,
     if( srcdefn->is_geocent )
     {
         int err;
-        if( z == NULL )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[261]) {
+          if ((z == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 261\n");
+          else
+            fprintf(stderr, "reached bug index 261\n");
+        }
+        if ((!FIXREVERTER[261] && (z == (void *) 0 ))
+        #else
+        if (0
+        #endif
+         )
         {
             pj_ctx_set_errno( pj_get_ctx(srcdefn), PJD_ERR_GEOCENTRIC);
             return PJD_ERR_GEOCENTRIC;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         if( srcdefn->to_meter != 1.0 )
         {
@@ -166,11 +200,26 @@ int pj_transform( PJ *srcdefn, PJ *dstdefn, long point_count, int point_offset,
         if (srcdefn->inv3d != NULL)
         {
             /* Three dimensions must be defined */
-            if ( z == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[263]) {
+              if ((z == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 263\n");
+              else
+                fprintf(stderr, "reached bug index 263\n");
+            }
+            if ((!FIXREVERTER[263] && (z == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
             {
                 pj_ctx_set_errno( pj_get_ctx(srcdefn), PJD_ERR_GEOCENTRIC);
                 return PJD_ERR_GEOCENTRIC;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             for (i=0; i < point_count; i++)
             {
@@ -313,11 +362,26 @@ int pj_transform( PJ *srcdefn, PJ *dstdefn, long point_count, int point_offset,
 /* -------------------------------------------------------------------- */
     if( dstdefn->is_geocent )
     {
-        if( z == NULL )
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[264]) {
+          if ((z == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 264\n");
+          else
+            fprintf(stderr, "reached bug index 264\n");
+        }
+        if ((!FIXREVERTER[264] && (z == (void *) 0 ))
+        #else
+        if (0
+        #endif
+         )
         {
             pj_ctx_set_errno( dstdefn->ctx, PJD_ERR_GEOCENTRIC );
             return PJD_ERR_GEOCENTRIC;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         pj_geodetic_to_geocentric( dstdefn->a_orig, dstdefn->es_orig,
                                    point_count, point_offset, x, y, z );
@@ -345,11 +409,26 @@ int pj_transform( PJ *srcdefn, PJ *dstdefn, long point_count, int point_offset,
         if( dstdefn->fwd3d != NULL)
         {
             /* Three dimensions must be defined */
-            if ( z == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[265]) {
+              if ((z == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 265\n");
+              else
+                fprintf(stderr, "reached bug index 265\n");
+            }
+            if ((!FIXREVERTER[265] && (z == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
             {
                 pj_ctx_set_errno( pj_get_ctx(dstdefn), PJD_ERR_GEOCENTRIC);
                 return PJD_ERR_GEOCENTRIC;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             for( i = 0; i < point_count; i++ )
             {
@@ -719,9 +798,23 @@ int pj_datum_transform( PJ *srcdefn, PJ *dstdefn,
 /*      (ie. only a +ellps declaration, no +datum).  This is new        */
 /*      behavior for PROJ 4.6.0.                                        */
 /* -------------------------------------------------------------------- */
-    if( srcdefn->datum_type == PJD_UNKNOWN
-        || dstdefn->datum_type == PJD_UNKNOWN )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[267]) {
+      if ((srcdefn -> datum_type == 0 || dstdefn -> datum_type == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 267\n");
+      else
+        fprintf(stderr, "reached bug index 267\n");
+    }
+    if ((!FIXREVERTER[267] && (srcdefn -> datum_type == 0 || dstdefn -> datum_type == 0 ))
+    #else
+    if (0
+    #endif
+     )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
 
 /* -------------------------------------------------------------------- */
 /*      Short cut if the datums are identical.                          */
diff --git a/src/proj_etmerc.c b/src/proj_etmerc.c
index ff466ea..34f5c19 100644
--- a/src/proj_etmerc.c
+++ b/src/proj_etmerc.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
 ** libproj -- library of cartographic projections
 **
@@ -234,10 +238,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[247]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 247\n");
+      else
+        fprintf(stderr, "reached bug index 247\n");
+    }
+    if ((!FIXREVERTER[247] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[248]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 248\n");
+      else
+        fprintf(stderr, "reached bug index 248\n");
+    }
+    if ((!FIXREVERTER[248] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
     pj_dealloc (P->opaque);
     return pj_dealloc(P);
 }
diff --git a/src/proj_rouss.c b/src/proj_rouss.c
index b33e792..d9996cb 100644
--- a/src/proj_rouss.c
+++ b/src/proj_rouss.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
 ** libproj -- library of cartographic projections
 **
@@ -80,10 +84,40 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 static void *freeup_new (PJ *P) {                       /* Destructor */
-    if (0==P)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[241]) {
+      if ((0 == P ) && !(0))
+        fprintf(stderr, "triggered bug index 241\n");
+      else
+        fprintf(stderr, "reached bug index 241\n");
+    }
+    if ((!FIXREVERTER[241] && (0 == P ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
-    if (0==P->opaque)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[242]) {
+      if ((0 == P -> opaque ) && !(0))
+        fprintf(stderr, "triggered bug index 242\n");
+      else
+        fprintf(stderr, "reached bug index 242\n");
+    }
+    if ((!FIXREVERTER[242] && (0 == P -> opaque ))
+    #else
+    if (0
+    #endif
+    )
         return pj_dealloc (P);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (P->opaque->en)
         pj_dealloc (P->opaque->en);
diff --git a/test/fuzzers/standard_fuzzer.cpp b/test/fuzzers/standard_fuzzer.cpp
index a39a2db..e7e9924 100644
--- a/test/fuzzers/standard_fuzzer.cpp
+++ b/test/fuzzers/standard_fuzzer.cpp
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#define FIXREVERTER_SIZE 278
+short FIXREVERTER[FIXREVERTER_SIZE];
+#endif
 /******************************************************************************
  *
  * Project:  proj.4
@@ -62,10 +66,44 @@ int LLVMFuzzerInitialize(int* /*argc*/, char*** argv)
     return 0;
 }
 
+
+#ifdef FRCOV
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#endif
 int LLVMFuzzerTestOneInput(const uint8_t *buf, size_t len)
 {
     /* We expect the blob to be 3 lines: */
     /* source proj string\ndestination proj string\nx y */
+    
+    #ifdef FRCOV
+    char *fixReverterEnv = getenv("FIXREVERTER");
+    char *fixReverterToken = strtok(fixReverterEnv, " ");
+    if (fixReverterToken == NULL) {
+      for (int i = 0; i < FIXREVERTER_SIZE; i++)
+        FIXREVERTER[i] = 1;
+    } else if (!strcmp("on", fixReverterToken)) {
+      for (int i = 0; i < FIXREVERTER_SIZE; i++)
+        FIXREVERTER[i] = 0;
+      fixReverterToken = strtok(NULL, " ");
+      while (fixReverterToken != NULL) {
+        FIXREVERTER[atoi(fixReverterToken)] = 1;
+        fixReverterToken = strtok(NULL, " ");
+      }
+    } else if (!strcmp("off", fixReverterToken)) {
+      for (int i = 0; i < FIXREVERTER_SIZE; i++)
+        FIXREVERTER[i] = 1;
+      fixReverterToken = strtok(NULL, " ");
+      while (fixReverterToken != NULL) {
+        FIXREVERTER[atoi(fixReverterToken)] = 0;
+        fixReverterToken = strtok(NULL, " ");
+      }
+    } else {
+      fprintf(stderr, "[FIXREVERTER] - first token must be on or off\n");
+      exit(0);
+    }
+    #endif
     char* buf_dup = (char*)malloc(len+1);
     memcpy(buf_dup, buf, len);
     buf_dup[len] = 0;
