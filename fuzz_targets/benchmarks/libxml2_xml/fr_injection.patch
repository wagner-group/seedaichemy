diff --git a/HTMLparser.c b/HTMLparser.c
index d329d3b5..9f4af66a 100644
--- a/HTMLparser.c
+++ b/HTMLparser.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * HTMLparser.c : an HTML 4.0 non-verifying parser
  *
@@ -1993,8 +1997,35 @@ UTF8ToHtml(unsigned char* out, int *outlen,
     unsigned int c, d;
     int trailing;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);
-    if (in == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4727]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4727\n");
+      else
+        fprintf(stderr, "reached bug index 4727\n");
+    }
+    if ((!FIXREVERTER[4727] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4728]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4728\n");
+      else
+        fprintf(stderr, "reached bug index 4728\n");
+    }
+    if ((!FIXREVERTER[4728] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
 	 * initialization nothing to do
 	 */
@@ -2002,6 +2033,9 @@ UTF8ToHtml(unsigned char* out, int *outlen,
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend = in + (*inlen);
     outend = out + (*outlen);
     while (in < inend) {
@@ -2035,8 +2069,23 @@ UTF8ToHtml(unsigned char* out, int *outlen,
 
 	/* assertion: c is a single UTF-4 value */
 	if (c < 0x80) {
-	    if (out + 1 >= outend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4729]) {
+	      if ((out + 1 >= outend ) && !(0))
+	        fprintf(stderr, "triggered bug index 4729\n");
+	      else
+	        fprintf(stderr, "reached bug index 4729\n");
+	    }
+	    if ((!FIXREVERTER[4729] && (out + 1 >= outend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    *out++ = c;
 	} else {
 	    int len;
@@ -2313,10 +2362,25 @@ htmlNewDocNoDtD(const xmlChar *URI, const xmlChar *ExternalID) {
      * Allocate a new document and fill the fields.
      */
     cur = (xmlDocPtr) xmlMalloc(sizeof(xmlDoc));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4736]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4736\n");
+      else
+        fprintf(stderr, "reached bug index 4736\n");
+    }
+    if ((!FIXREVERTER[4736] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	htmlErrMemory(NULL, "HTML document creation failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlDoc));
 
     cur->type = XML_HTML_DOCUMENT_NODE;
diff --git a/SAX2.c b/SAX2.c
index ffef3e14..f0daa54b 100644
--- a/SAX2.c
+++ b/SAX2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * SAX2.c : Default SAX2 handler to build a tree.
  *
@@ -140,8 +144,23 @@ xmlFatalErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3679]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3679\n");
+      else
+        fprintf(stderr, "reached bug index 3679\n");
+    }
+    if ((!FIXREVERTER[3679] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                     XML_ERR_FATAL, NULL, 0,
 		    (const char *) str1, (const char *) str2,
@@ -149,8 +168,23 @@ xmlFatalErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
 	ctxt->valid = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3680]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3680\n");
+	  else
+	    fprintf(stderr, "reached bug index 3680\n");
+	}
+	if ((!FIXREVERTER[3680] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -171,8 +205,23 @@ xmlWarnMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3681]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3681\n");
+      else
+        fprintf(stderr, "reached bug index 3681\n");
+    }
+    if ((!FIXREVERTER[3681] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                     XML_ERR_WARNING, NULL, 0,
 		    (const char *) str1, NULL,
@@ -196,8 +245,23 @@ xmlNsErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3682]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3682\n");
+      else
+        fprintf(stderr, "reached bug index 3682\n");
+    }
+    if ((!FIXREVERTER[3682] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,
                     XML_ERR_ERROR, NULL, 0,
 		    (const char *) str1, (const char *) str2,
@@ -220,8 +284,23 @@ xmlNsWarnMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3683]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3683\n");
+      else
+        fprintf(stderr, "reached bug index 3683\n");
+    }
+    if ((!FIXREVERTER[3683] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,
                     XML_ERR_WARNING, NULL, 0,
 		    (const char *) str1, (const char *) str2,
@@ -256,7 +335,22 @@ const xmlChar *
 xmlSAX2GetSystemId(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->input == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3684]) {
+      if ((ctx == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3684\n");
+      else
+        fprintf(stderr, "reached bug index 3684\n");
+    }
+    if ((!FIXREVERTER[3684] && (ctx == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     return((const xmlChar *) ctxt->input->filename);
 }
 
@@ -272,7 +366,22 @@ int
 xmlSAX2GetLineNumber(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->input == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3685]) {
+      if ((ctx == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3685\n");
+      else
+        fprintf(stderr, "reached bug index 3685\n");
+    }
+    if ((!FIXREVERTER[3685] && (ctx == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->input->line);
 }
 
@@ -288,7 +397,22 @@ int
 xmlSAX2GetColumnNumber(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->input == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3686]) {
+      if ((ctx == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3686\n");
+      else
+        fprintf(stderr, "reached bug index 3686\n");
+    }
+    if ((!FIXREVERTER[3686] && (ctx == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->input->col);
 }
 
@@ -304,7 +428,22 @@ int
 xmlSAX2IsStandalone(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->myDoc == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3687]) {
+      if ((ctx == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3687\n");
+      else
+        fprintf(stderr, "reached bug index 3687\n");
+    }
+    if ((!FIXREVERTER[3687] && (ctx == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->myDoc->standalone == 1);
 }
 
@@ -320,7 +459,22 @@ int
 xmlSAX2HasInternalSubset(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3688]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3688\n");
+      else
+        fprintf(stderr, "reached bug index 3688\n");
+    }
+    if ((!FIXREVERTER[3688] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->myDoc->intSubset != NULL);
 }
 
@@ -336,7 +490,22 @@ int
 xmlSAX2HasExternalSubset(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3689]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3689\n");
+      else
+        fprintf(stderr, "reached bug index 3689\n");
+    }
+    if ((!FIXREVERTER[3689] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->myDoc->extSubset != NULL);
 }
 
@@ -355,15 +524,45 @@ xmlSAX2InternalSubset(void *ctx, const xmlChar *name,
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlDtdPtr dtd;
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3690]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3690\n");
+      else
+        fprintf(stderr, "reached bug index 3690\n");
+    }
+    if ((!FIXREVERTER[3690] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2InternalSubset(%s, %s, %s)\n",
             name, ExternalID, SystemID);
 #endif
 
-    if (ctxt->myDoc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3691]) {
+      if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3691\n");
+      else
+        fprintf(stderr, "reached bug index 3691\n");
+    }
+    if ((!FIXREVERTER[3691] && (ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     dtd = xmlGetIntSubset(ctxt->myDoc);
     if (dtd != NULL) {
 	if (ctxt->html)
@@ -392,7 +591,22 @@ xmlSAX2ExternalSubset(void *ctx, const xmlChar *name,
 	       const xmlChar *ExternalID, const xmlChar *SystemID)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3692]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3692\n");
+      else
+        fprintf(stderr, "reached bug index 3692\n");
+    }
+    if ((!FIXREVERTER[3692] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2ExternalSubset(%s, %s, %s)\n",
@@ -419,9 +633,24 @@ xmlSAX2ExternalSubset(void *ctx, const xmlChar *name,
 	if ((ctxt->sax != NULL) && (ctxt->sax->resolveEntity != NULL))
 	    input = ctxt->sax->resolveEntity(ctxt->userData, ExternalID,
 	                                        SystemID);
-	if (input == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3693]) {
+	  if ((input == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3693\n");
+	  else
+	    fprintf(stderr, "reached bug index 3693\n");
+	}
+	if ((!FIXREVERTER[3693] && (input == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	xmlNewDtd(ctxt->myDoc, name, ExternalID, SystemID);
 
@@ -461,8 +690,23 @@ xmlSAX2ExternalSubset(void *ctx, const xmlChar *name,
 	    xmlSwitchEncoding(ctxt, enc);
 	}
 
-	if (input->filename == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3694]) {
+	  if ((input -> filename == (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3694\n");
+	  else
+	    fprintf(stderr, "reached bug index 3694\n");
+	}
+	if ((!FIXREVERTER[3694] && (input -> filename == (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    input->filename = (char *) xmlCanonicPath(SystemID);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	input->line = 1;
 	input->col = 1;
 	input->base = ctxt->input->cur;
@@ -522,11 +766,56 @@ xmlSAX2ResolveEntity(void *ctx, const xmlChar *publicId, const xmlChar *systemId
     xmlChar *URI;
     const char *base = NULL;
 
-    if (ctx == NULL) return(NULL);
-    if (ctxt->input != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3695]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3695\n");
+      else
+        fprintf(stderr, "reached bug index 3695\n");
+    }
+    if ((!FIXREVERTER[3695] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3696]) {
+      if ((ctxt -> input != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3696\n");
+      else
+        fprintf(stderr, "reached bug index 3696\n");
+    }
+    if ((!FIXREVERTER[3696] && (ctxt -> input != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	base = ctxt->input->filename;
-    if (base == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3697]) {
+      if ((base == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3697\n");
+      else
+        fprintf(stderr, "reached bug index 3697\n");
+    }
+    if ((!FIXREVERTER[3697] && (base == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	base = ctxt->directory;
+	#ifdef FRCOV
+	}
+	#endif
 
     URI = xmlBuildURI(systemId, (const xmlChar *) base);
 
@@ -557,7 +846,22 @@ xmlSAX2GetEntity(void *ctx, const xmlChar *name)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlEntityPtr ret = NULL;
 
-    if (ctx == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3698]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3698\n");
+      else
+        fprintf(stderr, "reached bug index 3698\n");
+    }
+    if ((!FIXREVERTER[3698] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2GetEntity(%s)\n", name);
@@ -637,7 +941,22 @@ xmlSAX2GetParameterEntity(void *ctx, const xmlChar *name)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlEntityPtr ret;
 
-    if (ctx == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3699]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3699\n");
+      else
+        fprintf(stderr, "reached bug index 3699\n");
+    }
+    if ((!FIXREVERTER[3699] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2GetParameterEntity(%s)\n", name);
@@ -666,7 +985,22 @@ xmlSAX2EntityDecl(void *ctx, const xmlChar *name, int type,
     xmlEntityPtr ent;
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3700]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3700\n");
+      else
+        fprintf(stderr, "reached bug index 3700\n");
+    }
+    if ((!FIXREVERTER[3700] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2EntityDecl(%s, %d, %s, %s, %s)\n",
@@ -683,10 +1017,40 @@ xmlSAX2EntityDecl(void *ctx, const xmlChar *name, int type,
 	    xmlChar *URI;
 	    const char *base = NULL;
 
-	    if (ctxt->input != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3701]) {
+	      if ((ctxt -> input != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3701\n");
+	      else
+	        fprintf(stderr, "reached bug index 3701\n");
+	    }
+	    if ((!FIXREVERTER[3701] && (ctxt -> input != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->input->filename;
-	    if (base == NULL)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3702]) {
+	      if ((base == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3702\n");
+	      else
+	        fprintf(stderr, "reached bug index 3702\n");
+	    }
+	    if ((!FIXREVERTER[3702] && (base == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->directory;
+		#ifdef FRCOV
+		}
+		#endif
 
 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);
 	    ent->URI = URI;
@@ -702,10 +1066,40 @@ xmlSAX2EntityDecl(void *ctx, const xmlChar *name, int type,
 	    xmlChar *URI;
 	    const char *base = NULL;
 
-	    if (ctxt->input != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3703]) {
+	      if ((ctxt -> input != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3703\n");
+	      else
+	        fprintf(stderr, "reached bug index 3703\n");
+	    }
+	    if ((!FIXREVERTER[3703] && (ctxt -> input != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->input->filename;
-	    if (base == NULL)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3704]) {
+	      if ((base == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3704\n");
+	      else
+	        fprintf(stderr, "reached bug index 3704\n");
+	    }
+	    if ((!FIXREVERTER[3704] && (base == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->directory;
+		#ifdef FRCOV
+		}
+		#endif
 
 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);
 	    ent->URI = URI;
@@ -738,8 +1132,23 @@ xmlSAX2AttributeDecl(void *ctx, const xmlChar *elem, const xmlChar *fullname,
     xmlAttributePtr attr;
     xmlChar *name = NULL, *prefix = NULL;
 
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3705]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3705\n");
+      else
+        fprintf(stderr, "reached bug index 3705\n");
+    }
+    if ((!FIXREVERTER[3705] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
@@ -804,8 +1213,23 @@ xmlSAX2ElementDecl(void *ctx, const xmlChar * name, int type,
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlElementPtr elem = NULL;
 
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3706]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3706\n");
+      else
+        fprintf(stderr, "reached bug index 3706\n");
+    }
+    if ((!FIXREVERTER[3706] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
@@ -825,8 +1249,23 @@ xmlSAX2ElementDecl(void *ctx, const xmlChar * name, int type,
         return;
     }
 #ifdef LIBXML_VALID_ENABLED
-    if (elem == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3707]) {
+      if ((elem == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3707\n");
+      else
+        fprintf(stderr, "reached bug index 3707\n");
+    }
+    if ((!FIXREVERTER[3707] && (elem == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->valid = 0;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->validate && ctxt->wellFormed &&
         ctxt->myDoc && ctxt->myDoc->intSubset)
         ctxt->valid &=
@@ -850,8 +1289,23 @@ xmlSAX2NotationDecl(void *ctx, const xmlChar *name,
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNotationPtr nota = NULL;
 
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3708]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3708\n");
+      else
+        fprintf(stderr, "reached bug index 3708\n");
+    }
+    if ((!FIXREVERTER[3708] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
@@ -876,7 +1330,22 @@ xmlSAX2NotationDecl(void *ctx, const xmlChar *name,
 	return;
     }
 #ifdef LIBXML_VALID_ENABLED
-    if (nota == NULL) ctxt->valid = 0;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3709]) {
+      if ((nota == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3709\n");
+      else
+        fprintf(stderr, "reached bug index 3709\n");
+    }
+    if ((!FIXREVERTER[3709] && (nota == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    ) ctxt->valid = 0;
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt->validate) && (ctxt->wellFormed) &&
         (ctxt->myDoc->intSubset != NULL))
 	ctxt->valid &= xmlValidateNotationDecl(&ctxt->vctxt, ctxt->myDoc,
@@ -901,7 +1370,22 @@ xmlSAX2UnparsedEntityDecl(void *ctx, const xmlChar *name,
 {
     xmlEntityPtr ent;
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3710]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3710\n");
+      else
+        fprintf(stderr, "reached bug index 3710\n");
+    }
+    if ((!FIXREVERTER[3710] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2UnparsedEntityDecl(%s, %s, %s, %s)\n",
@@ -919,10 +1403,40 @@ xmlSAX2UnparsedEntityDecl(void *ctx, const xmlChar *name,
 	    xmlChar *URI;
 	    const char *base = NULL;
 
-	    if (ctxt->input != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3711]) {
+	      if ((ctxt -> input != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3711\n");
+	      else
+	        fprintf(stderr, "reached bug index 3711\n");
+	    }
+	    if ((!FIXREVERTER[3711] && (ctxt -> input != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->input->filename;
-	    if (base == NULL)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3712]) {
+	      if ((base == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3712\n");
+	      else
+	        fprintf(stderr, "reached bug index 3712\n");
+	    }
+	    if ((!FIXREVERTER[3712] && (base == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->directory;
+		#ifdef FRCOV
+		}
+		#endif
 
 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);
 	    ent->URI = URI;
@@ -939,10 +1453,40 @@ xmlSAX2UnparsedEntityDecl(void *ctx, const xmlChar *name,
 	    xmlChar *URI;
 	    const char *base = NULL;
 
-	    if (ctxt->input != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3713]) {
+	      if ((ctxt -> input != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3713\n");
+	      else
+	        fprintf(stderr, "reached bug index 3713\n");
+	    }
+	    if ((!FIXREVERTER[3713] && (ctxt -> input != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->input->filename;
-	    if (base == NULL)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3714]) {
+	      if ((base == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3714\n");
+	      else
+	        fprintf(stderr, "reached bug index 3714\n");
+	    }
+	    if ((!FIXREVERTER[3714] && (base == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		base = ctxt->directory;
+		#ifdef FRCOV
+		}
+		#endif
 
 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);
 	    ent->URI = URI;
@@ -984,7 +1528,22 @@ xmlSAX2StartDocument(void *ctx)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlDocPtr doc;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3715]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3715\n");
+      else
+        fprintf(stderr, "reached bug index 3715\n");
+    }
+    if ((!FIXREVERTER[3715] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
@@ -992,12 +1551,42 @@ xmlSAX2StartDocument(void *ctx)
 #endif
     if (ctxt->html) {
 #ifdef LIBXML_HTML_ENABLED
-	if (ctxt->myDoc == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3716]) {
+	  if ((ctxt -> myDoc == (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3716\n");
+	  else
+	    fprintf(stderr, "reached bug index 3716\n");
+	}
+	if ((!FIXREVERTER[3716] && (ctxt -> myDoc == (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->myDoc = htmlNewDocNoDtD(NULL, NULL);
-	if (ctxt->myDoc == NULL) {
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3717]) {
+	  if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3717\n");
+	  else
+	    fprintf(stderr, "reached bug index 3717\n");
+	}
+	if ((!FIXREVERTER[3717] && (ctxt -> myDoc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartDocument");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->myDoc->properties = XML_DOC_HTML;
 	ctxt->myDoc->parseFlags = ctxt->options;
 #else
@@ -1051,7 +1640,22 @@ xmlSAX2EndDocument(void *ctx)
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2EndDocument()\n");
 #endif
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3718]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3718\n");
+      else
+        fprintf(stderr, "reached bug index 3718\n");
+    }
+    if ((!FIXREVERTER[3718] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef LIBXML_VALID_ENABLED
     if (ctxt->validate && ctxt->wellFormed &&
         ctxt->myDoc && ctxt->myDoc->intSubset)
@@ -1128,12 +1732,27 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
 	    name = xmlStrdup(fullname);
 	}
     }
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3719]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3719\n");
+      else
+        fprintf(stderr, "reached bug index 3719\n");
+    }
+    if ((!FIXREVERTER[3719] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");
 	if (ns != NULL)
 	    xmlFree(ns);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef LIBXML_HTML_ENABLED
     if ((ctxt->html) &&
@@ -1156,8 +1775,23 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
         if (ctxt->vctxt.valid != 1) {
             ctxt->valid = 0;
         }
-        if (nval != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3720]) {
+          if ((nval != (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3720\n");
+          else
+            fprintf(stderr, "reached bug index 3720\n");
+        }
+        if ((!FIXREVERTER[3720] && (nval != (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             value = nval;
+            #ifdef FRCOV
+            }
+            #endif
 #else
         nval = NULL;
 #endif /* LIBXML_VALID_ENABLED */
@@ -1177,12 +1811,27 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
 	    val = xmlStringDecodeEntities(ctxt, value, XML_SUBSTITUTE_REF,
 		                          0,0,0);
 	    ctxt->depth--;
-	    if (val == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3721]) {
+	      if ((val == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3721\n");
+	      else
+	        fprintf(stderr, "reached bug index 3721\n");
+	    }
+	    if ((!FIXREVERTER[3721] && (val == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");
 		if (name != NULL)
 		    xmlFree(name);
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	} else {
 	    val = (xmlChar *) value;
 	}
@@ -1310,7 +1959,22 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
                                     "Attribute %s in %s redefined\n",
                                              name, namespace->href);
                         ctxt->wellFormed = 0;
-                        if (ctxt->recovery == 0) ctxt->disableSAX = 1;
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[3722]) {
+                          if ((ctxt -> recovery == 0  ) && !(0))
+                            fprintf(stderr, "triggered bug index 3722\n");
+                          else
+                            fprintf(stderr, "reached bug index 3722\n");
+                        }
+                        if ((!FIXREVERTER[3722] && (ctxt -> recovery == 0  ))
+                        #else
+                        if (0
+                        #endif
+                        ) ctxt->disableSAX = 1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                         goto error;
                     }
                 }
@@ -1332,8 +1996,23 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
 	    tmp = ret->children;
 	    while (tmp != NULL) {
 		tmp->parent = (xmlNodePtr) ret;
-		if (tmp->next == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3723]) {
+		  if ((tmp -> next == (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 3723\n");
+		  else
+		    fprintf(stderr, "reached bug index 3723\n");
+		}
+		if ((!FIXREVERTER[3723] && (tmp -> next == (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ret->last = tmp;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		tmp = tmp->next;
 	    }
 	} else if (value != NULL) {
@@ -1467,10 +2146,25 @@ process_external_subset:
 		    } else {
 			fulln = xmlStrdup(attr->name);
 		    }
-                    if (fulln == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3724]) {
+                      if ((fulln == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3724\n");
+                      else
+                        fprintf(stderr, "reached bug index 3724\n");
+                    }
+                    if ((!FIXREVERTER[3724] && (fulln == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
 
 		    /*
 		     * Check that the attribute is not declared in the
@@ -1533,10 +2227,25 @@ process_external_subset:
 			xmlChar *fulln;
 
                         fulln = xmlBuildQName(attr->name, attr->prefix, fn, 50);
-			if (fulln == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3725]) {
+			  if ((fulln == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 3725\n");
+			  else
+			    fprintf(stderr, "reached bug index 3725\n");
+			}
+			if ((!FIXREVERTER[3725] && (fulln == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");
 			    return;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 
 			/*
 			 * Check that the attribute is not declared in the
@@ -1594,7 +2303,22 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
     const xmlChar *value;
     int i;
 
-    if ((ctx == NULL) || (fullname == NULL) || (ctxt->myDoc == NULL)) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3727]) {
+      if ((ctx == (void *) 0 || fullname == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3727\n");
+      else
+        fprintf(stderr, "reached bug index 3727\n");
+    }
+    if ((!FIXREVERTER[3727] && (ctx == (void *) 0 || fullname == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     parent = ctxt->node;
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
@@ -1628,12 +2352,27 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
      *        an attribute at this level.
      */
     ret = xmlNewDocNodeEatName(ctxt->myDoc, NULL, name, NULL);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3728]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3728\n");
+      else
+        fprintf(stderr, "reached bug index 3728\n");
+    }
+    if ((!FIXREVERTER[3728] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (prefix != NULL)
 	    xmlFree(prefix);
 	xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->myDoc->children == NULL) {
 #ifdef DEBUG_SAX_TREE
 	xmlGenericError(xmlGenericErrorContext, "Setting %s as root\n", name);
@@ -1697,7 +2436,21 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 	att = atts[i++];
 	value = atts[i++];
 	if (!ctxt->html) {
-	    while ((att != NULL) && (value != NULL)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3729])
+	      fprintf(stderr, "reached bug index 3729\n");
+	    while ((FIXREVERTER[3729] && (att != (void *) 0 )) || (!FIXREVERTER[3729] && (att != (void *) 0 && value != (void *) 0 ))
+	    #else
+	    while (att != (void *) 0 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(value != (void *) 0 ))
+	        fprintf(stderr, "triggered bug index 3729\n");
+	      #endif
+	    
 		if ((att[0] == 'x') && (att[1] == 'm') && (att[2] == 'l') &&
 		    (att[3] == 'n') && (att[4] == 's'))
 		    xmlSAX2AttributeInternal(ctxt, att, value, prefix);
@@ -1705,6 +2458,9 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 		att = atts[i++];
 		value = atts[i++];
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
     }
 
@@ -1744,7 +2500,21 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 		value = atts[i++];
 	    }
 	} else {
-	    while ((att != NULL) && (value != NULL)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3730])
+	      fprintf(stderr, "reached bug index 3730\n");
+	    while ((FIXREVERTER[3730] && (att != (void *) 0 )) || (!FIXREVERTER[3730] && (att != (void *) 0 && value != (void *) 0 ))
+	    #else
+	    while (att != (void *) 0 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(value != (void *) 0 ))
+	        fprintf(stderr, "triggered bug index 3730\n");
+	      #endif
+	    
 		if ((att[0] != 'x') || (att[1] != 'm') || (att[2] != 'l') ||
 		    (att[3] != 'n') || (att[4] != 's'))
 		    xmlSAX2AttributeInternal(ctxt, att, value, NULL);
@@ -1755,6 +2525,9 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 		att = atts[i++];
 		value = atts[i++];
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
     }
 
@@ -1767,10 +2540,40 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 	int chk;
 
 	chk = xmlValidateDtdFinal(&ctxt->vctxt, ctxt->myDoc);
-	if (chk <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3731]) {
+	  if ((chk <= 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3731\n");
+	  else
+	    fprintf(stderr, "reached bug index 3731\n");
+	}
+	if ((!FIXREVERTER[3731] && (chk <= 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->valid = 0;
-	if (chk < 0)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3732]) {
+	  if ((chk < 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3732\n");
+	  else
+	    fprintf(stderr, "reached bug index 3732\n");
+	}
+	if ((!FIXREVERTER[3732] && (chk < 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->wellFormed = 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->valid &= xmlValidateRoot(&ctxt->vctxt, ctxt->myDoc);
 	ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_1;
     }
@@ -1794,7 +2597,22 @@ xmlSAX2EndElement(void *ctx, const xmlChar *name ATTRIBUTE_UNUSED)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr cur;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3733]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3733\n");
+      else
+        fprintf(stderr, "reached bug index 3733\n");
+    }
+    if ((!FIXREVERTER[3733] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     cur = ctxt->node;
 #ifdef DEBUG_SAX
     if (name == NULL)
@@ -1855,10 +2673,25 @@ xmlSAX2TextNode(xmlParserCtxtPtr ctxt, const xmlChar *str, int len) {
     } else {
 	ret = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
     }
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3734]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3734\n");
+      else
+        fprintf(stderr, "reached bug index 3734\n");
+    }
+    if ((!FIXREVERTER[3734] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(ctxt, "xmlSAX2Characters");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlNode));
     /*
      * intern the formatting blanks found between tags, or the
@@ -1893,11 +2726,26 @@ skip:
     ret->name = xmlStringText;
     if (intern == NULL) {
 	ret->content = xmlStrndup(str, len);
-	if (ret->content == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3735]) {
+	  if ((ret -> content == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3735\n");
+	  else
+	    fprintf(stderr, "reached bug index 3735\n");
+	}
+	if ((!FIXREVERTER[3735] && (ret -> content == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2TextNode");
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else
 	ret->content = (xmlChar *) intern;
 
@@ -1977,8 +2825,23 @@ xmlSAX2AttributeNs(xmlParserCtxtPtr ctxt,
     /*
      * Note: if prefix == NULL, the attribute is not in the default namespace
      */
-    if (prefix != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3736]) {
+      if ((prefix != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3736\n");
+      else
+        fprintf(stderr, "reached bug index 3736\n");
+    }
+    if ((!FIXREVERTER[3736] && (prefix != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	namespace = xmlSearchNs(ctxt->myDoc, ctxt->node, prefix);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * allocate the node
@@ -2018,10 +2881,25 @@ xmlSAX2AttributeNs(xmlParserCtxtPtr ctxt,
 	                              (xmlChar *) localname, NULL);
 	else
 	    ret = xmlNewNsProp(ctxt->node, namespace, localname, NULL);
-	if (ret == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3737]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3737\n");
+	  else
+	    fprintf(stderr, "reached bug index 3737\n");
+	}
+	if ((!FIXREVERTER[3737] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, "xmlSAX2AttributeNs");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
 
     if ((ctxt->replaceEntities == 0) && (!ctxt->html)) {
@@ -2047,8 +2925,23 @@ xmlSAX2AttributeNs(xmlParserCtxtPtr ctxt,
 	    while (tmp != NULL) {
 	        tmp->doc = ret->doc;
 		tmp->parent = (xmlNodePtr) ret;
-		if (tmp->next == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3738]) {
+		  if ((tmp -> next == (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 3738\n");
+		  else
+		    fprintf(stderr, "reached bug index 3738\n");
+		}
+		if ((!FIXREVERTER[3738] && (tmp -> next == (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ret->last = tmp;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		tmp = tmp->next;
 	    }
 	}
@@ -2149,8 +3042,23 @@ xmlSAX2AttributeNs(xmlParserCtxtPtr ctxt,
 	     *
 	     * Open issue: normalization of the value.
 	     */
-	    if (dup == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3739]) {
+	      if ((dup == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3739\n");
+	      else
+	        fprintf(stderr, "reached bug index 3739\n");
+	    }
+	    if ((!FIXREVERTER[3739] && (dup == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        dup = xmlStrndup(value, valueend - value);
+	        #ifdef FRCOV
+	        }
+	        #endif
 #if defined(LIBXML_SAX1_ENABLED) || defined(LIBXML_HTML_ENABLED) || defined(LIBXML_WRITER_ENABLED) || defined(LIBXML_DOCB_ENABLED) || defined(LIBXML_LEGACY_ENABLED)
 #ifdef LIBXML_VALID_ENABLED
 	    if (xmlValidateNCName(dup, 1) != 0) {
@@ -2163,12 +3071,42 @@ xmlSAX2AttributeNs(xmlParserCtxtPtr ctxt,
 	    xmlAddID(&ctxt->vctxt, ctxt->myDoc, dup, ret);
 	} else if (xmlIsID(ctxt->myDoc, ctxt->node, ret)) {
 	    /* might be worth duplicate entry points and not copy */
-	    if (dup == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3740]) {
+	      if ((dup == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3740\n");
+	      else
+	        fprintf(stderr, "reached bug index 3740\n");
+	    }
+	    if ((!FIXREVERTER[3740] && (dup == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        dup = xmlStrndup(value, valueend - value);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    xmlAddID(&ctxt->vctxt, ctxt->myDoc, dup, ret);
 	} else if (xmlIsRef(ctxt->myDoc, ctxt->node, ret)) {
-	    if (dup == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3741]) {
+	      if ((dup == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3741\n");
+	      else
+	        fprintf(stderr, "reached bug index 3741\n");
+	    }
+	    if ((!FIXREVERTER[3741] && (dup == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        dup = xmlStrndup(value, valueend - value);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    xmlAddRef(&ctxt->vctxt, ctxt->myDoc, dup, ret);
 	}
     }
@@ -2212,7 +3150,22 @@ xmlSAX2StartElementNs(void *ctx,
     xmlChar *lname = NULL;
     int i, j;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3742]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3742\n");
+      else
+        fprintf(stderr, "reached bug index 3742\n");
+    }
+    if ((!FIXREVERTER[3742] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     parent = ctxt->node;
     /*
      * First check on validity:
@@ -2236,8 +3189,23 @@ xmlSAX2StartElementNs(void *ctx,
 	    const xmlChar *fullname;
 
 	    fullname = xmlDictQLookup(ctxt->dict, prefix, localname);
-	    if (fullname != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3743]) {
+	      if ((fullname != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3743\n");
+	      else
+	        fprintf(stderr, "reached bug index 3743\n");
+	    }
+	    if ((!FIXREVERTER[3743] && (fullname != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        localname = fullname;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	} else {
 	    lname = xmlBuildQName(localname, prefix, NULL, 0);
 	}
@@ -2259,10 +3227,25 @@ xmlSAX2StartElementNs(void *ctx,
 		ret->name = xmlStrdup(localname);
 	    else
 	        ret->name = lname;
-	    if (ret->name == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3744]) {
+	      if ((ret -> name == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3744\n");
+	      else
+	        fprintf(stderr, "reached bug index 3744\n");
+	    }
+	    if ((!FIXREVERTER[3744] && (ret -> name == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
 	    xmlRegisterNodeDefaultValue(ret);
@@ -2275,10 +3258,25 @@ xmlSAX2StartElementNs(void *ctx,
 	else
 	    ret = xmlNewDocNodeEatName(ctxt->myDoc, NULL,
 	                               (xmlChar *) lname, NULL);
-	if (ret == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3745]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3745\n");
+	  else
+	    fprintf(stderr, "reached bug index 3745\n");
+	}
+	if ((!FIXREVERTER[3745] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     if (ctxt->linenumbers) {
 	if (ctxt->input != NULL) {
@@ -2360,11 +3358,26 @@ xmlSAX2StartElementNs(void *ctx,
 	}
 	if (ret->ns == NULL) {
 	    ns = xmlNewNs(ret, NULL, prefix);
-	    if (ns == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3746]) {
+	      if ((ns == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3746\n");
+	      else
+	        fprintf(stderr, "reached bug index 3746\n");
+	    }
+	    if ((!FIXREVERTER[3746] && (ns == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 
 	        xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
             if (prefix != NULL)
                 xmlNsWarnMsg(ctxt, XML_NS_ERR_UNDEFINED_NAMESPACE,
                              "Namespace prefix %s was not found\n",
@@ -2420,10 +3433,40 @@ xmlSAX2StartElementNs(void *ctx,
 	int chk;
 
 	chk = xmlValidateDtdFinal(&ctxt->vctxt, ctxt->myDoc);
-	if (chk <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3747]) {
+	  if ((chk <= 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3747\n");
+	  else
+	    fprintf(stderr, "reached bug index 3747\n");
+	}
+	if ((!FIXREVERTER[3747] && (chk <= 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->valid = 0;
-	if (chk < 0)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3748]) {
+	  if ((chk < 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3748\n");
+	  else
+	    fprintf(stderr, "reached bug index 3748\n");
+	}
+	if ((!FIXREVERTER[3748] && (chk < 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->wellFormed = 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->valid &= xmlValidateRoot(&ctxt->vctxt, ctxt->myDoc);
 	ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_1;
     }
@@ -2450,7 +3493,22 @@ xmlSAX2EndElementNs(void *ctx,
     xmlParserNodeInfo node_info;
     xmlNodePtr cur;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3749]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3749\n");
+      else
+        fprintf(stderr, "reached bug index 3749\n");
+    }
+    if ((!FIXREVERTER[3749] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     cur = ctxt->node;
     /* Capture end position and add node */
     if ((ctxt->record_info) && (cur != NULL)) {
@@ -2486,7 +3544,22 @@ xmlSAX2Reference(void *ctx, const xmlChar *name)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr ret;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3750]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3750\n");
+      else
+        fprintf(stderr, "reached bug index 3750\n");
+    }
+    if ((!FIXREVERTER[3750] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2Reference(%s)\n", name);
@@ -2518,7 +3591,22 @@ xmlSAX2Characters(void *ctx, const xmlChar *ch, int len)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr lastChild;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3751]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3751\n");
+      else
+        fprintf(stderr, "reached bug index 3751\n");
+    }
+    if ((!FIXREVERTER[3751] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.xmlSAX2Characters(%.30s, %d)\n", ch, len);
@@ -2529,13 +3617,28 @@ xmlSAX2Characters(void *ctx, const xmlChar *ch, int len)
      * concatenate it, else create a new node of type text.
      */
 
-    if (ctxt->node == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3752]) {
+      if ((ctxt -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3752\n");
+      else
+        fprintf(stderr, "reached bug index 3752\n");
+    }
+    if ((!FIXREVERTER[3752] && (ctxt -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_SAX_TREE
 	xmlGenericError(xmlGenericErrorContext,
 		"add chars: ctxt->node == NULL !\n");
 #endif
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     lastChild = ctxt->node->last;
 #ifdef DEBUG_SAX_TREE
     xmlGenericError(xmlGenericErrorContext,
@@ -2578,10 +3681,25 @@ xmlSAX2Characters(void *ctx, const xmlChar *ch, int len)
 	               (xmlDictOwns(ctxt->dict, lastChild->content))) {
 		lastChild->content = xmlStrdup(lastChild->content);
 	    }
-	    if (lastChild->content == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3753]) {
+	      if ((lastChild -> content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3753\n");
+	      else
+	        fprintf(stderr, "reached bug index 3753\n");
+	    }
+	    if ((!FIXREVERTER[3753] && (lastChild -> content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters: xmlStrdup returned NULL");
 		return;
  	    }
+ 	    #ifdef FRCOV
+ 	    }
+ 	    #endif
             if (((size_t)ctxt->nodelen + (size_t)len > XML_MAX_TEXT_LENGTH) &&
                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {
                 xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters: huge text node");
@@ -2599,10 +3717,25 @@ xmlSAX2Characters(void *ctx, const xmlChar *ch, int len)
 		size = ctxt->nodemem + len;
 		size *= 2;
                 newbuf = (xmlChar *) xmlRealloc(lastChild->content,size);
-		if (newbuf == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3754]) {
+		  if ((newbuf == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3754\n");
+		  else
+		    fprintf(stderr, "reached bug index 3754\n");
+		}
+		if ((!FIXREVERTER[3754] && (newbuf == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters");
 		    return;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ctxt->nodemem = size;
 		lastChild->content = newbuf;
 	    }
@@ -2666,7 +3799,22 @@ xmlSAX2ProcessingInstruction(void *ctx, const xmlChar *target,
     xmlNodePtr ret;
     xmlNodePtr parent;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3755]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3755\n");
+      else
+        fprintf(stderr, "reached bug index 3755\n");
+    }
+    if ((!FIXREVERTER[3755] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     parent = ctxt->node;
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
@@ -2674,7 +3822,22 @@ xmlSAX2ProcessingInstruction(void *ctx, const xmlChar *target,
 #endif
 
     ret = xmlNewDocPI(ctxt->myDoc, target, data);
-    if (ret == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3756]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3756\n");
+      else
+        fprintf(stderr, "reached bug index 3756\n");
+    }
+    if ((!FIXREVERTER[3756] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (ctxt->linenumbers) {
 	if (ctxt->input != NULL) {
@@ -2687,11 +3850,38 @@ xmlSAX2ProcessingInstruction(void *ctx, const xmlChar *target,
     if (ctxt->inSubset == 1) {
 	xmlAddChild((xmlNodePtr) ctxt->myDoc->intSubset, ret);
 	return;
-    } else if (ctxt->inSubset == 2) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[3757]) {
+      if ((ctxt -> inSubset == 2 ) && !(0))
+        fprintf(stderr, "triggered bug index 3757\n");
+      else
+        fprintf(stderr, "reached bug index 3757\n");
+    }
+    if ((!FIXREVERTER[3757] && (ctxt -> inSubset == 2 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlAddChild((xmlNodePtr) ctxt->myDoc->extSubset, ret);
 	return;
     }
-    if (parent == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3758]) {
+      if ((parent == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3758\n");
+      else
+        fprintf(stderr, "reached bug index 3758\n");
+    }
+    if ((!FIXREVERTER[3758] && (parent == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_SAX_TREE
 	    xmlGenericError(xmlGenericErrorContext,
 		    "Setting PI %s as root\n", target);
@@ -2699,6 +3889,9 @@ xmlSAX2ProcessingInstruction(void *ctx, const xmlChar *target,
         xmlAddChild((xmlNodePtr) ctxt->myDoc, (xmlNodePtr) ret);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (parent->type == XML_ELEMENT_NODE) {
 #ifdef DEBUG_SAX_TREE
 	xmlGenericError(xmlGenericErrorContext,
@@ -2729,13 +3922,43 @@ xmlSAX2Comment(void *ctx, const xmlChar *value)
     xmlNodePtr ret;
     xmlNodePtr parent;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3759]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3759\n");
+      else
+        fprintf(stderr, "reached bug index 3759\n");
+    }
+    if ((!FIXREVERTER[3759] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     parent = ctxt->node;
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext, "SAX.xmlSAX2Comment(%s)\n", value);
 #endif
     ret = xmlNewDocComment(ctxt->myDoc, value);
-    if (ret == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3760]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3760\n");
+      else
+        fprintf(stderr, "reached bug index 3760\n");
+    }
+    if ((!FIXREVERTER[3760] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->linenumbers) {
 	if (ctxt->input != NULL) {
 	    if (ctxt->input->line < 65535)
@@ -2748,11 +3971,38 @@ xmlSAX2Comment(void *ctx, const xmlChar *value)
     if (ctxt->inSubset == 1) {
 	xmlAddChild((xmlNodePtr) ctxt->myDoc->intSubset, ret);
 	return;
-    } else if (ctxt->inSubset == 2) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[3761]) {
+      if ((ctxt -> inSubset == 2 ) && !(0))
+        fprintf(stderr, "triggered bug index 3761\n");
+      else
+        fprintf(stderr, "reached bug index 3761\n");
+    }
+    if ((!FIXREVERTER[3761] && (ctxt -> inSubset == 2 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlAddChild((xmlNodePtr) ctxt->myDoc->extSubset, ret);
 	return;
     }
-    if (parent == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3762]) {
+      if ((parent == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3762\n");
+      else
+        fprintf(stderr, "reached bug index 3762\n");
+    }
+    if ((!FIXREVERTER[3762] && (parent == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_SAX_TREE
 	    xmlGenericError(xmlGenericErrorContext,
 		    "Setting xmlSAX2Comment as root\n");
@@ -2760,6 +4010,9 @@ xmlSAX2Comment(void *ctx, const xmlChar *value)
         xmlAddChild((xmlNodePtr) ctxt->myDoc, (xmlNodePtr) ret);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (parent->type == XML_ELEMENT_NODE) {
 #ifdef DEBUG_SAX_TREE
 	xmlGenericError(xmlGenericErrorContext,
@@ -2790,7 +4043,22 @@ xmlSAX2CDataBlock(void *ctx, const xmlChar *value, int len)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr ret, lastChild;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3763]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3763\n");
+      else
+        fprintf(stderr, "reached bug index 3763\n");
+    }
+    if ((!FIXREVERTER[3763] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_SAX
     xmlGenericError(xmlGenericErrorContext,
 	    "SAX.pcdata(%.10s, %d)\n", value, len);
@@ -2848,7 +4116,22 @@ xmlSAXDefaultVersion(int version)
 int
 xmlSAXVersion(xmlSAXHandler *hdlr, int version)
 {
-    if (hdlr == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3764]) {
+      if ((hdlr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3764\n");
+      else
+        fprintf(stderr, "reached bug index 3764\n");
+    }
+    if ((!FIXREVERTER[3764] && (hdlr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (version == 2) {
 	hdlr->startElement = NULL;
 	hdlr->endElement = NULL;
@@ -2937,8 +4220,23 @@ xmlDefaultSAXHandlerInit(void)
 void
 xmlSAX2InitHtmlDefaultSAXHandler(xmlSAXHandler *hdlr)
 {
-    if ((hdlr == NULL) || (hdlr->initialized != 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3766]) {
+      if ((hdlr == (void *) 0 || hdlr -> initialized != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3766\n");
+      else
+        fprintf(stderr, "reached bug index 3766\n");
+    }
+    if ((!FIXREVERTER[3766] && (hdlr == (void *) 0 || hdlr -> initialized != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     hdlr->internalSubset = xmlSAX2InternalSubset;
     hdlr->externalSubset = NULL;
diff --git a/buf.c b/buf.c
index 6efc7b67..cb68d179 100644
--- a/buf.c
+++ b/buf.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * buf.c: memory buffers for libxml2
  *
@@ -122,10 +126,25 @@ xmlBufCreate(void) {
     xmlBufPtr ret;
 
     ret = (xmlBufPtr) xmlMalloc(sizeof(xmlBuf));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2639]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2639\n");
+      else
+        fprintf(stderr, "reached bug index 2639\n");
+    }
+    if ((!FIXREVERTER[2639] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlBufMemoryError(NULL, "creating buffer");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->compat_use = 0;
     ret->use = 0;
     ret->error = 0;
@@ -134,11 +153,26 @@ xmlBufCreate(void) {
     ret->compat_size = xmlDefaultBufferSize;
     ret->alloc = xmlBufferAllocScheme;
     ret->content = (xmlChar *) xmlMallocAtomic(ret->size * sizeof(xmlChar));
-    if (ret->content == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2640]) {
+      if ((ret -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2640\n");
+      else
+        fprintf(stderr, "reached bug index 2640\n");
+    }
+    if ((!FIXREVERTER[2640] && (ret -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlBufMemoryError(ret, "creating buffer");
 	xmlFree(ret);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->content[0] = 0;
     ret->contentIO = NULL;
     return(ret);
@@ -156,10 +190,25 @@ xmlBufCreateSize(size_t size) {
     xmlBufPtr ret;
 
     ret = (xmlBufPtr) xmlMalloc(sizeof(xmlBuf));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2641]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2641\n");
+      else
+        fprintf(stderr, "reached bug index 2641\n");
+    }
+    if ((!FIXREVERTER[2641] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlBufMemoryError(NULL, "creating buffer");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->compat_use = 0;
     ret->use = 0;
     ret->error = 0;
@@ -169,11 +218,26 @@ xmlBufCreateSize(size_t size) {
     ret->compat_size = (int) ret->size;
     if (ret->size){
         ret->content = (xmlChar *) xmlMallocAtomic(ret->size * sizeof(xmlChar));
-        if (ret->content == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2642]) {
+          if ((ret -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2642\n");
+          else
+            fprintf(stderr, "reached bug index 2642\n");
+        }
+        if ((!FIXREVERTER[2642] && (ret -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlBufMemoryError(ret, "creating buffer");
             xmlFree(ret);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ret->content[0] = 0;
     } else
 	ret->content = NULL;
@@ -195,8 +259,23 @@ xmlChar *
 xmlBufDetach(xmlBufPtr buf) {
     xmlChar *ret;
 
-    if (buf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2643]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2643\n");
+      else
+        fprintf(stderr, "reached bug index 2643\n");
+    }
+    if ((!FIXREVERTER[2643] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE)
         return(NULL);
     if (buf->buffer != NULL)
@@ -264,13 +343,28 @@ xmlBufCreateStatic(void *mem, size_t size) {
  */
 int
 xmlBufGetAllocationScheme(xmlBufPtr buf) {
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2646]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2646\n");
+      else
+        fprintf(stderr, "reached bug index 2646\n");
+    }
+    if ((!FIXREVERTER[2646] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_BUFFER
         xmlGenericError(xmlGenericErrorContext,
 		"xmlBufGetAllocationScheme: buf == NULL\n");
 #endif
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(buf->alloc);
 }
 
@@ -286,13 +380,28 @@ xmlBufGetAllocationScheme(xmlBufPtr buf) {
 int
 xmlBufSetAllocationScheme(xmlBufPtr buf,
                           xmlBufferAllocationScheme scheme) {
-    if ((buf == NULL) || (buf->error != 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2647]) {
+      if ((buf == (void *) 0 || buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2647\n");
+      else
+        fprintf(stderr, "reached bug index 2647\n");
+    }
+    if ((!FIXREVERTER[2647] && (buf == (void *) 0 || buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_BUFFER
         xmlGenericError(xmlGenericErrorContext,
 		"xmlBufSetAllocationScheme: buf == NULL or in error\n");
 #endif
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) ||
         (buf->alloc == XML_BUFFER_ALLOC_IO))
         return(-1);
@@ -325,13 +434,28 @@ xmlBufSetAllocationScheme(xmlBufPtr buf,
  */
 void
 xmlBufFree(xmlBufPtr buf) {
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2648]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2648\n");
+      else
+        fprintf(stderr, "reached bug index 2648\n");
+    }
+    if ((!FIXREVERTER[2648] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_BUFFER
         xmlGenericError(xmlGenericErrorContext,
 		"xmlBufFree: buf == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((buf->alloc == XML_BUFFER_ALLOC_IO) &&
         (buf->contentIO != NULL)) {
@@ -384,10 +508,55 @@ xmlBufEmpty(xmlBufPtr buf) {
  */
 size_t
 xmlBufShrink(xmlBufPtr buf, size_t len) {
-    if ((buf == NULL) || (buf->error != 0)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2651]) {
+      if ((buf == (void *) 0 || buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2651\n");
+      else
+        fprintf(stderr, "reached bug index 2651\n");
+    }
+    if ((!FIXREVERTER[2651] && (buf == (void *) 0 || buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     CHECK_COMPAT(buf)
-    if (len == 0) return(0);
-    if (len > buf->use) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2652]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2652\n");
+      else
+        fprintf(stderr, "reached bug index 2652\n");
+    }
+    if ((!FIXREVERTER[2652] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2653]) {
+      if ((len > buf -> use ) && !(0))
+        fprintf(stderr, "triggered bug index 2653\n");
+      else
+        fprintf(stderr, "reached bug index 2653\n");
+    }
+    if ((!FIXREVERTER[2653] && (len > buf -> use ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     buf->use -= len;
     if ((buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) ||
@@ -436,7 +605,22 @@ xmlBufGrowInternal(xmlBufPtr buf, size_t len) {
     size_t size;
     xmlChar *newbuf;
 
-    if ((buf == NULL) || (buf->error != 0)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2654]) {
+      if ((buf == (void *) 0 || buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2654\n");
+      else
+        fprintf(stderr, "reached bug index 2654\n");
+    }
+    if ((!FIXREVERTER[2654] && (buf == (void *) 0 || buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     CHECK_COMPAT(buf)
 
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);
@@ -462,18 +646,48 @@ xmlBufGrowInternal(xmlBufPtr buf, size_t len) {
         size_t start_buf = buf->content - buf->contentIO;
 
 	newbuf = (xmlChar *) xmlRealloc(buf->contentIO, start_buf + size);
-	if (newbuf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2656]) {
+	  if ((newbuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2656\n");
+	  else
+	    fprintf(stderr, "reached bug index 2656\n");
+	}
+	if ((!FIXREVERTER[2656] && (newbuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlBufMemoryError(buf, "growing buffer");
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	buf->contentIO = newbuf;
 	buf->content = newbuf + start_buf;
     } else {
 	newbuf = (xmlChar *) xmlRealloc(buf->content, size);
-	if (newbuf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2657]) {
+	  if ((newbuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2657\n");
+	  else
+	    fprintf(stderr, "reached bug index 2657\n");
+	}
+	if ((!FIXREVERTER[2657] && (newbuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlBufMemoryError(buf, "growing buffer");
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	buf->content = newbuf;
     }
     buf->size = size;
@@ -495,12 +709,57 @@ int
 xmlBufGrow(xmlBufPtr buf, int len) {
     size_t ret;
 
-    if ((buf == NULL) || (len < 0)) return(-1);
-    if (len == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2658]) {
+      if ((buf == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2658\n");
+      else
+        fprintf(stderr, "reached bug index 2658\n");
+    }
+    if ((!FIXREVERTER[2658] && (buf == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2659]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2659\n");
+      else
+        fprintf(stderr, "reached bug index 2659\n");
+    }
+    if ((!FIXREVERTER[2659] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     ret = xmlBufGrowInternal(buf, len);
-    if (buf->error != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2660]) {
+      if ((buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2660\n");
+      else
+        fprintf(stderr, "reached bug index 2660\n");
+    }
+    if ((!FIXREVERTER[2660] && (buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     return((int) ret);
 }
 
@@ -608,8 +867,23 @@ xmlBufAddLen(xmlBufPtr buf, size_t len) {
     if ((buf == NULL) || (buf->error))
         return(-1);
     CHECK_COMPAT(buf)
-    if (len > (buf->size - buf->use))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2665]) {
+      if ((len > buf -> size - buf -> use ) && !(0))
+        fprintf(stderr, "triggered bug index 2665\n");
+      else
+        fprintf(stderr, "reached bug index 2665\n");
+    }
+    if ((!FIXREVERTER[2665] && (len > buf -> size - buf -> use ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     buf->use += len;
     UPDATE_COMPAT(buf)
     if (buf->size > buf->use)
@@ -633,8 +907,23 @@ xmlBufErase(xmlBufPtr buf, size_t len) {
     if ((buf == NULL) || (buf->error))
         return(-1);
     CHECK_COMPAT(buf)
-    if (len > buf->use)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2666]) {
+      if ((len > buf -> use ) && !(0))
+        fprintf(stderr, "triggered bug index 2666\n");
+      else
+        fprintf(stderr, "reached bug index 2666\n");
+    }
+    if ((!FIXREVERTER[2666] && (len > buf -> use ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     buf->use -= len;
     buf->content[buf->use] = 0;
     UPDATE_COMPAT(buf)
@@ -741,8 +1030,23 @@ xmlBufResize(xmlBufPtr buf, size_t size)
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);
 
     /* Don't resize if we don't have to */
-    if (size < buf->size)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2667]) {
+      if ((size < buf -> size ) && !(0))
+        fprintf(stderr, "triggered bug index 2667\n");
+      else
+        fprintf(stderr, "reached bug index 2667\n");
+    }
+    if ((!FIXREVERTER[2667] && (size < buf -> size ))
+    #else
+    if (0
+    #endif
+    )
         return 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* figure out new size */
     switch (buf->alloc){
@@ -792,10 +1096,25 @@ xmlBufResize(xmlBufPtr buf, size_t size)
 	    buf->size += start_buf;
 	} else {
 	    rebuf = (xmlChar *) xmlRealloc(buf->contentIO, start_buf + newSize);
-	    if (rebuf == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2668]) {
+	      if ((rebuf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2668\n");
+	      else
+	        fprintf(stderr, "reached bug index 2668\n");
+	    }
+	    if ((!FIXREVERTER[2668] && (rebuf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlBufMemoryError(buf, "growing buffer");
 		return 0;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf->contentIO = rebuf;
 	    buf->content = rebuf + start_buf;
 	}
@@ -817,10 +1136,25 @@ xmlBufResize(xmlBufPtr buf, size_t size)
 		rebuf[buf->use] = 0;
 	    }
 	}
-	if (rebuf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2669]) {
+	  if ((rebuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2669\n");
+	  else
+	    fprintf(stderr, "reached bug index 2669\n");
+	}
+	if ((!FIXREVERTER[2669] && (rebuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlBufMemoryError(buf, "growing buffer");
 	    return 0;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	buf->content = rebuf;
     }
     buf->size = newSize;
@@ -857,13 +1191,73 @@ xmlBufAdd(xmlBufPtr buf, const xmlChar *str, int len) {
 #endif
 	return -1;
     }
-    if (len == 0) return 0;
-
-    if (len < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2670]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2670\n");
+      else
+        fprintf(stderr, "reached bug index 2670\n");
+    }
+    if ((!FIXREVERTER[2670] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2671]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2671\n");
+      else
+        fprintf(stderr, "reached bug index 2671\n");
+    }
+    if ((!FIXREVERTER[2671] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
         len = xmlStrlen(str);
-
-    if (len < 0) return -1;
-    if (len == 0) return 0;
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2672]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2672\n");
+      else
+        fprintf(stderr, "reached bug index 2672\n");
+    }
+    if ((!FIXREVERTER[2672] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2673]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2673\n");
+      else
+        fprintf(stderr, "reached bug index 2673\n");
+    }
+    if ((!FIXREVERTER[2673] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
 
     needSize = buf->use + len + 2;
     if (needSize > buf->size){
@@ -900,13 +1294,28 @@ xmlBufAddHead(xmlBufPtr buf, const xmlChar *str, int len) {
         return(-1);
     CHECK_COMPAT(buf)
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;
-    if (str == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2674]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2674\n");
+      else
+        fprintf(stderr, "reached bug index 2674\n");
+    }
+    if ((!FIXREVERTER[2674] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_BUFFER
         xmlGenericError(xmlGenericErrorContext,
 		"xmlBufAddHead: str == NULL\n");
 #endif
 	return -1;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (len < -1) {
 #ifdef DEBUG_BUFFER
         xmlGenericError(xmlGenericErrorContext,
@@ -914,12 +1323,57 @@ xmlBufAddHead(xmlBufPtr buf, const xmlChar *str, int len) {
 #endif
 	return -1;
     }
-    if (len == 0) return 0;
-
-    if (len < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2675]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2675\n");
+      else
+        fprintf(stderr, "reached bug index 2675\n");
+    }
+    if ((!FIXREVERTER[2675] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2676]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2676\n");
+      else
+        fprintf(stderr, "reached bug index 2676\n");
+    }
+    if ((!FIXREVERTER[2676] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
         len = xmlStrlen(str);
-
-    if (len <= 0) return -1;
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2677]) {
+      if ((len <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2677\n");
+      else
+        fprintf(stderr, "reached bug index 2677\n");
+    }
+    if ((!FIXREVERTER[2677] && (len <= 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {
         size_t start_buf = buf->content - buf->contentIO;
@@ -968,7 +1422,22 @@ xmlBufCat(xmlBufPtr buf, const xmlChar *str) {
         return(-1);
     CHECK_COMPAT(buf)
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;
-    if (str == NULL) return -1;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2678]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2678\n");
+      else
+        fprintf(stderr, "reached bug index 2678\n");
+    }
+    if ((!FIXREVERTER[2678] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
     return xmlBufAdd(buf, str, -1);
 }
 
diff --git a/catalog.c b/catalog.c
index 5773db3d..563845e3 100644
--- a/catalog.c
+++ b/catalog.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /**
  * catalog.c: set of generic Catalog related routines
  *
@@ -278,18 +282,48 @@ xmlNewCatalogEntry(xmlCatalogEntryType type, const xmlChar *name,
     xmlChar *normid = NULL;
 
     ret = (xmlCatalogEntryPtr) xmlMalloc(sizeof(xmlCatalogEntry));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3183]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3183\n");
+      else
+        fprintf(stderr, "reached bug index 3183\n");
+    }
+    if ((!FIXREVERTER[3183] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCatalogErrMemory("allocating catalog entry");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->next = NULL;
     ret->parent = NULL;
     ret->children = NULL;
     ret->type = type;
     if (type == XML_CATA_PUBLIC || type == XML_CATA_DELEGATE_PUBLIC) {
         normid = xmlCatalogNormalizePublic(name);
-        if (normid != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3184]) {
+          if ((normid != (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3184\n");
+          else
+            fprintf(stderr, "reached bug index 3184\n");
+        }
+        if ((!FIXREVERTER[3184] && (normid != (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             name = (*normid != 0 ? normid : NULL);
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (name != NULL)
 	ret->name = xmlStrdup(name);
@@ -301,8 +335,23 @@ xmlNewCatalogEntry(xmlCatalogEntryType type, const xmlChar *name,
 	ret->value = xmlStrdup(value);
     else
 	ret->value = NULL;
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3185]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3185\n");
+      else
+        fprintf(stderr, "reached bug index 3185\n");
+    }
+    if ((!FIXREVERTER[3185] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	URL = value;
+	#ifdef FRCOV
+	}
+	#endif
     if (URL != NULL)
 	ret->URL = xmlStrdup(URL);
     else
@@ -325,14 +374,44 @@ xmlFreeCatalogEntryList(xmlCatalogEntryPtr ret);
  */
 static void
 xmlFreeCatalogEntry(xmlCatalogEntryPtr ret) {
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3186]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3186\n");
+      else
+        fprintf(stderr, "reached bug index 3186\n");
+    }
+    if ((!FIXREVERTER[3186] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     /*
      * Entries stored in the file hash must be deallocated
      * only by the file hash cleaner !
      */
-    if (ret->dealloc == 1)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3187]) {
+      if ((ret -> dealloc == 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 3187\n");
+      else
+        fprintf(stderr, "reached bug index 3187\n");
+    }
+    if ((!FIXREVERTER[3187] && (ret -> dealloc == 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (xmlDebugCatalogs) {
 	if (ret->name != NULL)
@@ -413,10 +492,25 @@ xmlCreateNewCatalog(xmlCatalogType type, xmlCatalogPrefer prefer) {
     xmlCatalogPtr ret;
 
     ret = (xmlCatalogPtr) xmlMalloc(sizeof(xmlCatalog));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3189]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3189\n");
+      else
+        fprintf(stderr, "reached bug index 3189\n");
+    }
+    if ((!FIXREVERTER[3189] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCatalogErrMemory("allocating catalog");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlCatalog));
     ret->type = type;
     ret->catalNr = 0;
@@ -1038,8 +1132,23 @@ xmlCatalogNormalizePublic(const xmlChar *pubID)
     xmlChar *ret;
     xmlChar *q;
 
-    if (pubID == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3204]) {
+      if ((pubID == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3204\n");
+      else
+        fprintf(stderr, "reached bug index 3204\n");
+    }
+    if ((!FIXREVERTER[3204] && (pubID == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     white = 1;
     for (p = pubID;*p != 0 && ok;p++) {
@@ -3624,8 +3733,23 @@ xmlCatalogAddLocal(void *catalogs, const xmlChar *URL) {
     if (!xmlCatalogInitialized)
 	xmlInitializeCatalog();
 
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3287]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3287\n");
+      else
+        fprintf(stderr, "reached bug index 3287\n");
+    }
+    if ((!FIXREVERTER[3287] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(catalogs);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (xmlDebugCatalogs)
 	xmlGenericError(xmlGenericErrorContext,
@@ -3633,12 +3757,42 @@ xmlCatalogAddLocal(void *catalogs, const xmlChar *URL) {
 
     add = xmlNewCatalogEntry(XML_CATA_CATALOG, NULL, URL, NULL,
 	                     xmlCatalogDefaultPrefer, NULL);
-    if (add == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3288]) {
+      if ((add == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3288\n");
+      else
+        fprintf(stderr, "reached bug index 3288\n");
+    }
+    if ((!FIXREVERTER[3288] && (add == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(catalogs);
+	#ifdef FRCOV
+	}
+	#endif
 
     catal = (xmlCatalogEntryPtr) catalogs;
-    if (catal == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3289]) {
+      if ((catal == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3289\n");
+      else
+        fprintf(stderr, "reached bug index 3289\n");
+    }
+    if ((!FIXREVERTER[3289] && (catal == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return((void *) add);
+	#ifdef FRCOV
+	}
+	#endif
 
     while (catal->next != NULL)
 	catal = catal->next;
diff --git a/chvalid.c b/chvalid.c
index 06e8db06..ebf22391 100644
--- a/chvalid.c
+++ b/chvalid.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * chvalid.c:	this module implements the character range
  *		validation APIs
@@ -170,10 +174,40 @@ xmlCharInRange (unsigned int val, const xmlChRangeGroup *rptr) {
     const xmlChSRange *sptr;
     const xmlChLRange *lptr;
 
-    if (rptr == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[930]) {
+      if ((rptr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 930\n");
+      else
+        fprintf(stderr, "reached bug index 930\n");
+    }
+    if ((!FIXREVERTER[930] && (rptr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (val < 0x10000) {	/* is val in 'short' or 'long'  array? */
-	if (rptr->nbShortRange == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[931]) {
+	  if ((rptr -> nbShortRange == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 931\n");
+	  else
+	    fprintf(stderr, "reached bug index 931\n");
+	}
+	if ((!FIXREVERTER[931] && (rptr -> nbShortRange == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	low = 0;
 	high = rptr->nbShortRange - 1;
 	sptr = rptr->shortRange;
@@ -190,9 +224,24 @@ xmlCharInRange (unsigned int val, const xmlChRangeGroup *rptr) {
 	    }
 	}
     } else {
-	if (rptr->nbLongRange == 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[932]) {
+	  if ((rptr -> nbLongRange == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 932\n");
+	  else
+	    fprintf(stderr, "reached bug index 932\n");
+	}
+	if ((!FIXREVERTER[932] && (rptr -> nbLongRange == 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return 0;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	low = 0;
 	high = rptr->nbLongRange - 1;
 	lptr = rptr->longRange;
diff --git a/dict.c b/dict.c
index 5f71d55d..1864fe82 100644
--- a/dict.c
+++ b/dict.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * dict.c: dictionary of reusable strings, just used to avoid allocation
  *         and freeing operations.
@@ -251,7 +255,22 @@ xmlDictAddString(xmlDictPtr dict, const xmlChar *name, unsigned int namelen) {
     while (pool != NULL) {
 	if (pool->end - pool->free > namelen)
 	    goto found_pool;
-	if (pool->size > size) size = pool->size;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[27]) {
+	  if ((pool -> size > size ) && !(0))
+	    fprintf(stderr, "triggered bug index 27\n");
+	  else
+	    fprintf(stderr, "reached bug index 27\n");
+	}
+	if ((!FIXREVERTER[27] && (pool -> size > size ))
+	#else
+	if (0
+	#endif
+	) size = pool->size;
+	#ifdef FRCOV
+	}
+	#endif
         limit += pool->size;
 	pool = pool->next;
     }
@@ -265,11 +284,41 @@ xmlDictAddString(xmlDictPtr dict, const xmlChar *name, unsigned int namelen) {
 
         if (size == 0) size = 1000;
 	else size *= 4; /* exponential growth */
-        if (size < 4 * namelen)
-	    size = 4 * namelen; /* just in case ! */
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[28]) {
+          if ((size < 4 * namelen ) && !(0))
+            fprintf(stderr, "triggered bug index 28\n");
+          else
+            fprintf(stderr, "reached bug index 28\n");
+        }
+        if ((!FIXREVERTER[28] && (size < 4 * namelen ))
+        #else
+        if (0
+        #endif
+        )
+	    size = 4 * namelen;
+	    #ifdef FRCOV
+	    }
+	    #endif /* just in case ! */
 	pool = (xmlDictStringsPtr) xmlMalloc(sizeof(xmlDictStrings) + size);
-	if (pool == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[29]) {
+	  if ((pool == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 29\n");
+	  else
+	    fprintf(stderr, "reached bug index 29\n");
+	}
+	if ((!FIXREVERTER[29] && (pool == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	pool->size = size;
 	pool->nbStrings = 0;
 	pool->free = &pool->array[0];
@@ -310,7 +359,22 @@ xmlDictAddQString(xmlDictPtr dict, const xmlChar *prefix, unsigned int plen,
     size_t size = 0; /* + sizeof(_xmlDictStrings) == 1024 */
     size_t limit = 0;
 
-    if (prefix == NULL) return(xmlDictAddString(dict, name, namelen));
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[30]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 30\n");
+      else
+        fprintf(stderr, "reached bug index 30\n");
+    }
+    if ((!FIXREVERTER[30] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(xmlDictAddString(dict, name, namelen));
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef DICT_DEBUG_PATTERNS
     fprintf(stderr, "=");
@@ -319,7 +383,22 @@ xmlDictAddQString(xmlDictPtr dict, const xmlChar *prefix, unsigned int plen,
     while (pool != NULL) {
 	if (pool->end - pool->free > namelen + plen + 1)
 	    goto found_pool;
-	if (pool->size > size) size = pool->size;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[31]) {
+	  if ((pool -> size > size ) && !(0))
+	    fprintf(stderr, "triggered bug index 31\n");
+	  else
+	    fprintf(stderr, "reached bug index 31\n");
+	}
+	if ((!FIXREVERTER[31] && (pool -> size > size ))
+	#else
+	if (0
+	#endif
+	) size = pool->size;
+	#ifdef FRCOV
+	}
+	#endif
         limit += pool->size;
 	pool = pool->next;
     }
@@ -336,8 +415,23 @@ xmlDictAddQString(xmlDictPtr dict, const xmlChar *prefix, unsigned int plen,
         if (size < 4 * (namelen + plen + 1))
 	    size = 4 * (namelen + plen + 1); /* just in case ! */
 	pool = (xmlDictStringsPtr) xmlMalloc(sizeof(xmlDictStrings) + size);
-	if (pool == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[32]) {
+	  if ((pool == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 32\n");
+	  else
+	    fprintf(stderr, "reached bug index 32\n");
+	}
+	if ((!FIXREVERTER[32] && (pool == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	pool->size = size;
 	pool->nbStrings = 0;
 	pool->free = &pool->array[0];
@@ -376,7 +470,22 @@ xmlDictComputeBigKey(const xmlChar* data, int namelen, int seed) {
     uint32_t hash;
     int i;
 
-    if (namelen <= 0 || data == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[33]) {
+      if ((data == (void *) 0 ) && !(namelen <= 0 ))
+        fprintf(stderr, "triggered bug index 33\n");
+      else
+        fprintf(stderr, "reached bug index 33\n");
+    }
+    if ((FIXREVERTER[33] && (namelen <= 0 )) || (!FIXREVERTER[33] && (namelen <= 0 || data == (void *) 0 ))
+    #else
+    if (namelen <= 0 
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     hash = seed;
 
@@ -444,7 +553,22 @@ static unsigned long
 xmlDictComputeFastKey(const xmlChar *name, int namelen, int seed) {
     unsigned long value = seed;
 
-    if (name == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[34]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 34\n");
+      else
+        fprintf(stderr, "reached bug index 34\n");
+    }
+    if ((!FIXREVERTER[34] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     value = *name;
     value <<= 5;
     if (namelen > 10) {
@@ -488,8 +612,23 @@ xmlDictComputeFastQKey(const xmlChar *prefix, int plen,
     if (len > 10) {
         value += name[len - (plen + 1 + 1)];
         len = 10;
-	if (plen > 10)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[35]) {
+	  if ((plen > 10 ) && !(0))
+	    fprintf(stderr, "triggered bug index 35\n");
+	  else
+	    fprintf(stderr, "reached bug index 35\n");
+	}
+	if ((!FIXREVERTER[35] && (plen > 10 ))
+	#else
+	if (0
+	#endif
+	)
 	    plen = 10;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     switch (plen) {
         case 10: value += prefix[9];
@@ -608,7 +747,22 @@ xmlDictReference(xmlDictPtr dict) {
         if (!__xmlInitializeDict())
             return(-1);
 
-    if (dict == NULL) return -1;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[37]) {
+      if ((dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 37\n");
+      else
+        fprintf(stderr, "reached bug index 37\n");
+    }
+    if ((!FIXREVERTER[37] && (dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
     xmlRMutexLock(xmlDictMutex);
     dict->ref_counter++;
     xmlRMutexUnlock(xmlDictMutex);
@@ -636,12 +790,57 @@ xmlDictGrow(xmlDictPtr dict, size_t size) {
     int ret = 0;
     int keep_keys = 1;
 
-    if (dict == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[38]) {
+      if ((dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 38\n");
+      else
+        fprintf(stderr, "reached bug index 38\n");
+    }
+    if ((!FIXREVERTER[38] && (dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (size < 8)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[39]) {
+      if ((size < 8 ) && !(0))
+        fprintf(stderr, "triggered bug index 39\n");
+      else
+        fprintf(stderr, "reached bug index 39\n");
+    }
+    if ((!FIXREVERTER[39] && (size < 8 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
-    if (size > 8 * 2048)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[40]) {
+      if ((size > 8 * 2048 ) && !(0))
+        fprintf(stderr, "triggered bug index 40\n");
+      else
+        fprintf(stderr, "reached bug index 40\n");
+    }
+    if ((!FIXREVERTER[40] && (size > 8 * 2048 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifdef DICT_DEBUG_PATTERNS
     fprintf(stderr, "*");
@@ -649,16 +848,46 @@ xmlDictGrow(xmlDictPtr dict, size_t size) {
 
     oldsize = dict->size;
     olddict = dict->dict;
-    if (olddict == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[41]) {
+      if ((olddict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 41\n");
+      else
+        fprintf(stderr, "reached bug index 41\n");
+    }
+    if ((!FIXREVERTER[41] && (olddict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (oldsize == MIN_DICT_SIZE)
         keep_keys = 0;
 
     dict->dict = xmlMalloc(size * sizeof(xmlDictEntry));
-    if (dict->dict == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[43]) {
+      if ((dict -> dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 43\n");
+      else
+        fprintf(stderr, "reached bug index 43\n");
+    }
+    if ((!FIXREVERTER[43] && (dict -> dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	dict->dict = olddict;
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(dict->dict, 0, size * sizeof(xmlDictEntry));
     dict->size = size;
 
@@ -765,8 +994,23 @@ xmlDictFree(xmlDictPtr dict) {
     int inside_dict = 0;
     xmlDictStringsPtr pool, nextp;
 
-    if (dict == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[44]) {
+      if ((dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 44\n");
+      else
+        fprintf(stderr, "reached bug index 44\n");
+    }
+    if ((!FIXREVERTER[44] && (dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (!xmlDictInitialized)
         if (!__xmlInitializeDict())
@@ -787,7 +1031,21 @@ xmlDictFree(xmlDictPtr dict) {
     }
 
     if (dict->dict) {
-	for(i = 0; ((i < dict->size) && (dict->nbElems > 0)); i++) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[47])
+	  fprintf(stderr, "reached bug index 47\n");
+	for (i = 0; (FIXREVERTER[47] && (i < dict -> size )) || (!FIXREVERTER[47] && (i < dict -> size && dict -> nbElems > 0 ))
+	#else
+	for (i = 0; i < dict -> size 
+	#endif
+	; i++) {
+	  
+	#ifdef FRCOV
+	  if (!(dict -> nbElems > 0 ))
+	    fprintf(stderr, "triggered bug index 47\n");
+	  #endif
+	
 	    iter = &(dict->dict[i]);
 	    if (iter->valid == 0)
 		continue;
@@ -801,6 +1059,9 @@ xmlDictFree(xmlDictPtr dict) {
 		iter = next;
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	xmlFree(dict->dict);
     }
     pool = dict->strings;
@@ -830,8 +1091,23 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
     const xmlChar *ret;
     unsigned int l;
 
-    if ((dict == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[48]) {
+      if ((dict == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 48\n");
+      else
+        fprintf(stderr, "reached bug index 48\n");
+    }
+    if ((!FIXREVERTER[48] && (dict == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (len < 0)
         l = strlen((const char *) name);
@@ -853,10 +1129,28 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
 	for (insert = &(dict->dict[key]); insert->next != NULL;
 	     insert = insert->next) {
 #ifdef __GNUC__
-	    if ((insert->okey == okey) && (insert->len == l)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[49]) {
+	      fprintf(stderr, "reached bug index 49\n");
+	    }
+	    if ((FIXREVERTER[49] && (insert -> okey == okey )) || (!FIXREVERTER[49] && (insert -> okey == okey && insert -> len == l ))
+	    #else
+	    if (insert -> okey == okey 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(insert -> len == l ))
+	        fprintf(stderr, "triggered bug index 49\n");
+	      #endif
+	    
 		if (!memcmp(insert->name, name, l))
 		    return(insert->name);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 #else
 	    if ((insert->okey == okey) && (insert->len == l) &&
 	        (!xmlStrncmp(insert->name, name, l)))
@@ -865,10 +1159,28 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
 	    nbi++;
 	}
 #ifdef __GNUC__
-	if ((insert->okey == okey) && (insert->len == l)) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[50]) {
+	  fprintf(stderr, "reached bug index 50\n");
+	}
+	if ((FIXREVERTER[50] && (insert -> okey == okey )) || (!FIXREVERTER[50] && (insert -> okey == okey && insert -> len == l ))
+	#else
+	if (insert -> okey == okey 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(insert -> len == l ))
+	    fprintf(stderr, "triggered bug index 50\n");
+	  #endif
+	
 	    if (!memcmp(insert->name, name, l))
 		return(insert->name);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 #else
 	if ((insert->okey == okey) && (insert->len == l) &&
 	    (!xmlStrncmp(insert->name, name, l)))
@@ -895,10 +1207,28 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
 	    for (tmp = &(dict->subdict->dict[key]); tmp->next != NULL;
 		 tmp = tmp->next) {
 #ifdef __GNUC__
-		if ((tmp->okey == skey) && (tmp->len == l)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[51]) {
+		  fprintf(stderr, "reached bug index 51\n");
+		}
+		if ((FIXREVERTER[51] && (tmp -> okey == skey )) || (!FIXREVERTER[51] && (tmp -> okey == skey && tmp -> len == l ))
+		#else
+		if (tmp -> okey == skey 
+		#endif
+		) {
+		  
+		#ifdef FRCOV
+		  if (!(tmp -> len == l ))
+		    fprintf(stderr, "triggered bug index 51\n");
+		  #endif
+		
 		    if (!memcmp(tmp->name, name, l))
 			return(tmp->name);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 #else
 		if ((tmp->okey == skey) && (tmp->len == l) &&
 		    (!xmlStrncmp(tmp->name, name, l)))
@@ -907,10 +1237,28 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
 		nbi++;
 	    }
 #ifdef __GNUC__
-	    if ((tmp->okey == skey) && (tmp->len == l)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[52]) {
+	      fprintf(stderr, "reached bug index 52\n");
+	    }
+	    if ((FIXREVERTER[52] && (tmp -> okey == skey )) || (!FIXREVERTER[52] && (tmp -> okey == skey && tmp -> len == l ))
+	    #else
+	    if (tmp -> okey == skey 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(tmp -> len == l ))
+	        fprintf(stderr, "triggered bug index 52\n");
+	      #endif
+	    
 		if (!memcmp(tmp->name, name, l))
 		    return(tmp->name);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 #else
 	    if ((tmp->okey == skey) && (tmp->len == l) &&
 		(!xmlStrncmp(tmp->name, name, l)))
@@ -921,14 +1269,44 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
     }
 
     ret = xmlDictAddString(dict, name, l);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[53]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 53\n");
+      else
+        fprintf(stderr, "reached bug index 53\n");
+    }
+    if ((!FIXREVERTER[53] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (insert == NULL) {
 	entry = &(dict->dict[key]);
     } else {
 	entry = xmlMalloc(sizeof(xmlDictEntry));
-	if (entry == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[54]) {
+	  if ((entry == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 54\n");
+	  else
+	    fprintf(stderr, "reached bug index 54\n");
+	}
+	if ((!FIXREVERTER[54] && (entry == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	     return(NULL);
+	     #ifdef FRCOV
+	     }
+	     #endif
     }
     entry->name = ret;
     entry->len = l;
@@ -1078,10 +1456,40 @@ xmlDictQLookup(xmlDictPtr dict, const xmlChar *prefix, const xmlChar *name) {
     const xmlChar *ret;
     unsigned int len, plen, l;
 
-    if ((dict == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[61]) {
+      if ((dict == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 61\n");
+      else
+        fprintf(stderr, "reached bug index 61\n");
+    }
+    if ((!FIXREVERTER[61] && (dict == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (prefix == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[62]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 62\n");
+      else
+        fprintf(stderr, "reached bug index 62\n");
+    }
+    if ((!FIXREVERTER[62] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlDictLookup(dict, name, -1));
+        #ifdef FRCOV
+        }
+        #endif
 
     l = len = strlen((const char *) name);
     plen = strlen((const char *) prefix);
@@ -1137,14 +1545,44 @@ xmlDictQLookup(xmlDictPtr dict, const xmlChar *prefix, const xmlChar *name) {
     }
 
     ret = xmlDictAddQString(dict, prefix, plen, name, l);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[63]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 63\n");
+      else
+        fprintf(stderr, "reached bug index 63\n");
+    }
+    if ((!FIXREVERTER[63] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (insert == NULL) {
 	entry = &(dict->dict[key]);
     } else {
 	entry = xmlMalloc(sizeof(xmlDictEntry));
-	if (entry == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[64]) {
+	  if ((entry == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 64\n");
+	  else
+	    fprintf(stderr, "reached bug index 64\n");
+	}
+	if ((!FIXREVERTER[64] && (entry == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	     return(NULL);
+	     #ifdef FRCOV
+	     }
+	     #endif
     }
     entry->name = ret;
     entry->len = len;
@@ -1152,8 +1590,23 @@ xmlDictQLookup(xmlDictPtr dict, const xmlChar *prefix, const xmlChar *name) {
     entry->valid = 1;
     entry->okey = okey;
 
-    if (insert != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[65]) {
+      if ((insert != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 65\n");
+      else
+        fprintf(stderr, "reached bug index 65\n");
+    }
+    if ((!FIXREVERTER[65] && (insert != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	insert->next = entry;
+	#ifdef FRCOV
+	}
+	#endif
 
     dict->nbElems++;
 
@@ -1179,8 +1632,23 @@ int
 xmlDictOwns(xmlDictPtr dict, const xmlChar *str) {
     xmlDictStringsPtr pool;
 
-    if ((dict == NULL) || (str == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[66]) {
+      if ((dict == (void *) 0 || str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 66\n");
+      else
+        fprintf(stderr, "reached bug index 66\n");
+    }
+    if ((!FIXREVERTER[66] && (dict == (void *) 0 || str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     pool = dict->strings;
     while (pool != NULL) {
         if ((str >= &pool->array[0]) && (str <= pool->free))
diff --git a/doc/examples/io1.c b/doc/examples/io1.c
index d077cd82..80058583 100644
--- a/doc/examples/io1.c
+++ b/doc/examples/io1.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: InputOutput
  * synopsis: Example of custom Input/Output
diff --git a/doc/examples/io2.c b/doc/examples/io2.c
index 4676f4a9..c2fd1f5f 100644
--- a/doc/examples/io2.c
+++ b/doc/examples/io2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: InputOutput
  * synopsis: Output to char buffer
diff --git a/doc/examples/parse1.c b/doc/examples/parse1.c
index b44b03be..6a47c5e7 100644
--- a/doc/examples/parse1.c
+++ b/doc/examples/parse1.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: Parsing
  * synopsis: Parse an XML file to a tree and free it
diff --git a/doc/examples/parse2.c b/doc/examples/parse2.c
index aed76762..b4f63cd5 100644
--- a/doc/examples/parse2.c
+++ b/doc/examples/parse2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: Parsing
  * synopsis: Parse and validate an XML file to a tree and free the result
diff --git a/doc/examples/parse3.c b/doc/examples/parse3.c
index a2d3a409..51e217e8 100644
--- a/doc/examples/parse3.c
+++ b/doc/examples/parse3.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: Parsing
  * synopsis: Parse an XML document in memory to a tree and free it
diff --git a/doc/examples/parse4.c b/doc/examples/parse4.c
index 3e280560..1a374b4f 100644
--- a/doc/examples/parse4.c
+++ b/doc/examples/parse4.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: Parsing
  * synopsis: Parse an XML document chunk by chunk to a tree and free it
diff --git a/doc/examples/reader1.c b/doc/examples/reader1.c
index e8a005a4..fb82bf02 100644
--- a/doc/examples/reader1.c
+++ b/doc/examples/reader1.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: xmlReader
  * synopsis: Parse an XML file with an xmlReader
diff --git a/doc/examples/reader2.c b/doc/examples/reader2.c
index 043b137b..341aa4d3 100644
--- a/doc/examples/reader2.c
+++ b/doc/examples/reader2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: xmlReader
  * synopsis: Parse and validate an XML file with an xmlReader
diff --git a/doc/examples/reader3.c b/doc/examples/reader3.c
index 3eeb61fe..57822657 100644
--- a/doc/examples/reader3.c
+++ b/doc/examples/reader3.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: xmlReader
  * synopsis: Show how to extract subdocuments with xmlReader
diff --git a/doc/examples/reader4.c b/doc/examples/reader4.c
index 1289d0d4..2924a7e9 100644
--- a/doc/examples/reader4.c
+++ b/doc/examples/reader4.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: xmlReader
  * synopsis: Parse multiple XML files reusing an xmlReader
diff --git a/doc/examples/testWriter.c b/doc/examples/testWriter.c
index f662f767..47c9f9a7 100644
--- a/doc/examples/testWriter.c
+++ b/doc/examples/testWriter.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: xmlWriter
  * synopsis: use various APIs for the xmlWriter
diff --git a/doc/examples/tree1.c b/doc/examples/tree1.c
index e6faefc4..b6b14fcf 100644
--- a/doc/examples/tree1.c
+++ b/doc/examples/tree1.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * section: Tree
  * synopsis: Navigates a tree to print element names
diff --git a/doc/examples/tree2.c b/doc/examples/tree2.c
index 1cd1abe5..ef89cd58 100644
--- a/doc/examples/tree2.c
+++ b/doc/examples/tree2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /* 
  * section:  Tree
  * synopsis: Creates a tree
diff --git a/doc/examples/xpath1.c b/doc/examples/xpath1.c
index 0a31650b..29137264 100644
--- a/doc/examples/xpath1.c
+++ b/doc/examples/xpath1.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /** 
  * section: 	XPath
  * synopsis: 	Evaluate XPath expression and prints result node set.
diff --git a/doc/examples/xpath2.c b/doc/examples/xpath2.c
index f604114f..34d69192 100644
--- a/doc/examples/xpath2.c
+++ b/doc/examples/xpath2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /** 
  * section: 	XPath
  * synopsis: 	Load a document, locate subelements with XPath, modify
diff --git a/encoding.c b/encoding.c
index 574e1aed..0ef46f57 100644
--- a/encoding.c
+++ b/encoding.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * encoding.c : implements the encoding conversion functions needed for XML
  *
@@ -183,8 +187,23 @@ asciiToUTF8(unsigned char* out, int *outlen,
     while ((in < inend) && (out - outstart + 5 < *outlen)) {
 	c= *in++;
 
-        if (out >= outend)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1459]) {
+          if ((out >= outend ) && !(0))
+            fprintf(stderr, "triggered bug index 1459\n");
+          else
+            fprintf(stderr, "reached bug index 1459\n");
+        }
+        if ((!FIXREVERTER[1459] && (out >= outend ))
+        #else
+        if (0
+        #endif
+        )
 	    break;
+	    #ifdef FRCOV
+	    }
+	    #endif
         if (c < 0x80) {
 	    *out++ = c;
 	} else {
@@ -227,8 +246,35 @@ UTF8Toascii(unsigned char* out, int *outlen,
     unsigned int c, d;
     int trailing;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);
-    if (in == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1460]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1460\n");
+      else
+        fprintf(stderr, "reached bug index 1460\n");
+    }
+    if ((!FIXREVERTER[1460] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1461]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1461\n");
+      else
+        fprintf(stderr, "reached bug index 1461\n");
+    }
+    if ((!FIXREVERTER[1461] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
 	 * initialization nothing to do
 	 */
@@ -236,6 +282,9 @@ UTF8Toascii(unsigned char* out, int *outlen,
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend = in + (*inlen);
     outend = out + (*outlen);
     while (in < inend) {
@@ -269,8 +318,23 @@ UTF8Toascii(unsigned char* out, int *outlen,
 
 	/* assertion: c is a single UTF-4 value */
 	if (c < 0x80) {
-	    if (out >= outend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1462]) {
+	      if ((out >= outend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1462\n");
+	      else
+	        fprintf(stderr, "reached bug index 1462\n");
+	    }
+	    if ((!FIXREVERTER[1462] && (out >= outend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    *out++ = c;
 	} else {
 	    /* no chance for this in Ascii */
@@ -309,14 +373,43 @@ isolat1ToUTF8(unsigned char* out, int *outlen,
     const unsigned char* inend;
     const unsigned char* instop;
 
-    if ((out == NULL) || (in == NULL) || (outlen == NULL) || (inlen == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1463]) {
+      if ((out == (void *) 0 || in == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1463\n");
+      else
+        fprintf(stderr, "reached bug index 1463\n");
+    }
+    if ((!FIXREVERTER[1463] && (out == (void *) 0 || in == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     outend = out + *outlen;
     inend = in + (*inlen);
     instop = inend;
 
-    while ((in < inend) && (out < outend - 1)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1464])
+      fprintf(stderr, "reached bug index 1464\n");
+    while ((FIXREVERTER[1464] && (in < inend )) || (!FIXREVERTER[1464] && (in < inend && out < outend - 1 ))
+    #else
+    while (in < inend 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(out < outend - 1 ))
+        fprintf(stderr, "triggered bug index 1464\n");
+      #endif
+    
 	if (*in >= 0x80) {
 	    *out++ = (((*in) >>  6) & 0x1F) | 0xC0;
             *out++ = ((*in) & 0x3F) | 0x80;
@@ -327,6 +420,9 @@ isolat1ToUTF8(unsigned char* out, int *outlen,
 	    *out++ = *in++;
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((in < inend) && (out < outend) && (*in < 0x80)) {
         *out++ = *in++;
     }
@@ -354,15 +450,45 @@ UTF8ToUTF8(unsigned char* out, int *outlen,
 {
     int len;
 
-    if ((out == NULL) || (inb == NULL) || (outlen == NULL) || (inlenb == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1465]) {
+      if ((out == (void *) 0 || inb == (void *) 0 || outlen == (void *) 0 || inlenb == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1465\n");
+      else
+        fprintf(stderr, "reached bug index 1465\n");
+    }
+    if ((!FIXREVERTER[1465] && (out == (void *) 0 || inb == (void *) 0 || outlen == (void *) 0 || inlenb == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (*outlen > *inlenb) {
 	len = *inlenb;
     } else {
 	len = *outlen;
     }
-    if (len < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1466]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1466\n");
+      else
+        fprintf(stderr, "reached bug index 1466\n");
+    }
+    if ((!FIXREVERTER[1466] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     memcpy(out, inb, len);
 
@@ -400,8 +526,35 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
     unsigned int c, d;
     int trailing;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);
-    if (in == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1467]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1467\n");
+      else
+        fprintf(stderr, "reached bug index 1467\n");
+    }
+    if ((!FIXREVERTER[1467] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1468]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1468\n");
+      else
+        fprintf(stderr, "reached bug index 1468\n");
+    }
+    if ((!FIXREVERTER[1468] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
 	 * initialization nothing to do
 	 */
@@ -409,6 +562,9 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend = in + (*inlen);
     outend = out + (*outlen);
     while (in < inend) {
@@ -434,8 +590,23 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
 	}
 
 	for ( ; trailing; trailing--) {
-	    if (in >= inend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1469]) {
+	      if ((in >= inend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1469\n");
+	      else
+	        fprintf(stderr, "reached bug index 1469\n");
+	    }
+	    if ((!FIXREVERTER[1469] && (in >= inend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    if (((d= *in++) & 0xC0) != 0x80) {
 		*outlen = out - outstart;
 		*inlen = processed - instart;
@@ -447,8 +618,23 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
 
 	/* assertion: c is a single UTF-4 value */
 	if (c <= 0xFF) {
-	    if (out >= outend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1470]) {
+	      if ((out >= outend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1470\n");
+	      else
+	        fprintf(stderr, "reached bug index 1470\n");
+	    }
+	    if ((!FIXREVERTER[1470] && (out >= outend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    *out++ = c;
 	} else {
 	    /* no chance for this in IsoLat1 */
@@ -508,9 +694,24 @@ UTF16LEToUTF8(unsigned char* out, int *outlen,
 	    in++;
 	}
         if ((c & 0xFC00) == 0xD800) {    /* surrogates */
-	    if (in >= inend) {           /* (in > inend) shouldn't happens */
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1471]) {
+	      if ((in >= inend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1471\n");
+	      else
+	        fprintf(stderr, "reached bug index 1471\n");
+	    }
+	    if ((!FIXREVERTER[1471] && (in >= inend ))
+	    #else
+	    if (0
+	    #endif
+	    ) {           /* (in > inend) shouldn't happens */
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (xmlLittleEndian) {
 		d = *in++;
 	    } else {
@@ -533,16 +734,46 @@ UTF16LEToUTF8(unsigned char* out, int *outlen,
         }
 
 	/* assertion: c is a single UTF-4 value */
-        if (out >= outend)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1472]) {
+          if ((out >= outend ) && !(0))
+            fprintf(stderr, "triggered bug index 1472\n");
+          else
+            fprintf(stderr, "reached bug index 1472\n");
+        }
+        if ((!FIXREVERTER[1472] && (out >= outend ))
+        #else
+        if (0
+        #endif
+        )
 	    break;
+	    #ifdef FRCOV
+	    }
+	    #endif
         if      (c <    0x80) {  *out++=  c;                bits= -6; }
         else if (c <   0x800) {  *out++= ((c >>  6) & 0x1F) | 0xC0;  bits=  0; }
         else if (c < 0x10000) {  *out++= ((c >> 12) & 0x0F) | 0xE0;  bits=  6; }
         else                  {  *out++= ((c >> 18) & 0x07) | 0xF0;  bits= 12; }
 
         for ( ; bits >= 0; bits-= 6) {
-            if (out >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1473]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1473\n");
+              else
+                fprintf(stderr, "reached bug index 1473\n");
+            }
+            if ((!FIXREVERTER[1473] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
             *out++= ((c >> bits) & 0x3F) | 0x80;
         }
 	processed = (const unsigned char*) in;
@@ -582,12 +813,42 @@ UTF8ToUTF16LE(unsigned char* outb, int *outlen,
     unsigned short tmp1, tmp2;
 
     /* UTF16LE encoding has no BOM */
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);
-    if (in == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1474]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1474\n");
+      else
+        fprintf(stderr, "reached bug index 1474\n");
+    }
+    if ((!FIXREVERTER[1474] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1475]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1475\n");
+      else
+        fprintf(stderr, "reached bug index 1475\n");
+    }
+    if ((!FIXREVERTER[1475] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	*outlen = 0;
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend= in + *inlen;
     outend = out + (*outlen / 2);
     while (in < inend) {
@@ -621,8 +882,23 @@ UTF8ToUTF16LE(unsigned char* outb, int *outlen,
 
       /* assertion: c is a single UTF-4 value */
         if (c < 0x10000) {
-            if (out >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1476]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1476\n");
+              else
+                fprintf(stderr, "reached bug index 1476\n");
+            }
+            if ((!FIXREVERTER[1476] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    if (xmlLittleEndian) {
 		*out++ = c;
 	    } else {
@@ -633,8 +909,23 @@ UTF8ToUTF16LE(unsigned char* outb, int *outlen,
 	    }
         }
         else if (c < 0x110000) {
-            if (out+1 >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1477]) {
+              if ((out + 1 >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1477\n");
+              else
+                fprintf(stderr, "reached bug index 1477\n");
+            }
+            if ((!FIXREVERTER[1477] && (out + 1 >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
             c -= 0x10000;
 	    if (xmlLittleEndian) {
 		*out++ = 0xD800 | (c >> 10);
@@ -747,11 +1038,26 @@ UTF16BEToUTF8(unsigned char* out, int *outlen,
 	    c= *in++;
 	}
         if ((c & 0xFC00) == 0xD800) {    /* surrogates */
-	    if (in >= inend) {           /* (in > inend) shouldn't happens */
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1478]) {
+	      if ((in >= inend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1478\n");
+	      else
+	        fprintf(stderr, "reached bug index 1478\n");
+	    }
+	    if ((!FIXREVERTER[1478] && (in >= inend ))
+	    #else
+	    if (0
+	    #endif
+	    ) {           /* (in > inend) shouldn't happens */
 		*outlen = out - outstart;
 		*inlenb = processed - inb;
 	        return(-2);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (xmlLittleEndian) {
 		tmp = (unsigned char *) in;
 		d = *tmp++;
@@ -775,16 +1081,46 @@ UTF16BEToUTF8(unsigned char* out, int *outlen,
         }
 
 	/* assertion: c is a single UTF-4 value */
-        if (out >= outend)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1479]) {
+          if ((out >= outend ) && !(0))
+            fprintf(stderr, "triggered bug index 1479\n");
+          else
+            fprintf(stderr, "reached bug index 1479\n");
+        }
+        if ((!FIXREVERTER[1479] && (out >= outend ))
+        #else
+        if (0
+        #endif
+        )
 	    break;
+	    #ifdef FRCOV
+	    }
+	    #endif
         if      (c <    0x80) {  *out++=  c;                bits= -6; }
         else if (c <   0x800) {  *out++= ((c >>  6) & 0x1F) | 0xC0;  bits=  0; }
         else if (c < 0x10000) {  *out++= ((c >> 12) & 0x0F) | 0xE0;  bits=  6; }
         else                  {  *out++= ((c >> 18) & 0x07) | 0xF0;  bits= 12; }
 
         for ( ; bits >= 0; bits-= 6) {
-            if (out >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1480]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1480\n");
+              else
+                fprintf(stderr, "reached bug index 1480\n");
+            }
+            if ((!FIXREVERTER[1480] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
             *out++= ((c >> bits) & 0x3F) | 0x80;
         }
 	processed = (const unsigned char*) in;
@@ -824,12 +1160,42 @@ UTF8ToUTF16BE(unsigned char* outb, int *outlen,
     unsigned short tmp1, tmp2;
 
     /* UTF-16BE has no BOM */
-    if ((outb == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);
-    if (in == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1481]) {
+      if ((outb == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1481\n");
+      else
+        fprintf(stderr, "reached bug index 1481\n");
+    }
+    if ((!FIXREVERTER[1481] && (outb == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1482]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1482\n");
+      else
+        fprintf(stderr, "reached bug index 1482\n");
+    }
+    if ((!FIXREVERTER[1482] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	*outlen = 0;
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend= in + *inlen;
     outend = out + (*outlen / 2);
     while (in < inend) {
@@ -862,7 +1228,22 @@ UTF8ToUTF16BE(unsigned char* outb, int *outlen,
 
       /* assertion: c is a single UTF-4 value */
         if (c < 0x10000) {
-            if (out >= outend)  break;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1483]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1483\n");
+              else
+                fprintf(stderr, "reached bug index 1483\n");
+            }
+            if ((!FIXREVERTER[1483] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )  break;
+            #ifdef FRCOV
+            }
+            #endif
 	    if (xmlLittleEndian) {
 		tmp = (unsigned char *) out;
 		*tmp = c >> 8;
@@ -873,7 +1254,22 @@ UTF8ToUTF16BE(unsigned char* outb, int *outlen,
 	    }
         }
         else if (c < 0x110000) {
-            if (out+1 >= outend)  break;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1484]) {
+              if ((out + 1 >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1484\n");
+              else
+                fprintf(stderr, "reached bug index 1484\n");
+            }
+            if ((!FIXREVERTER[1484] && (out + 1 >= outend ))
+            #else
+            if (0
+            #endif
+            )  break;
+            #ifdef FRCOV
+            }
+            #endif
             c -= 0x10000;
 	    if (xmlLittleEndian) {
 		tmp1 = 0xD800 | (c >> 10);
@@ -922,8 +1318,23 @@ UTF8ToUTF16BE(unsigned char* outb, int *outlen,
 xmlCharEncoding
 xmlDetectCharEncoding(const unsigned char* in, int len)
 {
-    if (in == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1485]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1485\n");
+      else
+        fprintf(stderr, "reached bug index 1485\n");
+    }
+    if ((!FIXREVERTER[1485] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_CHAR_ENCODING_NONE);
+        #ifdef FRCOV
+        }
+        #endif
     if (len >= 4) {
 	if ((in[0] == 0x00) && (in[1] == 0x00) &&
 	    (in[2] == 0x00) && (in[3] == 0x3C))
@@ -1011,8 +1422,23 @@ xmlGetEncodingAlias(const char *alias) {
     int i;
     char upper[100];
 
-    if (alias == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1487]) {
+      if ((alias == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1487\n");
+      else
+        fprintf(stderr, "reached bug index 1487\n");
+    }
+    if ((!FIXREVERTER[1487] && (alias == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (xmlCharEncodingAliases == NULL)
 	return(NULL);
@@ -1144,15 +1570,45 @@ xmlParseCharEncoding(const char* name)
     char upper[500];
     int i;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1493]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1493\n");
+      else
+        fprintf(stderr, "reached bug index 1493\n");
+    }
+    if ((!FIXREVERTER[1493] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(XML_CHAR_ENCODING_NONE);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Do the alias resolution
      */
     alias = xmlGetEncodingAlias(name);
-    if (alias != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1494]) {
+      if ((alias != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1494\n");
+      else
+        fprintf(stderr, "reached bug index 1494\n");
+    }
+    if ((!FIXREVERTER[1494] && (alias != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	name = alias;
+	#ifdef FRCOV
+	}
+	#endif
 
     for (i = 0;i < 499;i++) {
         upper[i] = toupper(name[i]);
@@ -1319,38 +1775,98 @@ xmlNewCharEncodingHandler(const char *name,
      * Do the alias resolution
      */
     alias = xmlGetEncodingAlias(name);
-    if (alias != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1495]) {
+      if ((alias != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1495\n");
+      else
+        fprintf(stderr, "reached bug index 1495\n");
+    }
+    if ((!FIXREVERTER[1495] && (alias != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	name = alias;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Keep only the uppercase version of the encoding.
      */
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1496]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1496\n");
+      else
+        fprintf(stderr, "reached bug index 1496\n");
+    }
+    if ((!FIXREVERTER[1496] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlEncodingErr(XML_I18N_NO_NAME,
 		       "xmlNewCharEncodingHandler : no name !\n", NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     for (i = 0;i < 499;i++) {
         upper[i] = toupper(name[i]);
 	if (upper[i] == 0) break;
     }
     upper[i] = 0;
     up = xmlMemStrdup(upper);
-    if (up == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1497]) {
+      if ((up == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1497\n");
+      else
+        fprintf(stderr, "reached bug index 1497\n");
+    }
+    if ((!FIXREVERTER[1497] && (up == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlEncodingErrMemory("xmlNewCharEncodingHandler : out of memory !\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * allocate and fill-up an handler block.
      */
     handler = (xmlCharEncodingHandlerPtr)
               xmlMalloc(sizeof(xmlCharEncodingHandler));
-    if (handler == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1498]) {
+      if ((handler == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1498\n");
+      else
+        fprintf(stderr, "reached bug index 1498\n");
+    }
+    if ((!FIXREVERTER[1498] && (handler == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(up);
         xmlEncodingErrMemory("xmlNewCharEncodingHandler : out of memory !\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(handler, 0, sizeof(xmlCharEncodingHandler));
     handler->input = input;
     handler->output = output;
@@ -1471,11 +1987,26 @@ xmlCleanupCharEncodingHandlers(void) {
 void
 xmlRegisterCharEncodingHandler(xmlCharEncodingHandlerPtr handler) {
     if (handlers == NULL) xmlInitCharEncodingHandlers();
-    if ((handler == NULL) || (handlers == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1501]) {
+      if ((handler == (void *) 0 ) && !(handlers == (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1501\n");
+      else
+        fprintf(stderr, "reached bug index 1501\n");
+    }
+    if ((FIXREVERTER[1501] && (handlers == (void *) 0 )) || (!FIXREVERTER[1501] && (handler == (void *) 0 || handlers == (void *) 0 ))
+    #else
+    if (handlers == (void *) 0 
+    #endif
+    ) {
         xmlEncodingErr(XML_I18N_NO_HANDLER,
 		"xmlRegisterCharEncodingHandler: NULL handler !\n", NULL);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (nbCharEncodingHandler >= MAX_ENCODING_HANDLERS) {
         xmlEncodingErr(XML_I18N_EXCESS_HANDLER,
@@ -1645,7 +2176,22 @@ xmlFindCharEncodingHandler(const char *name) {
     int i;
 
     if (handlers == NULL) xmlInitCharEncodingHandlers();
-    if (name == NULL) return(xmlDefaultCharEncodingHandler);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1503]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1503\n");
+      else
+        fprintf(stderr, "reached bug index 1503\n");
+    }
+    if ((!FIXREVERTER[1503] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(xmlDefaultCharEncodingHandler);
+    #ifdef FRCOV
+    }
+    #endif
     if (name[0] == 0) return(xmlDefaultCharEncodingHandler);
 
     /*
@@ -1653,8 +2199,23 @@ xmlFindCharEncodingHandler(const char *name) {
      */
     norig = name;
     nalias = xmlGetEncodingAlias(name);
-    if (nalias != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1504]) {
+      if ((nalias != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1504\n");
+      else
+        fprintf(stderr, "reached bug index 1504\n");
+    }
+    if ((!FIXREVERTER[1504] && (nalias != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	name = nalias;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Check first for directly registered encoding names
@@ -1690,11 +2251,26 @@ xmlFindCharEncodingHandler(const char *name) {
     if ((icv_in != (iconv_t) -1) && (icv_out != (iconv_t) -1)) {
 	    enc = (xmlCharEncodingHandlerPtr)
 	          xmlMalloc(sizeof(xmlCharEncodingHandler));
-	    if (enc == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1505]) {
+	      if ((enc == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1505\n");
+	      else
+	        fprintf(stderr, "reached bug index 1505\n");
+	    }
+	    if ((!FIXREVERTER[1505] && (enc == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        iconv_close(icv_in);
 	        iconv_close(icv_out);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
             memset(enc, 0, sizeof(xmlCharEncodingHandler));
 	    enc->name = xmlMemStrdup(name);
 	    enc->input = NULL;
@@ -1796,10 +2372,25 @@ xmlIconvWrapper(iconv_t cd, unsigned char *out, int *outlen,
     char *icv_out = (char *) out;
     int ret;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL) || (in == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1506]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 || in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1506\n");
+      else
+        fprintf(stderr, "reached bug index 1506\n");
+    }
+    if ((!FIXREVERTER[1506] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 || in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (outlen != NULL) *outlen = 0;
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     icv_inlen = *inlen;
     icv_outlen = *outlen;
     ret = iconv(cd, (ICONV_CONST char **) &icv_in, &icv_inlen, &icv_out, &icv_outlen);
@@ -2057,15 +2648,44 @@ xmlCharEncFirstLineInput(xmlParserInputBufferPtr input, int len)
     xmlBufPtr in;
     xmlBufPtr out;
 
-    if ((input == NULL) || (input->encoder == NULL) ||
-        (input->buffer == NULL) || (input->raw == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1512]) {
+      if ((input == (void *) 0 || input -> encoder == (void *) 0 || input -> buffer == (void *) 0 || input -> raw == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1512\n");
+      else
+        fprintf(stderr, "reached bug index 1512\n");
+    }
+    if ((!FIXREVERTER[1512] && (input == (void *) 0 || input -> encoder == (void *) 0 || input -> buffer == (void *) 0 || input -> raw == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     out = input->buffer;
     in = input->raw;
 
     toconv = xmlBufUse(in);
-    if (toconv == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1513]) {
+      if ((toconv == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1513\n");
+      else
+        fprintf(stderr, "reached bug index 1513\n");
+    }
+    if ((!FIXREVERTER[1513] && (toconv == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     written = xmlBufAvail(out) - 1; /* count '\0' */
     /*
      * echo '<?xml version="1.0" encoding="UCS4"?>' | wc -c => 38
@@ -2079,15 +2699,45 @@ xmlCharEncFirstLineInput(xmlParserInputBufferPtr input, int len)
         if (toconv > (unsigned int) len)
             toconv = len;
     } else {
-        if (toconv > 180)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1514]) {
+          if ((toconv > 180 ) && !(0))
+            fprintf(stderr, "triggered bug index 1514\n");
+          else
+            fprintf(stderr, "reached bug index 1514\n");
+        }
+        if ((!FIXREVERTER[1514] && (toconv > 180 ))
+        #else
+        if (0
+        #endif
+        )
             toconv = 180;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (toconv * 2 >= written) {
         xmlBufGrow(out, toconv * 2);
         written = xmlBufAvail(out) - 1;
     }
-    if (written > 360)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1515]) {
+      if ((written > 360 ) && !(0))
+        fprintf(stderr, "triggered bug index 1515\n");
+      else
+        fprintf(stderr, "reached bug index 1515\n");
+    }
+    if ((!FIXREVERTER[1515] && (written > 360 ))
+    #else
+    if (0
+    #endif
+    )
         written = 360;
+        #ifdef FRCOV
+        }
+        #endif
 
     c_in = toconv;
     c_out = written;
@@ -2183,15 +2833,44 @@ xmlCharEncInput(xmlParserInputBufferPtr input, int flush)
     xmlBufPtr in;
     xmlBufPtr out;
 
-    if ((input == NULL) || (input->encoder == NULL) ||
-        (input->buffer == NULL) || (input->raw == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1516]) {
+      if ((input == (void *) 0 || input -> encoder == (void *) 0 || input -> buffer == (void *) 0 || input -> raw == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1516\n");
+      else
+        fprintf(stderr, "reached bug index 1516\n");
+    }
+    if ((!FIXREVERTER[1516] && (input == (void *) 0 || input -> encoder == (void *) 0 || input -> buffer == (void *) 0 || input -> raw == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     out = input->buffer;
     in = input->raw;
 
     toconv = xmlBufUse(in);
-    if (toconv == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1517]) {
+      if ((toconv == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1517\n");
+      else
+        fprintf(stderr, "reached bug index 1517\n");
+    }
+    if ((!FIXREVERTER[1517] && (toconv == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     if ((toconv > 64 * 1024) && (flush == 0))
         toconv = 64 * 1024;
     written = xmlBufAvail(out);
@@ -2415,9 +3094,23 @@ xmlCharEncOutput(xmlOutputBufferPtr output, int init)
     xmlBufPtr out;
     int charref_len = 0;
 
-    if ((output == NULL) || (output->encoder == NULL) ||
-        (output->buffer == NULL) || (output->conv == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1524]) {
+      if ((output == (void *) 0 || output -> encoder == (void *) 0 || output -> buffer == (void *) 0 || output -> conv == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1524\n");
+      else
+        fprintf(stderr, "reached bug index 1524\n");
+    }
+    if ((!FIXREVERTER[1524] && (output == (void *) 0 || output -> encoder == (void *) 0 || output -> buffer == (void *) 0 || output -> conv == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     out = output->conv;
     in = output->buffer;
 
@@ -2464,16 +3157,61 @@ retry:
      * Conversion itself.
      */
     toconv = xmlBufUse(in);
-    if (toconv == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1525]) {
+      if ((toconv == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1525\n");
+      else
+        fprintf(stderr, "reached bug index 1525\n");
+    }
+    if ((!FIXREVERTER[1525] && (toconv == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
-    if (toconv > 64 * 1024)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1526]) {
+      if ((toconv > 64 * 1024 ) && !(0))
+        fprintf(stderr, "triggered bug index 1526\n");
+      else
+        fprintf(stderr, "reached bug index 1526\n");
+    }
+    if ((!FIXREVERTER[1526] && (toconv > 64 * 1024 ))
+    #else
+    if (0
+    #endif
+    )
         toconv = 64 * 1024;
+        #ifdef FRCOV
+        }
+        #endif
     if (toconv * 4 >= written) {
         xmlBufGrow(out, toconv * 4);
         written = xmlBufAvail(out) - 1;
     }
-    if (written > 256 * 1024)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1527]) {
+      if ((written > 256 * 1024 ) && !(0))
+        fprintf(stderr, "triggered bug index 1527\n");
+      else
+        fprintf(stderr, "reached bug index 1527\n");
+    }
+    if ((!FIXREVERTER[1527] && (written > 256 * 1024 ))
+    #else
+    if (0
+    #endif
+    )
         written = 256 * 1024;
+        #ifdef FRCOV
+        }
+        #endif
 
     c_in = toconv;
     c_out = written;
@@ -2494,13 +3232,28 @@ retry:
         xmlBufAddLen(out, c_out);
         writtentot += c_out;
         if (ret == -1) {
-            if (c_out > 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1528]) {
+              if ((c_out > 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1528\n");
+              else
+                fprintf(stderr, "reached bug index 1528\n");
+            }
+            if ((!FIXREVERTER[1528] && (c_out > 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 /*
                  * Can be a limitation of iconv
                  */
                 charref_len = 0;
                 goto retry;
             }
+            #ifdef FRCOV
+            }
+            #endif
             ret = -3;
         }
     }
@@ -2855,8 +3608,38 @@ xmlCharEncCloseFunc(xmlCharEncodingHandler *handler) {
     int tofree = 0;
     int i, handler_in_list = 0;
 
-    if (handler == NULL) return(-1);
-    if (handler->name == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1534]) {
+      if ((handler == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1534\n");
+      else
+        fprintf(stderr, "reached bug index 1534\n");
+    }
+    if ((!FIXREVERTER[1534] && (handler == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1535]) {
+      if ((handler -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1535\n");
+      else
+        fprintf(stderr, "reached bug index 1535\n");
+    }
+    if ((!FIXREVERTER[1535] && (handler -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (handlers != NULL) {
         for (i = 0;i < nbCharEncodingHandler; i++) {
             if (handler == handlers[i]) {
diff --git a/entities.c b/entities.c
index a72afb34..99937fe3 100644
--- a/entities.c
+++ b/entities.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * entities.c : implementation for the XML entities handling
  *
@@ -97,11 +101,41 @@ xmlFreeEntity(xmlEntityPtr entity)
 {
     xmlDictPtr dict = NULL;
 
-    if (entity == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1619]) {
+      if ((entity == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1619\n");
+      else
+        fprintf(stderr, "reached bug index 1619\n");
+    }
+    if ((!FIXREVERTER[1619] && (entity == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-
-    if (entity->doc != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1620]) {
+      if ((entity -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1620\n");
+      else
+        fprintf(stderr, "reached bug index 1620\n");
+    }
+    if ((!FIXREVERTER[1620] && (entity -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = entity->doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
 
     if ((entity->children) && (entity->owner == 1) &&
@@ -152,10 +186,25 @@ xmlCreateEntity(xmlDictPtr dict, const xmlChar *name, int type,
     xmlEntityPtr ret;
 
     ret = (xmlEntityPtr) xmlMalloc(sizeof(xmlEntity));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1621]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1621\n");
+      else
+        fprintf(stderr, "reached bug index 1621\n");
+    }
+    if ((!FIXREVERTER[1621] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlEntitiesErrMemory("xmlCreateEntity: malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlEntity));
     ret->type = XML_ENTITY_DECL;
     ret->checked = 0;
@@ -166,16 +215,76 @@ xmlCreateEntity(xmlDictPtr dict, const xmlChar *name, int type,
     ret->etype = (xmlEntityType) type;
     if (dict == NULL) {
 	ret->name = xmlStrdup(name);
-	if (ExternalID != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1622]) {
+	  if ((ExternalID != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1622\n");
+	  else
+	    fprintf(stderr, "reached bug index 1622\n");
+	}
+	if ((!FIXREVERTER[1622] && (ExternalID != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ret->ExternalID = xmlStrdup(ExternalID);
-	if (SystemID != NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1623]) {
+	  if ((SystemID != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1623\n");
+	  else
+	    fprintf(stderr, "reached bug index 1623\n");
+	}
+	if ((!FIXREVERTER[1623] && (SystemID != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ret->SystemID = xmlStrdup(SystemID);
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
         ret->name = xmlDictLookup(dict, name, -1);
-	if (ExternalID != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1624]) {
+	  if ((ExternalID != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1624\n");
+	  else
+	    fprintf(stderr, "reached bug index 1624\n");
+	}
+	if ((!FIXREVERTER[1624] && (ExternalID != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ret->ExternalID = xmlDictLookup(dict, ExternalID, -1);
-	if (SystemID != NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1625]) {
+	  if ((SystemID != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1625\n");
+	  else
+	    fprintf(stderr, "reached bug index 1625\n");
+	}
+	if ((!FIXREVERTER[1625] && (SystemID != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ret->SystemID = xmlDictLookup(dict, SystemID, -1);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     if (content != NULL) {
         ret->length = xmlStrlen(content);
@@ -207,35 +316,140 @@ xmlAddEntity(xmlDtdPtr dtd, const xmlChar *name, int type,
     xmlEntitiesTablePtr table = NULL;
     xmlEntityPtr ret;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1626]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1626\n");
+      else
+        fprintf(stderr, "reached bug index 1626\n");
+    }
+    if ((!FIXREVERTER[1626] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (dtd == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1627]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1627\n");
+      else
+        fprintf(stderr, "reached bug index 1627\n");
+    }
+    if ((!FIXREVERTER[1627] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (dtd->doc != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1628]) {
+      if ((dtd -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1628\n");
+      else
+        fprintf(stderr, "reached bug index 1628\n");
+    }
+    if ((!FIXREVERTER[1628] && (dtd -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = dtd->doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     switch (type) {
         case XML_INTERNAL_GENERAL_ENTITY:
         case XML_EXTERNAL_GENERAL_PARSED_ENTITY:
         case XML_EXTERNAL_GENERAL_UNPARSED_ENTITY:
-	    if (dtd->entities == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1629]) {
+	      if ((dtd -> entities == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 1629\n");
+	      else
+	        fprintf(stderr, "reached bug index 1629\n");
+	    }
+	    if ((!FIXREVERTER[1629] && (dtd -> entities == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		dtd->entities = xmlHashCreateDict(0, dict);
+		#ifdef FRCOV
+		}
+		#endif
 	    table = dtd->entities;
 	    break;
         case XML_INTERNAL_PARAMETER_ENTITY:
         case XML_EXTERNAL_PARAMETER_ENTITY:
-	    if (dtd->pentities == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1630]) {
+	      if ((dtd -> pentities == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 1630\n");
+	      else
+	        fprintf(stderr, "reached bug index 1630\n");
+	    }
+	    if ((!FIXREVERTER[1630] && (dtd -> pentities == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		dtd->pentities = xmlHashCreateDict(0, dict);
+		#ifdef FRCOV
+		}
+		#endif
 	    table = dtd->pentities;
 	    break;
         case XML_INTERNAL_PREDEFINED_ENTITY:
 	    return(NULL);
     }
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1631]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1631\n");
+      else
+        fprintf(stderr, "reached bug index 1631\n");
+    }
+    if ((!FIXREVERTER[1631] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ret = xmlCreateEntity(dict, name, type, ExternalID, SystemID, content);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1632]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1632\n");
+      else
+        fprintf(stderr, "reached bug index 1632\n");
+    }
+    if ((!FIXREVERTER[1632] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret->doc = dtd->doc;
 
     if (xmlHashAddEntry(table, name, ret)) {
@@ -258,7 +472,22 @@ xmlAddEntity(xmlDtdPtr dtd, const xmlChar *name, int type,
  */
 xmlEntityPtr
 xmlGetPredefinedEntity(const xmlChar *name) {
-    if (name == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1633]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1633\n");
+      else
+        fprintf(stderr, "reached bug index 1633\n");
+    }
+    if ((!FIXREVERTER[1633] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     switch (name[0]) {
         case 'l':
 	    if (xmlStrEqual(name, BAD_CAST "lt"))
@@ -304,19 +533,64 @@ xmlAddDtdEntity(xmlDocPtr doc, const xmlChar *name, int type,
     xmlEntityPtr ret;
     xmlDtdPtr dtd;
 
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1634]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1634\n");
+      else
+        fprintf(stderr, "reached bug index 1634\n");
+    }
+    if ((!FIXREVERTER[1634] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlEntitiesErr(XML_DTD_NO_DOC,
 	        "xmlAddDtdEntity: document is NULL");
 	return(NULL);
     }
-    if (doc->extSubset == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1635]) {
+      if ((doc -> extSubset == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1635\n");
+      else
+        fprintf(stderr, "reached bug index 1635\n");
+    }
+    if ((!FIXREVERTER[1635] && (doc -> extSubset == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlEntitiesErr(XML_DTD_NO_DTD,
 	        "xmlAddDtdEntity: document without external subset");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     dtd = doc->extSubset;
     ret = xmlAddEntity(dtd, name, type, ExternalID, SystemID, content);
-    if (ret == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1636]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1636\n");
+      else
+        fprintf(stderr, "reached bug index 1636\n");
+    }
+    if ((!FIXREVERTER[1636] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Link it to the DTD
@@ -353,19 +627,64 @@ xmlAddDocEntity(xmlDocPtr doc, const xmlChar *name, int type,
     xmlEntityPtr ret;
     xmlDtdPtr dtd;
 
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1637]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1637\n");
+      else
+        fprintf(stderr, "reached bug index 1637\n");
+    }
+    if ((!FIXREVERTER[1637] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlEntitiesErr(XML_DTD_NO_DOC,
 	        "xmlAddDocEntity: document is NULL");
 	return(NULL);
     }
-    if (doc->intSubset == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1638]) {
+      if ((doc -> intSubset == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1638\n");
+      else
+        fprintf(stderr, "reached bug index 1638\n");
+    }
+    if ((!FIXREVERTER[1638] && (doc -> intSubset == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlEntitiesErr(XML_DTD_NO_DTD,
 	        "xmlAddDocEntity: document without internal subset");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     dtd = doc->intSubset;
     ret = xmlAddEntity(dtd, name, type, ExternalID, SystemID, content);
-    if (ret == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1639]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1639\n");
+      else
+        fprintf(stderr, "reached bug index 1639\n");
+    }
+    if ((!FIXREVERTER[1639] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Link it to the DTD
@@ -451,8 +770,23 @@ xmlGetParameterEntity(xmlDocPtr doc, const xmlChar *name) {
     xmlEntitiesTablePtr table;
     xmlEntityPtr ret;
 
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1641]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1641\n");
+      else
+        fprintf(stderr, "reached bug index 1641\n");
+    }
+    if ((!FIXREVERTER[1641] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((doc->intSubset != NULL) && (doc->intSubset->pentities != NULL)) {
 	table = (xmlEntitiesTablePtr) doc->intSubset->pentities;
 	ret = xmlGetEntityFromTable(table, name);
@@ -560,7 +894,22 @@ xmlEncodeEntitiesInternal(xmlDocPtr doc, const xmlChar *input, int attr) {
     size_t buffer_size = 0;
     int html = 0;
 
-    if (input == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1643]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1643\n");
+      else
+        fprintf(stderr, "reached bug index 1643\n");
+    }
+    if ((!FIXREVERTER[1643] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (doc != NULL)
         html = (doc->type == XML_HTML_DOCUMENT_NODE);
 
@@ -569,10 +918,25 @@ xmlEncodeEntitiesInternal(xmlDocPtr doc, const xmlChar *input, int attr) {
      */
     buffer_size = 1000;
     buffer = (xmlChar *) xmlMalloc(buffer_size * sizeof(xmlChar));
-    if (buffer == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1645]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1645\n");
+      else
+        fprintf(stderr, "reached bug index 1645\n");
+    }
+    if ((!FIXREVERTER[1645] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlEntitiesErrMemory("xmlEncodeEntities: malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     out = buffer;
 
     while (*cur != '\0') {
@@ -668,8 +1032,23 @@ xmlEncodeEntitiesInternal(xmlDocPtr doc, const xmlChar *input, int attr) {
 		if (*cur < 0xC0) {
 		    xmlEntitiesErr(XML_CHECK_NOT_UTF8,
 			    "xmlEncodeEntities: input not UTF-8");
-		    if (doc != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1646]) {
+		      if ((doc != (void *) 0  ) && !(0))
+		        fprintf(stderr, "triggered bug index 1646\n");
+		      else
+		        fprintf(stderr, "reached bug index 1646\n");
+		    }
+		    if ((!FIXREVERTER[1646] && (doc != (void *) 0  ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			doc->encoding = xmlStrdup(BAD_CAST "ISO-8859-1");
+			#ifdef FRCOV
+			}
+			#endif
 		    snprintf(buf, sizeof(buf), "&#%d;", *cur);
 		    buf[sizeof(buf) - 1] = 0;
 		    ptr = buf;
@@ -701,8 +1080,23 @@ xmlEncodeEntitiesInternal(xmlDocPtr doc, const xmlChar *input, int attr) {
 		if ((l == 1) || (!IS_CHAR(val))) {
 		    xmlEntitiesErr(XML_ERR_INVALID_CHAR,
 			"xmlEncodeEntities: char out of range\n");
-		    if (doc != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1647]) {
+		      if ((doc != (void *) 0  ) && !(0))
+		        fprintf(stderr, "triggered bug index 1647\n");
+		      else
+		        fprintf(stderr, "reached bug index 1647\n");
+		    }
+		    if ((!FIXREVERTER[1647] && (doc != (void *) 0  ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			doc->encoding = xmlStrdup(BAD_CAST "ISO-8859-1");
+			#ifdef FRCOV
+			}
+			#endif
 		    snprintf(buf, sizeof(buf), "&#%d;", *cur);
 		    buf[sizeof(buf) - 1] = 0;
 		    ptr = buf;
diff --git a/error.c b/error.c
index cbcf5c96..c0ab82e0 100644
--- a/error.c
+++ b/error.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * error.c: module displaying/handling XML parser errors
  *
@@ -177,7 +181,22 @@ xmlParserPrintFileContextInternal(xmlParserInputPtr input ,
     xmlChar  content[81]; /* space for 80 chars + line terminator */
     xmlChar *ctnt;
 
-    if (input == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2897]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2897\n");
+      else
+        fprintf(stderr, "reached bug index 2897\n");
+    }
+    if ((!FIXREVERTER[2897] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     cur = input->cur;
     base = input->base;
     /* skip backwards over any end-of-lines */
@@ -253,8 +272,23 @@ xmlReportError(xmlErrorPtr err, xmlParserCtxtPtr ctxt, const char *str,
     xmlParserInputPtr input = NULL;
     xmlParserInputPtr cur = NULL;
 
-    if (err == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2898]) {
+      if ((err == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2898\n");
+      else
+        fprintf(stderr, "reached bug index 2898\n");
+    }
+    if ((!FIXREVERTER[2898] && (err == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (channel == NULL) {
 	channel = xmlGenericError;
@@ -286,8 +320,25 @@ xmlReportError(xmlErrorPtr err, xmlParserCtxtPtr ctxt, const char *str,
         if (input != NULL) {
             if (input->filename)
                 channel(data, "%s:%d: ", input->filename, input->line);
-            else if ((line != 0) && (domain == XML_FROM_PARSER))
+            else 
+            #ifdef FRCOV
+            {if (FIXREVERTER[2900]) {
+              fprintf(stderr, "reached bug index 2900\n");
+            }
+            if ((FIXREVERTER[2900] && (domain == XML_FROM_PARSER )) || (!FIXREVERTER[2900] && (line != 0 && domain == XML_FROM_PARSER ))
+            #else
+            if (domain == XML_FROM_PARSER 
+            #endif
+            )
+                
+                #ifdef FRCOV
+                {if (!(line != 0 ))
+                  fprintf(stderr, "triggered bug index 2900\n");
+                #endif
                 channel(data, "Entity: line %d: ", input->line);
+                #ifdef FRCOV
+                }}
+                #endif
         }
     } else {
         if (file != NULL)
@@ -405,8 +456,25 @@ xmlReportError(xmlErrorPtr err, xmlParserCtxtPtr ctxt, const char *str,
         if (cur != NULL) {
             if (cur->filename)
                 channel(data, "%s:%d: \n", cur->filename, cur->line);
-            else if ((line != 0) && (domain == XML_FROM_PARSER))
+            else 
+            #ifdef FRCOV
+            {if (FIXREVERTER[2901]) {
+              fprintf(stderr, "reached bug index 2901\n");
+            }
+            if ((FIXREVERTER[2901] && (domain == XML_FROM_PARSER )) || (!FIXREVERTER[2901] && (line != 0 && domain == XML_FROM_PARSER ))
+            #else
+            if (domain == XML_FROM_PARSER 
+            #endif
+            )
+                
+                #ifdef FRCOV
+                {if (!(line != 0 ))
+                  fprintf(stderr, "triggered bug index 2901\n");
+                #endif
                 channel(data, "Entity: line %d: \n", cur->line);
+                #ifdef FRCOV
+                }}
+                #endif
             xmlParserPrintFileContextInternal(cur, channel, data);
         }
     }
@@ -464,8 +532,23 @@ __xmlRaiseError(xmlStructuredErrorFunc schannel,
     xmlErrorPtr to = &xmlLastError;
     xmlNodePtr baseptr = NULL;
 
-    if (code == XML_ERR_OK)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2902]) {
+      if ((code == XML_ERR_OK ) && !(0))
+        fprintf(stderr, "triggered bug index 2902\n");
+      else
+        fprintf(stderr, "reached bug index 2902\n");
+    }
+    if ((!FIXREVERTER[2902] && (code == XML_ERR_OK ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((xmlGetWarningsDefaultValue == 0) && (level == XML_ERR_WARNING))
         return;
     if ((domain == XML_FROM_PARSER) || (domain == XML_FROM_HTML) ||
@@ -487,8 +570,23 @@ __xmlRaiseError(xmlStructuredErrorFunc schannel,
 	/*
 	 * if user has defined handler, change data ptr to user's choice
 	 */
-	if (schannel != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2903]) {
+	  if ((schannel != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2903\n");
+	  else
+	    fprintf(stderr, "reached bug index 2903\n");
+	}
+	if ((!FIXREVERTER[2903] && (schannel != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    data = xmlStructuredErrorContext;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     /*
      * Formatting the message
@@ -584,12 +682,57 @@ __xmlRaiseError(xmlStructuredErrorFunc schannel,
 	}
     }
     to->line = line;
-    if (str1 != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2904]) {
+      if ((str1 != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2904\n");
+      else
+        fprintf(stderr, "reached bug index 2904\n");
+    }
+    if ((!FIXREVERTER[2904] && (str1 != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         to->str1 = (char *) xmlStrdup((const xmlChar *) str1);
-    if (str2 != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2905]) {
+      if ((str2 != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2905\n");
+      else
+        fprintf(stderr, "reached bug index 2905\n");
+    }
+    if ((!FIXREVERTER[2905] && (str2 != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         to->str2 = (char *) xmlStrdup((const xmlChar *) str2);
-    if (str3 != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2906]) {
+      if ((str3 != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2906\n");
+      else
+        fprintf(stderr, "reached bug index 2906\n");
+    }
+    if ((!FIXREVERTER[2906] && (str3 != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         to->str3 = (char *) xmlStrdup((const xmlChar *) str3);
+        #ifdef FRCOV
+        }
+        #endif
     to->int1 = int1;
     to->int2 = col;
     to->node = node;
@@ -621,8 +764,23 @@ __xmlRaiseError(xmlStructuredErrorFunc schannel,
 	    data = xmlGenericErrorContext;
 	}
     }
-    if (channel == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2907]) {
+      if ((channel == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2907\n");
+      else
+        fprintf(stderr, "reached bug index 2907\n");
+    }
+    if ((!FIXREVERTER[2907] && (channel == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((channel == xmlParserError) ||
         (channel == xmlParserWarning) ||
@@ -797,9 +955,27 @@ xmlParserValidityError(void *ctx, const char *msg, ...)
     if (str != NULL)
 	xmlFree(str);
 
-    if ((ctxt != NULL) && (input != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2908]) {
+      fprintf(stderr, "reached bug index 2908\n");
+    }
+    if ((FIXREVERTER[2908] && (ctxt != (void *) 0 )) || (!FIXREVERTER[2908] && (ctxt != (void *) 0 && input != (void *) 0 ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(input != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2908\n");
+      #endif
+    
 	xmlParserPrintFileContext(input);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 /**
@@ -870,10 +1046,40 @@ xmlGetLastError(void)
 void
 xmlResetError(xmlErrorPtr err)
 {
-    if (err == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2910]) {
+      if ((err == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2910\n");
+      else
+        fprintf(stderr, "reached bug index 2910\n");
+    }
+    if ((!FIXREVERTER[2910] && (err == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-    if (err->code == XML_ERR_OK)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2911]) {
+      if ((err -> code == XML_ERR_OK ) && !(0))
+        fprintf(stderr, "triggered bug index 2911\n");
+      else
+        fprintf(stderr, "reached bug index 2911\n");
+    }
+    if ((!FIXREVERTER[2911] && (err -> code == XML_ERR_OK ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (err->message != NULL)
         xmlFree(err->message);
     if (err->file != NULL)
@@ -955,8 +1161,23 @@ int
 xmlCopyError(xmlErrorPtr from, xmlErrorPtr to) {
     char *message, *file, *str1, *str2, *str3;
 
-    if ((from == NULL) || (to == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2915]) {
+      if ((from == (void *) 0 || to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2915\n");
+      else
+        fprintf(stderr, "reached bug index 2915\n");
+    }
+    if ((!FIXREVERTER[2915] && (from == (void *) 0 || to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     message = (char *) xmlStrdup((xmlChar *) from->message);
     file = (char *) xmlStrdup ((xmlChar *) from->file);
diff --git a/example/gjobread.c b/example/gjobread.c
index d3f6d57d..cbccf26c 100644
--- a/example/gjobread.c
+++ b/example/gjobread.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * gjobread.c : a small test program for gnome jobs XML format
  *
diff --git a/hash.c b/hash.c
index f9a20172..05522cf6 100644
--- a/hash.c
+++ b/hash.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * hash.c: chained hash tables
  *
@@ -174,8 +178,23 @@ xmlHashTablePtr
 xmlHashCreate(int size) {
     xmlHashTablePtr table;
 
-    if (size <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2937]) {
+      if ((size <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2937\n");
+      else
+        fprintf(stderr, "reached bug index 2937\n");
+    }
+    if ((!FIXREVERTER[2937] && (size <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         size = 256;
+        #ifdef FRCOV
+        }
+        #endif
 
     table = xmlMalloc(sizeof(xmlHashTable));
     if (table) {
@@ -235,23 +254,98 @@ xmlHashGrow(xmlHashTablePtr table, int size) {
     unsigned long nbElem = 0;
 #endif
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2938]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2938\n");
+      else
+        fprintf(stderr, "reached bug index 2938\n");
+    }
+    if ((!FIXREVERTER[2938] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (size < 8)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2939]) {
+      if ((size < 8 ) && !(0))
+        fprintf(stderr, "triggered bug index 2939\n");
+      else
+        fprintf(stderr, "reached bug index 2939\n");
+    }
+    if ((!FIXREVERTER[2939] && (size < 8 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
-    if (size > 8 * 2048)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2940]) {
+      if ((size > 8 * 2048 ) && !(0))
+        fprintf(stderr, "triggered bug index 2940\n");
+      else
+        fprintf(stderr, "reached bug index 2940\n");
+    }
+    if ((!FIXREVERTER[2940] && (size > 8 * 2048 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     oldsize = table->size;
     oldtable = table->table;
-    if (oldtable == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2941]) {
+      if ((oldtable == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2941\n");
+      else
+        fprintf(stderr, "reached bug index 2941\n");
+    }
+    if ((!FIXREVERTER[2941] && (oldtable == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     table->table = xmlMalloc(size * sizeof(xmlHashEntry));
-    if (table->table == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2942]) {
+      if ((table -> table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2942\n");
+      else
+        fprintf(stderr, "reached bug index 2942\n");
+    }
+    if ((!FIXREVERTER[2942] && (table -> table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	table->table = oldtable;
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(table->table, 0, size * sizeof(xmlHashEntry));
     table->size = size;
 
@@ -324,19 +418,80 @@ xmlHashFree(xmlHashTablePtr table, xmlHashDeallocator f) {
     int inside_table = 0;
     int nbElems;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2943]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2943\n");
+      else
+        fprintf(stderr, "reached bug index 2943\n");
+    }
+    if ((!FIXREVERTER[2943] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (table->table) {
 	nbElems = table->nbElems;
-	for(i = 0; (i < table->size) && (nbElems > 0); i++) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2946])
+	  fprintf(stderr, "reached bug index 2946\n");
+	for (i = 0; (FIXREVERTER[2946] && (nbElems > 0 )) || (!FIXREVERTER[2946] && (i < table -> size && nbElems > 0 ))
+	#else
+	for (i = 0; nbElems > 0 
+	#endif
+	; i++) {
+	  
+	#ifdef FRCOV
+	  if (!(i < table -> size ))
+	    fprintf(stderr, "triggered bug index 2946\n");
+	  #endif
+	
 	    iter = &(table->table[i]);
-	    if (iter->valid == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2944]) {
+	      if ((iter -> valid == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2944\n");
+	      else
+	        fprintf(stderr, "reached bug index 2944\n");
+	    }
+	    if ((!FIXREVERTER[2944] && (iter -> valid == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    inside_table = 1;
 	    while (iter) {
 		next = iter->next;
-		if ((f != NULL) && (iter->payload != NULL))
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2945]) {
+		  fprintf(stderr, "reached bug index 2945\n");
+		}
+		if ((FIXREVERTER[2945] && (f != (void *) 0 )) || (!FIXREVERTER[2945] && (f != (void *) 0 && iter -> payload != (void *) 0 ))
+		#else
+		if (f != (void *) 0 
+		#endif
+		)
+		    
+		    #ifdef FRCOV
+		    {if (!(iter -> payload != (void *) 0 ))
+		      fprintf(stderr, "triggered bug index 2945\n");
+		    #endif
 		    f(iter->payload, iter->name);
+		    #ifdef FRCOV
+		    }}
+		    #endif
 		if (table->dict == NULL) {
 		    if (iter->name)
 			xmlFree(iter->name);
@@ -353,6 +508,9 @@ xmlHashFree(xmlHashTablePtr table, xmlHashDeallocator f) {
 		iter = next;
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	xmlFree(table->table);
     }
     if (table->dict)
@@ -521,8 +679,23 @@ xmlHashAddEntry3(xmlHashTablePtr table, const xmlChar *name,
     xmlHashEntryPtr entry;
     xmlHashEntryPtr insert;
 
-    if ((table == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2947]) {
+      if ((table == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2947\n");
+      else
+        fprintf(stderr, "reached bug index 2947\n");
+    }
+    if ((!FIXREVERTER[2947] && (table == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * If using a dict internalize if needed
@@ -530,18 +703,63 @@ xmlHashAddEntry3(xmlHashTablePtr table, const xmlChar *name,
     if (table->dict) {
         if (!xmlDictOwns(table->dict, name)) {
 	    name = xmlDictLookup(table->dict, name, -1);
-	    if (name == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2948]) {
+	      if ((name == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2948\n");
+	      else
+	        fprintf(stderr, "reached bug index 2948\n");
+	    }
+	    if ((!FIXREVERTER[2948] && (name == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
         if ((name2 != NULL) && (!xmlDictOwns(table->dict, name2))) {
 	    name2 = xmlDictLookup(table->dict, name2, -1);
-	    if (name2 == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2949]) {
+	      if ((name2 == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2949\n");
+	      else
+	        fprintf(stderr, "reached bug index 2949\n");
+	    }
+	    if ((!FIXREVERTER[2949] && (name2 == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
         if ((name3 != NULL) && (!xmlDictOwns(table->dict, name3))) {
 	    name3 = xmlDictLookup(table->dict, name3, -1);
-	    if (name3 == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2950]) {
+	      if ((name3 == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2950\n");
+	      else
+	        fprintf(stderr, "reached bug index 2950\n");
+	    }
+	    if ((!FIXREVERTER[2950] && (name3 == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
     }
 
@@ -585,8 +803,23 @@ xmlHashAddEntry3(xmlHashTablePtr table, const xmlChar *name,
 	entry = &(table->table[key]);
     } else {
 	entry = xmlMalloc(sizeof(xmlHashEntry));
-	if (entry == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2951]) {
+	  if ((entry == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2951\n");
+	  else
+	    fprintf(stderr, "reached bug index 2951\n");
+	}
+	if ((!FIXREVERTER[2951] && (entry == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	     return(-1);
+	     #ifdef FRCOV
+	     }
+	     #endif
     }
 
     if (table->dict != NULL) {
@@ -603,8 +836,23 @@ xmlHashAddEntry3(xmlHashTablePtr table, const xmlChar *name,
     entry->valid = 1;
 
 
-    if (insert != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2952]) {
+      if ((insert != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2952\n");
+      else
+        fprintf(stderr, "reached bug index 2952\n");
+    }
+    if ((!FIXREVERTER[2952] && (insert != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	insert->next = entry;
+	#ifdef FRCOV
+	}
+	#endif
 
     table->nbElems++;
 
@@ -637,8 +885,23 @@ xmlHashUpdateEntry3(xmlHashTablePtr table, const xmlChar *name,
     xmlHashEntryPtr entry;
     xmlHashEntryPtr insert;
 
-    if ((table == NULL) || name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2953]) {
+      if ((table == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2953\n");
+      else
+        fprintf(stderr, "reached bug index 2953\n");
+    }
+    if ((!FIXREVERTER[2953] && (table == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * If using a dict internalize if needed
@@ -646,18 +909,63 @@ xmlHashUpdateEntry3(xmlHashTablePtr table, const xmlChar *name,
     if (table->dict) {
         if (!xmlDictOwns(table->dict, name)) {
 	    name = xmlDictLookup(table->dict, name, -1);
-	    if (name == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2954]) {
+	      if ((name == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2954\n");
+	      else
+	        fprintf(stderr, "reached bug index 2954\n");
+	    }
+	    if ((!FIXREVERTER[2954] && (name == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
         if ((name2 != NULL) && (!xmlDictOwns(table->dict, name2))) {
 	    name2 = xmlDictLookup(table->dict, name2, -1);
-	    if (name2 == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2955]) {
+	      if ((name2 == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2955\n");
+	      else
+	        fprintf(stderr, "reached bug index 2955\n");
+	    }
+	    if ((!FIXREVERTER[2955] && (name2 == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
         if ((name3 != NULL) && (!xmlDictOwns(table->dict, name3))) {
 	    name3 = xmlDictLookup(table->dict, name3, -1);
-	    if (name3 == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2956]) {
+	      if ((name3 == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2956\n");
+	      else
+	        fprintf(stderr, "reached bug index 2956\n");
+	    }
+	    if ((!FIXREVERTER[2956] && (name3 == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
     }
 
@@ -715,8 +1023,23 @@ xmlHashUpdateEntry3(xmlHashTablePtr table, const xmlChar *name,
 	entry =  &(table->table[key]);
     } else {
 	entry = xmlMalloc(sizeof(xmlHashEntry));
-	if (entry == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2957]) {
+	  if ((entry == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2957\n");
+	  else
+	    fprintf(stderr, "reached bug index 2957\n");
+	}
+	if ((!FIXREVERTER[2957] && (entry == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	     return(-1);
+	     #ifdef FRCOV
+	     }
+	     #endif
     }
 
     if (table->dict != NULL) {
@@ -757,10 +1080,40 @@ xmlHashLookup3(xmlHashTablePtr table, const xmlChar *name,
     unsigned long key;
     xmlHashEntryPtr entry;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2958]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2958\n");
+      else
+        fprintf(stderr, "reached bug index 2958\n");
+    }
+    if ((!FIXREVERTER[2958] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (name == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2959]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2959\n");
+      else
+        fprintf(stderr, "reached bug index 2959\n");
+    }
+    if ((!FIXREVERTER[2959] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     key = xmlHashComputeKey(table, name, name2, name3);
     if (table->table[key].valid == 0)
 	return(NULL);
@@ -803,10 +1156,40 @@ xmlHashQLookup3(xmlHashTablePtr table,
     unsigned long key;
     xmlHashEntryPtr entry;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2960]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2960\n");
+      else
+        fprintf(stderr, "reached bug index 2960\n");
+    }
+    if ((!FIXREVERTER[2960] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (name == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2961]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2961\n");
+      else
+        fprintf(stderr, "reached bug index 2961\n");
+    }
+    if ((!FIXREVERTER[2961] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     key = xmlHashComputeQKey(table, prefix, name, prefix2,
                              name2, prefix3, name3);
     if (table->table[key].valid == 0)
@@ -863,10 +1246,40 @@ xmlHashScanFull(xmlHashTablePtr table, xmlHashScannerFull f, void *data) {
     xmlHashEntryPtr iter;
     xmlHashEntryPtr next;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2962]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2962\n");
+      else
+        fprintf(stderr, "reached bug index 2962\n");
+    }
+    if ((!FIXREVERTER[2962] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
-    if (f == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2963]) {
+      if ((f == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2963\n");
+      else
+        fprintf(stderr, "reached bug index 2963\n");
+    }
+    if ((!FIXREVERTER[2963] && (f == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (table->table) {
 	for(i = 0; i < table->size; i++) {
@@ -876,9 +1289,26 @@ xmlHashScanFull(xmlHashTablePtr table, xmlHashScannerFull f, void *data) {
 	    while (iter) {
 		next = iter->next;
                 nb = table->nbElems;
-		if ((f != NULL) && (iter->payload != NULL))
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2964]) {
+		  fprintf(stderr, "reached bug index 2964\n");
+		}
+		if ((FIXREVERTER[2964] && (f != (void *) 0 )) || (!FIXREVERTER[2964] && (f != (void *) 0 && iter -> payload != (void *) 0 ))
+		#else
+		if (f != (void *) 0 
+		#endif
+		)
+		    
+		    #ifdef FRCOV
+		    {if (!(iter -> payload != (void *) 0 ))
+		      fprintf(stderr, "triggered bug index 2964\n");
+		    #endif
 		    f(iter->payload, data, iter->name,
 		      iter->name2, iter->name3);
+		      #ifdef FRCOV
+		      }}
+		      #endif
                 if (nb != table->nbElems) {
                     /* table was modified by the callback, be careful */
                     if (iter == &(table->table[i])) {
@@ -937,10 +1367,40 @@ xmlHashScanFull3(xmlHashTablePtr table, const xmlChar *name,
     xmlHashEntryPtr iter;
     xmlHashEntryPtr next;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2965]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2965\n");
+      else
+        fprintf(stderr, "reached bug index 2965\n");
+    }
+    if ((!FIXREVERTER[2965] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
-    if (f == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2966]) {
+      if ((f == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2966\n");
+      else
+        fprintf(stderr, "reached bug index 2966\n");
+    }
+    if ((!FIXREVERTER[2966] && (f == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (table->table) {
 	for(i = 0; i < table->size; i++) {
@@ -978,14 +1438,59 @@ xmlHashCopy(xmlHashTablePtr table, xmlHashCopier f) {
     xmlHashEntryPtr next;
     xmlHashTablePtr ret;
 
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2967]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2967\n");
+      else
+        fprintf(stderr, "reached bug index 2967\n");
+    }
+    if ((!FIXREVERTER[2967] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (f == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2968]) {
+      if ((f == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2968\n");
+      else
+        fprintf(stderr, "reached bug index 2968\n");
+    }
+    if ((!FIXREVERTER[2968] && (f == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlHashCreate(table->size);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2969]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2969\n");
+      else
+        fprintf(stderr, "reached bug index 2969\n");
+    }
+    if ((!FIXREVERTER[2969] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (table->table) {
 	for(i = 0; i < table->size; i++) {
@@ -1015,8 +1520,23 @@ xmlHashCopy(xmlHashTablePtr table, xmlHashCopier f) {
  */
 int
 xmlHashSize(xmlHashTablePtr table) {
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2970]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2970\n");
+      else
+        fprintf(stderr, "reached bug index 2970\n");
+    }
+    if ((!FIXREVERTER[2970] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     return(table->nbElems);
 }
 
@@ -1077,8 +1597,23 @@ xmlHashRemoveEntry3(xmlHashTablePtr table, const xmlChar *name,
     xmlHashEntryPtr entry;
     xmlHashEntryPtr prev = NULL;
 
-    if (table == NULL || name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2971]) {
+      if ((table == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2971\n");
+      else
+        fprintf(stderr, "reached bug index 2971\n");
+    }
+    if ((!FIXREVERTER[2971] && (table == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     key = xmlHashComputeKey(table, name, name2, name3);
     if (table->table[key].valid == 0) {
@@ -1088,8 +1623,25 @@ xmlHashRemoveEntry3(xmlHashTablePtr table, const xmlChar *name,
             if (xmlStrEqual(entry->name, name) &&
                     xmlStrEqual(entry->name2, name2) &&
                     xmlStrEqual(entry->name3, name3)) {
-                if ((f != NULL) && (entry->payload != NULL))
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2972]) {
+                  fprintf(stderr, "reached bug index 2972\n");
+                }
+                if ((FIXREVERTER[2972] && (f != (void *) 0 )) || (!FIXREVERTER[2972] && (f != (void *) 0 && entry -> payload != (void *) 0 ))
+                #else
+                if (f != (void *) 0 
+                #endif
+                )
+                    
+                    #ifdef FRCOV
+                    {if (!(entry -> payload != (void *) 0 ))
+                      fprintf(stderr, "triggered bug index 2972\n");
+                    #endif
                     f(entry->payload, entry->name);
+                    #ifdef FRCOV
+                    }}
+                    #endif
                 entry->payload = NULL;
 		if (table->dict == NULL) {
 		    if(entry->name)
diff --git a/list.c b/list.c
index d33d9281..e08d5723 100644
--- a/list.c
+++ b/list.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * list.c: lists handling implementation
  *
@@ -99,8 +103,23 @@ xmlListLowerSearch(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4157]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4157\n");
+      else
+        fprintf(stderr, "reached bug index 4157\n");
+    }
+    if ((!FIXREVERTER[4157] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     for(lk = l->sentinel->next;lk != l->sentinel && l->linkCompare(lk->data, data) <0 ;lk = lk->next);
     return lk;
 }
@@ -119,8 +138,23 @@ xmlListHigherSearch(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4158]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4158\n");
+      else
+        fprintf(stderr, "reached bug index 4158\n");
+    }
+    if ((!FIXREVERTER[4158] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     for(lk = l->sentinel->prev;lk != l->sentinel && l->linkCompare(lk->data, data) >0 ;lk = lk->prev);
     return lk;
 }
@@ -138,8 +172,23 @@ static xmlLinkPtr
 xmlListLinkSearch(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4159]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4159\n");
+      else
+        fprintf(stderr, "reached bug index 4159\n");
+    }
+    if ((!FIXREVERTER[4159] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     lk = xmlListLowerSearch(l, data);
     if (lk == l->sentinel)
         return NULL;
@@ -306,16 +355,46 @@ int xmlListAppend(xmlListPtr l, void *data)
 {
     xmlLinkPtr lkPlace, lkNew;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4166]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4166\n");
+      else
+        fprintf(stderr, "reached bug index 4166\n");
+    }
+    if ((!FIXREVERTER[4166] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(1);
+        #ifdef FRCOV
+        }
+        #endif
     lkPlace = xmlListHigherSearch(l, data);
     /* Add the new link */
     lkNew = (xmlLinkPtr) xmlMalloc(sizeof(xmlLink));
-    if (lkNew == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4167]) {
+      if ((lkNew == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4167\n");
+      else
+        fprintf(stderr, "reached bug index 4167\n");
+    }
+    if ((!FIXREVERTER[4167] && (lkNew == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlGenericError(xmlGenericErrorContext,
 		        "Cannot initialize memory for new link");
         return (1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     lkNew->data = data;
     lkNew->next = lkPlace->next;
     (lkPlace->next)->prev = lkNew;
@@ -332,8 +411,23 @@ int xmlListAppend(xmlListPtr l, void *data)
  */
 void xmlListDelete(xmlListPtr l)
 {
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4168]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4168\n");
+      else
+        fprintf(stderr, "reached bug index 4168\n");
+    }
+    if ((!FIXREVERTER[4168] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlListClear(l);
     xmlFree(l->sentinel);
@@ -354,8 +448,23 @@ xmlListRemoveFirst(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4169]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4169\n");
+      else
+        fprintf(stderr, "reached bug index 4169\n");
+    }
+    if ((!FIXREVERTER[4169] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     /*Find the first instance of this data */
     lk = xmlListLinkSearch(l, data);
     if (lk != NULL) {
@@ -423,8 +532,23 @@ xmlListClear(xmlListPtr l)
 {
     xmlLinkPtr  lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4172]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4172\n");
+      else
+        fprintf(stderr, "reached bug index 4172\n");
+    }
+    if ((!FIXREVERTER[4172] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     lk = l->sentinel->next;
     while(lk != l->sentinel) {
         xmlLinkPtr next = lk->next;
@@ -603,8 +727,23 @@ xmlListPushBack(xmlListPtr l, void *data)
 void *
 xmlLinkGetData(xmlLinkPtr lk)
 {
-    if (lk == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4180]) {
+      if ((lk == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4180\n");
+      else
+        fprintf(stderr, "reached bug index 4180\n");
+    }
+    if ((!FIXREVERTER[4180] && (lk == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     return lk->data;
 }
 
diff --git a/nanoftp.c b/nanoftp.c
index 2135ab9b..104d4efc 100644
--- a/nanoftp.c
+++ b/nanoftp.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * nanoftp.c: basic FTP client support
  *
@@ -317,16 +321,61 @@ xmlNanoFTPScanURL(void *ctx, const char *URL) {
         xmlFree(ctxt->path);
 	ctxt->path = NULL;
     }
-    if (URL == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5133]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5133\n");
+      else
+        fprintf(stderr, "reached bug index 5133\n");
+    }
+    if ((!FIXREVERTER[5133] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     uri = xmlParseURIRaw(URL, 1);
-    if (uri == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5134]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5134\n");
+      else
+        fprintf(stderr, "reached bug index 5134\n");
+    }
+    if ((!FIXREVERTER[5134] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
-
-    if ((uri->scheme == NULL) || (uri->server == NULL)) {
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5135]) {
+      if ((uri -> scheme == (void *) 0 || uri -> server == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5135\n");
+      else
+        fprintf(stderr, "reached bug index 5135\n");
+    }
+    if ((!FIXREVERTER[5135] && (uri -> scheme == (void *) 0 || uri -> server == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeURI(uri);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt->protocol = xmlMemStrdup(uri->scheme);
     ctxt->hostname = xmlMemStrdup(uri->server);
@@ -334,8 +383,23 @@ xmlNanoFTPScanURL(void *ctx, const char *URL) {
 	ctxt->path = xmlMemStrdup(uri->path);
     else
 	ctxt->path = xmlMemStrdup("/");
-    if (uri->port != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5136]) {
+      if ((uri -> port != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 5136\n");
+      else
+        fprintf(stderr, "reached bug index 5136\n");
+    }
+    if ((!FIXREVERTER[5136] && (uri -> port != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->port = uri->port;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (uri->user != NULL) {
 	char *cptr;
@@ -441,7 +505,22 @@ xmlNanoFTPScanProxy(const char *URL) {
 	xmlGenericError(xmlGenericErrorContext,
 		"Using FTP proxy %s\n", URL);
 #endif
-    if (URL == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5144]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5144\n");
+      else
+        fprintf(stderr, "reached bug index 5144\n");
+    }
+    if ((!FIXREVERTER[5144] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     uri = xmlParseURIRaw(URL, 1);
     if ((uri == NULL) || (uri->scheme == NULL) ||
@@ -474,10 +553,25 @@ xmlNanoFTPNewCtxt(const char *URL) {
     char *unescaped;
 
     ret = (xmlNanoFTPCtxtPtr) xmlMalloc(sizeof(xmlNanoFTPCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5146]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5146\n");
+      else
+        fprintf(stderr, "reached bug index 5146\n");
+    }
+    if ((!FIXREVERTER[5146] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFTPErrMemory("allocating FTP context");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     memset(ret, 0, sizeof(xmlNanoFTPCtxt));
     ret->port = 21;
@@ -507,7 +601,22 @@ xmlNanoFTPNewCtxt(const char *URL) {
 void
 xmlNanoFTPFreeCtxt(void * ctx) {
     xmlNanoFTPCtxtPtr ctxt = (xmlNanoFTPCtxtPtr) ctx;
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5147]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5147\n");
+      else
+        fprintf(stderr, "reached bug index 5147\n");
+    }
+    if ((!FIXREVERTER[5147] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->hostname != NULL) xmlFree(ctxt->hostname);
     if (ctxt->protocol != NULL) xmlFree(ctxt->protocol);
     if (ctxt->path != NULL) xmlFree(ctxt->path);
@@ -570,7 +679,19 @@ xmlNanoFTPGetMore(void *ctx) {
 
     if ((ctxt == NULL) || (ctxt->controlFd == INVALID_SOCKET)) return(-1);
 
-    if ((ctxt->controlBufIndex < 0) || (ctxt->controlBufIndex > FTP_BUF_SIZE)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5149]) {
+      if ((ctxt -> controlBufIndex < 0 || ctxt -> controlBufIndex > 1024 ) && !(0))
+        fprintf(stderr, "triggered bug index 5149\n");
+      else
+        fprintf(stderr, "reached bug index 5149\n");
+    }
+    if ((!FIXREVERTER[5149] && (ctxt -> controlBufIndex < 0 || ctxt -> controlBufIndex > 1024 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_FTP
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNanoFTPGetMore : controlBufIndex = %d\n",
@@ -578,8 +699,23 @@ xmlNanoFTPGetMore(void *ctx) {
 #endif
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
-    if ((ctxt->controlBufUsed < 0) || (ctxt->controlBufUsed > FTP_BUF_SIZE)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5150]) {
+      if ((ctxt -> controlBufUsed < 0 || ctxt -> controlBufUsed > 1024 ) && !(0))
+        fprintf(stderr, "triggered bug index 5150\n");
+      else
+        fprintf(stderr, "reached bug index 5150\n");
+    }
+    if ((!FIXREVERTER[5150] && (ctxt -> controlBufUsed < 0 || ctxt -> controlBufUsed > 1024 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_FTP
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNanoFTPGetMore : controlBufUsed = %d\n",
@@ -587,7 +723,22 @@ xmlNanoFTPGetMore(void *ctx) {
 #endif
 	return(-1);
     }
-    if (ctxt->controlBufIndex > ctxt->controlBufUsed) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5151]) {
+      if ((ctxt -> controlBufIndex > ctxt -> controlBufUsed ) && !(0))
+        fprintf(stderr, "triggered bug index 5151\n");
+      else
+        fprintf(stderr, "reached bug index 5151\n");
+    }
+    if ((!FIXREVERTER[5151] && (ctxt -> controlBufIndex > ctxt -> controlBufUsed ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_FTP
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNanoFTPGetMore : controlBufIndex > controlBufUsed %d > %d\n",
@@ -595,6 +746,9 @@ xmlNanoFTPGetMore(void *ctx) {
 #endif
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * First pack the control buffer
@@ -687,10 +841,25 @@ get_more:
 	    break;
 	}
 	while ((ptr < end) && (*ptr != '\n')) ptr++;
-	if (ptr >= end) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[5154]) {
+	  if ((ptr >= end ) && !(0))
+	    fprintf(stderr, "triggered bug index 5154\n");
+	  else
+	    fprintf(stderr, "reached bug index 5154\n");
+	}
+	if ((!FIXREVERTER[5154] && (ptr >= end ))
+	#else
+	if (0
+	#endif
+	) {
 	    ctxt->controlBufIndex = ctxt->controlBufUsed;
 	    goto get_more;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (*ptr != '\r') ptr++;
     }
 
@@ -859,10 +1028,40 @@ xmlNanoFTPConnect(void *ctx) {
     int res;
     int addrlen = sizeof (struct sockaddr_in);
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5159]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5159\n");
+      else
+        fprintf(stderr, "reached bug index 5159\n");
+    }
+    if ((!FIXREVERTER[5159] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (ctxt->hostname == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5160]) {
+      if ((ctxt -> hostname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5160\n");
+      else
+        fprintf(stderr, "reached bug index 5160\n");
+    }
+    if ((!FIXREVERTER[5160] && (ctxt -> hostname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * do the blocking DNS query.
@@ -898,8 +1097,23 @@ xmlNanoFTPConnect(void *ctx) {
 	    }
 
 	for (tmp = result; tmp; tmp = tmp->ai_next)
-	    if (tmp->ai_family == AF_INET || tmp->ai_family == AF_INET6)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[5162]) {
+	      if ((tmp -> ai_family == 2 || tmp -> ai_family == 10 ) && !(0))
+	        fprintf(stderr, "triggered bug index 5162\n");
+	      else
+	        fprintf(stderr, "reached bug index 5162\n");
+	    }
+	    if ((!FIXREVERTER[5162] && (tmp -> ai_family == 2 || tmp -> ai_family == 10 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 
 	if (!tmp) {
 	    if (result)
@@ -933,10 +1147,25 @@ xmlNanoFTPConnect(void *ctx) {
 	    hp = gethostbyname (GETHOSTBYNAME_ARG_CAST proxy);
 	else
 	    hp = gethostbyname (GETHOSTBYNAME_ARG_CAST ctxt->hostname);
-	if (hp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[5163]) {
+	  if ((hp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 5163\n");
+	  else
+	    fprintf(stderr, "reached bug index 5163\n");
+	}
+	if ((!FIXREVERTER[5163] && (hp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    __xmlIOErr(XML_FROM_FTP, 0, "gethostbyname failed");
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if ((unsigned int) hp->h_length >
 	    sizeof(((struct sockaddr_in *)&ctxt->ftpAddr)->sin_addr)) {
 	    __xmlIOErr(XML_FROM_FTP, 0, "gethostbyname address mismatch");
@@ -1971,10 +2200,55 @@ int
 xmlNanoFTPRead(void *ctx, void *dest, int len) {
     xmlNanoFTPCtxtPtr ctxt = (xmlNanoFTPCtxtPtr) ctx;
 
-    if (ctx == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5194]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5194\n");
+      else
+        fprintf(stderr, "reached bug index 5194\n");
+    }
+    if ((!FIXREVERTER[5194] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->dataFd == INVALID_SOCKET) return(0);
-    if (dest == NULL) return(-1);
-    if (len <= 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5195]) {
+      if ((dest == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5195\n");
+      else
+        fprintf(stderr, "reached bug index 5195\n");
+    }
+    if ((!FIXREVERTER[5195] && (dest == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5196]) {
+      if ((len <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5196\n");
+      else
+        fprintf(stderr, "reached bug index 5196\n");
+    }
+    if ((!FIXREVERTER[5196] && (len <= 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     len = recv(ctxt->dataFd, dest, len, 0);
     if (len <= 0) {
@@ -2003,11 +2277,41 @@ xmlNanoFTPOpen(const char *URL) {
     SOCKET sock;
 
     xmlNanoFTPInit();
-    if (URL == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5197]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5197\n");
+      else
+        fprintf(stderr, "reached bug index 5197\n");
+    }
+    if ((!FIXREVERTER[5197] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (strncmp("ftp://", URL, 6)) return(NULL);
 
     ctxt = (xmlNanoFTPCtxtPtr) xmlNanoFTPNewCtxt(URL);
-    if (ctxt == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5198]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5198\n");
+      else
+        fprintf(stderr, "reached bug index 5198\n");
+    }
+    if ((!FIXREVERTER[5198] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlNanoFTPConnect(ctxt) < 0) {
 	xmlNanoFTPFreeCtxt(ctxt);
 	return(NULL);
@@ -2033,8 +2337,23 @@ int
 xmlNanoFTPClose(void *ctx) {
     xmlNanoFTPCtxtPtr ctxt = (xmlNanoFTPCtxtPtr) ctx;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5199]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5199\n");
+      else
+        fprintf(stderr, "reached bug index 5199\n");
+    }
+    if ((!FIXREVERTER[5199] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ctxt->dataFd != INVALID_SOCKET) {
 	closesocket(ctxt->dataFd);
diff --git a/nanohttp.c b/nanohttp.c
index e109ad75..aede8bed 100644
--- a/nanohttp.c
+++ b/nanohttp.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * nanohttp.c: minimalist HTTP GET implementation to fetch external subsets.
  *             focuses on size, streamability, reentrancy and portability
@@ -297,16 +301,61 @@ xmlNanoHTTPScanURL(xmlNanoHTTPCtxtPtr ctxt, const char *URL) {
         xmlFree(ctxt->query);
 	ctxt->query = NULL;
     }
-    if (URL == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4188]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4188\n");
+      else
+        fprintf(stderr, "reached bug index 4188\n");
+    }
+    if ((!FIXREVERTER[4188] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     uri = xmlParseURIRaw(URL, 1);
-    if (uri == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4189]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4189\n");
+      else
+        fprintf(stderr, "reached bug index 4189\n");
+    }
+    if ((!FIXREVERTER[4189] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
-
-    if ((uri->scheme == NULL) || (uri->server == NULL)) {
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4190]) {
+      if ((uri -> scheme == (void *) 0 || uri -> server == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4190\n");
+      else
+        fprintf(stderr, "reached bug index 4190\n");
+    }
+    if ((!FIXREVERTER[4190] && (uri -> scheme == (void *) 0 || uri -> server == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeURI(uri);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt->protocol = xmlMemStrdup(uri->scheme);
     /* special case of IPv6 addresses, the [] need to be removed */
@@ -322,10 +371,40 @@ xmlNanoHTTPScanURL(xmlNanoHTTPCtxtPtr ctxt, const char *URL) {
 	ctxt->path = xmlMemStrdup(uri->path);
     else
 	ctxt->path = xmlMemStrdup("/");
-    if (uri->query != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4191]) {
+      if ((uri -> query != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4191\n");
+      else
+        fprintf(stderr, "reached bug index 4191\n");
+    }
+    if ((!FIXREVERTER[4191] && (uri -> query != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->query = xmlMemStrdup(uri->query);
-    if (uri->port != 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4192]) {
+      if ((uri -> port != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4192\n");
+      else
+        fprintf(stderr, "reached bug index 4192\n");
+    }
+    if ((!FIXREVERTER[4192] && (uri -> port != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->port = uri->port;
+	#ifdef FRCOV
+	}
+	#endif
 
     xmlFreeURI(uri);
 }
@@ -358,7 +437,22 @@ xmlNanoHTTPScanProxy(const char *URL) {
 	xmlGenericError(xmlGenericErrorContext,
 		"Using HTTP proxy %s\n", URL);
 #endif
-    if (URL == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4193]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4193\n");
+      else
+        fprintf(stderr, "reached bug index 4193\n");
+    }
+    if ((!FIXREVERTER[4193] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     uri = xmlParseURIRaw(URL, 1);
     if ((uri == NULL) || (uri->scheme == NULL) ||
@@ -390,10 +484,25 @@ xmlNanoHTTPNewCtxt(const char *URL) {
     xmlNanoHTTPCtxtPtr ret;
 
     ret = (xmlNanoHTTPCtxtPtr) xmlMalloc(sizeof(xmlNanoHTTPCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4195]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4195\n");
+      else
+        fprintf(stderr, "reached bug index 4195\n");
+    }
+    if ((!FIXREVERTER[4195] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlHTTPErrMemory("allocating context");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     memset(ret, 0, sizeof(xmlNanoHTTPCtxt));
     ret->port = 80;
@@ -415,7 +524,22 @@ xmlNanoHTTPNewCtxt(const char *URL) {
 
 static void
 xmlNanoHTTPFreeCtxt(xmlNanoHTTPCtxtPtr ctxt) {
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4196]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4196\n");
+      else
+        fprintf(stderr, "reached bug index 4196\n");
+    }
+    if ((!FIXREVERTER[4196] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->hostname != NULL) xmlFree(ctxt->hostname);
     if (ctxt->protocol != NULL) xmlFree(ctxt->protocol);
     if (ctxt->path != NULL) xmlFree(ctxt->path);
@@ -536,11 +660,26 @@ xmlNanoHTTPRecv(xmlNanoHTTPCtxtPtr ctxt)
     while (ctxt->state & XML_NANO_HTTP_READ) {
         if (ctxt->in == NULL) {
             ctxt->in = (char *) xmlMallocAtomic(65000 * sizeof(char));
-            if (ctxt->in == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4198]) {
+              if ((ctxt -> in == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 4198\n");
+              else
+                fprintf(stderr, "reached bug index 4198\n");
+            }
+            if ((!FIXREVERTER[4198] && (ctxt -> in == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlHTTPErrMemory("allocating input");
                 ctxt->last = -1;
                 return (-1);
             }
+            #ifdef FRCOV
+            }
+            #endif
             ctxt->inlen = 65000;
             ctxt->inptr = ctxt->content = ctxt->inrptr = ctxt->in;
         }
@@ -572,13 +711,43 @@ xmlNanoHTTPRecv(xmlNanoHTTPCtxtPtr ctxt)
             ctxt->inrptr = ctxt->in + d_inrptr;
         }
         ctxt->last = recv(ctxt->fd, ctxt->inptr, XML_NANO_HTTP_CHUNK, 0);
-        if (ctxt->last > 0) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4199]) {
+          if ((ctxt -> last > 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4199\n");
+          else
+            fprintf(stderr, "reached bug index 4199\n");
+        }
+        if ((!FIXREVERTER[4199] && (ctxt -> last > 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             ctxt->inptr += ctxt->last;
             return (ctxt->last);
         }
-        if (ctxt->last == 0) {
+        #ifdef FRCOV
+        }
+        #endif
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4200]) {
+          if ((ctxt -> last == 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4200\n");
+          else
+            fprintf(stderr, "reached bug index 4200\n");
+        }
+        if ((!FIXREVERTER[4200] && (ctxt -> last == 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (ctxt->last == -1) {
             switch (socket_errno()) {
                 case EINPROGRESS:
@@ -699,7 +868,22 @@ static void
 xmlNanoHTTPScanAnswer(xmlNanoHTTPCtxtPtr ctxt, const char *line) {
     const char *cur = line;
 
-    if (line == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4201]) {
+      if ((line == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4201\n");
+      else
+        fprintf(stderr, "reached bug index 4201\n");
+    }
+    if ((!FIXREVERTER[4201] && (line == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (!strncmp(line, "HTTP/", 5)) {
         int version = 0;
@@ -1084,21 +1268,51 @@ xmlNanoHTTPConnectHost(const char *host, int port)
 
 	for (res = result; res; res = res->ai_next) {
 	    if (res->ai_family == AF_INET) {
-		if (res->ai_addrlen > sizeof(sockin)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4203]) {
+		  if ((res -> ai_addrlen > sizeof ( sockin ) ) && !(0))
+		    fprintf(stderr, "triggered bug index 4203\n");
+		  else
+		    fprintf(stderr, "reached bug index 4203\n");
+		}
+		if ((!FIXREVERTER[4203] && (res -> ai_addrlen > sizeof ( sockin ) ))
+		#else
+		if (0
+		#endif
+		) {
 		    __xmlIOErr(XML_FROM_HTTP, 0, "address size mismatch\n");
 		    freeaddrinfo (result);
 		    return INVALID_SOCKET;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		memcpy (&sockin, res->ai_addr, res->ai_addrlen);
 		sockin.sin_port = htons (port);
 		addr = (struct sockaddr *)&sockin;
 #ifdef SUPPORT_IP6
 	    } else if (have_ipv6 () && (res->ai_family == AF_INET6)) {
-		if (res->ai_addrlen > sizeof(sockin6)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4204]) {
+		  if ((res -> ai_addrlen > sizeof ( sockin6 ) ) && !(0))
+		    fprintf(stderr, "triggered bug index 4204\n");
+		  else
+		    fprintf(stderr, "reached bug index 4204\n");
+		}
+		if ((!FIXREVERTER[4204] && (res -> ai_addrlen > sizeof ( sockin6 ) ))
+		#else
+		if (0
+		#endif
+		) {
 		    __xmlIOErr(XML_FROM_HTTP, 0, "address size mismatch\n");
 		    freeaddrinfo (result);
 		    return INVALID_SOCKET;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		memcpy (&sockin6, res->ai_addr, res->ai_addrlen);
 		sockin6.sin6_port = htons (port);
 		addr = (struct sockaddr *)&sockin6;
@@ -1271,9 +1485,54 @@ xmlNanoHTTPRead(void *ctx, void *dest, int len) {
     int z_ret;
 #endif
 
-    if (ctx == NULL) return(-1);
-    if (dest == NULL) return(-1);
-    if (len <= 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4205]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4205\n");
+      else
+        fprintf(stderr, "reached bug index 4205\n");
+    }
+    if ((!FIXREVERTER[4205] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4206]) {
+      if ((dest == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4206\n");
+      else
+        fprintf(stderr, "reached bug index 4206\n");
+    }
+    if ((!FIXREVERTER[4206] && (dest == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4207]) {
+      if ((len <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4207\n");
+      else
+        fprintf(stderr, "reached bug index 4207\n");
+    }
+    if ((!FIXREVERTER[4207] && (len <= 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef HAVE_ZLIB_H
     if (ctxt->usesGzip == 1) {
@@ -1321,7 +1580,22 @@ void
 xmlNanoHTTPClose(void *ctx) {
     xmlNanoHTTPCtxtPtr ctxt = (xmlNanoHTTPCtxtPtr) ctx;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4208]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4208\n");
+      else
+        fprintf(stderr, "reached bug index 4208\n");
+    }
+    if ((!FIXREVERTER[4208] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     xmlNanoHTTPFreeCtxt(ctxt);
 }
@@ -1358,19 +1632,79 @@ xmlNanoHTTPMethodRedir(const char *URL, const char *method, const char *input,
     int xmt_bytes;
 #endif
 
-    if (URL == NULL) return(NULL);
-    if (method == NULL) method = "GET";
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4209]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4209\n");
+      else
+        fprintf(stderr, "reached bug index 4209\n");
+    }
+    if ((!FIXREVERTER[4209] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4210]) {
+      if ((method == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4210\n");
+      else
+        fprintf(stderr, "reached bug index 4210\n");
+    }
+    if ((!FIXREVERTER[4210] && (method == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) method = "GET";
+    #ifdef FRCOV
+    }
+    #endif
     xmlNanoHTTPInit();
 
 retry:
     if (redirURL == NULL) {
 	ctxt = xmlNanoHTTPNewCtxt(URL);
-	if (ctxt == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4211]) {
+	  if ((ctxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4211\n");
+	  else
+	    fprintf(stderr, "reached bug index 4211\n");
+	}
+	if ((!FIXREVERTER[4211] && (ctxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
 	ctxt = xmlNanoHTTPNewCtxt(redirURL);
-	if (ctxt == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4212]) {
+	  if ((ctxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4212\n");
+	  else
+	    fprintf(stderr, "reached bug index 4212\n");
+	}
+	if ((!FIXREVERTER[4212] && (ctxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->location = xmlMemStrdup(redirURL);
     }
 
@@ -1428,11 +1762,26 @@ retry:
 	    blen += 6;
     }
     bp = (char*)xmlMallocAtomic(blen);
-    if ( bp == NULL ) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4213]) {
+      if ((bp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4213\n");
+      else
+        fprintf(stderr, "reached bug index 4213\n");
+    }
+    if ((!FIXREVERTER[4213] && (bp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     ) {
         xmlNanoHTTPFreeCtxt( ctxt );
 	xmlHTTPErrMemory("allocating header buffer");
 	return ( NULL );
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     p = bp;
 
@@ -1559,7 +1908,22 @@ retry:
 	    *contentType = NULL;
     }
 
-    if ((redir != NULL) && (redirURL != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4214]) {
+      fprintf(stderr, "reached bug index 4214\n");
+    }
+    if ((FIXREVERTER[4214] && (redir != (void *) 0 )) || (!FIXREVERTER[4214] && (redir != (void *) 0 && redirURL != (void *) 0 ))
+    #else
+    if (redir != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(redirURL != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 4214\n");
+      #endif
+    
 	*redir = redirURL;
     } else {
 	if (redirURL != NULL)
@@ -1567,6 +1931,9 @@ retry:
 	if (redir != NULL)
 	    *redir = NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef DEBUG_HTTP
     if (ctxt->contentType != NULL)
@@ -1712,7 +2079,22 @@ int
 xmlNanoHTTPReturnCode(void *ctx) {
     xmlNanoHTTPCtxtPtr ctxt = (xmlNanoHTTPCtxtPtr) ctx;
 
-    if (ctxt == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4220]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4220\n");
+      else
+        fprintf(stderr, "reached bug index 4220\n");
+    }
+    if ((!FIXREVERTER[4220] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     return(ctxt->returnValue);
 }
diff --git a/parser.c b/parser.c
index 1d939678..064afeeb 100644
--- a/parser.c
+++ b/parser.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * parser.c : an XML 1.0 parser, namespaces and validity support are mostly
  *            implemented on top of the SAX interfaces
@@ -309,8 +313,23 @@ xmlErrAttributeDup(xmlParserCtxtPtr ctxt, const xmlChar * prefix,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[355]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 355\n");
+      else
+        fprintf(stderr, "reached bug index 355\n");
+    }
+    if ((!FIXREVERTER[355] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = XML_ERR_ATTRIBUTE_REDEFINED;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (prefix == NULL)
         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,
@@ -325,8 +344,23 @@ xmlErrAttributeDup(xmlParserCtxtPtr ctxt, const xmlChar * prefix,
                         localname);
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[356]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 356\n");
+	  else
+	    fprintf(stderr, "reached bug index 356\n");
+	}
+	if ((!FIXREVERTER[356] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -533,15 +567,45 @@ xmlFatalErr(xmlParserCtxtPtr ctxt, xmlParserErrors error, const char *info)
         snprintf(errstr, 128, "%s\n", errmsg);
     else
         snprintf(errstr, 128, "%s: %%s\n", errmsg);
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[357]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 357\n");
+      else
+        fprintf(stderr, "reached bug index 357\n");
+    }
+    if ((!FIXREVERTER[357] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                     XML_ERR_FATAL, NULL, 0, info, NULL, NULL, 0, 0, &errstr[0],
                     info);
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[358]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 358\n");
+	  else
+	    fprintf(stderr, "reached bug index 358\n");
+	}
+	if ((!FIXREVERTER[358] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -560,14 +624,44 @@ xmlFatalErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[359]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 359\n");
+      else
+        fprintf(stderr, "reached bug index 359\n");
+    }
+    if ((!FIXREVERTER[359] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                     XML_ERR_FATAL, NULL, 0, NULL, NULL, NULL, 0, 0, "%s", msg);
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[360]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 360\n");
+	  else
+	    fprintf(stderr, "reached bug index 360\n");
+	}
+	if ((!FIXREVERTER[360] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -666,15 +760,45 @@ xmlFatalErrMsgInt(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[361]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 361\n");
+      else
+        fprintf(stderr, "reached bug index 361\n");
+    }
+    if ((!FIXREVERTER[361] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL,
                     ctxt, NULL, XML_FROM_PARSER, error, XML_ERR_FATAL,
                     NULL, 0, NULL, NULL, NULL, val, 0, msg, val);
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[362]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 362\n");
+	  else
+	    fprintf(stderr, "reached bug index 362\n");
+	}
+	if ((!FIXREVERTER[362] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -697,16 +821,46 @@ xmlFatalErrMsgStrIntStr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[363]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 363\n");
+      else
+        fprintf(stderr, "reached bug index 363\n");
+    }
+    if ((!FIXREVERTER[363] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL,
                     ctxt, NULL, XML_FROM_PARSER, error, XML_ERR_FATAL,
                     NULL, 0, (const char *) str1, (const char *) str2,
 		    NULL, val, 0, msg, str1, val, str2);
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[364]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 364\n");
+	  else
+	    fprintf(stderr, "reached bug index 364\n");
+	}
+	if ((!FIXREVERTER[364] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -726,16 +880,46 @@ xmlFatalErrMsgStr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[365]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 365\n");
+      else
+        fprintf(stderr, "reached bug index 365\n");
+    }
+    if ((!FIXREVERTER[365] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL,
                     XML_FROM_PARSER, error, XML_ERR_FATAL,
                     NULL, 0, (const char *) val, NULL, NULL, 0, 0, msg,
                     val);
     if (ctxt != NULL) {
 	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[366]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 366\n");
+	  else
+	    fprintf(stderr, "reached bug index 366\n");
+	}
+	if ((!FIXREVERTER[366] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->disableSAX = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 }
 
@@ -755,8 +939,23 @@ xmlErrMsgStr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[367]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 367\n");
+      else
+        fprintf(stderr, "reached bug index 367\n");
+    }
+    if ((!FIXREVERTER[367] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL,
                     XML_FROM_PARSER, error, XML_ERR_ERROR,
                     NULL, 0, (const char *) val, NULL, NULL, 0, 0, msg,
@@ -782,14 +981,44 @@ xmlNsErr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[368]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 368\n");
+      else
+        fprintf(stderr, "reached bug index 368\n");
+    }
+    if ((!FIXREVERTER[368] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->errNo = error;
+	#ifdef FRCOV
+	}
+	#endif
     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,
                     XML_ERR_ERROR, NULL, 0, (const char *) info1,
                     (const char *) info2, (const char *) info3, 0, 0, msg,
                     info1, info2, info3);
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[369]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 369\n");
+      else
+        fprintf(stderr, "reached bug index 369\n");
+    }
+    if ((!FIXREVERTER[369] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->nsWellFormed = 0;
+	#ifdef FRCOV
+	}
+	#endif
 }
 
 /**
@@ -1055,7 +1284,22 @@ xmlHasFeature(xmlFeature feature)
  */
 static void
 xmlDetectSAX2(xmlParserCtxtPtr ctxt) {
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[370]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 370\n");
+      else
+        fprintf(stderr, "reached bug index 370\n");
+    }
+    if ((!FIXREVERTER[370] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef LIBXML_SAX1_ENABLED
     if ((ctxt->sax) &&  (ctxt->sax->initialized == XML_SAX2_MAGIC) &&
         ((ctxt->sax->startElementNs != NULL) ||
@@ -1101,8 +1345,23 @@ struct _xmlDefAttrs {
 static xmlChar *
 xmlAttrNormalizeSpace(const xmlChar *src, xmlChar *dst)
 {
-    if ((src == NULL) || (dst == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[371]) {
+      if ((src == (void *) 0 || dst == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 371\n");
+      else
+        fprintf(stderr, "reached bug index 371\n");
+    }
+    if ((!FIXREVERTER[371] && (src == (void *) 0 || dst == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (*src == 0x20) src++;
     while (*src != 0) {
@@ -1139,11 +1398,41 @@ xmlAttrNormalizeSpace2(xmlParserCtxtPtr ctxt, xmlChar *src, int *len)
     int need_realloc = 0;
     const xmlChar *cur;
 
-    if ((ctxt == NULL) || (src == NULL) || (len == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[372]) {
+      if ((ctxt == (void *) 0 || src == (void *) 0 || len == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 372\n");
+      else
+        fprintf(stderr, "reached bug index 372\n");
+    }
+    if ((!FIXREVERTER[372] && (ctxt == (void *) 0 || src == (void *) 0 || len == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     i = *len;
-    if (i <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[373]) {
+      if ((i <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 373\n");
+      else
+        fprintf(stderr, "reached bug index 373\n");
+    }
+    if ((!FIXREVERTER[373] && (i <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = src;
     while (*cur == 0x20) {
@@ -1164,10 +1453,25 @@ xmlAttrNormalizeSpace2(xmlParserCtxtPtr ctxt, xmlChar *src, int *len)
         xmlChar *ret;
 
 	ret = xmlStrndup(src + remove_head, i - remove_head + 1);
-	if (ret == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[374]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 374\n");
+	  else
+	    fprintf(stderr, "reached bug index 374\n");
+	}
+	if ((!FIXREVERTER[374] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	xmlAttrNormalizeSpace(ret, ret);
 	*len = (int) strlen((const char *)ret);
         return(ret);
@@ -1208,8 +1512,23 @@ xmlAddDefAttrs(xmlParserCtxtPtr ctxt,
 
     if (ctxt->attsDefault == NULL) {
         ctxt->attsDefault = xmlHashCreateDict(10, ctxt->dict);
-	if (ctxt->attsDefault == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[375]) {
+	  if ((ctxt -> attsDefault == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 375\n");
+	  else
+	    fprintf(stderr, "reached bug index 375\n");
+	}
+	if ((!FIXREVERTER[375] && (ctxt -> attsDefault == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
     /*
@@ -1232,8 +1551,23 @@ xmlAddDefAttrs(xmlParserCtxtPtr ctxt,
     if (defaults == NULL) {
         defaults = (xmlDefAttrsPtr) xmlMalloc(sizeof(xmlDefAttrs) +
 	                   (4 * 5) * sizeof(const xmlChar *));
-	if (defaults == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[376]) {
+	  if ((defaults == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 376\n");
+	  else
+	    fprintf(stderr, "reached bug index 376\n");
+	}
+	if ((!FIXREVERTER[376] && (defaults == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	defaults->nbAttrs = 0;
 	defaults->maxAttrs = 4;
 	if (xmlHashUpdateEntry2(ctxt->attsDefault, name, prefix,
@@ -1246,8 +1580,23 @@ xmlAddDefAttrs(xmlParserCtxtPtr ctxt,
 
         temp = (xmlDefAttrsPtr) xmlRealloc(defaults, sizeof(xmlDefAttrs) +
 		       (2 * defaults->maxAttrs * 5) * sizeof(const xmlChar *));
-	if (temp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[377]) {
+	  if ((temp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 377\n");
+	  else
+	    fprintf(stderr, "reached bug index 377\n");
+	}
+	if ((!FIXREVERTER[377] && (temp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	defaults = temp;
 	defaults->maxAttrs *= 2;
 	if (xmlHashUpdateEntry2(ctxt->attsDefault, name, prefix,
@@ -1307,8 +1656,23 @@ xmlAddSpecialAttr(xmlParserCtxtPtr ctxt,
 {
     if (ctxt->attsSpecial == NULL) {
         ctxt->attsSpecial = xmlHashCreateDict(10, ctxt->dict);
-	if (ctxt->attsSpecial == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[378]) {
+	  if ((ctxt -> attsSpecial == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 378\n");
+	  else
+	    fprintf(stderr, "reached bug index 378\n");
+	}
+	if ((!FIXREVERTER[378] && (ctxt -> attsSpecial == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
     if (xmlHashLookup2(ctxt->attsSpecial, fullname, fullattr) != NULL)
@@ -1350,8 +1714,23 @@ xmlCleanSpecialAttrCallback(void *payload, void *data,
 static void
 xmlCleanSpecialAttr(xmlParserCtxtPtr ctxt)
 {
-    if (ctxt->attsSpecial == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[379]) {
+      if ((ctxt -> attsSpecial == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 379\n");
+      else
+        fprintf(stderr, "reached bug index 379\n");
+    }
+    if ((!FIXREVERTER[379] && (ctxt -> attsSpecial == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlHashScanFull(ctxt->attsSpecial, xmlCleanSpecialAttrCallback, ctxt);
 
@@ -1425,8 +1804,23 @@ xmlCheckLanguageID(const xmlChar * lang)
 {
     const xmlChar *cur = lang, *nxt;
 
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[380]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 380\n");
+      else
+        fprintf(stderr, "reached bug index 380\n");
+    }
+    if ((!FIXREVERTER[380] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     if (((cur[0] == 'i') && (cur[1] == '-')) ||
         ((cur[0] == 'I') && (cur[1] == '-')) ||
         ((cur[0] == 'x') && (cur[1] == '-')) ||
@@ -1597,21 +1991,51 @@ nsPush(xmlParserCtxtPtr ctxt, const xmlChar *prefix, const xmlChar *URL)
 	ctxt->nsNr = 0;
 	ctxt->nsTab = (const xmlChar **)
 	              xmlMalloc(ctxt->nsMax * sizeof(xmlChar *));
-	if (ctxt->nsTab == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[381]) {
+	  if ((ctxt -> nsTab == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 381\n");
+	  else
+	    fprintf(stderr, "reached bug index 381\n");
+	}
+	if ((!FIXREVERTER[381] && (ctxt -> nsTab == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    ctxt->nsMax = 0;
             return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (ctxt->nsNr >= ctxt->nsMax) {
         const xmlChar ** tmp;
         ctxt->nsMax *= 2;
         tmp = (const xmlChar **) xmlRealloc((char *) ctxt->nsTab,
 				    ctxt->nsMax * sizeof(ctxt->nsTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[382]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 382\n");
+          else
+            fprintf(stderr, "reached bug index 382\n");
+        }
+        if ((!FIXREVERTER[382] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlErrMemory(ctxt, NULL);
 	    ctxt->nsMax /= 2;
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	ctxt->nsTab = tmp;
     }
     ctxt->nsTab[ctxt->nsNr++] = prefix;
@@ -1632,13 +2056,43 @@ nsPop(xmlParserCtxtPtr ctxt, int nr)
 {
     int i;
 
-    if (ctxt->nsTab == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[383]) {
+      if ((ctxt -> nsTab == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 383\n");
+      else
+        fprintf(stderr, "reached bug index 383\n");
+    }
+    if ((!FIXREVERTER[383] && (ctxt -> nsTab == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->nsNr < nr) {
         xmlGenericError(xmlGenericErrorContext, "Pbm popping %d NS\n", nr);
         nr = ctxt->nsNr;
     }
-    if (ctxt->nsNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[384]) {
+      if ((ctxt -> nsNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 384\n");
+      else
+        fprintf(stderr, "reached bug index 384\n");
+    }
+    if ((!FIXREVERTER[384] && (ctxt -> nsNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
 
     for (i = 0;i < nr;i++) {
          ctxt->nsNr--;
@@ -1658,21 +2112,81 @@ xmlCtxtGrowAttrs(xmlParserCtxtPtr ctxt, int nr) {
 	maxatts = 55; /* allow for 10 attrs by default */
 	atts = (const xmlChar **)
 	       xmlMalloc(maxatts * sizeof(xmlChar *));
-	if (atts == NULL) goto mem_error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[385]) {
+	  if ((atts == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 385\n");
+	  else
+	    fprintf(stderr, "reached bug index 385\n");
+	}
+	if ((!FIXREVERTER[385] && (atts == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto mem_error;
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->atts = atts;
 	attallocs = (int *) xmlMalloc((maxatts / 5) * sizeof(int));
-	if (attallocs == NULL) goto mem_error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[386]) {
+	  if ((attallocs == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 386\n");
+	  else
+	    fprintf(stderr, "reached bug index 386\n");
+	}
+	if ((!FIXREVERTER[386] && (attallocs == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto mem_error;
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->attallocs = attallocs;
 	ctxt->maxatts = maxatts;
     } else if (nr + 5 > ctxt->maxatts) {
 	maxatts = (nr + 5) * 2;
 	atts = (const xmlChar **) xmlRealloc((void *) ctxt->atts,
 				     maxatts * sizeof(const xmlChar *));
-	if (atts == NULL) goto mem_error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[387]) {
+	  if ((atts == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 387\n");
+	  else
+	    fprintf(stderr, "reached bug index 387\n");
+	}
+	if ((!FIXREVERTER[387] && (atts == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto mem_error;
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->atts = atts;
 	attallocs = (int *) xmlRealloc((void *) ctxt->attallocs,
 	                             (maxatts / 5) * sizeof(int));
-	if (attallocs == NULL) goto mem_error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[388]) {
+	  if ((attallocs == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 388\n");
+	  else
+	    fprintf(stderr, "reached bug index 388\n");
+	}
+	if ((!FIXREVERTER[388] && (attallocs == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto mem_error;
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->attallocs = attallocs;
 	ctxt->maxatts = maxatts;
     }
@@ -1694,8 +2208,23 @@ mem_error:
 int
 inputPush(xmlParserCtxtPtr ctxt, xmlParserInputPtr value)
 {
-    if ((ctxt == NULL) || (value == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[389]) {
+      if ((ctxt == (void *) 0 || value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 389\n");
+      else
+        fprintf(stderr, "reached bug index 389\n");
+    }
+    if ((!FIXREVERTER[389] && (ctxt == (void *) 0 || value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->inputNr >= ctxt->inputMax) {
         ctxt->inputMax *= 2;
         ctxt->inputTab =
@@ -1727,8 +2256,23 @@ inputPop(xmlParserCtxtPtr ctxt)
 {
     xmlParserInputPtr ret;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[390]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 390\n");
+      else
+        fprintf(stderr, "reached bug index 390\n");
+    }
+    if ((!FIXREVERTER[390] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->inputNr <= 0)
         return (NULL);
     ctxt->inputNr--;
@@ -1752,17 +2296,47 @@ inputPop(xmlParserCtxtPtr ctxt)
 int
 nodePush(xmlParserCtxtPtr ctxt, xmlNodePtr value)
 {
-    if (ctxt == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[392]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 392\n");
+      else
+        fprintf(stderr, "reached bug index 392\n");
+    }
+    if ((!FIXREVERTER[392] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->nodeNr >= ctxt->nodeMax) {
         xmlNodePtr *tmp;
 
 	tmp = (xmlNodePtr *) xmlRealloc(ctxt->nodeTab,
                                       ctxt->nodeMax * 2 *
                                       sizeof(ctxt->nodeTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[393]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 393\n");
+          else
+            fprintf(stderr, "reached bug index 393\n");
+        }
+        if ((!FIXREVERTER[393] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlErrMemory(ctxt, NULL);
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->nodeTab = tmp;
 	ctxt->nodeMax *= 2;
     }
@@ -1792,9 +2366,39 @@ nodePop(xmlParserCtxtPtr ctxt)
 {
     xmlNodePtr ret;
 
-    if (ctxt == NULL) return(NULL);
-    if (ctxt->nodeNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[394]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 394\n");
+      else
+        fprintf(stderr, "reached bug index 394\n");
+    }
+    if ((!FIXREVERTER[394] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[395]) {
+      if ((ctxt -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 395\n");
+      else
+        fprintf(stderr, "reached bug index 395\n");
+    }
+    if ((!FIXREVERTER[395] && (ctxt -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nodeNr--;
     if (ctxt->nodeNr > 0)
         ctxt->node = ctxt->nodeTab[ctxt->nodeNr - 1];
@@ -1890,16 +2494,46 @@ nameNsPop(xmlParserCtxtPtr ctxt)
 int
 namePush(xmlParserCtxtPtr ctxt, const xmlChar * value)
 {
-    if (ctxt == NULL) return (-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[399]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 399\n");
+      else
+        fprintf(stderr, "reached bug index 399\n");
+    }
+    if ((!FIXREVERTER[399] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return (-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (ctxt->nameNr >= ctxt->nameMax) {
         const xmlChar * *tmp;
         tmp = (const xmlChar * *) xmlRealloc((xmlChar * *)ctxt->nameTab,
                                     ctxt->nameMax * 2 *
                                     sizeof(ctxt->nameTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[400]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 400\n");
+          else
+            fprintf(stderr, "reached bug index 400\n");
+        }
+        if ((!FIXREVERTER[400] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    goto mem_error;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	ctxt->nameTab = tmp;
         ctxt->nameMax *= 2;
     }
@@ -1923,8 +2557,23 @@ namePop(xmlParserCtxtPtr ctxt)
 {
     const xmlChar *ret;
 
-    if ((ctxt == NULL) || (ctxt->nameNr <= 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[401]) {
+      if ((ctxt == (void *) 0 || ctxt -> nameNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 401\n");
+      else
+        fprintf(stderr, "reached bug index 401\n");
+    }
+    if ((!FIXREVERTER[401] && (ctxt == (void *) 0 || ctxt -> nameNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nameNr--;
     if (ctxt->nameNr > 0)
         ctxt->name = ctxt->nameTab[ctxt->nameNr - 1];
@@ -1942,11 +2591,26 @@ static int spacePush(xmlParserCtxtPtr ctxt, int val) {
 	ctxt->spaceMax *= 2;
         tmp = (int *) xmlRealloc(ctxt->spaceTab,
 	                         ctxt->spaceMax * sizeof(ctxt->spaceTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[402]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 402\n");
+          else
+            fprintf(stderr, "reached bug index 402\n");
+        }
+        if ((!FIXREVERTER[402] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlErrMemory(ctxt, NULL);
 	    ctxt->spaceMax /=2;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->spaceTab = tmp;
     }
     ctxt->spaceTab[ctxt->spaceNr] = val;
@@ -1956,7 +2620,22 @@ static int spacePush(xmlParserCtxtPtr ctxt, int val) {
 
 static int spacePop(xmlParserCtxtPtr ctxt) {
     int ret;
-    if (ctxt->spaceNr <= 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[403]) {
+      if ((ctxt -> spaceNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 403\n");
+      else
+        fprintf(stderr, "reached bug index 403\n");
+    }
+    if ((!FIXREVERTER[403] && (ctxt -> spaceNr <= 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->spaceNr--;
     if (ctxt->spaceNr > 0)
 	ctxt->space = &ctxt->spaceTab[ctxt->spaceNr - 1];
@@ -2210,7 +2889,22 @@ xmlPopInput(xmlParserCtxtPtr ctxt) {
 int
 xmlPushInput(xmlParserCtxtPtr ctxt, xmlParserInputPtr input) {
     int ret;
-    if (input == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[405]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 405\n");
+      else
+        fprintf(stderr, "reached bug index 405\n");
+    }
+    if ((!FIXREVERTER[405] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (xmlParserDebugEntities) {
 	if ((ctxt->input != NULL) && (ctxt->input->filename))
@@ -2442,25 +3136,70 @@ xmlNewBlanksWrapperInputStream(xmlParserCtxtPtr ctxt, xmlEntityPtr entity) {
     xmlParserInputPtr input;
     xmlChar *buffer;
     size_t length;
-    if (entity == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[410]) {
+      if ((entity == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 410\n");
+      else
+        fprintf(stderr, "reached bug index 410\n");
+    }
+    if ((!FIXREVERTER[410] && (entity == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErr(ctxt, XML_ERR_INTERNAL_ERROR,
 	            "xmlNewBlanksWrapperInputStream entity\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlParserDebugEntities)
 	xmlGenericError(xmlGenericErrorContext,
 		"new blanks wrapper for entity: %s\n", entity->name);
     input = xmlNewInputStream(ctxt);
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[411]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 411\n");
+      else
+        fprintf(stderr, "reached bug index 411\n");
+    }
+    if ((!FIXREVERTER[411] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     length = xmlStrlen(entity->name) + 5;
     buffer = xmlMallocAtomic(length);
-    if (buffer == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[412]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 412\n");
+      else
+        fprintf(stderr, "reached bug index 412\n");
+    }
+    if ((!FIXREVERTER[412] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt, NULL);
         xmlFree(input);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     buffer [0] = ' ';
     buffer [1] = '%';
     buffer [length-3] = ';';
@@ -2739,8 +3478,23 @@ xmlStringLenDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
     xmlEntityPtr ent;
     int c,l;
 
-    if ((ctxt == NULL) || (str == NULL) || (len < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[413]) {
+      if ((ctxt == (void *) 0 || str == (void *) 0 ) && !(len < 0 ))
+        fprintf(stderr, "triggered bug index 413\n");
+      else
+        fprintf(stderr, "reached bug index 413\n");
+    }
+    if ((FIXREVERTER[413] && (len < 0 )) || (!FIXREVERTER[413] && (ctxt == (void *) 0 || str == (void *) 0 || len < 0 ))
+    #else
+    if (len < 0 
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     last = str + len;
 
     if (((ctxt->depth > 40) &&
@@ -2755,7 +3509,22 @@ xmlStringLenDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
      */
     buffer_size = XML_PARSER_BIG_BUFFER_SIZE;
     buffer = (xmlChar *) xmlMallocAtomic(buffer_size);
-    if (buffer == NULL) goto mem_error;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[414]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 414\n");
+      else
+        fprintf(stderr, "reached bug index 414\n");
+    }
+    if ((!FIXREVERTER[414] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) goto mem_error;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * OK loop until we reach one of the ending char or a size limit.
@@ -2768,7 +3537,22 @@ xmlStringLenDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
     while ((c != 0) && (c != end) && /* non input consuming loop */
 	   (c != end2) && (c != end3)) {
 
-	if (c == 0) break;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[415]) {
+	  if ((c == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 415\n");
+	  else
+	    fprintf(stderr, "reached bug index 415\n");
+	}
+	if ((!FIXREVERTER[415] && (c == 0 ))
+	#else
+	if (0
+	#endif
+	) break;
+	#ifdef FRCOV
+	}
+	#endif
         if ((c == '&') && (str[1] == '#')) {
 	    int val = xmlParseStringCharRef(ctxt, &str);
 	    if (val != 0) {
@@ -2909,7 +3693,22 @@ int_error:
 xmlChar *
 xmlStringDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int what,
 		        xmlChar end, xmlChar  end2, xmlChar end3) {
-    if ((ctxt == NULL) || (str == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[416]) {
+      if ((ctxt == (void *) 0 || str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 416\n");
+      else
+        fprintf(stderr, "reached bug index 416\n");
+    }
+    if ((!FIXREVERTER[416] && (ctxt == (void *) 0 || str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlStringLenDecodeEntities(ctxt, str, xmlStrlen(str), what,
            end, end2, end3));
 }
@@ -2962,7 +3761,22 @@ static int areBlanks(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
     /*
      * Look if the element is mixed content in the DTD if available
      */
-    if (ctxt->node == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[417]) {
+      if ((ctxt -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 417\n");
+      else
+        fprintf(stderr, "reached bug index 417\n");
+    }
+    if ((!FIXREVERTER[417] && (ctxt -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->myDoc != NULL) {
 	ret = xmlIsMixedElement(ctxt->myDoc, ctxt->node->name);
         if (ret == 0) return(1);
@@ -3023,10 +3837,40 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
     const xmlChar *cur = name;
     int c;
 
-    if (prefix == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[420]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 420\n");
+      else
+        fprintf(stderr, "reached bug index 420\n");
+    }
+    if ((!FIXREVERTER[420] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     *prefix = NULL;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[421]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 421\n");
+      else
+        fprintf(stderr, "reached bug index 421\n");
+    }
+    if ((!FIXREVERTER[421] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifndef XML_XML_NAMESPACE
     /* xml: prefix is not really a namespace */
@@ -3052,10 +3896,25 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
 	max = len * 2;
 
 	buffer = (xmlChar *) xmlMallocAtomic(max * sizeof(xmlChar));
-	if (buffer == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[422]) {
+	  if ((buffer == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 422\n");
+	  else
+	    fprintf(stderr, "reached bug index 422\n");
+	}
+	if ((!FIXREVERTER[422] && (buffer == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(buffer, buf, len);
 	while ((c != 0) && (c != ':')) { /* tested bigname.xml */
 	    if (len + 10 > max) {
@@ -3064,11 +3923,26 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
 		max *= 2;
 		tmp = (xmlChar *) xmlRealloc(buffer,
 						max * sizeof(xmlChar));
-		if (tmp == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[423]) {
+		  if ((tmp == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 423\n");
+		  else
+		    fprintf(stderr, "reached bug index 423\n");
+		}
+		if ((!FIXREVERTER[423] && (tmp == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlFree(buffer);
 		    xmlErrMemory(ctxt, NULL);
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		buffer = tmp;
 	    }
 	    buffer[len++] = c;
@@ -3096,9 +3970,24 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
     if (c == ':') {
 	c = *cur;
         *prefix = ret;
-	if (c == 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[424]) {
+	  if ((c == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 424\n");
+	  else
+	    fprintf(stderr, "reached bug index 424\n");
+	}
+	if ((!FIXREVERTER[424] && (c == 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return(xmlStrndup(BAD_CAST "", 0));
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	len = 0;
 
 	/*
@@ -3119,10 +4008,27 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
 	}
 	cur++;
 
-	while ((c != 0) && (len < max)) { /* tested bigname2.xml */
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[425])
+	  fprintf(stderr, "reached bug index 425\n");
+	while ((FIXREVERTER[425] && (c != 0 )) || (!FIXREVERTER[425] && (c != 0 && len < max ))
+	#else
+	while (c != 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(len < max ))
+	    fprintf(stderr, "triggered bug index 425\n");
+	  #endif
+	 /* tested bigname2.xml */
 	    buf[len++] = c;
 	    c = *cur++;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (len >= max) {
 	    /*
 	     * Okay someone managed to make a huge name, so he's ready to pay
@@ -3131,10 +4037,25 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
 	    max = len * 2;
 
 	    buffer = (xmlChar *) xmlMallocAtomic(max * sizeof(xmlChar));
-	    if (buffer == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[426]) {
+	      if ((buffer == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 426\n");
+	      else
+	        fprintf(stderr, "reached bug index 426\n");
+	    }
+	    if ((!FIXREVERTER[426] && (buffer == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlErrMemory(ctxt, NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memcpy(buffer, buf, len);
 	    while (c != 0) { /* tested bigname2.xml */
 		if (len + 10 > max) {
@@ -3143,11 +4064,26 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix) {
 		    max *= 2;
 		    tmp = (xmlChar *) xmlRealloc(buffer,
 						    max * sizeof(xmlChar));
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[427]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 427\n");
+		      else
+		        fprintf(stderr, "reached bug index 427\n");
+		    }
+		    if ((!FIXREVERTER[427] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlErrMemory(ctxt, NULL);
 			xmlFree(buffer);
 			return(NULL);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    buffer = tmp;
 		}
 		buffer[len++] = c;
@@ -3656,10 +4592,25 @@ xmlParseStringName(xmlParserCtxtPtr ctxt, const xmlChar** str) {
 	    int max = len * 2;
 
 	    buffer = (xmlChar *) xmlMallocAtomic(max * sizeof(xmlChar));
-	    if (buffer == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[428]) {
+	      if ((buffer == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 428\n");
+	      else
+	        fprintf(stderr, "reached bug index 428\n");
+	    }
+	    if ((!FIXREVERTER[428] && (buffer == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlErrMemory(ctxt, NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memcpy(buffer, buf, len);
 	    while (xmlIsNameChar(ctxt, c)) {
 		if (len + 10 > max) {
@@ -3674,11 +4625,26 @@ xmlParseStringName(xmlParserCtxtPtr ctxt, const xmlChar** str) {
 		    max *= 2;
 		    tmp = (xmlChar *) xmlRealloc(buffer,
 			                            max * sizeof(xmlChar));
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[429]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 429\n");
+		      else
+		        fprintf(stderr, "reached bug index 429\n");
+		    }
+		    if ((!FIXREVERTER[429] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlErrMemory(ctxt, NULL);
 			xmlFree(buffer);
 			return(NULL);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    buffer = tmp;
 		}
 		COPY_BUF(l,buffer,len,c);
@@ -3752,10 +4718,25 @@ xmlParseNmtoken(xmlParserCtxtPtr ctxt) {
 	    int max = len * 2;
 
 	    buffer = (xmlChar *) xmlMallocAtomic(max * sizeof(xmlChar));
-	    if (buffer == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[430]) {
+	      if ((buffer == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 430\n");
+	      else
+	        fprintf(stderr, "reached bug index 430\n");
+	    }
+	    if ((!FIXREVERTER[430] && (buffer == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlErrMemory(ctxt, NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memcpy(buffer, buf, len);
 	    while (xmlIsNameChar(ctxt, c)) {
 		if (count++ > XML_PARSER_CHUNK_SIZE) {
@@ -3778,11 +4759,26 @@ xmlParseNmtoken(xmlParserCtxtPtr ctxt) {
 		    max *= 2;
 		    tmp = (xmlChar *) xmlRealloc(buffer,
 			                            max * sizeof(xmlChar));
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[431]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 431\n");
+		      else
+		        fprintf(stderr, "reached bug index 431\n");
+		    }
+		    if ((!FIXREVERTER[431] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlErrMemory(ctxt, NULL);
 			xmlFree(buffer);
 			return(NULL);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    buffer = tmp;
 		}
 		COPY_BUF(l,buffer,len,c);
@@ -3793,8 +4789,23 @@ xmlParseNmtoken(xmlParserCtxtPtr ctxt) {
 	    return(buffer);
 	}
     }
-    if (len == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[432]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 432\n");
+      else
+        fprintf(stderr, "reached bug index 432\n");
+    }
+    if ((!FIXREVERTER[432] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if ((len > XML_MAX_NAME_LENGTH) &&
         ((ctxt->options & XML_PARSE_HUGE) == 0)) {
         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "NmToken");
@@ -3834,10 +4845,25 @@ xmlParseEntityValue(xmlParserCtxtPtr ctxt, xmlChar **orig) {
 	return(NULL);
     }
     buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[433]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 433\n");
+      else
+        fprintf(stderr, "reached bug index 433\n");
+    }
+    if ((!FIXREVERTER[433] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt, NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * The content of the entity definition is copied in a buffer.
@@ -3868,11 +4894,26 @@ xmlParseEntityValue(xmlParserCtxtPtr ctxt, xmlChar **orig) {
 
 	    size *= 2;
 	    tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[434]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 434\n");
+	      else
+	        fprintf(stderr, "reached bug index 434\n");
+	    }
+	    if ((!FIXREVERTER[434] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrMemory(ctxt, NULL);
 		xmlFree(buf);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	}
 	COPY_BUF(l,buf,len,c);
@@ -3992,7 +5033,22 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
      */
     buf_size = XML_PARSER_BUFFER_SIZE;
     buf = (xmlChar *) xmlMallocAtomic(buf_size);
-    if (buf == NULL) goto mem_error;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[435]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 435\n");
+      else
+        fprintf(stderr, "reached bug index 435\n");
+    }
+    if ((!FIXREVERTER[435] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) goto mem_error;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * OK loop until we reach one of the ending char or a size limit.
@@ -4011,7 +5067,22 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
                            "AttValue length too long\n");
             goto mem_error;
         }
-	if (c == 0) break;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[436]) {
+	  if ((c == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 436\n");
+	  else
+	    fprintf(stderr, "reached bug index 436\n");
+	}
+	if ((!FIXREVERTER[436] && (c == 0 ))
+	#else
+	if (0
+	#endif
+	) break;
+	#ifdef FRCOV
+	}
+	#endif
 	if (c == '&') {
 	    in_space = 0;
 	    if (NXT(1) == '#') {
@@ -4175,11 +5246,26 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
      * There we potentially risk an overflow, don't allow attribute value of
      * length more than INT_MAX it is a very reasonnable assumption !
      */
-    if (len >= INT_MAX) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[437]) {
+      if ((len >= 2147483647 ) && !(0))
+        fprintf(stderr, "triggered bug index 437\n");
+      else
+        fprintf(stderr, "reached bug index 437\n");
+    }
+    if ((!FIXREVERTER[437] && (len >= 2147483647 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,
                        "AttValue length too long\n");
         goto mem_error;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (attlen != NULL) *attlen = (int) len;
     return(buf);
@@ -4230,7 +5316,22 @@ error:
 
 xmlChar *
 xmlParseAttValue(xmlParserCtxtPtr ctxt) {
-    if ((ctxt == NULL) || (ctxt->input == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[438]) {
+      if ((ctxt == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 438\n");
+      else
+        fprintf(stderr, "reached bug index 438\n");
+    }
+    if ((!FIXREVERTER[438] && (ctxt == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlParseAttValueInternal(ctxt, NULL, NULL, 0));
 }
 
@@ -4268,10 +5369,25 @@ xmlParseSystemLiteral(xmlParserCtxtPtr ctxt) {
     }
 
     buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[439]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 439\n");
+      else
+        fprintf(stderr, "reached bug index 439\n");
+    }
+    if ((!FIXREVERTER[439] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(ctxt, NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->instate = XML_PARSER_SYSTEM_LITERAL;
     cur = CUR_CHAR(l);
     while ((IS_CHAR(cur)) && (cur != stop)) { /* checked */
@@ -4356,10 +5472,25 @@ xmlParsePubidLiteral(xmlParserCtxtPtr ctxt) {
 	return(NULL);
     }
     buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[440]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 440\n");
+      else
+        fprintf(stderr, "reached bug index 440\n");
+    }
+    if ((!FIXREVERTER[440] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt, NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->instate = XML_PARSER_PUBLIC_LITERAL;
     cur = CUR;
     while ((IS_PUBIDCHAR_CH(cur)) && (cur != stop)) { /* checked */
@@ -4374,11 +5505,26 @@ xmlParsePubidLiteral(xmlParserCtxtPtr ctxt) {
             }
 	    size *= 2;
 	    tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[441]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 441\n");
+	      else
+	        fprintf(stderr, "reached bug index 441\n");
+	    }
+	    if ((!FIXREVERTER[441] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrMemory(ctxt, NULL);
 		xmlFree(buf);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	}
 	buf[len++] = cur;
@@ -4811,15 +5957,45 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
         len = 0;
 	size = XML_PARSER_BUFFER_SIZE;
 	buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-	if (buf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[442]) {
+	  if ((buf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 442\n");
+	  else
+	    fprintf(stderr, "reached bug index 442\n");
+	}
+	if ((!FIXREVERTER[442] && (buf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     GROW;	/* Assure there's enough input data */
     q = CUR_CHAR(ql);
-    if (q == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[443]) {
+      if ((q == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 443\n");
+      else
+        fprintf(stderr, "reached bug index 443\n");
+    }
+    if ((!FIXREVERTER[443] && (q == 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto not_terminated;
+        #ifdef FRCOV
+        }
+        #endif
     if (!IS_CHAR(q)) {
         xmlFatalErrMsgInt(ctxt, XML_ERR_INVALID_CHAR,
                           "xmlParseComment: invalid xmlChar value %d\n",
@@ -4829,8 +6005,23 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
     }
     NEXTL(ql);
     r = CUR_CHAR(rl);
-    if (r == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[444]) {
+      if ((r == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 444\n");
+      else
+        fprintf(stderr, "reached bug index 444\n");
+    }
+    if ((!FIXREVERTER[444] && (r == 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto not_terminated;
+        #ifdef FRCOV
+        }
+        #endif
     if (!IS_CHAR(r)) {
         xmlFatalErrMsgInt(ctxt, XML_ERR_INVALID_CHAR,
                           "xmlParseComment: invalid xmlChar value %d\n",
@@ -4840,8 +6031,23 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
     }
     NEXTL(rl);
     cur = CUR_CHAR(l);
-    if (cur == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[445]) {
+      if ((cur == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 445\n");
+      else
+        fprintf(stderr, "reached bug index 445\n");
+    }
+    if ((!FIXREVERTER[445] && (cur == 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto not_terminated;
+        #ifdef FRCOV
+        }
+        #endif
     while (IS_CHAR(cur) && /* checked */
            ((cur != '>') ||
 	    (r != '-') || (q != '-'))) {
@@ -4861,11 +6067,26 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
 
 	    new_size = size * 2;
 	    new_buf = (xmlChar *) xmlRealloc(buf, new_size);
-	    if (new_buf == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[446]) {
+	      if ((new_buf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 446\n");
+	      else
+	        fprintf(stderr, "reached bug index 446\n");
+	    }
+	    if ((!FIXREVERTER[446] && (new_buf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFree (buf);
 		xmlErrMemory(ctxt, NULL);
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = new_buf;
             size = new_size;
 	}
@@ -4993,11 +6214,26 @@ get_more:
 		    else
 		        size = XML_PARSER_BUFFER_SIZE + nbchar;
 		    buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-		    if (buf == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[447]) {
+		      if ((buf == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 447\n");
+		      else
+		        fprintf(stderr, "reached bug index 447\n");
+		    }
+		    if ((!FIXREVERTER[447] && (buf == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 		        xmlErrMemory(ctxt, NULL);
 			ctxt->instate = state;
 			return;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    len = 0;
 		} else if (len + nbchar + 1 >= size) {
 		    xmlChar *new_buf;
@@ -5253,11 +6489,26 @@ xmlParsePI(xmlParserCtxtPtr ctxt) {
 		return;
 	    }
 	    buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-	    if (buf == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[448]) {
+	      if ((buf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 448\n");
+	      else
+	        fprintf(stderr, "reached bug index 448\n");
+	    }
+	    if ((!FIXREVERTER[448] && (buf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrMemory(ctxt, NULL);
 		ctxt->instate = state;
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    cur = CUR;
 	    if (!IS_BLANK(cur)) {
 		xmlFatalErrMsgStr(ctxt, XML_ERR_SPACE_REQUIRED,
@@ -5388,10 +6639,25 @@ xmlParseNotationDecl(xmlParserCtxtPtr ctxt) {
 	SKIP_BLANKS;
 
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[449]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 449\n");
+	  else
+	    fprintf(stderr, "reached bug index 449\n");
+	}
+	if ((!FIXREVERTER[449] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErr(ctxt, XML_ERR_NOTATION_NOT_STARTED, NULL);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (!IS_BLANK_CH(CUR)) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_SPACE_REQUIRED,
 		     "Space required after the NOTATION name'\n");
@@ -5481,11 +6747,26 @@ xmlParseEntityDecl(xmlParserCtxtPtr ctxt) {
 	}
 
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[450]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 450\n");
+	  else
+	    fprintf(stderr, "reached bug index 450\n");
+	}
+	if ((!FIXREVERTER[450] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 	                   "xmlParseEntityDecl: no name\n");
             return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (xmlStrchr(name, ':') != NULL) {
 	    xmlNsErr(ctxt, XML_NS_ERR_COLON,
 		     "colons are forbidden from entities names '%s'\n",
@@ -5562,10 +6843,25 @@ xmlParseEntityDecl(xmlParserCtxtPtr ctxt) {
 		    (xmlStrEqual(ctxt->myDoc->version, SAX_COMPAT_MODE))) {
 		    if (ctxt->myDoc == NULL) {
 			ctxt->myDoc = xmlNewDoc(SAX_COMPAT_MODE);
-			if (ctxt->myDoc == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[451]) {
+			  if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 451\n");
+			  else
+			    fprintf(stderr, "reached bug index 451\n");
+			}
+			if ((!FIXREVERTER[451] && (ctxt -> myDoc == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    xmlErrMemory(ctxt, "New Doc failed");
 			    return;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			ctxt->myDoc->properties = XML_DOC_INTERNAL;
 		    }
 		    if (ctxt->myDoc->intSubset == NULL)
@@ -5635,10 +6931,25 @@ xmlParseEntityDecl(xmlParserCtxtPtr ctxt) {
 			(xmlStrEqual(ctxt->myDoc->version, SAX_COMPAT_MODE)))) {
 			if (ctxt->myDoc == NULL) {
 			    ctxt->myDoc = xmlNewDoc(SAX_COMPAT_MODE);
-			    if (ctxt->myDoc == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[452]) {
+			      if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 452\n");
+			      else
+			        fprintf(stderr, "reached bug index 452\n");
+			    }
+			    if ((!FIXREVERTER[452] && (ctxt -> myDoc == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 			        xmlErrMemory(ctxt, "New Doc failed");
 				return;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 			    ctxt->myDoc->properties = XML_DOC_INTERNAL;
 			}
 
@@ -5791,12 +7102,27 @@ xmlParseNotationType(xmlParserCtxtPtr ctxt) {
         NEXT;
 	SKIP_BLANKS;
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[453]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 453\n");
+	  else
+	    fprintf(stderr, "reached bug index 453\n");
+	}
+	if ((!FIXREVERTER[453] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			   "Name expected in NOTATION declaration\n");
             xmlFreeEnumeration(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	tmp = ret;
 	while (tmp != NULL) {
 	    if (xmlStrEqual(name, tmp->name)) {
@@ -5811,10 +7137,25 @@ xmlParseNotationType(xmlParserCtxtPtr ctxt) {
 	}
 	if (tmp == NULL) {
 	    cur = xmlCreateEnumeration(name);
-	    if (cur == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[454]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 454\n");
+	      else
+	        fprintf(stderr, "reached bug index 454\n");
+	    }
+	    if ((!FIXREVERTER[454] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 xmlFreeEnumeration(ret);
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    if (last == NULL) ret = last = cur;
 	    else {
 		last->next = cur;
@@ -5861,10 +7202,25 @@ xmlParseEnumerationType(xmlParserCtxtPtr ctxt) {
         NEXT;
 	SKIP_BLANKS;
         name = xmlParseNmtoken(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[455]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 455\n");
+	  else
+	    fprintf(stderr, "reached bug index 455\n");
+	}
+	if ((!FIXREVERTER[455] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErr(ctxt, XML_ERR_NMTOKEN_REQUIRED, NULL);
 	    return(ret);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	tmp = ret;
 	while (tmp != NULL) {
 	    if (xmlStrEqual(name, tmp->name)) {
@@ -5881,10 +7237,25 @@ xmlParseEnumerationType(xmlParserCtxtPtr ctxt) {
 	    cur = xmlCreateEnumeration(name);
 	    if (!xmlDictOwns(ctxt->dict, name))
 		xmlFree(name);
-	    if (cur == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[456]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 456\n");
+	      else
+	        fprintf(stderr, "reached bug index 456\n");
+	    }
+	    if ((!FIXREVERTER[456] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 xmlFreeEnumeration(ret);
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    if (last == NULL) ret = last = cur;
 	    else {
 		last->next = cur;
@@ -6038,11 +7409,26 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 	}
         SKIP_BLANKS;
         elemName = xmlParseName(ctxt);
-	if (elemName == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[457]) {
+	  if ((elemName == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 457\n");
+	  else
+	    fprintf(stderr, "reached bug index 457\n");
+	}
+	if ((!FIXREVERTER[457] && (elemName == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			   "ATTLIST: no name for Element\n");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	SKIP_BLANKS;
 	GROW;
 	while ((RAW != '>') && (ctxt->instate != XML_PARSER_EOF)) {
@@ -6054,11 +7440,26 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 	    GROW;
             tree = NULL;
 	    attrName = xmlParseName(ctxt);
-	    if (attrName == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[458]) {
+	      if ((attrName == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 458\n");
+	      else
+	        fprintf(stderr, "reached bug index 458\n");
+	    }
+	    if ((!FIXREVERTER[458] && (attrName == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			       "ATTLIST: no name for Attribute\n");
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    GROW;
 	    if (!IS_BLANK_CH(CUR)) {
 		xmlFatalErrMsg(ctxt, XML_ERR_SPACE_REQUIRED,
@@ -6068,9 +7469,24 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 	    SKIP_BLANKS;
 
 	    type = xmlParseAttributeType(ctxt, &tree);
-	    if (type <= 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[459]) {
+	      if ((type <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 459\n");
+	      else
+	        fprintf(stderr, "reached bug index 459\n");
+	    }
+	    if ((!FIXREVERTER[459] && (type <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	    GROW;
 	    if (!IS_BLANK_CH(CUR)) {
@@ -6083,15 +7499,47 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 	    SKIP_BLANKS;
 
 	    def = xmlParseDefaultDecl(ctxt, &defaultValue);
-	    if (def <= 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[460]) {
+	      if ((def <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 460\n");
+	      else
+	        fprintf(stderr, "reached bug index 460\n");
+	    }
+	    if ((!FIXREVERTER[460] && (def <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 if (defaultValue != NULL)
 		    xmlFree(defaultValue);
 	        if (tree != NULL)
 		    xmlFreeEnumeration(tree);
 	        break;
 	    }
-	    if ((type != XML_ATTRIBUTE_CDATA) && (defaultValue != NULL))
+	    #ifdef FRCOV
+	    }
+	    #endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[461]) {
+	      fprintf(stderr, "reached bug index 461\n");
+	    }
+	    if ((FIXREVERTER[461] && (type != XML_ATTRIBUTE_CDATA )) || (!FIXREVERTER[461] && (type != XML_ATTRIBUTE_CDATA && defaultValue != (void *) 0 ))
+	    #else
+	    if (type != XML_ATTRIBUTE_CDATA 
+	    #endif
+	    )
+	        
+	        #ifdef FRCOV
+	        {if (!(defaultValue != (void *) 0 ))
+	          fprintf(stderr, "triggered bug index 461\n");
+	        #endif
 	        xmlAttrNormalizeSpace(defaultValue, defaultValue);
+	        #ifdef FRCOV
+	        }}
+	        #endif
 
 	    GROW;
             if (RAW != '>') {
@@ -6182,8 +7630,23 @@ xmlParseElementMixedContentDecl(xmlParserCtxtPtr ctxt, int inputchk) {
 	    }
 	    NEXT;
 	    ret = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_PCDATA);
-	    if (ret == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[462]) {
+	      if ((ret == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 462\n");
+	      else
+	        fprintf(stderr, "reached bug index 462\n");
+	    }
+	    if ((!FIXREVERTER[462] && (ret == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(NULL);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    if (RAW == '*') {
 		ret->ocur = XML_ELEMENT_CONTENT_MULT;
 		NEXT;
@@ -6192,36 +7655,126 @@ xmlParseElementMixedContentDecl(xmlParserCtxtPtr ctxt, int inputchk) {
 	}
 	if ((RAW == '(') || (RAW == '|')) {
 	    ret = cur = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_PCDATA);
-	    if (ret == NULL) return(NULL);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[463]) {
+	      if ((ret == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 463\n");
+	      else
+	        fprintf(stderr, "reached bug index 463\n");
+	    }
+	    if ((!FIXREVERTER[463] && (ret == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	while ((RAW == '|') && (ctxt->instate != XML_PARSER_EOF)) {
 	    NEXT;
 	    if (elem == NULL) {
 	        ret = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_OR);
-		if (ret == NULL) return(NULL);
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[464]) {
+		  if ((ret == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 464\n");
+		  else
+		    fprintf(stderr, "reached bug index 464\n");
+		}
+		if ((!FIXREVERTER[464] && (ret == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 		ret->c1 = cur;
-		if (cur != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[465]) {
+		  if ((cur != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 465\n");
+		  else
+		    fprintf(stderr, "reached bug index 465\n");
+		}
+		if ((!FIXREVERTER[465] && (cur != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    cur->parent = ret;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		cur = ret;
 	    } else {
 	        n = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_OR);
-		if (n == NULL) return(NULL);
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[466]) {
+		  if ((n == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 466\n");
+		  else
+		    fprintf(stderr, "reached bug index 466\n");
+		}
+		if ((!FIXREVERTER[466] && (n == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 		n->c1 = xmlNewDocElementContent(ctxt->myDoc, elem, XML_ELEMENT_CONTENT_ELEMENT);
 		if (n->c1 != NULL)
 		    n->c1->parent = n;
 	        cur->c2 = n;
-		if (n != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[467]) {
+		  if ((n != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 467\n");
+		  else
+		    fprintf(stderr, "reached bug index 467\n");
+		}
+		if ((!FIXREVERTER[467] && (n != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    n->parent = cur;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		cur = n;
 	    }
 	    SKIP_BLANKS;
 	    elem = xmlParseName(ctxt);
-	    if (elem == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[468]) {
+	      if ((elem == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 468\n");
+	      else
+	        fprintf(stderr, "reached bug index 468\n");
+	    }
+	    if ((!FIXREVERTER[468] && (elem == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			"xmlParseElementMixedContentDecl : Name expected\n");
 		xmlFreeDocElementContent(ctxt->myDoc, cur);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    SKIP_BLANKS;
 	    GROW;
 	}
@@ -6312,15 +7865,45 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	GROW;
     } else {
 	elem = xmlParseName(ctxt);
-	if (elem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[469]) {
+	  if ((elem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 469\n");
+	  else
+	    fprintf(stderr, "reached bug index 469\n");
+	}
+	if ((!FIXREVERTER[469] && (elem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErr(ctxt, XML_ERR_ELEMCONTENT_NOT_STARTED, NULL);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         cur = ret = xmlNewDocElementContent(ctxt->myDoc, elem, XML_ELEMENT_CONTENT_ELEMENT);
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[470]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 470\n");
+	  else
+	    fprintf(stderr, "reached bug index 470\n");
+	}
+	if ((!FIXREVERTER[470] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	GROW;
 	if (RAW == '?') {
 	    cur->ocur = XML_ELEMENT_CONTENT_OPT;
@@ -6361,24 +7944,84 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	    NEXT;
 
 	    op = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_SEQ);
-	    if (op == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[471]) {
+	      if ((op == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 471\n");
+	      else
+	        fprintf(stderr, "reached bug index 471\n");
+	    }
+	    if ((!FIXREVERTER[471] && (op == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if ((last != NULL) && (last != ret))
 		    xmlFreeDocElementContent(ctxt->myDoc, last);
 	        xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (last == NULL) {
 		op->c1 = ret;
-		if (ret != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[472]) {
+		  if ((ret != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 472\n");
+		  else
+		    fprintf(stderr, "reached bug index 472\n");
+		}
+		if ((!FIXREVERTER[472] && (ret != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ret->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		ret = cur = op;
 	    } else {
 	        cur->c2 = op;
-		if (op != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[473]) {
+		  if ((op != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 473\n");
+		  else
+		    fprintf(stderr, "reached bug index 473\n");
+		}
+		if ((!FIXREVERTER[473] && (op != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    op->parent = cur;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		op->c1 = last;
-		if (last != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[474]) {
+		  if ((last != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 474\n");
+		  else
+		    fprintf(stderr, "reached bug index 474\n");
+		}
+		if ((!FIXREVERTER[474] && (last != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    last->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		cur =op;
 		last = NULL;
 	    }
@@ -6401,25 +8044,85 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	    NEXT;
 
 	    op = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_OR);
-	    if (op == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[475]) {
+	      if ((op == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 475\n");
+	      else
+	        fprintf(stderr, "reached bug index 475\n");
+	    }
+	    if ((!FIXREVERTER[475] && (op == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if ((last != NULL) && (last != ret))
 		    xmlFreeDocElementContent(ctxt->myDoc, last);
 		if (ret != NULL)
 		    xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (last == NULL) {
 		op->c1 = ret;
-		if (ret != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[476]) {
+		  if ((ret != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 476\n");
+		  else
+		    fprintf(stderr, "reached bug index 476\n");
+		}
+		if ((!FIXREVERTER[476] && (ret != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ret->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		ret = cur = op;
 	    } else {
 	        cur->c2 = op;
-		if (op != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[477]) {
+		  if ((op != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 477\n");
+		  else
+		    fprintf(stderr, "reached bug index 477\n");
+		}
+		if ((!FIXREVERTER[477] && (op != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    op->parent = cur;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		op->c1 = last;
-		if (last != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[478]) {
+		  if ((last != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 478\n");
+		  else
+		    fprintf(stderr, "reached bug index 478\n");
+		}
+		if ((!FIXREVERTER[478] && (last != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    last->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		cur =op;
 		last = NULL;
 	    }
@@ -6444,18 +8147,48 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	    SKIP_BLANKS;
 	} else {
 	    elem = xmlParseName(ctxt);
-	    if (elem == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[479]) {
+	      if ((elem == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 479\n");
+	      else
+	        fprintf(stderr, "reached bug index 479\n");
+	    }
+	    if ((!FIXREVERTER[479] && (elem == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFatalErr(ctxt, XML_ERR_ELEMCONTENT_NOT_STARTED, NULL);
 		if (ret != NULL)
 		    xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    last = xmlNewDocElementContent(ctxt->myDoc, elem, XML_ELEMENT_CONTENT_ELEMENT);
-	    if (last == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[480]) {
+	      if ((last == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 480\n");
+	      else
+	        fprintf(stderr, "reached bug index 480\n");
+	    }
+	    if ((!FIXREVERTER[480] && (last == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if (ret != NULL)
 		    xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (RAW == '?') {
 		last->ocur = XML_ELEMENT_CONTENT_OPT;
 		NEXT;
@@ -6472,11 +8205,44 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	SKIP_BLANKS;
 	GROW;
     }
-    if ((cur != NULL) && (last != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[482]) {
+      fprintf(stderr, "reached bug index 482\n");
+    }
+    if ((FIXREVERTER[482] && (cur != (void *) 0 )) || (!FIXREVERTER[482] && (cur != (void *) 0 && last != (void *) 0 ))
+    #else
+    if (cur != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(last != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 482\n");
+      #endif
+    
         cur->c2 = last;
-	if (last != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[481]) {
+	  if ((last != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 481\n");
+	  else
+	    fprintf(stderr, "reached bug index 481\n");
+	}
+	if ((!FIXREVERTER[481] && (last != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    last->parent = cur;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt->validate) && (ctxt->input->id != inputchk)) {
 	xmlValidityError(ctxt, XML_ERR_ENTITY_BOUNDARY,
 "Element content declaration doesn't start and stop in the same entity\n",
@@ -6662,11 +8428,26 @@ xmlParseElementDecl(xmlParserCtxtPtr ctxt) {
 	}
         SKIP_BLANKS;
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[483]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 483\n");
+	  else
+	    fprintf(stderr, "reached bug index 483\n");
+	}
+	if ((!FIXREVERTER[483] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			   "xmlParseElementDecl: no name for Element\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	while ((RAW == 0) && (ctxt->inputNr > 1))
 	    xmlPopInput(ctxt);
 	if (!IS_BLANK_CH(CUR)) {
@@ -6726,8 +8507,23 @@ xmlParseElementDecl(xmlParserCtxtPtr ctxt) {
 	    NEXT;
 	    if ((ctxt->sax != NULL) && (!ctxt->disableSAX) &&
 		(ctxt->sax->elementDecl != NULL)) {
-		if (content != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[484]) {
+		  if ((content != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 484\n");
+		  else
+		    fprintf(stderr, "reached bug index 484\n");
+		}
+		if ((!FIXREVERTER[484] && (content != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    content->parent = NULL;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	        ctxt->sax->elementDecl(ctxt->userData, name, ret,
 		                       content);
 		if ((content != NULL) && (content->parent == NULL)) {
@@ -6852,7 +8648,22 @@ xmlParseConditionalSections(xmlParserCtxtPtr ctxt) {
 	 */
 	state = ctxt->disableSAX;
 	instate = ctxt->instate;
-	if (ctxt->recovery == 0) ctxt->disableSAX = 1;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[485]) {
+	  if ((ctxt -> recovery == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 485\n");
+	  else
+	    fprintf(stderr, "reached bug index 485\n");
+	}
+	if ((!FIXREVERTER[485] && (ctxt -> recovery == 0  ))
+	#else
+	if (0
+	#endif
+	) ctxt->disableSAX = 1;
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->instate = XML_PARSER_IGNORE;
 
 	while (((depth >= 0) && (RAW != 0)) &&
@@ -6956,18 +8767,53 @@ xmlParseMarkupDecl(xmlParserCtxtPtr ctxt) {
      * This is only for internal subset. On external entities,
      * the replacement is done before parsing stage
      */
-    if ((ctxt->external == 0) && (ctxt->inputNr == 1))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[486]) {
+      fprintf(stderr, "reached bug index 486\n");
+    }
+    if ((FIXREVERTER[486] && (ctxt -> external == 0 )) || (!FIXREVERTER[486] && (ctxt -> external == 0 && ctxt -> inputNr == 1 ))
+    #else
+    if (ctxt -> external == 0 
+    #endif
+    )
+	
+	#ifdef FRCOV
+	{if (!(ctxt -> inputNr == 1 ))
+	  fprintf(stderr, "triggered bug index 486\n");
+	#endif
 	xmlParsePEReference(ctxt);
+	#ifdef FRCOV
+	}}
+	#endif
 
     /*
      * Conditional sections are allowed from entities included
      * by PE References in the internal subset.
      */
-    if ((ctxt->external == 0) && (ctxt->inputNr > 1)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[487]) {
+      fprintf(stderr, "reached bug index 487\n");
+    }
+    if ((FIXREVERTER[487] && (ctxt -> external == 0 )) || (!FIXREVERTER[487] && (ctxt -> external == 0 && ctxt -> inputNr > 1 ))
+    #else
+    if (ctxt -> external == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> inputNr > 1 ))
+        fprintf(stderr, "triggered bug index 487\n");
+      #endif
+    
         if ((RAW == '<') && (NXT(1) == '!') && (NXT(2) == '[')) {
 	    xmlParseConditionalSections(ctxt);
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt->instate = XML_PARSER_DTD;
 }
@@ -7020,12 +8866,27 @@ xmlParseTextDecl(xmlParserCtxtPtr ctxt) {
      * We must have the encoding declaration
      */
     encoding = xmlParseEncodingDecl(ctxt);
-    if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[488]) {
+      if ((ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ) && !(0))
+        fprintf(stderr, "triggered bug index 488\n");
+      else
+        fprintf(stderr, "reached bug index 488\n");
+    }
+    if ((!FIXREVERTER[488] && (ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * The XML REC instructs us to stop parsing right here
 	 */
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((encoding == NULL) && (ctxt->errNo == XML_ERR_OK)) {
 	xmlFatalErrMsg(ctxt, XML_ERR_MISSING_ENCODING,
 		       "Missing encoding in text declaration\n");
@@ -7079,20 +8940,50 @@ xmlParseExternalSubset(xmlParserCtxtPtr ctxt, const xmlChar *ExternalID,
 
     if (CMP5(CUR_PTR, '<', '?', 'x', 'm', 'l')) {
 	xmlParseTextDecl(ctxt);
-	if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[489]) {
+	  if ((ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ) && !(0))
+	    fprintf(stderr, "triggered bug index 489\n");
+	  else
+	    fprintf(stderr, "reached bug index 489\n");
+	}
+	if ((!FIXREVERTER[489] && (ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	     * The XML REC instructs us to stop parsing right here
 	     */
 	    ctxt->instate = XML_PARSER_EOF;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     if (ctxt->myDoc == NULL) {
         ctxt->myDoc = xmlNewDoc(BAD_CAST "1.0");
-	if (ctxt->myDoc == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[490]) {
+	  if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 490\n");
+	  else
+	    fprintf(stderr, "reached bug index 490\n");
+	}
+	if ((!FIXREVERTER[490] && (ctxt -> myDoc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, "New Doc failed");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->myDoc->properties = XML_DOC_INTERNAL;
     }
     if ((ctxt->myDoc != NULL) && (ctxt->myDoc->intSubset == NULL))
@@ -7166,8 +9057,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 	int hex = NXT(2);
 	int value = xmlParseCharRef(ctxt);
 
-	if (value == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[491]) {
+	  if ((value == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 491\n");
+	  else
+	    fprintf(stderr, "reached bug index 491\n");
+	}
+	if ((!FIXREVERTER[491] && (value == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (ctxt->charset != XML_CHAR_ENCODING_UTF8) {
 	    /*
 	     * So we are using non-UTF-8 buffers
@@ -7206,7 +9112,22 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
      * We are seeing an entity reference
      */
     ent = xmlParseEntityRef(ctxt);
-    if (ent == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[492]) {
+      if ((ent == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 492\n");
+      else
+        fprintf(stderr, "reached bug index 492\n");
+    }
+    if ((!FIXREVERTER[492] && (ent == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (!ctxt->wellFormed)
 	return;
     was_checked = ent->checked;
@@ -7215,7 +9136,22 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
     if ((ent->name == NULL) ||
         (ent->etype == XML_INTERNAL_PREDEFINED_ENTITY)) {
 	val = ent->content;
-	if (val == NULL) return;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[493]) {
+	  if ((val == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 493\n");
+	  else
+	    fprintf(stderr, "reached bug index 493\n");
+	}
+	if ((!FIXREVERTER[493] && (val == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) return;
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	 * inline the entity.
 	 */
@@ -7313,8 +9249,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 			while (list != NULL) {
 			    list->parent = (xmlNodePtr) ctxt->node;
 			    list->doc = ctxt->myDoc;
-			    if (list->next == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[494]) {
+			      if ((list -> next == (void *) 0  ) && !(0))
+			        fprintf(stderr, "triggered bug index 494\n");
+			      else
+			        fprintf(stderr, "reached bug index 494\n");
+			    }
+			    if ((!FIXREVERTER[494] && (list -> next == (void *) 0  ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				ent->last = list;
+				#ifdef FRCOV
+				}
+				#endif
 			    list = list->next;
 			}
 			list = ent->children;
@@ -7328,8 +9279,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 		    while (list != NULL) {
 			list->parent = (xmlNodePtr) ent;
 			xmlSetTreeDoc(list, ent->doc);
-			if (list->next == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[495]) {
+			  if ((list -> next == (void *) 0  ) && !(0))
+			    fprintf(stderr, "triggered bug index 495\n");
+			  else
+			    fprintf(stderr, "reached bug index 495\n");
+			}
+			if ((!FIXREVERTER[495] && (list -> next == (void *) 0  ))
+			#else
+			if (0
+			#endif
+			)
 			    ent->last = list;
+			    #ifdef FRCOV
+			    }
+			    #endif
 			list = list->next;
 		    }
 		}
@@ -7346,8 +9312,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 	    xmlFreeNodeList(list);
 	    list = NULL;
 	}
-	if (ent->checked == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[496]) {
+	  if ((ent -> checked == 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 496\n");
+	  else
+	    fprintf(stderr, "reached bug index 496\n");
+	}
+	if ((!FIXREVERTER[496] && (ent -> checked == 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ent->checked = 2;
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else if (ent->checked != 1) {
 	ctxt->nbentities += ent->checked / 2;
     }
@@ -7357,7 +9338,19 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
      * provide it to the application, this can take different forms based
      * on the parsing modes.
      */
-    if (ent->children == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[497]) {
+      if ((ent -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 497\n");
+      else
+        fprintf(stderr, "reached bug index 497\n");
+    }
+    if ((!FIXREVERTER[497] && (ent -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * Probably running in SAX mode and the callbacks don't
 	 * build the entity content. So unless we already went
@@ -7408,6 +9401,9 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 	}
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * If we didn't get any children for the entity being built
@@ -7463,8 +9459,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 		while (cur != NULL) {
 		    nw = xmlDocCopyNode(cur, ctxt->myDoc, 1);
 		    if (nw != NULL) {
-			if (nw->_private == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[498]) {
+			  if ((nw -> _private == (void *) 0  ) && !(0))
+			    fprintf(stderr, "triggered bug index 498\n");
+			  else
+			    fprintf(stderr, "reached bug index 498\n");
+			}
+			if ((!FIXREVERTER[498] && (nw -> _private == (void *) 0  ))
+			#else
+			if (0
+			#endif
+			)
 			    nw->_private = cur->_private;
+			    #ifdef FRCOV
+			    }
+			    #endif
 			if (firstChild == NULL){
 			    firstChild = nw;
 			}
@@ -7516,8 +9527,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 		    cur->parent = NULL;
 		    nw = xmlDocCopyNode(cur, ctxt->myDoc, 1);
 		    if (nw != NULL) {
-			if (nw->_private == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[499]) {
+			  if ((nw -> _private == (void *) 0  ) && !(0))
+			    fprintf(stderr, "triggered bug index 499\n");
+			  else
+			    fprintf(stderr, "reached bug index 499\n");
+			}
+			if ((!FIXREVERTER[499] && (nw -> _private == (void *) 0  ))
+			#else
+			if (0
+			#endif
+			)
 			    nw->_private = cur->_private;
+			    #ifdef FRCOV
+			    }
+			    #endif
 			if (firstChild == NULL){
 			    firstChild = cur;
 			}
@@ -7528,8 +9554,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 			break;
 		    cur = next;
 		}
-		if (ent->owner == 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[500]) {
+		  if ((ent -> owner == 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 500\n");
+		  else
+		    fprintf(stderr, "reached bug index 500\n");
+		}
+		if ((!FIXREVERTER[500] && (ent -> owner == 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ent->owner = 1;
+		    #ifdef FRCOV
+		    }
+		    #endif
 #ifdef LIBXML_LEGACY_ENABLED
 		if (ent->etype == XML_EXTERNAL_GENERAL_PARSED_ENTITY)
 		  xmlAddEntityReference(ent, firstChild, nw);
@@ -7604,11 +9645,26 @@ xmlParseEntityRef(xmlParserCtxtPtr ctxt) {
         return(NULL);
     NEXT;
     name = xmlParseName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[501]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 501\n");
+      else
+        fprintf(stderr, "reached bug index 501\n");
+    }
+    if ((!FIXREVERTER[501] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "xmlParseEntityRef: no name\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (RAW != ';') {
 	xmlFatalErr(ctxt, XML_ERR_ENTITYREF_SEMICOL_MISSING, NULL);
 	return(NULL);
@@ -7794,12 +9850,27 @@ xmlParseStringEntityRef(xmlParserCtxtPtr ctxt, const xmlChar ** str) {
 
     ptr++;
     name = xmlParseStringName(ctxt, &ptr);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[502]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 502\n");
+      else
+        fprintf(stderr, "reached bug index 502\n");
+    }
+    if ((!FIXREVERTER[502] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "xmlParseStringEntityRef: no name\n");
 	*str = ptr;
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (*ptr != ';') {
 	xmlFatalErr(ctxt, XML_ERR_ENTITYREF_SEMICOL_MISSING, NULL);
         xmlFree(name);
@@ -7983,11 +10054,26 @@ xmlParsePEReference(xmlParserCtxtPtr ctxt)
         return;
     NEXT;
     name = xmlParseName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[503]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 503\n");
+      else
+        fprintf(stderr, "reached bug index 503\n");
+    }
+    if ((!FIXREVERTER[503] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "xmlParsePEReference: no name\n");
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (RAW != ';') {
 	xmlFatalErr(ctxt, XML_ERR_ENTITYREF_SEMICOL_MISSING, NULL);
         return;
@@ -8063,8 +10149,19 @@ xmlParsePEReference(xmlParserCtxtPtr ctxt)
 		(CMP5(CUR_PTR, '<', '?', 'x', 'm', 'l')) &&
 		(IS_BLANK_CH(NXT(5)))) {
 		xmlParseTextDecl(ctxt);
-		if (ctxt->errNo ==
-		    XML_ERR_UNSUPPORTED_ENCODING) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[504]) {
+		  if ((ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ) && !(0))
+		    fprintf(stderr, "triggered bug index 504\n");
+		  else
+		    fprintf(stderr, "reached bug index 504\n");
+		}
+		if ((!FIXREVERTER[504] && (ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ))
+		#else
+		if (0
+		#endif
+		) {
 		    /*
 		     * The XML REC instructs us to stop parsing
 		     * right here
@@ -8072,6 +10169,9 @@ xmlParsePEReference(xmlParserCtxtPtr ctxt)
 		    ctxt->instate = XML_PARSER_EOF;
 		    return;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 	}
     }
@@ -8110,19 +10210,49 @@ xmlLoadEntityContent(xmlParserCtxtPtr ctxt, xmlEntityPtr entity) {
 		"Reading %s entity content input\n", entity->name);
 
     buf = xmlBufferCreate();
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[505]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 505\n");
+      else
+        fprintf(stderr, "reached bug index 505\n");
+    }
+    if ((!FIXREVERTER[505] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErr(ctxt, XML_ERR_INTERNAL_ERROR,
 	            "xmlLoadEntityContent parameter error");
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     input = xmlNewEntityInputStream(ctxt, entity);
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[506]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 506\n");
+      else
+        fprintf(stderr, "reached bug index 506\n");
+    }
+    if ((!FIXREVERTER[506] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErr(ctxt, XML_ERR_INTERNAL_ERROR,
 	            "xmlLoadEntityContent input error");
 	xmlBufferFree(buf);
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Push the entity as the current input, read char by char
@@ -8220,12 +10350,27 @@ xmlParseStringPEReference(xmlParserCtxtPtr ctxt, const xmlChar **str) {
         return(NULL);
     ptr++;
     name = xmlParseStringName(ctxt, &ptr);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[507]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 507\n");
+      else
+        fprintf(stderr, "reached bug index 507\n");
+    }
+    if ((!FIXREVERTER[507] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "xmlParseStringPEReference: no name\n");
 	*str = ptr;
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur = *ptr;
     if (cur != ';') {
 	xmlFatalErr(ctxt, XML_ERR_ENTITYREF_SEMICOL_MISSING, NULL);
@@ -8470,11 +10615,26 @@ xmlParseAttribute(xmlParserCtxtPtr ctxt, xmlChar **value) {
     *value = NULL;
     GROW;
     name = xmlParseName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[508]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 508\n");
+      else
+        fprintf(stderr, "reached bug index 508\n");
+    }
+    if ((!FIXREVERTER[508] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 	               "error parsing attribute name\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * read the value
@@ -8565,11 +10725,26 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
     NEXT1;
 
     name = xmlParseName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[509]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 509\n");
+      else
+        fprintf(stderr, "reached bug index 509\n");
+    }
+    if ((!FIXREVERTER[509] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 	     "xmlParseStartTag: invalid element name\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Now parse the attributes, it ends up with the ending
@@ -8586,7 +10761,22 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
 	unsigned int cons = ctxt->input->consumed;
 
 	attname = xmlParseAttribute(ctxt, &attvalue);
-        if ((attname != NULL) && (attvalue != NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[512]) {
+          fprintf(stderr, "reached bug index 512\n");
+        }
+        if ((FIXREVERTER[512] && (attname != (void *) 0 )) || (!FIXREVERTER[512] && (attname != (void *) 0 && attvalue != (void *) 0 ))
+        #else
+        if (attname != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(attvalue != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 512\n");
+          #endif
+        
 	    /*
 	     * [ WFC: Unique Att Spec ]
 	     * No attribute name may appear more than once in the same
@@ -8606,12 +10796,27 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
 	        maxatts = 22; /* allow for 10 attrs by default */
 	        atts = (const xmlChar **)
 		       xmlMalloc(maxatts * sizeof(xmlChar *));
-		if (atts == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[510]) {
+		  if ((atts == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 510\n");
+		  else
+		    fprintf(stderr, "reached bug index 510\n");
+		}
+		if ((!FIXREVERTER[510] && (atts == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlErrMemory(ctxt, NULL);
 		    if (attvalue != NULL)
 			xmlFree(attvalue);
 		    goto failed;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ctxt->atts = atts;
 		ctxt->maxatts = maxatts;
 	    } else if (nbatts + 4 > maxatts) {
@@ -8620,12 +10825,27 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
 	        maxatts *= 2;
 	        n = (const xmlChar **) xmlRealloc((void *) atts,
 					     maxatts * sizeof(const xmlChar *));
-		if (n == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[511]) {
+		  if ((n == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 511\n");
+		  else
+		    fprintf(stderr, "reached bug index 511\n");
+		}
+		if ((!FIXREVERTER[511] && (n == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlErrMemory(ctxt, NULL);
 		    if (attvalue != NULL)
 			xmlFree(attvalue);
 		    goto failed;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		atts = n;
 		ctxt->atts = atts;
 		ctxt->maxatts = maxatts;
@@ -8638,6 +10858,9 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
 	    if (attvalue != NULL)
 		xmlFree(attvalue);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 failed:
 
@@ -8725,7 +10948,22 @@ xmlParseEndTag1(xmlParserCtxtPtr ctxt, int line) {
      *
      */
     if (name != (xmlChar*)1) {
-        if (name == NULL) name = BAD_CAST "unparseable";
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[513]) {
+          if ((name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 513\n");
+          else
+            fprintf(stderr, "reached bug index 513\n");
+        }
+        if ((!FIXREVERTER[513] && (name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) name = BAD_CAST "unparseable";
+        #ifdef FRCOV
+        }
+        #endif
         xmlFatalErrMsgStrIntStr(ctxt, XML_ERR_TAG_NAME_MISMATCH,
 		     "Opening and ending tag mismatch: %s line %d and %s\n",
 		                ctxt->name, line, name);
@@ -8813,7 +11051,19 @@ xmlParseQName(xmlParserCtxtPtr ctxt, const xmlChar **prefix) {
     GROW;
 
     l = xmlParseNCName(ctxt);
-    if (l == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[514]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 514\n");
+      else
+        fprintf(stderr, "reached bug index 514\n");
+    }
+    if ((!FIXREVERTER[514] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (CUR == ':') {
 	    l = xmlParseName(ctxt);
 	    if (l != NULL) {
@@ -8825,6 +11075,9 @@ xmlParseQName(xmlParserCtxtPtr ctxt, const xmlChar **prefix) {
 	}
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (CUR == ':') {
         NEXT;
 	p = l;
@@ -8893,7 +11146,22 @@ xmlParseQNameAndCompare(xmlParserCtxtPtr ctxt, xmlChar const *name,
     const xmlChar *ret;
     const xmlChar *prefix2;
 
-    if (prefix == NULL) return(xmlParseNameAndCompare(ctxt, name));
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[515]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 515\n");
+      else
+        fprintf(stderr, "reached bug index 515\n");
+    }
+    if ((!FIXREVERTER[515] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(xmlParseNameAndCompare(ctxt, name));
+    #ifdef FRCOV
+    }
+    #endif
 
     GROW;
     in = ctxt->input->cur;
@@ -9174,11 +11442,26 @@ xmlParseAttribute2(xmlParserCtxtPtr ctxt,
     *value = NULL;
     GROW;
     name = xmlParseQName(ctxt, prefix);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[516]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 516\n");
+      else
+        fprintf(stderr, "reached bug index 516\n");
+    }
+    if ((!FIXREVERTER[516] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
                        "error parsing attribute name\n");
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * get the type if needed
@@ -9334,11 +11617,26 @@ reparse:
     ctxt->nsNr = nsNr;
 
     localname = xmlParseQName(ctxt, &prefix);
-    if (localname == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[518]) {
+      if ((localname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 518\n");
+      else
+        fprintf(stderr, "reached bug index 518\n");
+    }
+    if ((!FIXREVERTER[518] && (localname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "StartTag: invalid element name\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     *tlen = ctxt->input->cur - ctxt->input->base - cur;
 
     /*
@@ -9360,23 +11658,102 @@ reparse:
 	attname = xmlParseAttribute2(ctxt, prefix, localname,
 	                             &aprefix, &attvalue, &len, &alloc);
 	if (ctxt->input->base != base) {
-	    if ((attvalue != NULL) && (alloc != 0))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[519]) {
+	      fprintf(stderr, "reached bug index 519\n");
+	    }
+	    if ((FIXREVERTER[519] && (attvalue != (void *) 0 )) || (!FIXREVERTER[519] && (attvalue != (void *) 0 && alloc != 0 ))
+	    #else
+	    if (attvalue != (void *) 0 
+	    #endif
+	    )
+	        
+	        #ifdef FRCOV
+	        {if (!(alloc != 0 ))
+	          fprintf(stderr, "triggered bug index 519\n");
+	        #endif
 	        xmlFree(attvalue);
+	        #ifdef FRCOV
+	        }}
+	        #endif
 	    attvalue = NULL;
 	    goto base_changed;
 	}
-        if ((attname != NULL) && (attvalue != NULL)) {
-	    if (len < 0) len = xmlStrlen(attvalue);
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[524]) {
+          fprintf(stderr, "reached bug index 524\n");
+        }
+        if ((FIXREVERTER[524] && (attname != (void *) 0 )) || (!FIXREVERTER[524] && (attname != (void *) 0 && attvalue != (void *) 0 ))
+        #else
+        if (attname != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(attvalue != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 524\n");
+          #endif
+        
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[520]) {
+	      if ((len < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 520\n");
+	      else
+	        fprintf(stderr, "reached bug index 520\n");
+	    }
+	    if ((!FIXREVERTER[520] && (len < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) len = xmlStrlen(attvalue);
+	    #ifdef FRCOV
+	    }
+	    #endif
             if ((attname == ctxt->str_xmlns) && (aprefix == NULL)) {
 	        const xmlChar *URL = xmlDictLookup(ctxt->dict, attvalue, len);
 		xmlURIPtr uri;
 
-                if (URL == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[522]) {
+                  if ((URL == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 522\n");
+                  else
+                    fprintf(stderr, "reached bug index 522\n");
+                }
+                if ((!FIXREVERTER[522] && (URL == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
 		    xmlErrMemory(ctxt, "dictionary allocation failure");
-		    if ((attvalue != NULL) && (alloc != 0))
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[521]) {
+		      fprintf(stderr, "reached bug index 521\n");
+		    }
+		    if ((FIXREVERTER[521] && (attvalue != (void *) 0 )) || (!FIXREVERTER[521] && (attvalue != (void *) 0 && alloc != 0 ))
+		    #else
+		    if (attvalue != (void *) 0 
+		    #endif
+		    )
+			
+			#ifdef FRCOV
+			{if (!(alloc != 0 ))
+			  fprintf(stderr, "triggered bug index 521\n");
+			#endif
 			xmlFree(attvalue);
+			#ifdef FRCOV
+			}}
+			#endif
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
                 if (*URL != 0) {
 		    uri = xmlParseURI((const char *) URL);
 		    if (uri == NULL) {
@@ -9539,6 +11916,9 @@ skip_ns:
 	    if ((attvalue != NULL) && (attvalue[len] == 0))
 		xmlFree(attvalue);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 failed:
 
@@ -9586,7 +11966,22 @@ failed:
 		    for (j = 1;j <= nbNs;j++)
 		        if (ctxt->nsTab[ctxt->nsNr - 2 * j] == NULL)
 			    break;
-	            if (j <= nbNs) continue;
+	            
+	            #ifdef FRCOV
+	            {if (FIXREVERTER[525]) {
+	              if ((j <= nbNs ) && !(0))
+	                fprintf(stderr, "triggered bug index 525\n");
+	              else
+	                fprintf(stderr, "reached bug index 525\n");
+	            }
+	            if ((!FIXREVERTER[525] && (j <= nbNs ))
+	            #else
+	            if (0
+	            #endif
+	            ) continue;
+	            #ifdef FRCOV
+	            }
+	            #endif
 
 		    nsname = xmlGetNamespace(ctxt, NULL);
 		    if (nsname != defaults->values[5 * i + 2]) {
@@ -9601,7 +11996,22 @@ failed:
 		    for (j = 1;j <= nbNs;j++)
 		        if (ctxt->nsTab[ctxt->nsNr - 2 * j] == attname)
 			    break;
-	            if (j <= nbNs) continue;
+	            
+	            #ifdef FRCOV
+	            {if (FIXREVERTER[526]) {
+	              if ((j <= nbNs ) && !(0))
+	                fprintf(stderr, "triggered bug index 526\n");
+	              else
+	                fprintf(stderr, "reached bug index 526\n");
+	            }
+	            if ((!FIXREVERTER[526] && (j <= nbNs ))
+	            #else
+	            if (0
+	            #endif
+	            ) continue;
+	            #ifdef FRCOV
+	            }
+	            #endif
 
 		    nsname = xmlGetNamespace(ctxt, attname);
 		    if (nsname != defaults->values[2]) {
@@ -9617,7 +12027,22 @@ failed:
 			if ((attname == atts[j]) && (aprefix == atts[j+1]))
 			    break;
 		    }
-		    if (j < nbatts) continue;
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[527]) {
+		      if ((j < nbatts ) && !(0))
+		        fprintf(stderr, "triggered bug index 527\n");
+		      else
+		        fprintf(stderr, "reached bug index 527\n");
+		    }
+		    if ((!FIXREVERTER[527] && (j < nbatts ))
+		    #else
+		    if (0
+		    #endif
+		    ) continue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 
 		    if ((atts == NULL) || (nbatts + 5 > maxatts)) {
 			if (xmlCtxtGrowAttrs(ctxt, nbatts + 5) < 0) {
@@ -9731,9 +12156,24 @@ base_changed:
     ctxt->input->cur = ctxt->input->base + cur;
     ctxt->input->line = oldline;
     ctxt->input->col = oldcol;
-    if (ctxt->wellFormed == 1) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[528]) {
+      if ((ctxt -> wellFormed == 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 528\n");
+      else
+        fprintf(stderr, "reached bug index 528\n");
+    }
+    if ((!FIXREVERTER[528] && (ctxt -> wellFormed == 1 ))
+    #else
+    if (0
+    #endif
+    ) {
 	goto reparse;
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(NULL);
 }
 
@@ -9799,9 +12239,41 @@ xmlParseEndTag2(xmlParserCtxtPtr ctxt, const xmlChar *prefix,
      *
      */
     if (name != (xmlChar*)1) {
-        if (name == NULL) name = BAD_CAST "unparseable";
-        if ((line == 0) && (ctxt->node != NULL))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[529]) {
+          if ((name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 529\n");
+          else
+            fprintf(stderr, "reached bug index 529\n");
+        }
+        if ((!FIXREVERTER[529] && (name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) name = BAD_CAST "unparseable";
+        #ifdef FRCOV
+        }
+        #endif
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[530]) {
+          fprintf(stderr, "reached bug index 530\n");
+        }
+        if ((FIXREVERTER[530] && (line == 0 )) || (!FIXREVERTER[530] && (line == 0 && ctxt -> node != (void *) 0 ))
+        #else
+        if (line == 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> node != (void *) 0 ))
+              fprintf(stderr, "triggered bug index 530\n");
+            #endif
             line = ctxt->node->line;
+            #ifdef FRCOV
+            }}
+            #endif
         xmlFatalErrMsgStrIntStr(ctxt, XML_ERR_TAG_NAME_MISMATCH,
 		     "Opening and ending tag mismatch: %s line %d and %s\n",
 		                ctxt->name, line, name);
@@ -9868,10 +12340,25 @@ xmlParseCDSect(xmlParserCtxtPtr ctxt) {
     NEXTL(sl);
     cur = CUR_CHAR(l);
     buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[531]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 531\n");
+      else
+        fprintf(stderr, "reached bug index 531\n");
+    }
+    if ((!FIXREVERTER[531] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt, NULL);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (IS_CHAR(cur) &&
            ((r != ']') || (s != ']') || (cur != '>'))) {
 	if (len + 5 >= size) {
@@ -9885,11 +12372,26 @@ xmlParseCDSect(xmlParserCtxtPtr ctxt) {
                 return;
             }
 	    tmp = (xmlChar *) xmlRealloc(buf, size * 2 * sizeof(xmlChar));
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[532]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 532\n");
+	      else
+	        fprintf(stderr, "reached bug index 532\n");
+	    }
+	    if ((!FIXREVERTER[532] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlFree(buf);
 		xmlErrMemory(ctxt, NULL);
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	    size *= 2;
 	}
@@ -10073,10 +12575,25 @@ xmlParseElement(xmlParserCtxtPtr ctxt) {
 #endif /* LIBXML_SAX1_ENABLED */
     if (ctxt->instate == XML_PARSER_EOF)
 	return;
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[533]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 533\n");
+      else
+        fprintf(stderr, "reached bug index 533\n");
+    }
+    if ((!FIXREVERTER[533] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	spacePop(ctxt);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     namePush(ctxt, name);
     ret = ctxt->node;
 
@@ -10215,10 +12732,25 @@ xmlParseVersionNum(xmlParserCtxtPtr ctxt) {
     xmlChar cur;
 
     buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[534]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 534\n");
+      else
+        fprintf(stderr, "reached bug index 534\n");
+    }
+    if ((!FIXREVERTER[534] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt, NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur = CUR;
     if (!((cur >= '0') && (cur <= '9'))) {
 	xmlFree(buf);
@@ -10240,11 +12772,26 @@ xmlParseVersionNum(xmlParserCtxtPtr ctxt) {
 
 	    size *= 2;
 	    tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[535]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 535\n");
+	      else
+	        fprintf(stderr, "reached bug index 535\n");
+	    }
+	    if ((!FIXREVERTER[535] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlFree(buf);
 		xmlErrMemory(ctxt, NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	}
 	buf[len++] = cur;
@@ -10323,10 +12870,25 @@ xmlParseEncName(xmlParserCtxtPtr ctxt) {
     if (((cur >= 'a') && (cur <= 'z')) ||
         ((cur >= 'A') && (cur <= 'Z'))) {
 	buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));
-	if (buf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[536]) {
+	  if ((buf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 536\n");
+	  else
+	    fprintf(stderr, "reached bug index 536\n");
+	}
+	if ((!FIXREVERTER[536] && (buf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt, NULL);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	buf[len++] = cur;
 	NEXT;
@@ -10341,11 +12903,26 @@ xmlParseEncName(xmlParserCtxtPtr ctxt) {
 
 		size *= 2;
 		tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));
-		if (tmp == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[537]) {
+		  if ((tmp == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 537\n");
+		  else
+		    fprintf(stderr, "reached bug index 537\n");
+		}
+		if ((!FIXREVERTER[537] && (tmp == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlErrMemory(ctxt, NULL);
 		    xmlFree(buf);
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		buf = tmp;
 	    }
 	    buf[len++] = cur;
@@ -10628,12 +13205,27 @@ xmlParseXMLDecl(xmlParserCtxtPtr ctxt) {
 	xmlFatalErrMsg(ctxt, XML_ERR_SPACE_REQUIRED, "Blank needed here\n");
     }
     xmlParseEncodingDecl(ctxt);
-    if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[538]) {
+      if ((ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ) && !(0))
+        fprintf(stderr, "triggered bug index 538\n");
+      else
+        fprintf(stderr, "reached bug index 538\n");
+    }
+    if ((!FIXREVERTER[538] && (ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * The XML REC instructs us to stop parsing right here
 	 */
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * We may have the standalone status.
@@ -10714,8 +13306,23 @@ xmlParseDocument(xmlParserCtxtPtr ctxt) {
 
     xmlInitParser();
 
-    if ((ctxt == NULL) || (ctxt->input == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[539]) {
+      if ((ctxt == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 539\n");
+      else
+        fprintf(stderr, "reached bug index 539\n");
+    }
+    if ((!FIXREVERTER[539] && (ctxt == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     GROW;
 
@@ -10769,12 +13376,27 @@ xmlParseDocument(xmlParserCtxtPtr ctxt) {
 	 * Note that we will switch encoding on the fly.
 	 */
 	xmlParseXMLDecl(ctxt);
-	if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[540]) {
+	  if ((ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ) && !(0))
+	    fprintf(stderr, "triggered bug index 540\n");
+	  else
+	    fprintf(stderr, "reached bug index 540\n");
+	}
+	if ((!FIXREVERTER[540] && (ctxt -> errNo == XML_ERR_UNSUPPORTED_ENCODING ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	     * The XML REC instructs us to stop parsing right here
 	     */
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->standalone = ctxt->input->standalone;
 	SKIP_BLANKS;
     } else {
@@ -12585,8 +15207,23 @@ xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data,
  */
 void
 xmlStopParser(xmlParserCtxtPtr ctxt) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[583]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 583\n");
+      else
+        fprintf(stderr, "reached bug index 583\n");
+    }
+    if ((!FIXREVERTER[583] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->instate = XML_PARSER_EOF;
     ctxt->errNo = XML_ERR_USER_STOP;
     ctxt->disableSAX = 1;
@@ -12983,7 +15620,22 @@ xmlParseCtxtExternalEntity(xmlParserCtxtPtr ctx, const xmlChar *URL,
     xmlChar start[4];
     xmlCharEncoding enc;
 
-    if (ctx == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[601]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 601\n");
+      else
+        fprintf(stderr, "reached bug index 601\n");
+    }
+    if ((!FIXREVERTER[601] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (((ctx->depth > 40) && ((ctx->options & XML_PARSE_HUGE) == 0)) ||
         (ctx->depth > 1024)) {
@@ -12994,22 +15646,67 @@ xmlParseCtxtExternalEntity(xmlParserCtxtPtr ctx, const xmlChar *URL,
         *lst = NULL;
     if ((URL == NULL) && (ID == NULL))
 	return(-1);
-    if (ctx->myDoc == NULL) /* @@ relax but check for dereferences */
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[602]) {
+      if ((ctx -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 602\n");
+      else
+        fprintf(stderr, "reached bug index 602\n");
+    }
+    if ((!FIXREVERTER[602] && (ctx -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) /* @@ relax but check for dereferences */
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     ctxt = xmlCreateEntityParserCtxtInternal(URL, ID, NULL, ctx);
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[603]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 603\n");
+      else
+        fprintf(stderr, "reached bug index 603\n");
+    }
+    if ((!FIXREVERTER[603] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     oldsax = ctxt->sax;
     ctxt->sax = ctx->sax;
     xmlDetectSAX2(ctxt);
     newDoc = xmlNewDoc(BAD_CAST "1.0");
-    if (newDoc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[604]) {
+      if ((newDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 604\n");
+      else
+        fprintf(stderr, "reached bug index 604\n");
+    }
+    if ((!FIXREVERTER[604] && (newDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserCtxt(ctxt);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     newDoc->properties = XML_DOC_INTERNAL;
     if (ctx->myDoc->dict) {
 	newDoc->dict = ctx->myDoc->dict;
@@ -13200,12 +15897,42 @@ xmlParseExternalEntityPrivate(xmlDocPtr doc, xmlParserCtxtPtr oldctxt,
         *list = NULL;
     if ((URL == NULL) && (ID == NULL))
 	return(XML_ERR_INTERNAL_ERROR);
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[605]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 605\n");
+      else
+        fprintf(stderr, "reached bug index 605\n");
+    }
+    if ((!FIXREVERTER[605] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(XML_ERR_INTERNAL_ERROR);
+	#ifdef FRCOV
+	}
+	#endif
 
 
     ctxt = xmlCreateEntityParserCtxtInternal(URL, ID, NULL, oldctxt);
-    if (ctxt == NULL) return(XML_WAR_UNDECLARED_ENTITY);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[606]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 606\n");
+      else
+        fprintf(stderr, "reached bug index 606\n");
+    }
+    if ((!FIXREVERTER[606] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(XML_WAR_UNDECLARED_ENTITY);
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->userData = ctxt;
     if (oldctxt != NULL) {
 	ctxt->_private = oldctxt->_private;
@@ -13229,8 +15956,23 @@ xmlParseExternalEntityPrivate(xmlDocPtr doc, xmlParserCtxtPtr oldctxt,
     if (sax != NULL) {
 	oldsax = ctxt->sax;
         ctxt->sax = sax;
-	if (user_data != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[607]) {
+	  if ((user_data != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 607\n");
+	  else
+	    fprintf(stderr, "reached bug index 607\n");
+	}
+	if ((!FIXREVERTER[607] && (user_data != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->userData = user_data;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     xmlDetectSAX2(ctxt);
     newDoc = xmlNewDoc(BAD_CAST "1.0");
@@ -13252,8 +15994,23 @@ xmlParseExternalEntityPrivate(xmlDocPtr doc, xmlParserCtxtPtr oldctxt,
     }
     newRoot = xmlNewDocNode(newDoc, NULL, BAD_CAST "pseudoroot", NULL);
     if (newRoot == NULL) {
-	if (sax != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[608]) {
+	  if ((sax != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 608\n");
+	  else
+	    fprintf(stderr, "reached bug index 608\n");
+	}
+	if ((!FIXREVERTER[608] && (sax != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->sax = oldsax;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->node_seq.maximum = 0;
 	ctxt->node_seq.length = 0;
 	ctxt->node_seq.buffer = NULL;
@@ -13350,8 +16107,23 @@ xmlParseExternalEntityPrivate(xmlDocPtr doc, xmlParserCtxtPtr oldctxt,
     if (ctxt->lastError.code != XML_ERR_OK)
         xmlCopyError(&ctxt->lastError, &oldctxt->lastError);
 
-    if (sax != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[609]) {
+      if ((sax != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 609\n");
+      else
+        fprintf(stderr, "reached bug index 609\n");
+    }
+    if ((!FIXREVERTER[609] && (sax != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->sax = oldsax;
+	#ifdef FRCOV
+	}
+	#endif
     oldctxt->node_seq.maximum = ctxt->node_seq.maximum;
     oldctxt->node_seq.length = ctxt->node_seq.length;
     oldctxt->node_seq.buffer = ctxt->node_seq.buffer;
@@ -13466,13 +16238,43 @@ xmlParseBalancedChunkMemoryInternal(xmlParserCtxtPtr oldctxt,
 
     if (lst != NULL)
         *lst = NULL;
-    if (string == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[610]) {
+      if ((string == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 610\n");
+      else
+        fprintf(stderr, "reached bug index 610\n");
+    }
+    if ((!FIXREVERTER[610] && (string == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ERR_INTERNAL_ERROR);
+        #ifdef FRCOV
+        }
+        #endif
 
     size = xmlStrlen(string);
 
     ctxt = xmlCreateMemoryParserCtxt((char *) string, size);
-    if (ctxt == NULL) return(XML_WAR_UNDECLARED_ENTITY);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[611]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 611\n");
+      else
+        fprintf(stderr, "reached bug index 611\n");
+    }
+    if ((!FIXREVERTER[611] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(XML_WAR_UNDECLARED_ENTITY);
+    #ifdef FRCOV
+    }
+    #endif
     if (user_data != NULL)
 	ctxt->userData = user_data;
     else
@@ -14097,9 +16899,24 @@ xmlCreateEntityParserCtxtInternal(const xmlChar *URL, const xmlChar *ID,
     xmlChar *uri;
 
     ctxt = xmlNewParserCtxt();
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[628]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 628\n");
+      else
+        fprintf(stderr, "reached bug index 628\n");
+    }
+    if ((!FIXREVERTER[628] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (pctx != NULL) {
         ctxt->options = pctx->options;
@@ -14110,10 +16927,25 @@ xmlCreateEntityParserCtxtInternal(const xmlChar *URL, const xmlChar *ID,
 
     if (uri == NULL) {
 	inputStream = xmlLoadExternalEntity((char *)URL, (char *)ID, ctxt);
-	if (inputStream == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[629]) {
+	  if ((inputStream == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 629\n");
+	  else
+	    fprintf(stderr, "reached bug index 629\n");
+	}
+	if ((!FIXREVERTER[629] && (inputStream == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFreeParserCtxt(ctxt);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	inputPush(ctxt, inputStream);
 
@@ -14123,11 +16955,26 @@ xmlCreateEntityParserCtxtInternal(const xmlChar *URL, const xmlChar *ID,
 	    ctxt->directory = directory;
     } else {
 	inputStream = xmlLoadExternalEntity((char *)uri, (char *)ID, ctxt);
-	if (inputStream == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[630]) {
+	  if ((inputStream == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 630\n");
+	  else
+	    fprintf(stderr, "reached bug index 630\n");
+	}
+	if ((!FIXREVERTER[630] && (inputStream == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFree(uri);
 	    xmlFreeParserCtxt(ctxt);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	inputPush(ctxt, inputStream);
 
@@ -14470,10 +17317,40 @@ xmlCreateMemoryParserCtxt(const char *buffer, int size) {
     xmlParserInputPtr input;
     xmlParserInputBufferPtr buf;
 
-    if (buffer == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[642]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 642\n");
+      else
+        fprintf(stderr, "reached bug index 642\n");
+    }
+    if ((!FIXREVERTER[642] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (size <= 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[643]) {
+      if ((size <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 643\n");
+      else
+        fprintf(stderr, "reached bug index 643\n");
+    }
+    if ((!FIXREVERTER[643] && (size <= 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ctxt = xmlNewParserCtxt();
     if (ctxt == NULL)
@@ -14481,17 +17358,47 @@ xmlCreateMemoryParserCtxt(const char *buffer, int size) {
 
     /* TODO: xmlParserInputBufferCreateStatic, requires some serious changes */
     buf = xmlParserInputBufferCreateMem(buffer, size, XML_CHAR_ENCODING_NONE);
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[645]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 645\n");
+      else
+        fprintf(stderr, "reached bug index 645\n");
+    }
+    if ((!FIXREVERTER[645] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserCtxt(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     input = xmlNewInputStream(ctxt);
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[646]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 646\n");
+      else
+        fprintf(stderr, "reached bug index 646\n");
+    }
+    if ((!FIXREVERTER[646] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserInputBuffer(buf);
 	xmlFreeParserCtxt(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     input->filename = NULL;
     input->buf = buf;
@@ -14917,8 +17824,23 @@ xmlCtxtReset(xmlParserCtxtPtr ctxt)
     xmlParserInputPtr input;
     xmlDictPtr dict;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[657]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 657\n");
+      else
+        fprintf(stderr, "reached bug index 657\n");
+    }
+    if ((!FIXREVERTER[657] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     dict = ctxt->dict;
 
@@ -15122,8 +18044,23 @@ xmlCtxtResetPush(xmlParserCtxtPtr ctxt, const char *chunk,
 static int
 xmlCtxtUseOptionsInternal(xmlParserCtxtPtr ctxt, int options, const char *encoding)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[663]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 663\n");
+      else
+        fprintf(stderr, "reached bug index 663\n");
+    }
+    if ((!FIXREVERTER[663] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (encoding != NULL) {
         if (ctxt->encoding != NULL)
 	    xmlFree((xmlChar *) ctxt->encoding);
@@ -15379,8 +18316,23 @@ xmlReadMemory(const char *buffer, int size, const char *URL, const char *encodin
 
     xmlInitParser();
     ctxt = xmlCreateMemoryParserCtxt(buffer, size);
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[667]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 667\n");
+      else
+        fprintf(stderr, "reached bug index 667\n");
+    }
+    if ((!FIXREVERTER[667] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     return (xmlDoRead(ctxt, URL, encoding, options, 0));
 }
 
@@ -15527,18 +18479,63 @@ xmlCtxtReadFile(xmlParserCtxtPtr ctxt, const char *filename,
 {
     xmlParserInputPtr stream;
 
-    if (filename == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[679]) {
+      if ((filename == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 679\n");
+      else
+        fprintf(stderr, "reached bug index 679\n");
+    }
+    if ((!FIXREVERTER[679] && (filename == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
-    if (ctxt == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[680]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 680\n");
+      else
+        fprintf(stderr, "reached bug index 680\n");
+    }
+    if ((!FIXREVERTER[680] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     xmlInitParser();
 
     xmlCtxtReset(ctxt);
 
     stream = xmlLoadExternalEntity(filename, NULL, ctxt);
-    if (stream == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[681]) {
+      if ((stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 681\n");
+      else
+        fprintf(stderr, "reached bug index 681\n");
+    }
+    if ((!FIXREVERTER[681] && (stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inputPush(ctxt, stream);
     return (xmlDoRead(ctxt, NULL, encoding, options, 1));
 }
@@ -15564,24 +18561,84 @@ xmlCtxtReadMemory(xmlParserCtxtPtr ctxt, const char *buffer, int size,
     xmlParserInputBufferPtr input;
     xmlParserInputPtr stream;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[682]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 682\n");
+      else
+        fprintf(stderr, "reached bug index 682\n");
+    }
+    if ((!FIXREVERTER[682] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
-    if (buffer == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[683]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 683\n");
+      else
+        fprintf(stderr, "reached bug index 683\n");
+    }
+    if ((!FIXREVERTER[683] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     xmlInitParser();
 
     xmlCtxtReset(ctxt);
 
     input = xmlParserInputBufferCreateMem(buffer, size, XML_CHAR_ENCODING_NONE);
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[684]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 684\n");
+      else
+        fprintf(stderr, "reached bug index 684\n");
+    }
+    if ((!FIXREVERTER[684] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     stream = xmlNewIOInputStream(ctxt, input, XML_CHAR_ENCODING_NONE);
-    if (stream == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[685]) {
+      if ((stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 685\n");
+      else
+        fprintf(stderr, "reached bug index 685\n");
+    }
+    if ((!FIXREVERTER[685] && (stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserInputBuffer(input);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     inputPush(ctxt, stream);
     return (xmlDoRead(ctxt, URL, encoding, options, 1));
diff --git a/parserInternals.c b/parserInternals.c
index df204fde..de08c4f1 100644
--- a/parserInternals.c
+++ b/parserInternals.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * parserInternals.c : Internal routines (and obsolete ones) needed for the
  *                     XML and HTML parsers.
@@ -144,16 +148,46 @@ __xmlErrEncoding(xmlParserCtxtPtr ctxt, xmlParserErrors xmlerr,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3534]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3534\n");
+      else
+        fprintf(stderr, "reached bug index 3534\n");
+    }
+    if ((!FIXREVERTER[3534] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->errNo = xmlerr;
+        #ifdef FRCOV
+        }
+        #endif
     __xmlRaiseError(NULL, NULL, NULL,
                     ctxt, NULL, XML_FROM_PARSER, xmlerr, XML_ERR_FATAL,
                     NULL, 0, (const char *) str1, (const char *) str2,
                     NULL, 0, 0, msg, str1, str2);
     if (ctxt != NULL) {
         ctxt->wellFormed = 0;
-        if (ctxt->recovery == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3535]) {
+          if ((ctxt -> recovery == 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 3535\n");
+          else
+            fprintf(stderr, "reached bug index 3535\n");
+        }
+        if ((!FIXREVERTER[3535] && (ctxt -> recovery == 0  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->disableSAX = 1;
+            #ifdef FRCOV
+            }
+            #endif
     }
 }
 
@@ -171,16 +205,46 @@ xmlErrInternal(xmlParserCtxtPtr ctxt, const char *msg, const xmlChar * str)
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3536]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3536\n");
+      else
+        fprintf(stderr, "reached bug index 3536\n");
+    }
+    if ((!FIXREVERTER[3536] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->errNo = XML_ERR_INTERNAL_ERROR;
+        #ifdef FRCOV
+        }
+        #endif
     __xmlRaiseError(NULL, NULL, NULL,
                     ctxt, NULL, XML_FROM_PARSER, XML_ERR_INTERNAL_ERROR,
                     XML_ERR_FATAL, NULL, 0, (const char *) str, NULL, NULL,
                     0, 0, msg, str);
     if (ctxt != NULL) {
         ctxt->wellFormed = 0;
-        if (ctxt->recovery == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3537]) {
+          if ((ctxt -> recovery == 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 3537\n");
+          else
+            fprintf(stderr, "reached bug index 3537\n");
+        }
+        if ((!FIXREVERTER[3537] && (ctxt -> recovery == 0  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->disableSAX = 1;
+            #ifdef FRCOV
+            }
+            #endif
     }
 }
 
@@ -200,15 +264,45 @@ xmlErrEncodingInt(xmlParserCtxtPtr ctxt, xmlParserErrors error,
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
 	return;
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3538]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3538\n");
+      else
+        fprintf(stderr, "reached bug index 3538\n");
+    }
+    if ((!FIXREVERTER[3538] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->errNo = error;
+        #ifdef FRCOV
+        }
+        #endif
     __xmlRaiseError(NULL, NULL, NULL,
                     ctxt, NULL, XML_FROM_PARSER, error, XML_ERR_FATAL,
                     NULL, 0, NULL, NULL, NULL, val, 0, msg, val);
     if (ctxt != NULL) {
         ctxt->wellFormed = 0;
-        if (ctxt->recovery == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3539]) {
+          if ((ctxt -> recovery == 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 3539\n");
+          else
+            fprintf(stderr, "reached bug index 3539\n");
+        }
+        if ((!FIXREVERTER[3539] && (ctxt -> recovery == 0  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->disableSAX = 1;
+            #ifdef FRCOV
+            }
+            #endif
     }
 }
 
@@ -298,13 +392,73 @@ xmlParserInputGrow(xmlParserInputPtr in, int len) {
     size_t indx;
     const xmlChar *content;
 
-    if ((in == NULL) || (len < 0)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3540]) {
+      if ((in == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3540\n");
+      else
+        fprintf(stderr, "reached bug index 3540\n");
+    }
+    if ((!FIXREVERTER[3540] && (in == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_INPUT
     xmlGenericError(xmlGenericErrorContext, "Grow\n");
 #endif
-    if (in->buf == NULL) return(-1);
-    if (in->base == NULL) return(-1);
-    if (in->cur == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3541]) {
+      if ((in -> buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3541\n");
+      else
+        fprintf(stderr, "reached bug index 3541\n");
+    }
+    if ((!FIXREVERTER[3541] && (in -> buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3542]) {
+      if ((in -> base == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3542\n");
+      else
+        fprintf(stderr, "reached bug index 3542\n");
+    }
+    if ((!FIXREVERTER[3542] && (in -> base == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3543]) {
+      if ((in -> cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3543\n");
+      else
+        fprintf(stderr, "reached bug index 3543\n");
+    }
+    if ((!FIXREVERTER[3543] && (in -> cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (in->buf->buffer == NULL) return(-1);
 
     CHECK_BUFFER(in);
@@ -360,10 +514,70 @@ xmlParserInputShrink(xmlParserInputPtr in) {
 #ifdef DEBUG_INPUT
     xmlGenericError(xmlGenericErrorContext, "Shrink\n");
 #endif
-    if (in == NULL) return;
-    if (in->buf == NULL) return;
-    if (in->base == NULL) return;
-    if (in->cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3544]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3544\n");
+      else
+        fprintf(stderr, "reached bug index 3544\n");
+    }
+    if ((!FIXREVERTER[3544] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3545]) {
+      if ((in -> buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3545\n");
+      else
+        fprintf(stderr, "reached bug index 3545\n");
+    }
+    if ((!FIXREVERTER[3545] && (in -> buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3546]) {
+      if ((in -> base == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3546\n");
+      else
+        fprintf(stderr, "reached bug index 3546\n");
+    }
+    if ((!FIXREVERTER[3546] && (in -> base == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3547]) {
+      if ((in -> cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3547\n");
+      else
+        fprintf(stderr, "reached bug index 3547\n");
+    }
+    if ((!FIXREVERTER[3547] && (in -> cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (in->buf->buffer == NULL) return;
 
     CHECK_BUFFER(in);
@@ -589,7 +803,22 @@ encoding_error:
 
 int
 xmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {
-    if ((ctxt == NULL) || (len == NULL) || (ctxt->input == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3548]) {
+      if ((ctxt == (void *) 0 || len == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3548\n");
+      else
+        fprintf(stderr, "reached bug index 3548\n");
+    }
+    if ((!FIXREVERTER[3548] && (ctxt == (void *) 0 || len == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->instate == XML_PARSER_EOF)
 	return(0);
 
@@ -644,24 +873,69 @@ xmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {
 		    val |= (cur[1] & 0x3f) << 12;
 		    val |= (cur[2] & 0x3f) << 6;
 		    val |= cur[3] & 0x3f;
-		    if (val < 0x10000)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[3549]) {
+		      if ((val < 65536 ) && !(0))
+		        fprintf(stderr, "triggered bug index 3549\n");
+		      else
+		        fprintf(stderr, "reached bug index 3549\n");
+		    }
+		    if ((!FIXREVERTER[3549] && (val < 65536 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto encoding_error;
+			#ifdef FRCOV
+			}
+			#endif
 		} else {
 		  /* 3-byte code */
 		    *len = 3;
 		    val = (cur[0] & 0xf) << 12;
 		    val |= (cur[1] & 0x3f) << 6;
 		    val |= cur[2] & 0x3f;
-		    if (val < 0x800)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[3550]) {
+		      if ((val < 2048 ) && !(0))
+		        fprintf(stderr, "triggered bug index 3550\n");
+		      else
+		        fprintf(stderr, "reached bug index 3550\n");
+		    }
+		    if ((!FIXREVERTER[3550] && (val < 2048 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto encoding_error;
+			#ifdef FRCOV
+			}
+			#endif
 		}
 	    } else {
 	      /* 2-byte code */
 		*len = 2;
 		val = (cur[0] & 0x1f) << 6;
 		val |= cur[1] & 0x3f;
-		if (val < 0x80)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3551]) {
+		  if ((val < 128 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3551\n");
+		  else
+		    fprintf(stderr, "reached bug index 3551\n");
+		}
+		if ((!FIXREVERTER[3551] && (val < 128 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto encoding_error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	    if (!IS_CHAR(val)) {
 	        xmlErrEncodingInt(ctxt, XML_ERR_INVALID_CHAR,
@@ -750,7 +1024,22 @@ encoding_error:
 int
 xmlStringCurrentChar(xmlParserCtxtPtr ctxt, const xmlChar * cur, int *len)
 {
-    if ((len == NULL) || (cur == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3552]) {
+      if ((len == (void *) 0 || cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3552\n");
+      else
+        fprintf(stderr, "reached bug index 3552\n");
+    }
+    if ((!FIXREVERTER[3552] && (len == (void *) 0 || cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt == NULL) || (ctxt->charset == XML_CHAR_ENCODING_UTF8)) {
         /*
          * We are supposed to handle UTF8, check it's valid
@@ -858,7 +1147,22 @@ encoding_error:
  */
 int
 xmlCopyCharMultiByte(xmlChar *out, int val) {
-    if (out == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3553]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3553\n");
+      else
+        fprintf(stderr, "reached bug index 3553\n");
+    }
+    if ((!FIXREVERTER[3553] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     /*
      * We are supposed to handle UTF8, check it's valid
      * From rfc2044: encoding of the Unicode values on UTF-8:
@@ -901,11 +1205,41 @@ xmlCopyCharMultiByte(xmlChar *out, int val) {
 
 int
 xmlCopyChar(int len ATTRIBUTE_UNUSED, xmlChar *out, int val) {
-    if (out == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3554]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3554\n");
+      else
+        fprintf(stderr, "reached bug index 3554\n");
+    }
+    if ((!FIXREVERTER[3554] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     /* the len parameter is ignored */
-    if  (val >= 0x80) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3555]) {
+      if ((val >= 128 ) && !(0))
+        fprintf(stderr, "triggered bug index 3555\n");
+      else
+        fprintf(stderr, "reached bug index 3555\n");
+    }
+    if ((!FIXREVERTER[3555] && (val >= 128 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(xmlCopyCharMultiByte (out, val));
     }
+    #ifdef FRCOV
+    }
+    #endif
     *out = (xmlChar) val;
     return 1;
 }
@@ -938,7 +1272,22 @@ xmlSwitchEncoding(xmlParserCtxtPtr ctxt, xmlCharEncoding enc)
     xmlCharEncodingHandlerPtr handler;
     int len = -1;
 
-    if (ctxt == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3556]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3556\n");
+      else
+        fprintf(stderr, "reached bug index 3556\n");
+    }
+    if ((!FIXREVERTER[3556] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     switch (enc) {
 	case XML_CHAR_ENCODING_ERROR:
 	    __xmlErrEncoding(ctxt, XML_ERR_UNKNOWN_ENCODING,
@@ -1094,8 +1443,23 @@ xmlSwitchEncoding(xmlParserCtxtPtr ctxt, xmlCharEncoding enc)
 	        break;
 	}
     }
-    if (handler == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3557]) {
+      if ((handler == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3557\n");
+      else
+        fprintf(stderr, "reached bug index 3557\n");
+    }
+    if ((!FIXREVERTER[3557] && (handler == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     ctxt->charset = XML_CHAR_ENCODING_UTF8;
     return(xmlSwitchToEncodingInt(ctxt, handler, len));
 }
@@ -1118,10 +1482,40 @@ xmlSwitchInputEncodingInt(xmlParserCtxtPtr ctxt, xmlParserInputPtr input,
 {
     int nbchars;
 
-    if (handler == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3558]) {
+      if ((handler == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3558\n");
+      else
+        fprintf(stderr, "reached bug index 3558\n");
+    }
+    if ((!FIXREVERTER[3558] && (handler == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
-    if (input == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3559]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3559\n");
+      else
+        fprintf(stderr, "reached bug index 3559\n");
+    }
+    if ((!FIXREVERTER[3559] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (input->buf != NULL) {
         if (input->buf->encoder != NULL) {
             /*
@@ -1221,7 +1615,19 @@ xmlSwitchInputEncodingInt(xmlParserCtxtPtr ctxt, xmlParserInputPtr input,
             xmlBufResetInput(input->buf->buffer, input);
         }
         return (0);
-    } else if (input->length == 0) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[3561]) {
+      if ((input -> length == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3561\n");
+      else
+        fprintf(stderr, "reached bug index 3561\n");
+    }
+    if ((!FIXREVERTER[3561] && (input -> length == 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * When parsing a static memory array one must know the
 	 * size to be able to convert the buffer.
@@ -1229,6 +1635,9 @@ xmlSwitchInputEncodingInt(xmlParserCtxtPtr ctxt, xmlParserInputPtr input,
 	xmlErrInternal(ctxt, "switching encoding : no input\n", NULL);
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (0);
 }
 
@@ -1314,14 +1723,46 @@ xmlSwitchToEncoding(xmlParserCtxtPtr ctxt, xmlCharEncodingHandlerPtr handler)
  */
 void
 xmlFreeInputStream(xmlParserInputPtr input) {
-    if (input == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3562]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3562\n");
+      else
+        fprintf(stderr, "reached bug index 3562\n");
+    }
+    if ((!FIXREVERTER[3562] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (input->filename != NULL) xmlFree((char *) input->filename);
     if (input->directory != NULL) xmlFree((char *) input->directory);
     if (input->encoding != NULL) xmlFree((char *) input->encoding);
     if (input->version != NULL) xmlFree((char *) input->version);
-    if ((input->free != NULL) && (input->base != NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3563]) {
+      fprintf(stderr, "reached bug index 3563\n");
+    }
+    if ((FIXREVERTER[3563] && (input -> free != (void *) 0 )) || (!FIXREVERTER[3563] && (input -> free != (void *) 0 && input -> base != (void *) 0 ))
+    #else
+    if (input -> free != (void *) 0 
+    #endif
+    )
+        
+        #ifdef FRCOV
+        {if (!(input -> base != (void *) 0 ))
+          fprintf(stderr, "triggered bug index 3563\n");
+        #endif
         input->free((xmlChar *) input->base);
+        #ifdef FRCOV
+        }}
+        #endif
     if (input->buf != NULL)
         xmlFreeParserInputBuffer(input->buf);
     xmlFree(input);
@@ -1340,10 +1781,25 @@ xmlNewInputStream(xmlParserCtxtPtr ctxt) {
     xmlParserInputPtr input;
 
     input = (xmlParserInputPtr) xmlMalloc(sizeof(xmlParserInput));
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3564]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3564\n");
+      else
+        fprintf(stderr, "reached bug index 3564\n");
+    }
+    if ((!FIXREVERTER[3564] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(ctxt,  "couldn't allocate a new input stream\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(input, 0, sizeof(xmlParserInput));
     input->line = 1;
     input->col = 1;
@@ -1354,8 +1810,23 @@ xmlNewInputStream(xmlParserCtxtPtr ctxt) {
      * should not happen while parsing which is the situation where
      * the id is actually needed.
      */
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3565]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3565\n");
+      else
+        fprintf(stderr, "reached bug index 3565\n");
+    }
+    if ((!FIXREVERTER[3565] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         input->id = ctxt->input_id++;
+        #ifdef FRCOV
+        }
+        #endif
 
     return(input);
 }
@@ -1376,13 +1847,43 @@ xmlNewIOInputStream(xmlParserCtxtPtr ctxt, xmlParserInputBufferPtr input,
 	            xmlCharEncoding enc) {
     xmlParserInputPtr inputStream;
 
-    if (input == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3566]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3566\n");
+      else
+        fprintf(stderr, "reached bug index 3566\n");
+    }
+    if ((!FIXREVERTER[3566] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlParserDebugEntities)
 	xmlGenericError(xmlGenericErrorContext, "new input from I/O\n");
     inputStream = xmlNewInputStream(ctxt);
-    if (inputStream == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3567]) {
+      if ((inputStream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3567\n");
+      else
+        fprintf(stderr, "reached bug index 3567\n");
+    }
+    if ((!FIXREVERTER[3567] && (inputStream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inputStream->filename = NULL;
     inputStream->buf = input;
     xmlBufResetInput(inputStream->buf->buffer, inputStream);
@@ -1407,15 +1908,42 @@ xmlParserInputPtr
 xmlNewEntityInputStream(xmlParserCtxtPtr ctxt, xmlEntityPtr entity) {
     xmlParserInputPtr input;
 
-    if (entity == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3568]) {
+      if ((entity == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3568\n");
+      else
+        fprintf(stderr, "reached bug index 3568\n");
+    }
+    if ((!FIXREVERTER[3568] && (entity == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrInternal(ctxt, "xmlNewEntityInputStream entity = NULL\n",
 	               NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlParserDebugEntities)
 	xmlGenericError(xmlGenericErrorContext,
 		"new input from entity: %s\n", entity->name);
-    if (entity->content == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3569]) {
+      if ((entity -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3569\n");
+      else
+        fprintf(stderr, "reached bug index 3569\n");
+    }
+    if ((!FIXREVERTER[3569] && (entity -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	switch (entity->etype) {
             case XML_EXTERNAL_GENERAL_UNPARSED_ENTITY:
 	        xmlErrInternal(ctxt, "Cannot parse entity %s\n",
@@ -1443,12 +1971,45 @@ xmlNewEntityInputStream(xmlParserCtxtPtr ctxt, xmlEntityPtr entity) {
 	}
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     input = xmlNewInputStream(ctxt);
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3570]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3570\n");
+      else
+        fprintf(stderr, "reached bug index 3570\n");
+    }
+    if ((!FIXREVERTER[3570] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (entity->URI != NULL)
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3571]) {
+      if ((entity -> URI != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3571\n");
+      else
+        fprintf(stderr, "reached bug index 3571\n");
+    }
+    if ((!FIXREVERTER[3571] && (entity -> URI != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	input->filename = (char *) xmlStrdup((xmlChar *) entity->URI);
+	#ifdef FRCOV
+	}
+	#endif
     input->base = entity->content;
     input->cur = entity->content;
     input->length = entity->length;
@@ -1565,10 +2126,25 @@ xmlInitParserCtxt(xmlParserCtxtPtr ctxt)
 {
     xmlParserInputPtr input;
 
-    if(ctxt==NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3578]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3578\n");
+      else
+        fprintf(stderr, "reached bug index 3578\n");
+    }
+    if ((!FIXREVERTER[3578] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrInternal(NULL, "Got NULL parser context\n", NULL);
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     xmlDefaultSAXHandlerInit();
 
@@ -1751,7 +2327,22 @@ xmlFreeParserCtxt(xmlParserCtxtPtr ctxt)
 {
     xmlParserInputPtr input;
 
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3582]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3582\n");
+      else
+        fprintf(stderr, "reached bug index 3582\n");
+    }
+    if ((!FIXREVERTER[3582] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     while ((input = inputPop(ctxt)) != NULL) { /* Non consuming */
         xmlFreeInputStream(input);
@@ -1838,10 +2429,25 @@ xmlNewParserCtxt(void)
     xmlParserCtxtPtr ctxt;
 
     ctxt = (xmlParserCtxtPtr) xmlMalloc(sizeof(xmlParserCtxt));
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3583]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3583\n");
+      else
+        fprintf(stderr, "reached bug index 3583\n");
+    }
+    if ((!FIXREVERTER[3583] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(NULL, "cannot allocate parser context\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ctxt, 0, sizeof(xmlParserCtxt));
     if (xmlInitParserCtxt(ctxt) < 0) {
         xmlFreeParserCtxt(ctxt);
@@ -1908,8 +2514,23 @@ xmlParserFindNodeInfo(const xmlParserCtxtPtr ctx, const xmlNodePtr node)
 void
 xmlInitNodeInfoSeq(xmlParserNodeInfoSeqPtr seq)
 {
-    if (seq == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3585]) {
+      if ((seq == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3585\n");
+      else
+        fprintf(stderr, "reached bug index 3585\n");
+    }
+    if ((!FIXREVERTER[3585] && (seq == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     seq->length = 0;
     seq->maximum = 0;
     seq->buffer = NULL;
@@ -2019,10 +2640,25 @@ xmlParserAddNodeInfo(xmlParserCtxtPtr ctxt,
                     (xmlParserNodeInfo *) xmlRealloc(ctxt->node_seq.buffer,
                                                      byte_size);
 
-            if (tmp_buffer == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3587]) {
+              if ((tmp_buffer == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3587\n");
+              else
+                fprintf(stderr, "reached bug index 3587\n");
+            }
+            if ((!FIXREVERTER[3587] && (tmp_buffer == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
 		xmlErrMemory(ctxt, "failed to allocate buffer\n");
                 return;
             }
+            #ifdef FRCOV
+            }
+            #endif
             ctxt->node_seq.buffer = tmp_buffer;
             ctxt->node_seq.maximum *= 2;
         }
diff --git a/pattern.c b/pattern.c
index 33dee3aa..f1bfff54 100644
--- a/pattern.c
+++ b/pattern.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * pattern.c: Implemetation of selectors for nodes
  *
@@ -204,20 +208,50 @@ xmlNewPattern(void) {
     xmlPatternPtr cur;
 
     cur = (xmlPatternPtr) xmlMalloc(sizeof(xmlPattern));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3295]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3295\n");
+      else
+        fprintf(stderr, "reached bug index 3295\n");
+    }
+    if ((!FIXREVERTER[3295] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewPattern : malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlPattern));
     cur->maxStep = 10;
     cur->steps = (xmlStepOpPtr) xmlMalloc(cur->maxStep * sizeof(xmlStepOp));
-    if (cur->steps == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3296]) {
+      if ((cur -> steps == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3296\n");
+      else
+        fprintf(stderr, "reached bug index 3296\n");
+    }
+    if ((!FIXREVERTER[3296] && (cur -> steps == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(cur);
 	ERROR(NULL, NULL, NULL,
 		"xmlNewPattern : malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(cur);
 }
 
@@ -232,8 +266,23 @@ xmlFreePattern(xmlPatternPtr comp) {
     xmlStepOpPtr op;
     int i;
 
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3297]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3297\n");
+      else
+        fprintf(stderr, "reached bug index 3297\n");
+    }
+    if ((!FIXREVERTER[3297] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (comp->next != NULL)
         xmlFreePattern(comp->next);
     if (comp->stream != NULL)
@@ -293,15 +342,45 @@ xmlNewPatParserContext(const xmlChar *pattern, xmlDictPtr dict,
                        const xmlChar **namespaces) {
     xmlPatParserContextPtr cur;
 
-    if (pattern == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3298]) {
+      if ((pattern == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3298\n");
+      else
+        fprintf(stderr, "reached bug index 3298\n");
+    }
+    if ((!FIXREVERTER[3298] && (pattern == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = (xmlPatParserContextPtr) xmlMalloc(sizeof(xmlPatParserContext));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3299]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3299\n");
+      else
+        fprintf(stderr, "reached bug index 3299\n");
+    }
+    if ((!FIXREVERTER[3299] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewPatParserContext : malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlPatParserContext));
     cur->dict = dict;
     cur->cur = pattern;
@@ -326,8 +405,23 @@ xmlNewPatParserContext(const xmlChar *pattern, xmlDictPtr dict,
  */
 static void
 xmlFreePatParserContext(xmlPatParserContextPtr ctxt) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3300]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3300\n");
+      else
+        fprintf(stderr, "reached bug index 3300\n");
+    }
+    if ((!FIXREVERTER[3300] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     memset(ctxt, -1, sizeof(xmlPatParserContext));
     xmlFree(ctxt);
 }
@@ -352,11 +446,26 @@ xmlPatternAdd(xmlPatParserContextPtr ctxt ATTRIBUTE_UNUSED,
         xmlStepOpPtr temp;
 	temp = (xmlStepOpPtr) xmlRealloc(comp->steps, comp->maxStep * 2 *
 	                                 sizeof(xmlStepOp));
-        if (temp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3301]) {
+          if ((temp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3301\n");
+          else
+            fprintf(stderr, "reached bug index 3301\n");
+        }
+        if ((!FIXREVERTER[3301] && (temp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    ERROR(ctxt, NULL, NULL,
 			     "xmlPatternAdd: realloc failed\n");
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->steps = temp;
 	comp->maxStep *= 2;
     }
@@ -423,11 +532,26 @@ xmlReversePattern(xmlPatternPtr comp) {
         xmlStepOpPtr temp;
 	temp = (xmlStepOpPtr) xmlRealloc(comp->steps, comp->maxStep * 2 *
 	                                 sizeof(xmlStepOp));
-        if (temp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3302]) {
+          if ((temp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3302\n");
+          else
+            fprintf(stderr, "reached bug index 3302\n");
+        }
+        if ((!FIXREVERTER[3302] && (temp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    ERROR(ctxt, NULL, NULL,
 			     "xmlReversePattern: realloc failed\n");
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->steps = temp;
 	comp->maxStep *= 2;
     }
@@ -925,7 +1049,19 @@ xmlCompileAttributeTest(xmlPatParserContextPtr ctxt) {
 
     SKIP_BLANKS;
     name = xmlPatScanNCName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3317]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3317\n");
+      else
+        fprintf(stderr, "reached bug index 3317\n");
+    }
+    if ((!FIXREVERTER[3317] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (CUR == '*') {
 	    PUSH(XML_OP_ATTR, NULL, NULL);
 	    NEXT;
@@ -936,6 +1072,9 @@ xmlCompileAttributeTest(xmlPatParserContextPtr ctxt) {
 	}
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (CUR == ':') {
 	int i;
 	xmlChar *prefix = name;
@@ -965,13 +1104,28 @@ xmlCompileAttributeTest(xmlPatParserContextPtr ctxt) {
 		    break;
 		}
 	    }
-	    if (i >= ctxt->nb_namespaces) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3318]) {
+	      if ((i >= ctxt -> nb_namespaces ) && !(0))
+	        fprintf(stderr, "triggered bug index 3318\n");
+	      else
+	        fprintf(stderr, "reached bug index 3318\n");
+	    }
+	    if ((!FIXREVERTER[3318] && (i >= ctxt -> nb_namespaces ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		ERROR5(NULL, NULL, NULL,
 		    "xmlCompileAttributeTest : no namespace bound to prefix %s\n",
 		    prefix);
 		ctxt->error = 1;
 		goto error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	XML_PAT_FREE_STRING(ctxt, prefix);
 	if (token == NULL) {
@@ -1037,8 +1191,23 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 	}
 	NEXT;
 	xmlCompileAttributeTest(ctxt);
-	if (ctxt->error != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3319]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3319\n");
+	  else
+	    fprintf(stderr, "reached bug index 3319\n");
+	}
+	if ((!FIXREVERTER[3319] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return;
     }
     name = xmlPatScanNCName(ctxt);
@@ -1086,13 +1255,28 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 			break;
 		    }
 		}
-		if (i >= ctxt->nb_namespaces) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3320]) {
+		  if ((i >= ctxt -> nb_namespaces ) && !(0))
+		    fprintf(stderr, "triggered bug index 3320\n");
+		  else
+		    fprintf(stderr, "reached bug index 3320\n");
+		}
+		if ((!FIXREVERTER[3320] && (i >= ctxt -> nb_namespaces ))
+		#else
+		if (0
+		#endif
+		) {
 		    ERROR5(NULL, NULL, NULL,
 			"xmlCompileStepPattern : no namespace bound to prefix %s\n",
 			prefix);
 		    ctxt->error = 1;
 		    goto error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 	    XML_PAT_FREE_STRING(ctxt, prefix);
 	    name = NULL;
@@ -1153,13 +1337,28 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 				break;
 			    }
 			}
-			if (i >= ctxt->nb_namespaces) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3321]) {
+			  if ((i >= ctxt -> nb_namespaces ) && !(0))
+			    fprintf(stderr, "triggered bug index 3321\n");
+			  else
+			    fprintf(stderr, "reached bug index 3321\n");
+			}
+			if ((!FIXREVERTER[3321] && (i >= ctxt -> nb_namespaces ))
+			#else
+			if (0
+			#endif
+			) {
 			    ERROR5(NULL, NULL, NULL,
 				"xmlCompileStepPattern : no namespace bound "
 				"to prefix %s\n", prefix);
 			    ctxt->error = 1;
 			    goto error;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 		    }
 		    XML_PAT_FREE_STRING(ctxt, prefix);
 		    name = NULL;
@@ -1189,8 +1388,23 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 		    goto error;
 		}
 		xmlCompileAttributeTest(ctxt);
-		if (ctxt->error != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3322]) {
+		  if ((ctxt -> error != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3322\n");
+		  else
+		    fprintf(stderr, "reached bug index 3322\n");
+		}
+		if ((!FIXREVERTER[3322] && (ctxt -> error != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		return;
 	    } else {
 		ERROR5(NULL, NULL, NULL,
@@ -1262,8 +1476,23 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
 	/* TODO: check for incompleteness */
 	if (CUR != 0) {
 	    xmlCompileStepPattern(ctxt);
-	    if (ctxt->error != 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3323]) {
+	      if ((ctxt -> error != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3323\n");
+	      else
+	        fprintf(stderr, "reached bug index 3323\n");
+	    }
+	    if ((!FIXREVERTER[3323] && (ctxt -> error != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto error;
+		#ifdef FRCOV
+		}
+		#endif
 	}
     } else {
         if (CUR == '/') {
@@ -1279,8 +1508,23 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
 	    }
 	}
 	xmlCompileStepPattern(ctxt);
-	if (ctxt->error != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3324]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3324\n");
+	  else
+	    fprintf(stderr, "reached bug index 3324\n");
+	}
+	if ((!FIXREVERTER[3324] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	SKIP_BLANKS;
 	while (CUR == '/') {
 	    if (NXT(1) == '/') {
@@ -1289,8 +1533,23 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
 		NEXT;
 		SKIP_BLANKS;
 		xmlCompileStepPattern(ctxt);
-		if (ctxt->error != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3325]) {
+		  if ((ctxt -> error != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3325\n");
+		  else
+		    fprintf(stderr, "reached bug index 3325\n");
+		}
+		if ((!FIXREVERTER[3325] && (ctxt -> error != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    } else {
 	        PUSH(XML_OP_PARENT, NULL, NULL);
 		NEXT;
@@ -1302,8 +1561,23 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
 		    goto error;
 		}
 		xmlCompileStepPattern(ctxt);
-		if (ctxt->error != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3326]) {
+		  if ((ctxt -> error != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3326\n");
+		  else
+		    fprintf(stderr, "reached bug index 3326\n");
+		}
+		if ((!FIXREVERTER[3326] && (ctxt -> error != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	}
     }
@@ -1378,8 +1652,23 @@ xmlCompileIDCXPathPath(xmlPatParserContextPtr ctxt) {
     */
     do {
 	xmlCompileStepPattern(ctxt);
-	if (ctxt->error != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3327]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3327\n");
+	  else
+	    fprintf(stderr, "reached bug index 3327\n");
+	}
+	if ((!FIXREVERTER[3327] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	SKIP_BLANKS;
 	if (CUR != '/')
 	    break;
@@ -1491,23 +1780,68 @@ static xmlStreamCompPtr
 xmlNewStreamComp(int size) {
     xmlStreamCompPtr cur;
 
-    if (size < 4)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3328]) {
+      if ((size < 4 ) && !(0))
+        fprintf(stderr, "triggered bug index 3328\n");
+      else
+        fprintf(stderr, "reached bug index 3328\n");
+    }
+    if ((!FIXREVERTER[3328] && (size < 4 ))
+    #else
+    if (0
+    #endif
+    )
         size  = 4;
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = (xmlStreamCompPtr) xmlMalloc(sizeof(xmlStreamComp));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3329]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3329\n");
+      else
+        fprintf(stderr, "reached bug index 3329\n");
+    }
+    if ((!FIXREVERTER[3329] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewStreamComp: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlStreamComp));
     cur->steps = (xmlStreamStepPtr) xmlMalloc(size * sizeof(xmlStreamStep));
-    if (cur->steps == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3330]) {
+      if ((cur -> steps == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3330\n");
+      else
+        fprintf(stderr, "reached bug index 3330\n");
+    }
+    if ((!FIXREVERTER[3330] && (cur -> steps == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(cur);
 	ERROR(NULL, NULL, NULL,
 	      "xmlNewStreamComp: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur->nbStep = 0;
     cur->maxStep = size;
     return(cur);
@@ -1549,11 +1883,26 @@ xmlStreamCompAddStep(xmlStreamCompPtr comp, const xmlChar *name,
     if (comp->nbStep >= comp->maxStep) {
 	cur = (xmlStreamStepPtr) xmlRealloc(comp->steps,
 				 comp->maxStep * 2 * sizeof(xmlStreamStep));
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3331]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3331\n");
+	  else
+	    fprintf(stderr, "reached bug index 3331\n");
+	}
+	if ((!FIXREVERTER[3331] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ERROR(NULL, NULL, NULL,
 		  "xmlNewStreamComp: malloc failed\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->steps = cur;
         comp->maxStep *= 2;
     }
@@ -1579,8 +1928,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
     int i, s = 0, root = 0, flags = 0, prevs = -1;
     xmlStepOp step;
 
-    if ((comp == NULL) || (comp->steps == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3332]) {
+      if ((comp == (void *) 0 || comp -> steps == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3332\n");
+      else
+        fprintf(stderr, "reached bug index 3332\n");
+    }
+    if ((!FIXREVERTER[3332] && (comp == (void *) 0 || comp -> steps == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * special case for .
      */
@@ -1589,8 +1953,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 	(comp->steps[0].value == NULL) &&
 	(comp->steps[0].value2 == NULL)) {
 	stream = xmlNewStreamComp(0);
-	if (stream == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3333]) {
+	  if ((stream == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3333\n");
+	  else
+	    fprintf(stderr, "reached bug index 3333\n");
+	}
+	if ((!FIXREVERTER[3333] && (stream == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/* Note that the stream will have no steps in this case. */
 	stream->flags |= XML_STREAM_FINAL_IS_ANY_NODE;
 	comp->stream = stream;
@@ -1598,8 +1977,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
     }
 
     stream = xmlNewStreamComp((comp->nbStep / 2) + 1);
-    if (stream == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3334]) {
+      if ((stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3334\n");
+      else
+        fprintf(stderr, "reached bug index 3334\n");
+    }
+    if ((!FIXREVERTER[3334] && (stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (comp->dict != NULL) {
         stream->dict = comp->dict;
 	xmlDictReference(stream->dict);
@@ -1622,8 +2016,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 	    case XML_OP_NS:
 		s = xmlStreamCompAddStep(stream, NULL, step.value,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3336]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3336\n");
+		  else
+		    fprintf(stderr, "reached bug index 3336\n");
+		}
+		if ((!FIXREVERTER[3336] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
@@ -1633,8 +2042,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		s = xmlStreamCompAddStep(stream,
 		    step.value, step.value2, XML_ATTRIBUTE_NODE, flags);
 		flags = 0;
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3337]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3337\n");
+		  else
+		    fprintf(stderr, "reached bug index 3337\n");
+		}
+		if ((!FIXREVERTER[3337] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_OP_ELEM:
 	        if ((step.value == NULL) && (step.value2 == NULL)) {
@@ -1658,8 +2082,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 			flags |= XML_STREAM_STEP_NODE;
 			s = xmlStreamCompAddStep(stream, NULL, NULL,
 			    XML_STREAM_ANY_NODE, flags);
-			if (s < 0)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3338]) {
+			  if ((s < 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 3338\n");
+			  else
+			    fprintf(stderr, "reached bug index 3338\n");
+			}
+			if ((!FIXREVERTER[3338] && (s < 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    goto error;
+			    #ifdef FRCOV
+			    }
+			    #endif
 			flags = 0;
 			/*
 			* If there was a previous step, mark it to be added to
@@ -1681,8 +2120,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		/* An element node. */
 	        s = xmlStreamCompAddStep(stream, step.value, step.value2,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3339]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3339\n");
+		  else
+		    fprintf(stderr, "reached bug index 3339\n");
+		}
+		if ((!FIXREVERTER[3339] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
@@ -1690,16 +2144,46 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		/* An element node child. */
 	        s = xmlStreamCompAddStep(stream, step.value, step.value2,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3340]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3340\n");
+		  else
+		    fprintf(stderr, "reached bug index 3340\n");
+		}
+		if ((!FIXREVERTER[3340] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
 	    case XML_OP_ALL:
 	        s = xmlStreamCompAddStep(stream, NULL, NULL,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3341]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3341\n");
+		  else
+		    fprintf(stderr, "reached bug index 3341\n");
+		}
+		if ((!FIXREVERTER[3341] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
@@ -1732,8 +2216,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		stream->steps[0].flags |= XML_STREAM_STEP_DESC;
 	}
     }
-    if (stream->nbStep <= s)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3342]) {
+      if ((stream -> nbStep <= s ) && !(0))
+        fprintf(stderr, "triggered bug index 3342\n");
+      else
+        fprintf(stderr, "reached bug index 3342\n");
+    }
+    if ((!FIXREVERTER[3342] && (stream -> nbStep <= s ))
+    #else
+    if (0
+    #endif
+    )
 	goto error;
+	#ifdef FRCOV
+	}
+	#endif
     stream->steps[s].flags |= XML_STREAM_STEP_FINAL;
     if (root)
 	stream->steps[0].flags |= XML_STREAM_STEP_ROOT;
@@ -1760,19 +2259,49 @@ xmlNewStreamCtxt(xmlStreamCompPtr stream) {
     xmlStreamCtxtPtr cur;
 
     cur = (xmlStreamCtxtPtr) xmlMalloc(sizeof(xmlStreamCtxt));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3343]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3343\n");
+      else
+        fprintf(stderr, "reached bug index 3343\n");
+    }
+    if ((!FIXREVERTER[3343] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewStreamCtxt: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlStreamCtxt));
     cur->states = (int *) xmlMalloc(4 * 2 * sizeof(int));
-    if (cur->states == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3344]) {
+      if ((cur -> states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3344\n");
+      else
+        fprintf(stderr, "reached bug index 3344\n");
+    }
+    if ((!FIXREVERTER[3344] && (cur -> states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(cur);
 	ERROR(NULL, NULL, NULL,
 	      "xmlNewStreamCtxt: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur->nbState = 0;
     cur->maxState = 4;
     cur->level = 0;
@@ -1824,11 +2353,26 @@ xmlStreamCtxtAddState(xmlStreamCtxtPtr comp, int idx, int level) {
 
 	cur = (int *) xmlRealloc(comp->states,
 				 comp->maxState * 4 * sizeof(int));
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3345]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3345\n");
+	  else
+	    fprintf(stderr, "reached bug index 3345\n");
+	}
+	if ((!FIXREVERTER[3345] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ERROR(NULL, NULL, NULL,
 		  "xmlNewStreamCtxt: malloc failed\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->states = cur;
         comp->maxState *= 2;
     }
@@ -1864,8 +2408,23 @@ xmlStreamPushInternal(xmlStreamCtxtPtr stream,
     xmlStreamCtxtPtr orig = stream;
 #endif
 
-    if ((stream == NULL) || (stream->nbState < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3346]) {
+      if ((stream == (void *) 0 || stream -> nbState < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3346\n");
+      else
+        fprintf(stderr, "reached bug index 3346\n");
+    }
+    if ((!FIXREVERTER[3346] && (stream == (void *) 0 || stream -> nbState < 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (stream != NULL) {
 	comp = stream->comp;
@@ -1978,14 +2537,44 @@ xmlStreamPushInternal(xmlStreamCtxtPtr stream,
 		stepNr = stream->states[2 * i];
 
 		/* TODO: should not happen anymore: dead states */
-		if (stepNr < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3347]) {
+		  if ((stepNr < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3347\n");
+		  else
+		    fprintf(stderr, "reached bug index 3347\n");
+		}
+		if ((!FIXREVERTER[3347] && (stepNr < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto next_state;
+		    #ifdef FRCOV
+		    }
+		    #endif
 
 		tmp = stream->states[(2 * i) + 1];
 
 		/* skip new states just added */
-		if (tmp > stream->level)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3348]) {
+		  if ((tmp > stream -> level ) && !(0))
+		    fprintf(stderr, "triggered bug index 3348\n");
+		  else
+		    fprintf(stderr, "reached bug index 3348\n");
+		}
+		if ((!FIXREVERTER[3348] && (tmp > stream -> level ))
+		#else
+		if (0
+		#endif
+		)
 		    goto next_state;
+		    #ifdef FRCOV
+		    }
+		    #endif
 
 		/* skip states at ancestor levels, except if "//" */
 		desc = comp->steps[stepNr].flags & XML_STREAM_STEP_DESC;
@@ -2004,8 +2593,23 @@ xmlStreamPushInternal(xmlStreamCtxtPtr stream,
 		    if ((comp->flags & XML_STREAM_DESC) == 0)
 			stream->blockLevel = stream->level +1;
 		    goto next_state;
-		} else if (step.nodeType != XML_STREAM_ANY_NODE)
+		} else 
+		#ifdef FRCOV
+		{if (FIXREVERTER[3349]) {
+		  if ((step . nodeType != 100 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3349\n");
+		  else
+		    fprintf(stderr, "reached bug index 3349\n");
+		}
+		if ((!FIXREVERTER[3349] && (step . nodeType != 100 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto next_state;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	    /*
 	    * Compare local/namespace-name.
@@ -2136,8 +2740,23 @@ compare:
 	if (step.nodeType != nodeType) {
 	    if (nodeType == XML_ATTRIBUTE_NODE)
 		goto stream_next;
-	    else if (step.nodeType != XML_STREAM_ANY_NODE)
+	    else 
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3351]) {
+	      if ((step . nodeType != 100 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3351\n");
+	      else
+	        fprintf(stderr, "reached bug index 3351\n");
+	    }
+	    if ((!FIXREVERTER[3351] && (step . nodeType != 100 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto stream_next;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	/*
 	* Compare local/namespace-name.
@@ -2280,14 +2899,44 @@ int
 xmlStreamPop(xmlStreamCtxtPtr stream) {
     int i, lev;
 
-    if (stream == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3354]) {
+      if ((stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3354\n");
+      else
+        fprintf(stderr, "reached bug index 3354\n");
+    }
+    if ((!FIXREVERTER[3354] && (stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     while (stream != NULL) {
 	/*
 	* Reset block-level.
 	*/
-	if (stream->blockLevel == stream->level)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3355]) {
+	  if ((stream -> blockLevel == stream -> level  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3355\n");
+	  else
+	    fprintf(stderr, "reached bug index 3355\n");
+	}
+	if ((!FIXREVERTER[3355] && (stream -> blockLevel == stream -> level  ))
+	#else
+	if (0
+	#endif
+	)
 	    stream->blockLevel = -1;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	/*
 	 *  stream->level can be zero when XML_FINAL_IS_ANY_NODE is set
@@ -2304,8 +2953,23 @@ xmlStreamPop(xmlStreamCtxtPtr stream) {
 	    lev = stream->states[(2 * i) + 1];
 	    if (lev > stream->level)
 		stream->nbState--;
-	    if (lev <= stream->level)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3356]) {
+	      if ((lev <= stream -> level ) && !(0))
+	        fprintf(stderr, "triggered bug index 3356\n");
+	      else
+	        fprintf(stderr, "reached bug index 3356\n");
+	    }
+	    if ((!FIXREVERTER[3356] && (lev <= stream -> level ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	stream = stream->next;
     }
@@ -2364,8 +3028,23 @@ xmlPatterncompile(const xmlChar *pattern, xmlDict *dict, int flags,
     int type = 0;
     int streamable = 1;
 
-    if (pattern == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3358]) {
+      if ((pattern == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3358\n");
+      else
+        fprintf(stderr, "reached bug index 3358\n");
+    }
+    if ((!FIXREVERTER[3358] && (pattern == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     start = pattern;
     or = start;
@@ -2381,9 +3060,39 @@ xmlPatterncompile(const xmlChar *pattern, xmlDict *dict, int flags,
 	    }
 	    or++;
 	}
-	if (ctxt == NULL) goto error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3359]) {
+	  if ((ctxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3359\n");
+	  else
+	    fprintf(stderr, "reached bug index 3359\n");
+	}
+	if ((!FIXREVERTER[3359] && (ctxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto error;
+	#ifdef FRCOV
+	}
+	#endif
 	cur = xmlNewPattern();
-	if (cur == NULL) goto error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3360]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3360\n");
+	  else
+	    fprintf(stderr, "reached bug index 3360\n");
+	}
+	if ((!FIXREVERTER[3360] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto error;
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Assign string dict.
 	*/
@@ -2404,8 +3113,23 @@ xmlPatterncompile(const xmlChar *pattern, xmlDict *dict, int flags,
 	    xmlCompileIDCXPathPath(ctxt);
 	else
 	    xmlCompilePathPattern(ctxt);
-	if (ctxt->error != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3361]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3361\n");
+	  else
+	    fprintf(stderr, "reached bug index 3361\n");
+	}
+	if ((!FIXREVERTER[3361] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlFreePatParserContext(ctxt);
 	ctxt = NULL;
 
@@ -2490,15 +3214,60 @@ xmlPatternGetStreamCtxt(xmlPatternPtr comp)
 {
     xmlStreamCtxtPtr ret = NULL, cur;
 
-    if ((comp == NULL) || (comp->stream == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3364]) {
+      if ((comp == (void *) 0 || comp -> stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3364\n");
+      else
+        fprintf(stderr, "reached bug index 3364\n");
+    }
+    if ((!FIXREVERTER[3364] && (comp == (void *) 0 || comp -> stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (comp != NULL) {
-        if (comp->stream == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3365]) {
+          if ((comp -> stream == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3365\n");
+          else
+            fprintf(stderr, "reached bug index 3365\n");
+        }
+        if ((!FIXREVERTER[3365] && (comp -> stream == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    goto failed;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	cur = xmlNewStreamCtxt(comp->stream);
-	if (cur == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3366]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3366\n");
+	  else
+	    fprintf(stderr, "reached bug index 3366\n");
+	}
+	if ((!FIXREVERTER[3366] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto failed;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (ret == NULL)
 	    ret = cur;
 	else {
diff --git a/python/setup.py b/python/setup.py
deleted file mode 100755
index e5043237..00000000
--- a/python/setup.py
+++ /dev/null
@@ -1,242 +0,0 @@
-#!/usr/bin/python -u
-#
-# Setup script for libxml2 and libxslt if found
-#
-import sys, os
-from distutils.core import setup, Extension
-
-# Below ROOT, we expect to find include, include/libxml2, lib and bin.
-# On *nix, it is not needed (but should not harm),
-# on Windows, it is set by configure.js.
-ROOT = r'/usr'
-
-# Thread-enabled libxml2
-with_threads = 1
-
-# If this flag is set (windows only),
-# a private copy of the dlls are included in the package.
-# If this flag is not set, the libxml2 and libxslt
-# dlls must be found somewhere in the PATH at runtime.
-WITHDLLS = 1 and sys.platform.startswith('win')
-
-def missing(file):
-    if os.access(file, os.R_OK) == 0:
-        return 1
-    return 0
-
-try:
-    HOME = os.environ['HOME']
-except:
-    HOME="C:"
-
-if WITHDLLS:
-    # libxml dlls (expected in ROOT/bin)
-    dlls = [ 'iconv.dll','libxml2.dll','libxslt.dll','libexslt.dll' ]
-    dlls = [os.path.join(ROOT,'bin',dll) for dll in dlls]
-
-    # create __init__.py for the libxmlmods package
-    if not os.path.exists("libxmlmods"):
-        os.mkdir("libxmlmods")
-        open("libxmlmods/__init__.py","w").close()
-
-    def altImport(s):
-        s = s.replace("import libxml2mod","from libxmlmods import libxml2mod")
-        s = s.replace("import libxsltmod","from libxmlmods import libxsltmod")
-        return s
-
-if sys.platform.startswith('win'):
-    libraryPrefix = 'lib'
-    platformLibs = []
-else:
-    libraryPrefix = ''
-    platformLibs = ["m","z"]
-
-# those are examined to find
-# - libxml2/libxml/tree.h
-# - iconv.h
-# - libxslt/xsltconfig.h
-includes_dir = [
-"/usr/include",
-"/usr/local/include",
-"/opt/include",
-os.path.join(ROOT,'include'),
-HOME
-];
-
-xml_includes=""
-for dir in includes_dir:
-    if not missing(dir + "/libxml2/libxml/tree.h"):
-        xml_includes=dir + "/libxml2"
-        break;
-
-if xml_includes == "":
-    print("failed to find headers for libxml2: update includes_dir")
-    sys.exit(1)
-
-iconv_includes=""
-for dir in includes_dir:
-    if not missing(dir + "/iconv.h"):
-        iconv_includes=dir
-        break;
-
-if iconv_includes == "":
-    print("failed to find headers for libiconv: update includes_dir")
-    sys.exit(1)
-
-# those are added in the linker search path for libraries
-libdirs = [
-os.path.join(ROOT,'lib'),
-]
-
-xml_files = ["libxml2-api.xml", "libxml2-python-api.xml",
-             "libxml.c", "libxml.py", "libxml_wrap.h", "types.c",
-             "xmlgenerator.py", "README", "TODO", "drv_libxml2.py"]
-
-xslt_files = ["libxslt-api.xml", "libxslt-python-api.xml",
-             "libxslt.c", "libxsl.py", "libxslt_wrap.h",
-             "xsltgenerator.py"]
-
-if missing("libxml2-py.c") or missing("libxml2.py"):
-    try:
-        try:
-            import xmlgenerator
-        except:
-            import generator
-    except:
-        print("failed to find and generate stubs for libxml2, aborting ...")
-        print(sys.exc_info()[0], sys.exc_info()[1])
-        sys.exit(1)
-
-    head = open("libxml.py", "r")
-    generated = open("libxml2class.py", "r")
-    result = open("libxml2.py", "w")
-    for line in head.readlines():
-        if WITHDLLS:
-            result.write(altImport(line))
-        else:
-            result.write(line)
-    for line in generated.readlines():
-        result.write(line)
-    head.close()
-    generated.close()
-    result.close()
-
-with_xslt=0
-if missing("libxslt-py.c") or missing("libxslt.py"):
-    if missing("xsltgenerator.py") or missing("libxslt-api.xml"):
-        print("libxslt stub generator not found, libxslt not built")
-    else:
-        try:
-            import xsltgenerator
-        except:
-            print("failed to generate stubs for libxslt, aborting ...")
-            print(sys.exc_info()[0], sys.exc_info()[1])
-        else:
-            head = open("libxsl.py", "r")
-            generated = open("libxsltclass.py", "r")
-            result = open("libxslt.py", "w")
-            for line in head.readlines():
-                if WITHDLLS:
-                    result.write(altImport(line))
-                else:
-                    result.write(line)
-            for line in generated.readlines():
-                result.write(line)
-            head.close()
-            generated.close()
-            result.close()
-            with_xslt=1
-else:
-    with_xslt=1
-
-if with_xslt == 1:
-    xslt_includes=""
-    for dir in includes_dir:
-        if not missing(dir + "/libxslt/xsltconfig.h"):
-            xslt_includes=dir + "/libxslt"
-            break;
-
-    if xslt_includes == "":
-        print("failed to find headers for libxslt: update includes_dir")
-        with_xslt = 0
-
-
-descr = "libxml2 package"
-modules = [ 'libxml2', 'drv_libxml2' ]
-if WITHDLLS:
-    modules.append('libxmlmods.__init__')
-c_files = ['libxml2-py.c', 'libxml.c', 'types.c' ]
-includes= [xml_includes, iconv_includes]
-libs    = [libraryPrefix + "xml2"] + platformLibs
-macros  = []
-if with_threads:
-    macros.append(('_REENTRANT','1'))
-if with_xslt == 1:
-    descr = "libxml2 and libxslt package"
-    if not sys.platform.startswith('win'):
-        #
-        # We are gonna build 2 identical shared libs with merge initializing
-        # both libxml2mod and libxsltmod
-        #
-        c_files = c_files + ['libxslt-py.c', 'libxslt.c']
-        xslt_c_files = c_files
-        macros.append(('MERGED_MODULES', '1'))
-    else:
-        #
-        # On windows the MERGED_MODULE option is not needed
-        # (and does not work)
-        #
-        xslt_c_files = ['libxslt-py.c', 'libxslt.c', 'types.c']
-    libs.insert(0, libraryPrefix + 'exslt')
-    libs.insert(0, libraryPrefix + 'xslt')
-    includes.append(xslt_includes)
-    modules.append('libxslt')
-
-
-extens=[Extension('libxml2mod', c_files, include_dirs=includes,
-                  library_dirs=libdirs,
-                  libraries=libs, define_macros=macros)]
-if with_xslt == 1:
-    extens.append(Extension('libxsltmod', xslt_c_files, include_dirs=includes,
-                            library_dirs=libdirs,
-                            libraries=libs, define_macros=macros))
-
-if missing("MANIFEST"):
-
-    manifest = open("MANIFEST", "w")
-    manifest.write("setup.py\n")
-    for file in xml_files:
-        manifest.write(file + "\n")
-    if with_xslt == 1:
-        for file in xslt_files:
-            manifest.write(file + "\n")
-    manifest.close()
-
-if WITHDLLS:
-    ext_package = "libxmlmods"
-    if sys.version >= "2.2":
-        base = "lib/site-packages/"
-    else:
-        base = ""
-    data_files = [(base+"libxmlmods",dlls)]
-else:
-    ext_package = None
-    data_files = []
-
-setup (name = "libxml2-python",
-       # On *nix, the version number is created from setup.py.in
-       # On windows, it is set by configure.js
-       version = "2.9.2",
-       description = descr,
-       author = "Daniel Veillard",
-       author_email = "veillard@redhat.com",
-       url = "http://xmlsoft.org/python.html",
-       licence="MIT Licence",
-       py_modules=modules,
-       ext_modules=extens,
-       ext_package=ext_package,
-       data_files=data_files,
-       )
-
-sys.exit(0)
-
diff --git a/relaxng.c b/relaxng.c
index 8d88e957..344f44c0 100644
--- a/relaxng.c
+++ b/relaxng.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * relaxng.c : implementation of the Relax-NG handling and validity checking
  *
@@ -1015,27 +1019,72 @@ xmlRelaxNGNewStates(xmlRelaxNGValidCtxtPtr ctxt, int size)
         ret->nbState = 0;
         return (ret);
     }
-    if (size < 16)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[945]) {
+      if ((size < 16 ) && !(0))
+        fprintf(stderr, "triggered bug index 945\n");
+      else
+        fprintf(stderr, "reached bug index 945\n");
+    }
+    if ((!FIXREVERTER[945] && (size < 16 ))
+    #else
+    if (0
+    #endif
+    )
         size = 16;
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlRelaxNGStatesPtr) xmlMalloc(sizeof(xmlRelaxNGStates) +
                                           (size -
                                            1) *
                                           sizeof(xmlRelaxNGValidStatePtr));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[946]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 946\n");
+      else
+        fprintf(stderr, "reached bug index 946\n");
+    }
+    if ((!FIXREVERTER[946] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt, "allocating states\n");
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->nbState = 0;
     ret->maxState = size;
     ret->tabState = (xmlRelaxNGValidStatePtr *) xmlMalloc((size) *
                                                           sizeof
                                                           (xmlRelaxNGValidStatePtr));
-    if (ret->tabState == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[947]) {
+      if ((ret -> tabState == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 947\n");
+      else
+        fprintf(stderr, "reached bug index 947\n");
+    }
+    if ((!FIXREVERTER[947] && (ret -> tabState == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt, "allocating states\n");
         xmlFree(ret);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (ret);
 }
 
@@ -1055,9 +1104,24 @@ xmlRelaxNGAddStatesUniq(xmlRelaxNGValidCtxtPtr ctxt,
                         xmlRelaxNGStatesPtr states,
                         xmlRelaxNGValidStatePtr state)
 {
-    if (state == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[948]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 948\n");
+      else
+        fprintf(stderr, "reached bug index 948\n");
+    }
+    if ((!FIXREVERTER[948] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (states->nbState >= states->maxState) {
         xmlRelaxNGValidStatePtr *tmp;
         int size;
@@ -1067,10 +1131,25 @@ xmlRelaxNGAddStatesUniq(xmlRelaxNGValidCtxtPtr ctxt,
                                                      (size) *
                                                      sizeof
                                                      (xmlRelaxNGValidStatePtr));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[949]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 949\n");
+          else
+            fprintf(stderr, "reached bug index 949\n");
+        }
+        if ((!FIXREVERTER[949] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "adding states\n");
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         states->tabState = tmp;
         states->maxState = size;
     }
@@ -1095,9 +1174,24 @@ xmlRelaxNGAddStates(xmlRelaxNGValidCtxtPtr ctxt,
 {
     int i;
 
-    if (state == NULL || states == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[950]) {
+      if ((state == (void *) 0 || states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 950\n");
+      else
+        fprintf(stderr, "reached bug index 950\n");
+    }
+    if ((!FIXREVERTER[950] && (state == (void *) 0 || states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (states->nbState >= states->maxState) {
         xmlRelaxNGValidStatePtr *tmp;
         int size;
@@ -1107,10 +1201,25 @@ xmlRelaxNGAddStates(xmlRelaxNGValidCtxtPtr ctxt,
                                                      (size) *
                                                      sizeof
                                                      (xmlRelaxNGValidStatePtr));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[951]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 951\n");
+          else
+            fprintf(stderr, "reached bug index 951\n");
+        }
+        if ((!FIXREVERTER[951] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "adding states\n");
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         states->tabState = tmp;
         states->maxState = size;
     }
@@ -1135,8 +1244,23 @@ static void
 xmlRelaxNGFreeStates(xmlRelaxNGValidCtxtPtr ctxt,
                      xmlRelaxNGStatesPtr states)
 {
-    if (states == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[952]) {
+      if ((states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 952\n");
+      else
+        fprintf(stderr, "reached bug index 952\n");
+    }
+    if ((!FIXREVERTER[952] && (states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt != NULL) && (ctxt->freeStates == NULL)) {
         ctxt->freeStatesMax = 40;
         ctxt->freeStatesNr = 0;
@@ -1145,8 +1269,22 @@ xmlRelaxNGFreeStates(xmlRelaxNGValidCtxtPtr ctxt,
         if (ctxt->freeStates == NULL) {
             xmlRngVErrMemory(ctxt, "storing states\n");
         }
-    } else if ((ctxt != NULL)
-               && (ctxt->freeStatesNr >= ctxt->freeStatesMax)) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[953]) {
+      fprintf(stderr, "reached bug index 953\n");
+    }
+    if ((FIXREVERTER[953] && (ctxt != (void *) 0 )) || (!FIXREVERTER[953] && (ctxt != (void *) 0 && ctxt -> freeStatesNr >= ctxt -> freeStatesMax ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+                 
+               #ifdef FRCOV
+                 if (!(ctxt -> freeStatesNr >= ctxt -> freeStatesMax ))
+                   fprintf(stderr, "triggered bug index 953\n");
+                 #endif
+               
         xmlRelaxNGStatesPtr *tmp;
 
         tmp = (xmlRelaxNGStatesPtr *) xmlRealloc(ctxt->freeStates,
@@ -1162,6 +1300,9 @@ xmlRelaxNGFreeStates(xmlRelaxNGValidCtxtPtr ctxt,
         ctxt->freeStates = tmp;
         ctxt->freeStatesMax *= 2;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt == NULL) || (ctxt->freeStates == NULL)) {
         xmlFree(states->tabState);
         xmlFree(states);
@@ -1190,8 +1331,23 @@ xmlRelaxNGNewValidState(xmlRelaxNGValidCtxtPtr ctxt, xmlNodePtr node)
 
     if (node == NULL) {
         root = xmlDocGetRootElement(ctxt->doc);
-        if (root == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[954]) {
+          if ((root == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 954\n");
+          else
+            fprintf(stderr, "reached bug index 954\n");
+        }
+        if ((!FIXREVERTER[954] && (root == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (NULL);
+            #ifdef FRCOV
+            }
+            #endif
     } else {
         attr = node->properties;
         while (attr != NULL) {
@@ -1209,10 +1365,25 @@ xmlRelaxNGNewValidState(xmlRelaxNGValidCtxtPtr ctxt, xmlNodePtr node)
         ret =
             (xmlRelaxNGValidStatePtr)
             xmlMalloc(sizeof(xmlRelaxNGValidState));
-        if (ret == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[955]) {
+          if ((ret == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 955\n");
+          else
+            fprintf(stderr, "reached bug index 955\n");
+        }
+        if ((!FIXREVERTER[955] && (ret == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "allocating states\n");
             return (NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
         memset(ret, 0, sizeof(xmlRelaxNGValidState));
     }
     ret->value = NULL;
@@ -1233,19 +1404,49 @@ xmlRelaxNGNewValidState(xmlRelaxNGValidCtxtPtr ctxt, xmlNodePtr node)
                 ret->maxAttrs = nbAttrs;
             ret->attrs = (xmlAttrPtr *) xmlMalloc(ret->maxAttrs *
                                                   sizeof(xmlAttrPtr));
-            if (ret->attrs == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[956]) {
+              if ((ret -> attrs == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 956\n");
+              else
+                fprintf(stderr, "reached bug index 956\n");
+            }
+            if ((!FIXREVERTER[956] && (ret -> attrs == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt, "allocating states\n");
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
         } else if (ret->maxAttrs < nbAttrs) {
             xmlAttrPtr *tmp;
 
             tmp = (xmlAttrPtr *) xmlRealloc(ret->attrs, nbAttrs *
                                             sizeof(xmlAttrPtr));
-            if (tmp == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[957]) {
+              if ((tmp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 957\n");
+              else
+                fprintf(stderr, "reached bug index 957\n");
+            }
+            if ((!FIXREVERTER[957] && (tmp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt, "allocating states\n");
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             ret->attrs = tmp;
             ret->maxAttrs = nbAttrs;
         }
@@ -1282,8 +1483,23 @@ xmlRelaxNGCopyValidState(xmlRelaxNGValidCtxtPtr ctxt,
     unsigned int maxAttrs;
     xmlAttrPtr *attrs;
 
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[958]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 958\n");
+      else
+        fprintf(stderr, "reached bug index 958\n");
+    }
+    if ((!FIXREVERTER[958] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->freeState != NULL) && (ctxt->freeState->nbState > 0)) {
         ctxt->freeState->nbState--;
         ret = ctxt->freeState->tabState[ctxt->freeState->nbState];
@@ -1291,10 +1507,25 @@ xmlRelaxNGCopyValidState(xmlRelaxNGValidCtxtPtr ctxt,
         ret =
             (xmlRelaxNGValidStatePtr)
             xmlMalloc(sizeof(xmlRelaxNGValidState));
-        if (ret == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[959]) {
+          if ((ret == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 959\n");
+          else
+            fprintf(stderr, "reached bug index 959\n");
+        }
+        if ((!FIXREVERTER[959] && (ret == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "allocating states\n");
             return (NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
         memset(ret, 0, sizeof(xmlRelaxNGValidState));
     }
     attrs = ret->attrs;
@@ -1307,21 +1538,51 @@ xmlRelaxNGCopyValidState(xmlRelaxNGValidCtxtPtr ctxt,
             ret->maxAttrs = state->maxAttrs;
             ret->attrs = (xmlAttrPtr *) xmlMalloc(ret->maxAttrs *
                                                   sizeof(xmlAttrPtr));
-            if (ret->attrs == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[960]) {
+              if ((ret -> attrs == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 960\n");
+              else
+                fprintf(stderr, "reached bug index 960\n");
+            }
+            if ((!FIXREVERTER[960] && (ret -> attrs == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt, "allocating states\n");
                 ret->nbAttrs = 0;
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
         } else if (ret->maxAttrs < state->nbAttrs) {
             xmlAttrPtr *tmp;
 
             tmp = (xmlAttrPtr *) xmlRealloc(ret->attrs, state->maxAttrs *
                                             sizeof(xmlAttrPtr));
-            if (tmp == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[961]) {
+              if ((tmp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 961\n");
+              else
+                fprintf(stderr, "reached bug index 961\n");
+            }
+            if ((!FIXREVERTER[961] && (tmp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt, "allocating states\n");
                 ret->nbAttrs = 0;
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             ret->maxAttrs = state->maxAttrs;
             ret->attrs = tmp;
         }
@@ -1348,18 +1609,63 @@ xmlRelaxNGEqualValidState(xmlRelaxNGValidCtxtPtr ctxt ATTRIBUTE_UNUSED,
 {
     int i;
 
-    if ((state1 == NULL) || (state2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[962]) {
+      if ((state1 == (void *) 0 || state2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 962\n");
+      else
+        fprintf(stderr, "reached bug index 962\n");
+    }
+    if ((!FIXREVERTER[962] && (state1 == (void *) 0 || state2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     if (state1 == state2)
         return (1);
     if (state1->node != state2->node)
         return (0);
     if (state1->seq != state2->seq)
         return (0);
-    if (state1->nbAttrLeft != state2->nbAttrLeft)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[963]) {
+      if ((state1 -> nbAttrLeft != state2 -> nbAttrLeft ) && !(0))
+        fprintf(stderr, "triggered bug index 963\n");
+      else
+        fprintf(stderr, "reached bug index 963\n");
+    }
+    if ((!FIXREVERTER[963] && (state1 -> nbAttrLeft != state2 -> nbAttrLeft ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
-    if (state1->nbAttrs != state2->nbAttrs)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[964]) {
+      if ((state1 -> nbAttrs != state2 -> nbAttrs ) && !(0))
+        fprintf(stderr, "triggered bug index 964\n");
+      else
+        fprintf(stderr, "reached bug index 964\n");
+    }
+    if ((!FIXREVERTER[964] && (state1 -> nbAttrs != state2 -> nbAttrs ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     if (state1->endvalue != state2->endvalue)
         return (0);
     if ((state1->value != state2->value) &&
@@ -1382,8 +1688,23 @@ static void
 xmlRelaxNGFreeValidState(xmlRelaxNGValidCtxtPtr ctxt,
                          xmlRelaxNGValidStatePtr state)
 {
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[965]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 965\n");
+      else
+        fprintf(stderr, "reached bug index 965\n");
+    }
+    if ((!FIXREVERTER[965] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((ctxt != NULL) && (ctxt->freeState == NULL)) {
         ctxt->freeState = xmlRelaxNGNewStates(ctxt, 40);
@@ -1775,10 +2096,25 @@ xmlRelaxNGValidErrorPush(xmlRelaxNGValidCtxtPtr ctxt,
             (xmlRelaxNGValidErrorPtr) xmlMalloc(ctxt->errMax *
                                                 sizeof
                                                 (xmlRelaxNGValidError));
-        if (ctxt->errTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[975]) {
+          if ((ctxt -> errTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 975\n");
+          else
+            fprintf(stderr, "reached bug index 975\n");
+        }
+        if ((!FIXREVERTER[975] && (ctxt -> errTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "pushing error\n");
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->err = NULL;
     }
     if (ctxt->errNr >= ctxt->errMax) {
@@ -1788,10 +2124,25 @@ xmlRelaxNGValidErrorPush(xmlRelaxNGValidCtxtPtr ctxt,
                                                  ctxt->errMax *
                                                  sizeof
                                                  (xmlRelaxNGValidError));
-        if (ctxt->errTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[976]) {
+          if ((ctxt -> errTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 976\n");
+          else
+            fprintf(stderr, "reached bug index 976\n");
+        }
+        if ((!FIXREVERTER[976] && (ctxt -> errTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "pushing error\n");
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->err = &ctxt->errTab[ctxt->errNr - 1];
     }
     if ((ctxt->err != NULL) && (ctxt->state != NULL) &&
@@ -1830,10 +2181,25 @@ xmlRelaxNGValidErrorPop(xmlRelaxNGValidCtxtPtr ctxt)
 {
     xmlRelaxNGValidErrorPtr cur;
 
-    if (ctxt->errNr <= 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[977]) {
+      if ((ctxt -> errNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 977\n");
+      else
+        fprintf(stderr, "reached bug index 977\n");
+    }
+    if ((!FIXREVERTER[977] && (ctxt -> errNr <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->err = NULL;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->errNr--;
     if (ctxt->errNr > 0)
         ctxt->err = &ctxt->errTab[ctxt->errNr - 1];
@@ -2089,10 +2455,40 @@ xmlRelaxNGGetErrorString(xmlRelaxNGValidErr err, const xmlChar * arg1,
 {
     char msg[1000];
 
-    if (arg1 == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[985]) {
+      if ((arg1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 985\n");
+      else
+        fprintf(stderr, "reached bug index 985\n");
+    }
+    if ((!FIXREVERTER[985] && (arg1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         arg1 = BAD_CAST "";
-    if (arg2 == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[986]) {
+      if ((arg2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 986\n");
+      else
+        fprintf(stderr, "reached bug index 986\n");
+    }
+    if ((!FIXREVERTER[986] && (arg2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         arg2 = BAD_CAST "";
+        #ifdef FRCOV
+        }
+        #endif
 
     msg[0] = 0;
     switch (err) {
@@ -2244,11 +2640,41 @@ xmlRelaxNGShowValidError(xmlRelaxNGValidCtxtPtr ctxt,
     xmlGenericError(xmlGenericErrorContext, "Show error %d\n", err);
 #endif
     msg = xmlRelaxNGGetErrorString(err, arg1, arg2);
-    if (msg == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[987]) {
+      if ((msg == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 987\n");
+      else
+        fprintf(stderr, "reached bug index 987\n");
+    }
+    if ((!FIXREVERTER[987] && (msg == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-
-    if (ctxt->errNo == XML_RELAXNG_OK)
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[988]) {
+      if ((ctxt -> errNo == XML_RELAXNG_OK  ) && !(0))
+        fprintf(stderr, "triggered bug index 988\n");
+      else
+        fprintf(stderr, "reached bug index 988\n");
+    }
+    if ((!FIXREVERTER[988] && (ctxt -> errNo == XML_RELAXNG_OK  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->errNo = err;
+        #ifdef FRCOV
+        }
+        #endif
     xmlRngVErr(ctxt, (child == NULL ? node : child), err,
                (const char *) msg, arg1, arg2);
     xmlFree(msg);
@@ -2284,8 +2710,23 @@ xmlRelaxNGPopErrors(xmlRelaxNGValidCtxtPtr ctxt, int level)
         }
     }
     ctxt->errNr = level;
-    if (ctxt->errNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[989]) {
+      if ((ctxt -> errNr <= 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 989\n");
+      else
+        fprintf(stderr, "reached bug index 989\n");
+    }
+    if ((!FIXREVERTER[989] && (ctxt -> errNr <= 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->err = NULL;
+        #ifdef FRCOV
+        }
+        #endif
 }
 
 /**
@@ -2349,8 +2790,23 @@ xmlRelaxNGAddValidError(xmlRelaxNGValidCtxtPtr ctxt,
                         xmlRelaxNGValidErr err, const xmlChar * arg1,
                         const xmlChar * arg2, int dup)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[990]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 990\n");
+      else
+        fprintf(stderr, "reached bug index 990\n");
+    }
+    if ((!FIXREVERTER[990] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->flags & FLAGS_NOERROR)
         return;
 
@@ -2413,13 +2869,43 @@ xmlRelaxNGSchemaTypeHave(void *data ATTRIBUTE_UNUSED, const xmlChar * type)
 {
     xmlSchemaTypePtr typ;
 
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[991]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 991\n");
+      else
+        fprintf(stderr, "reached bug index 991\n");
+    }
+    if ((!FIXREVERTER[991] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[992]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 992\n");
+      else
+        fprintf(stderr, "reached bug index 992\n");
+    }
+    if ((!FIXREVERTER[992] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     return (1);
 }
 
@@ -2444,13 +2930,43 @@ xmlRelaxNGSchemaTypeCheck(void *data ATTRIBUTE_UNUSED,
     xmlSchemaTypePtr typ;
     int ret;
 
-    if ((type == NULL) || (value == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[993]) {
+      if ((type == (void *) 0 || value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 993\n");
+      else
+        fprintf(stderr, "reached bug index 993\n");
+    }
+    if ((!FIXREVERTER[993] && (type == (void *) 0 || value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[994]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 994\n");
+      else
+        fprintf(stderr, "reached bug index 994\n");
+    }
+    if ((!FIXREVERTER[994] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     ret = xmlSchemaValPredefTypeNode(typ, value,
                                      (xmlSchemaValPtr *) result, node);
     if (ret == 2)               /* special ID error code */
@@ -2485,17 +3001,62 @@ xmlRelaxNGSchemaFacetCheck(void *data ATTRIBUTE_UNUSED,
     xmlSchemaTypePtr typ;
     int ret;
 
-    if ((type == NULL) || (strval == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[998]) {
+      if ((type == (void *) 0 || strval == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 998\n");
+      else
+        fprintf(stderr, "reached bug index 998\n");
+    }
+    if ((!FIXREVERTER[998] && (type == (void *) 0 || strval == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[999]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 999\n");
+      else
+        fprintf(stderr, "reached bug index 999\n");
+    }
+    if ((!FIXREVERTER[999] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     facet = xmlSchemaNewFacet();
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1000]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1000\n");
+      else
+        fprintf(stderr, "reached bug index 1000\n");
+    }
+    if ((!FIXREVERTER[1000] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (xmlStrEqual(facetname, BAD_CAST "minInclusive")) {
         facet->type = XML_SCHEMA_FACET_MININCLUSIVE;
@@ -2577,19 +3138,64 @@ xmlRelaxNGSchemaTypeCompare(void *data ATTRIBUTE_UNUSED,
     xmlSchemaTypePtr typ;
     xmlSchemaValPtr res1 = NULL, res2 = NULL;
 
-    if ((type == NULL) || (value1 == NULL) || (value2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1003]) {
+      if ((type == (void *) 0 || value1 == (void *) 0 || value2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1003\n");
+      else
+        fprintf(stderr, "reached bug index 1003\n");
+    }
+    if ((!FIXREVERTER[1003] && (type == (void *) 0 || value1 == (void *) 0 || value2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1004]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1004\n");
+      else
+        fprintf(stderr, "reached bug index 1004\n");
+    }
+    if ((!FIXREVERTER[1004] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (comp1 == NULL) {
         ret = xmlSchemaValPredefTypeNode(typ, value1, &res1, ctxt1);
         if (ret != 0)
             return (-1);
-        if (res1 == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1006]) {
+          if ((res1 == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1006\n");
+          else
+            fprintf(stderr, "reached bug index 1006\n");
+        }
+        if ((!FIXREVERTER[1006] && (res1 == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (-1);
+            #ifdef FRCOV
+            }
+            #endif
     } else {
         res1 = (xmlSchemaValPtr) comp1;
     }
@@ -2624,8 +3230,23 @@ static int
 xmlRelaxNGDefaultTypeHave(void *data ATTRIBUTE_UNUSED,
                           const xmlChar * type)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1009]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1009\n");
+      else
+        fprintf(stderr, "reached bug index 1009\n");
+    }
+    if ((!FIXREVERTER[1009] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (xmlStrEqual(type, BAD_CAST "string"))
         return (1);
     if (xmlStrEqual(type, BAD_CAST "token"))
@@ -2652,8 +3273,23 @@ xmlRelaxNGDefaultTypeCheck(void *data ATTRIBUTE_UNUSED,
                            void **result ATTRIBUTE_UNUSED,
                            xmlNodePtr node ATTRIBUTE_UNUSED)
 {
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1010]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1010\n");
+      else
+        fprintf(stderr, "reached bug index 1010\n");
+    }
+    if ((!FIXREVERTER[1010] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (xmlStrEqual(type, BAD_CAST "string"))
         return (1);
     if (xmlStrEqual(type, BAD_CAST "token")) {
@@ -3444,8 +4080,23 @@ xmlRelaxNGIsNullable(xmlRelaxNGDefinePtr define)
 static int
 xmlRelaxNGIsBlank(xmlChar * str)
 {
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1033]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1033\n");
+      else
+        fprintf(stderr, "reached bug index 1033\n");
+    }
+    if ((!FIXREVERTER[1033] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
     while (*str != 0) {
         if (!(IS_BLANK_CH(*str)))
             return (0);
@@ -7932,32 +8583,111 @@ xmlRelaxNGValidateCompiledCallback(xmlRegExecCtxtPtr exec ATTRIBUTE_UNUSED,
     xmlGenericError(xmlGenericErrorContext,
                     "Compiled callback for: '%s'\n", token);
 #endif
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1159]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1159\n");
+      else
+        fprintf(stderr, "reached bug index 1159\n");
+    }
+    if ((!FIXREVERTER[1159] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         fprintf(stderr, "callback on %s missing context\n", token);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (define == NULL) {
         if (token[0] == '#')
             return;
         fprintf(stderr, "callback on %s missing define\n", token);
-        if ((ctxt != NULL) && (ctxt->errNo == XML_RELAXNG_OK))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1160]) {
+          fprintf(stderr, "reached bug index 1160\n");
+        }
+        if ((FIXREVERTER[1160] && (ctxt != (void *) 0 )) || (!FIXREVERTER[1160] && (ctxt != (void *) 0 && ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (ctxt != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> errNo == XML_RELAXNG_OK  ))
+              fprintf(stderr, "triggered bug index 1160\n");
+            #endif
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }}
+            #endif
         return;
     }
     if ((ctxt == NULL) || (define == NULL)) {
         fprintf(stderr, "callback on %s missing info\n", token);
-        if ((ctxt != NULL) && (ctxt->errNo == XML_RELAXNG_OK))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1161]) {
+          fprintf(stderr, "reached bug index 1161\n");
+        }
+        if ((FIXREVERTER[1161] && (ctxt != (void *) 0 )) || (!FIXREVERTER[1161] && (ctxt != (void *) 0 && ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (ctxt != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> errNo == XML_RELAXNG_OK  ))
+              fprintf(stderr, "triggered bug index 1161\n");
+            #endif
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }}
+            #endif
         return;
     } else if (define->type != XML_RELAXNG_ELEMENT) {
         fprintf(stderr, "callback on %s define is not element\n", token);
-        if (ctxt->errNo == XML_RELAXNG_OK)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1162]) {
+          if ((ctxt -> errNo == XML_RELAXNG_OK  ) && !(0))
+            fprintf(stderr, "triggered bug index 1162\n");
+          else
+            fprintf(stderr, "reached bug index 1162\n");
+        }
+        if ((!FIXREVERTER[1162] && (ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }
+            #endif
         return;
     }
     ret = xmlRelaxNGValidateDefinition(ctxt, define);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1163]) {
+      if ((ret != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1163\n");
+      else
+        fprintf(stderr, "reached bug index 1163\n");
+    }
+    if ((!FIXREVERTER[1163] && (ret != 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->perr = ret;
+        #ifdef FRCOV
+        }
+        #endif
 }
 
 /**
@@ -7979,8 +8709,23 @@ xmlRelaxNGValidateCompiledContent(xmlRelaxNGValidCtxtPtr ctxt,
     int ret = 0;
     int oldperr;
 
-    if ((ctxt == NULL) || (regexp == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1164]) {
+      if ((ctxt == (void *) 0 || regexp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1164\n");
+      else
+        fprintf(stderr, "reached bug index 1164\n");
+    }
+    if ((!FIXREVERTER[1164] && (ctxt == (void *) 0 || regexp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     oldperr = ctxt->perr;
     exec = xmlRegNewExecCtxt(regexp,
                              xmlRelaxNGValidateCompiledCallback, ctxt);
@@ -8040,9 +8785,27 @@ xmlRelaxNGValidateCompiledContent(xmlRelaxNGValidCtxtPtr ctxt,
      * There might be content model errors outside of the pure
      * regexp validation, e.g. for attribute values.
      */
-    if ((ret == 0) && (ctxt->perr != 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1166]) {
+      fprintf(stderr, "reached bug index 1166\n");
+    }
+    if ((FIXREVERTER[1166] && (ret == 0 )) || (!FIXREVERTER[1166] && (ret == 0 && ctxt -> perr != 0 ))
+    #else
+    if (ret == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> perr != 0 ))
+        fprintf(stderr, "triggered bug index 1166\n");
+      #endif
+    
         ret = ctxt->perr;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->perr = oldperr;
     return (ret);
 }
@@ -8075,10 +8838,25 @@ xmlRelaxNGElemPush(xmlRelaxNGValidCtxtPtr ctxt, xmlRegExecCtxtPtr exec)
         ctxt->elemTab = (xmlRegExecCtxtPtr *) xmlMalloc(ctxt->elemMax *
                                                         sizeof
                                                         (xmlRegExecCtxtPtr));
-        if (ctxt->elemTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1167]) {
+          if ((ctxt -> elemTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1167\n");
+          else
+            fprintf(stderr, "reached bug index 1167\n");
+        }
+        if ((!FIXREVERTER[1167] && (ctxt -> elemTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "validating\n");
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     if (ctxt->elemNr >= ctxt->elemMax) {
         ctxt->elemMax *= 2;
@@ -8086,10 +8864,25 @@ xmlRelaxNGElemPush(xmlRelaxNGValidCtxtPtr ctxt, xmlRegExecCtxtPtr exec)
                                                          ctxt->elemMax *
                                                          sizeof
                                                          (xmlRegExecCtxtPtr));
-        if (ctxt->elemTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1168]) {
+          if ((ctxt -> elemTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1168\n");
+          else
+            fprintf(stderr, "reached bug index 1168\n");
+        }
+        if ((!FIXREVERTER[1168] && (ctxt -> elemTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt, "validating\n");
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     ctxt->elemTab[ctxt->elemNr++] = exec;
     ctxt->elem = exec;
@@ -8147,31 +8940,95 @@ xmlRelaxNGValidateProgressiveCallback(xmlRegExecCtxtPtr exec
     xmlGenericError(xmlGenericErrorContext,
                     "Progressive callback for: '%s'\n", token);
 #endif
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1170]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1170\n");
+      else
+        fprintf(stderr, "reached bug index 1170\n");
+    }
+    if ((!FIXREVERTER[1170] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         fprintf(stderr, "callback on %s missing context\n", token);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     node = ctxt->pnode;
     ctxt->pstate = 1;
     if (define == NULL) {
         if (token[0] == '#')
             return;
         fprintf(stderr, "callback on %s missing define\n", token);
-        if ((ctxt != NULL) && (ctxt->errNo == XML_RELAXNG_OK))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1171]) {
+          fprintf(stderr, "reached bug index 1171\n");
+        }
+        if ((FIXREVERTER[1171] && (ctxt != (void *) 0 )) || (!FIXREVERTER[1171] && (ctxt != (void *) 0 && ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (ctxt != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> errNo == XML_RELAXNG_OK  ))
+              fprintf(stderr, "triggered bug index 1171\n");
+            #endif
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }}
+            #endif
         ctxt->pstate = -1;
         return;
     }
     if ((ctxt == NULL) || (define == NULL)) {
         fprintf(stderr, "callback on %s missing info\n", token);
-        if ((ctxt != NULL) && (ctxt->errNo == XML_RELAXNG_OK))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1172]) {
+          fprintf(stderr, "reached bug index 1172\n");
+        }
+        if ((FIXREVERTER[1172] && (ctxt != (void *) 0 )) || (!FIXREVERTER[1172] && (ctxt != (void *) 0 && ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (ctxt != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> errNo == XML_RELAXNG_OK  ))
+              fprintf(stderr, "triggered bug index 1172\n");
+            #endif
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }}
+            #endif
         ctxt->pstate = -1;
         return;
     } else if (define->type != XML_RELAXNG_ELEMENT) {
         fprintf(stderr, "callback on %s define is not element\n", token);
-        if (ctxt->errNo == XML_RELAXNG_OK)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1173]) {
+          if ((ctxt -> errNo == XML_RELAXNG_OK  ) && !(0))
+            fprintf(stderr, "triggered bug index 1173\n");
+          else
+            fprintf(stderr, "reached bug index 1173\n");
+        }
+        if ((!FIXREVERTER[1173] && (ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }
+            #endif
         ctxt->pstate = -1;
         return;
     }
@@ -8182,7 +9039,19 @@ xmlRelaxNGValidateProgressiveCallback(xmlRegExecCtxtPtr exec
         ctxt->pstate = -1;
         return;
     }
-    if (define->contModel == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1174]) {
+      if ((define -> contModel == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1174\n");
+      else
+        fprintf(stderr, "reached bug index 1174\n");
+    }
+    if ((!FIXREVERTER[1174] && (define -> contModel == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
          * this node cannot be validated in a streamable fashion
          */
@@ -8195,22 +9064,55 @@ xmlRelaxNGValidateProgressiveCallback(xmlRegExecCtxtPtr exec
         ctxt->pdef = define;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     exec = xmlRegNewExecCtxt(define->contModel,
                              xmlRelaxNGValidateProgressiveCallback, ctxt);
-    if (exec == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1175]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1175\n");
+      else
+        fprintf(stderr, "reached bug index 1175\n");
+    }
+    if ((!FIXREVERTER[1175] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->pstate = -1;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlRelaxNGElemPush(ctxt, exec);
 
     /*
      * Validate the attributes part of the content.
      */
     state = xmlRelaxNGNewValidState(ctxt, node);
-    if (state == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1176]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1176\n");
+      else
+        fprintf(stderr, "reached bug index 1176\n");
+    }
+    if ((!FIXREVERTER[1176] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->pstate = -1;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     oldstate = ctxt->state;
     ctxt->state = state;
     if (define->attrs != NULL) {
@@ -8538,18 +9440,48 @@ xmlRelaxNGNormalize(xmlRelaxNGValidCtxtPtr ctxt, const xmlChar * str)
     const xmlChar *tmp;
     int len;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1187]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1187\n");
+      else
+        fprintf(stderr, "reached bug index 1187\n");
+    }
+    if ((!FIXREVERTER[1187] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     tmp = str;
     while (*tmp != 0)
         tmp++;
     len = tmp - str;
 
     ret = (xmlChar *) xmlMallocAtomic((len + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1188]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1188\n");
+      else
+        fprintf(stderr, "reached bug index 1188\n");
+    }
+    if ((!FIXREVERTER[1188] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt, "validating\n");
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     p = ret;
     while (IS_BLANK_CH(*str))
         str++;
@@ -8588,9 +9520,24 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
     void *result = NULL;
     xmlRelaxNGDefinePtr cur;
 
-    if ((define == NULL) || (define->data == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1189]) {
+      if ((define == (void *) 0 || define -> data == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1189\n");
+      else
+        fprintf(stderr, "reached bug index 1189\n");
+    }
+    if ((!FIXREVERTER[1189] && (define == (void *) 0 || define -> data == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     lib = (xmlRelaxNGTypeLibraryPtr) define->data;
     if (lib->check != NULL) {
         if ((define->attrs != NULL) &&
@@ -8604,8 +9551,25 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
         ret = -1;
     if (ret < 0) {
         VALID_ERR2(XML_RELAXNG_ERR_TYPE, define->name);
-        if ((result != NULL) && (lib != NULL) && (lib->freef != NULL))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1190]) {
+          fprintf(stderr, "reached bug index 1190\n");
+        }
+        if ((FIXREVERTER[1190] && (result != (void *) 0 && lib != (void *) 0 )) || (!FIXREVERTER[1190] && (result != (void *) 0 && lib != (void *) 0 && lib -> freef != (void *) 0 ))
+        #else
+        if (result != (void *) 0 && lib != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(lib -> freef != (void *) 0 ))
+              fprintf(stderr, "triggered bug index 1190\n");
+            #endif
             lib->freef(lib->data, result);
+            #ifdef FRCOV
+            }}
+            #endif
         return (-1);
     } else if (ret == 1) {
         ret = 0;
@@ -8620,12 +9584,42 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
         if (lib->facet != NULL) {
             tmp = lib->facet(lib->data, define->name, cur->name,
                              cur->value, value, result);
-            if (tmp != 0)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1191]) {
+              if ((tmp != 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1191\n");
+              else
+                fprintf(stderr, "reached bug index 1191\n");
+            }
+            if ((!FIXREVERTER[1191] && (tmp != 0 ))
+            #else
+            if (0
+            #endif
+            )
                 ret = -1;
+                #ifdef FRCOV
+                }
+                #endif
         }
         cur = cur->next;
     }
-    if ((ret == 0) && (define->content != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1192]) {
+      fprintf(stderr, "reached bug index 1192\n");
+    }
+    if ((FIXREVERTER[1192] && (ret == 0 )) || (!FIXREVERTER[1192] && (ret == 0 && define -> content != (void *) 0 ))
+    #else
+    if (ret == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(define -> content != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1192\n");
+      #endif
+    
         const xmlChar *oldvalue, *oldendvalue;
 
         oldvalue = ctxt->state->value;
@@ -8636,8 +9630,28 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
         ctxt->state->value = (xmlChar *) oldvalue;
         ctxt->state->endvalue = (xmlChar *) oldendvalue;
     }
-    if ((result != NULL) && (lib != NULL) && (lib->freef != NULL))
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1193]) {
+      fprintf(stderr, "reached bug index 1193\n");
+    }
+    if ((FIXREVERTER[1193] && (result != (void *) 0 && lib != (void *) 0 )) || (!FIXREVERTER[1193] && (result != (void *) 0 && lib != (void *) 0 && lib -> freef != (void *) 0 ))
+    #else
+    if (result != (void *) 0 && lib != (void *) 0 
+    #endif
+    )
+        
+        #ifdef FRCOV
+        {if (!(lib -> freef != (void *) 0 ))
+          fprintf(stderr, "triggered bug index 1193\n");
+        #endif
         lib->freef(lib->data, result);
+        #ifdef FRCOV
+        }}
+        #endif
     return (ret);
 }
 
@@ -8688,8 +9702,23 @@ xmlRelaxNGValidateValueList(xmlRelaxNGValidCtxtPtr ctxt,
 
     while (defines != NULL) {
         ret = xmlRelaxNGValidateValue(ctxt, defines);
-        if (ret != 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1194]) {
+          if ((ret != 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1194\n");
+          else
+            fprintf(stderr, "reached bug index 1194\n");
+        }
+        if ((!FIXREVERTER[1194] && (ret != 0 ))
+        #else
+        if (0
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
         defines = defines->next;
     }
     return (ret);
@@ -8789,9 +9818,24 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                 oldvalue = ctxt->state->value;
                 while (list != NULL) {
                     ret = xmlRelaxNGValidateValue(ctxt, list);
-                    if (ret == 0) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1195]) {
+                      if ((ret == 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1195\n");
+                      else
+                        fprintf(stderr, "reached bug index 1195\n");
+                    }
+                    if ((!FIXREVERTER[1195] && (ret == 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ctxt->state->value = oldvalue;
                     list = list->next;
                 }
@@ -8820,10 +9864,25 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                 if (val == NULL) {
                     val = xmlStrdup(BAD_CAST "");
                 }
-                if (val == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1196]) {
+                  if ((val == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1196\n");
+                  else
+                    fprintf(stderr, "reached bug index 1196\n");
+                }
+                if ((!FIXREVERTER[1196] && (val == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     VALID_ERR(XML_RELAXNG_ERR_NOSTATE);
                     return (-1);
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 cur = val;
                 while (*cur != 0) {
                     if (IS_BLANK_CH(*cur)) {
@@ -8854,7 +9913,19 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                     if (ctxt->state->value == ctxt->state->endvalue)
                         ctxt->state->value = NULL;
                     ret = xmlRelaxNGValidateValue(ctxt, list);
-                    if (ret != 0) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1197]) {
+                      if ((ret != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1197\n");
+                      else
+                        fprintf(stderr, "reached bug index 1197\n");
+                    }
+                    if ((!FIXREVERTER[1197] && (ret != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 #ifdef DEBUG_LIST
                         xmlGenericError(xmlGenericErrorContext,
                                         "Failed to validate value: '%s' with %d rule\n",
@@ -8862,6 +9933,9 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
 #endif
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
 #ifdef DEBUG_LIST
                     nb_values++;
 #endif
@@ -8881,9 +9955,24 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
             }
         case XML_RELAXNG_ONEORMORE:
             ret = xmlRelaxNGValidateValueList(ctxt, define->content);
-            if (ret != 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1198]) {
+              if ((ret != 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1198\n");
+              else
+                fprintf(stderr, "reached bug index 1198\n");
+            }
+            if ((!FIXREVERTER[1198] && (ret != 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
             /* no break on purpose */
         case XML_RELAXNG_ZEROORMORE:{
                 xmlChar *cur, *temp;
@@ -8902,11 +9991,26 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                     temp = cur;
                     ret =
                         xmlRelaxNGValidateValueList(ctxt, define->content);
-                    if (ret != 0) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1199]) {
+                      if ((ret != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1199\n");
+                      else
+                        fprintf(stderr, "reached bug index 1199\n");
+                    }
+                    if ((!FIXREVERTER[1199] && (ret != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         ctxt->state->value = temp;
                         ret = 0;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     cur = ctxt->state->value;
                 }
                 ctxt->flags = oldflags;
@@ -9001,8 +10105,23 @@ xmlRelaxNGValidateValueContent(xmlRelaxNGValidCtxtPtr ctxt,
 
     while (defines != NULL) {
         ret = xmlRelaxNGValidateValue(ctxt, defines);
-        if (ret != 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1200]) {
+          if ((ret != 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1200\n");
+          else
+            fprintf(stderr, "reached bug index 1200\n");
+        }
+        if ((!FIXREVERTER[1200] && (ret != 0 ))
+        #else
+        if (0
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
         defines = defines->next;
     }
     return (ret);
@@ -9038,8 +10157,23 @@ xmlRelaxNGAttributeMatch(xmlRelaxNGValidCtxtPtr ctxt,
                 return (0);
         }
     }
-    if (define->nameClass == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1201]) {
+      if ((define -> nameClass == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1201\n");
+      else
+        fprintf(stderr, "reached bug index 1201\n");
+    }
+    if ((!FIXREVERTER[1201] && (define -> nameClass == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
     define = define->nameClass;
     if (define->type == XML_RELAXNG_EXCEPT) {
         xmlRelaxNGDefinePtr list;
@@ -9244,8 +10378,23 @@ xmlRelaxNGNodeMatchesList(xmlNodePtr node, xmlRelaxNGDefinePtr * list)
     xmlRelaxNGDefinePtr cur;
     int i = 0, tmp;
 
-    if ((node == NULL) || (list == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1207]) {
+      if ((node == (void *) 0 || list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1207\n");
+      else
+        fprintf(stderr, "reached bug index 1207\n");
+    }
+    if ((!FIXREVERTER[1207] && (node == (void *) 0 || list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = list[i++];
     while (cur != NULL) {
@@ -9331,16 +10480,46 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
      * pertaining to each group
      */
     list = (xmlNodePtr *) xmlMalloc(nbgroups * sizeof(xmlNodePtr));
-    if (list == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1209]) {
+      if ((list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1209\n");
+      else
+        fprintf(stderr, "reached bug index 1209\n");
+    }
+    if ((!FIXREVERTER[1209] && (list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt, "validating\n");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(list, 0, nbgroups * sizeof(xmlNodePtr));
     lasts = (xmlNodePtr *) xmlMalloc(nbgroups * sizeof(xmlNodePtr));
-    if (lasts == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1210]) {
+      if ((lasts == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1210\n");
+      else
+        fprintf(stderr, "reached bug index 1210\n");
+    }
+    if ((!FIXREVERTER[1210] && (lasts == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt, "validating\n");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(lasts, 0, nbgroups * sizeof(xmlNodePtr));
 
     /*
@@ -9364,18 +10543,48 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
                 if (cur->ns != NULL) {
                     tmp = xmlHashLookup2(partitions->triage, cur->name,
                                          cur->ns->href);
-                    if (tmp == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1211]) {
+                      if ((tmp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1211\n");
+                      else
+                        fprintf(stderr, "reached bug index 1211\n");
+                    }
+                    if ((!FIXREVERTER[1211] && (tmp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         tmp = xmlHashLookup2(partitions->triage,
                                              BAD_CAST "#any",
                                              cur->ns->href);
+                                             #ifdef FRCOV
+                                             }
+                                             #endif
                 } else
                     tmp =
                         xmlHashLookup2(partitions->triage, cur->name,
                                        NULL);
-                if (tmp == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1212]) {
+                  if ((tmp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1212\n");
+                  else
+                    fprintf(stderr, "reached bug index 1212\n");
+                }
+                if ((!FIXREVERTER[1212] && (tmp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     tmp =
                         xmlHashLookup2(partitions->triage, BAD_CAST "#any",
                                        NULL);
+                                       #ifdef FRCOV
+                                       }
+                                       #endif
             }
 
             if (tmp == NULL) {
@@ -9391,8 +10600,23 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
         } else {
             for (i = 0; i < nbgroups; i++) {
                 group = partitions->groups[i];
-                if (group == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1213]) {
+                  if ((group == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1213\n");
+                  else
+                    fprintf(stderr, "reached bug index 1213\n");
+                }
+                if ((!FIXREVERTER[1213] && (group == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     continue;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 if (xmlRelaxNGNodeMatchesList(cur, group->defs))
                     break;
             }
@@ -9400,9 +10624,24 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
         /*
          * We break as soon as an element not matched is found
          */
-        if (i >= nbgroups) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1214]) {
+          if ((i >= nbgroups ) && !(0))
+            fprintf(stderr, "triggered bug index 1214\n");
+          else
+            fprintf(stderr, "reached bug index 1214\n");
+        }
+        if ((!FIXREVERTER[1214] && (i >= nbgroups ))
+        #else
+        if (0
+        #endif
+        ) {
             break;
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (lasts[i] != NULL) {
             lasts[i]->next = cur;
             lasts[i] = cur;
@@ -9425,10 +10664,25 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
     oldstate = ctxt->state;
     for (i = 0; i < nbgroups; i++) {
         ctxt->state = xmlRelaxNGCopyValidState(ctxt, oldstate);
-	if (ctxt->state == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1215]) {
+	  if ((ctxt -> state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1215\n");
+	  else
+	    fprintf(stderr, "reached bug index 1215\n");
+	}
+	if ((!FIXREVERTER[1215] && (ctxt -> state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ret = -1;
 	    break;
 	}
+	#ifdef FRCOV
+	}
+	#endif
         group = partitions->groups[i];
         if (lasts[i] != NULL) {
             last = lasts[i]->next;
@@ -9436,8 +10690,23 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
         }
         ctxt->state->seq = list[i];
         ret = xmlRelaxNGValidateDefinition(ctxt, group->rule);
-        if (ret != 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1216]) {
+          if ((ret != 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1216\n");
+          else
+            fprintf(stderr, "reached bug index 1216\n");
+        }
+        if ((!FIXREVERTER[1216] && (ret != 0 ))
+        #else
+        if (0
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
         if (ctxt->state != NULL) {
             cur = ctxt->state->seq;
             cur = xmlRelaxNGSkipIgnored(ctxt, cur);
@@ -9575,16 +10844,46 @@ xmlRelaxNGValidateDefinitionList(xmlRelaxNGValidCtxtPtr ctxt,
     int ret = 0, res;
 
 
-    if (defines == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1218]) {
+      if ((defines == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1218\n");
+      else
+        fprintf(stderr, "reached bug index 1218\n");
+    }
+    if ((!FIXREVERTER[1218] && (defines == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         VALID_ERR2(XML_RELAXNG_ERR_INTERNAL,
                    BAD_CAST "NULL definition list");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (defines != NULL) {
         if ((ctxt->state != NULL) || (ctxt->states != NULL)) {
             res = xmlRelaxNGValidateDefinition(ctxt, defines);
-            if (res < 0)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1219]) {
+              if ((res < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1219\n");
+              else
+                fprintf(stderr, "reached bug index 1219\n");
+            }
+            if ((!FIXREVERTER[1219] && (res < 0 ))
+            #else
+            if (0
+            #endif
+            )
                 ret = -1;
+                #ifdef FRCOV
+                }
+                #endif
         } else {
             VALID_ERR(XML_RELAXNG_ERR_NOSTATE);
             return (-1);
@@ -9637,8 +10936,23 @@ xmlRelaxNGElementMatch(xmlRelaxNGValidCtxtPtr ctxt,
         return (0);
     }
 
-    if (define->nameClass == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1220]) {
+      if ((define -> nameClass == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1220\n");
+      else
+        fprintf(stderr, "reached bug index 1220\n");
+    }
+    if ((!FIXREVERTER[1220] && (define -> nameClass == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
 
     define = define->nameClass;
     if (define->type == XML_RELAXNG_EXCEPT) {
@@ -9652,16 +10966,76 @@ xmlRelaxNGElementMatch(xmlRelaxNGValidCtxtPtr ctxt,
         list = define->content;
         while (list != NULL) {
             ret = xmlRelaxNGElementMatch(ctxt, list, elem);
-            if (ret == 1) {
-                if (ctxt != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1222]) {
+              if ((ret == 1 ) && !(0))
+                fprintf(stderr, "triggered bug index 1222\n");
+              else
+                fprintf(stderr, "reached bug index 1222\n");
+            }
+            if ((!FIXREVERTER[1222] && (ret == 1 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1221]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 1221\n");
+                  else
+                    fprintf(stderr, "reached bug index 1221\n");
+                }
+                if ((!FIXREVERTER[1221] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (0);
             }
-            if (ret < 0) {
-                if (ctxt != NULL)
+            #ifdef FRCOV
+            }
+            #endif
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1224]) {
+              if ((ret < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1224\n");
+              else
+                fprintf(stderr, "reached bug index 1224\n");
+            }
+            if ((!FIXREVERTER[1224] && (ret < 0 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1223]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 1223\n");
+                  else
+                    fprintf(stderr, "reached bug index 1223\n");
+                }
+                if ((!FIXREVERTER[1223] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             list = list->next;
         }
         ret = 1;
@@ -9679,16 +11053,76 @@ xmlRelaxNGElementMatch(xmlRelaxNGValidCtxtPtr ctxt,
         list = define->nameClass;
         while (list != NULL) {
             ret = xmlRelaxNGElementMatch(ctxt, list, elem);
-            if (ret == 1) {
-                if (ctxt != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1226]) {
+              if ((ret == 1 ) && !(0))
+                fprintf(stderr, "triggered bug index 1226\n");
+              else
+                fprintf(stderr, "reached bug index 1226\n");
+            }
+            if ((!FIXREVERTER[1226] && (ret == 1 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1225]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 1225\n");
+                  else
+                    fprintf(stderr, "reached bug index 1225\n");
+                }
+                if ((!FIXREVERTER[1225] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (1);
             }
-            if (ret < 0) {
-                if (ctxt != NULL)
+            #ifdef FRCOV
+            }
+            #endif
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1228]) {
+              if ((ret < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1228\n");
+              else
+                fprintf(stderr, "reached bug index 1228\n");
+            }
+            if ((!FIXREVERTER[1228] && (ret < 0 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1227]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 1227\n");
+                  else
+                    fprintf(stderr, "reached bug index 1227\n");
+                }
+                if ((!FIXREVERTER[1227] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             list = list->next;
         }
         if (ctxt != NULL) {
@@ -9735,8 +11169,23 @@ xmlRelaxNGBestState(xmlRelaxNGValidCtxtPtr ctxt)
 
     for (i = 0; i < ctxt->states->nbState; i++) {
         state = ctxt->states->tabState[i];
-        if (state == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1229]) {
+          if ((state == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1229\n");
+          else
+            fprintf(stderr, "reached bug index 1229\n");
+        }
+        if ((!FIXREVERTER[1229] && (state == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             continue;
+            #ifdef FRCOV
+            }
+            #endif
         if (state->seq != NULL) {
             if ((best == -1) || (value > 100000)) {
                 value = 100000;
@@ -9834,10 +11283,25 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
     int ret = 0, i, tmp, oldflags, errNr;
     xmlRelaxNGValidStatePtr oldstate = NULL, state;
 
-    if (define == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1230]) {
+      if ((define == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1230\n");
+      else
+        fprintf(stderr, "reached bug index 1230\n");
+    }
+    if ((!FIXREVERTER[1230] && (define == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         VALID_ERR(XML_RELAXNG_ERR_NODEFINE);
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (ctxt->state != NULL) {
         node = ctxt->state->seq;
@@ -9916,12 +11380,27 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
             }
 
             ret = xmlRelaxNGElementMatch(ctxt, define, node);
-            if (ret <= 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1231]) {
+              if ((ret <= 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1231\n");
+              else
+                fprintf(stderr, "reached bug index 1231\n");
+            }
+            if ((!FIXREVERTER[1231] && (ret <= 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 ret = -1;
                 if ((ctxt->flags & FLAGS_IGNORABLE) == 0)
                     xmlRelaxNGDumpValidError(ctxt);
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
             ret = 0;
             if (ctxt->errNr != 0) {
                 if (ctxt->errNr > errNr)
@@ -9942,12 +11421,27 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 ctxt->flags -= FLAGS_MIXED_CONTENT;
             }
             state = xmlRelaxNGNewValidState(ctxt, node);
-            if (state == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1232]) {
+              if ((state == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1232\n");
+              else
+                fprintf(stderr, "reached bug index 1232\n");
+            }
+            if ((!FIXREVERTER[1232] && (state == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 ret = -1;
                 if ((ctxt->flags & FLAGS_IGNORABLE) == 0)
                     xmlRelaxNGDumpValidError(ctxt);
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             oldstate = ctxt->state;
             ctxt->state = state;
@@ -9980,8 +11474,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                                 "Validating content of '%s' : %d\n",
                                 define->name, tmp);
 #endif
-                if (tmp != 0)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1233]) {
+                  if ((tmp != 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1233\n");
+                  else
+                    fprintf(stderr, "reached bug index 1233\n");
+                }
+                if ((!FIXREVERTER[1233] && (tmp != 0 ))
+                #else
+                if (0
+                #endif
+                )
                     ret = -1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 if (ctxt->states != NULL) {
                     tmp = -1;
@@ -10017,8 +11526,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                     state = ctxt->state;
 		    if (ctxt->state != NULL)
 			ctxt->state->seq = nseq;
-                    if (ret == 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1234]) {
+                      if ((ret == 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1234\n");
+                      else
+                        fprintf(stderr, "reached bug index 1234\n");
+                    }
+                    if ((!FIXREVERTER[1234] && (ret == 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         ret = xmlRelaxNGValidateElementEnd(ctxt, 1);
+                        #ifdef FRCOV
+                        }
+                        #endif
                     xmlRelaxNGFreeValidState(ctxt, state);
                 }
             } else {
@@ -10071,8 +11595,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                         ret = -1;
                 } else {
                     state = ctxt->state;
-                    if (ret == 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1235]) {
+                      if ((ret == 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1235\n");
+                      else
+                        fprintf(stderr, "reached bug index 1235\n");
+                    }
+                    if ((!FIXREVERTER[1235] && (ret == 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         ret = xmlRelaxNGValidateElementEnd(ctxt, 1);
+                        #ifdef FRCOV
+                        }
+                        #endif
                     xmlRelaxNGFreeValidState(ctxt, state);
                 }
             }
@@ -10081,8 +11620,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
             }
             ctxt->flags = oldflags;
             ctxt->state = oldstate;
-            if (oldstate != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1236]) {
+              if ((oldstate != (void *) 0  ) && !(0))
+                fprintf(stderr, "triggered bug index 1236\n");
+              else
+                fprintf(stderr, "reached bug index 1236\n");
+            }
+            if ((!FIXREVERTER[1236] && (oldstate != (void *) 0  ))
+            #else
+            if (0
+            #endif
+            )
                 oldstate->seq = xmlRelaxNGSkipIgnored(ctxt, node->next);
+                #ifdef FRCOV
+                }
+                #endif
             if (ret != 0) {
                 if ((ctxt->flags & FLAGS_IGNORABLE) == 0) {
                     xmlRelaxNGDumpValidError(ctxt);
@@ -10156,9 +11710,24 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
         case XML_RELAXNG_ONEORMORE:
             errNr = ctxt->errNr;
             ret = xmlRelaxNGValidateDefinitionList(ctxt, define->content);
-            if (ret != 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1237]) {
+              if ((ret != 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1237\n");
+              else
+                fprintf(stderr, "reached bug index 1237\n");
+            }
+            if ((!FIXREVERTER[1237] && (ret != 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
             if (ctxt->errNr > errNr)
                 xmlRelaxNGPopErrors(ctxt, errNr);
             /* no break on purpose */
@@ -10169,10 +11738,25 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
 
                 errNr = ctxt->errNr;
                 res = xmlRelaxNGNewStates(ctxt, 1);
-                if (res == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1238]) {
+                  if ((res == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1238\n");
+                  else
+                    fprintf(stderr, "reached bug index 1238\n");
+                }
+                if ((!FIXREVERTER[1238] && (res == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     ret = -1;
                     break;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 /*
                  * All the input states are also exit states
                  */
@@ -10277,10 +11861,25 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                                 xmlRelaxNGNewStates(ctxt,
                                                     res->nbState - base);
 			        states = ctxt->states;
-				if (states == NULL) {
+				
+				#ifdef FRCOV
+				{if (FIXREVERTER[1243]) {
+				  if ((states == (void *) 0 ) && !(0))
+				    fprintf(stderr, "triggered bug index 1243\n");
+				  else
+				    fprintf(stderr, "reached bug index 1243\n");
+				}
+				if ((!FIXREVERTER[1243] && (states == (void *) 0 ))
+				#else
+				if (0
+				#endif
+				) {
 				    progress = 0;
 				    break;
 				}
+				#ifdef FRCOV
+				}
+				#endif
                             }
                             states->nbState = 0;
                             for (i = base; i < res->nbState; i++)
@@ -10335,17 +11934,47 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                         if (node->ns != NULL) {
                             list = xmlHashLookup2(triage, node->name,
                                                   node->ns->href);
-                            if (list == NULL)
+                            
+                            #ifdef FRCOV
+                            {if (FIXREVERTER[1244]) {
+                              if ((list == (void *) 0 ) && !(0))
+                                fprintf(stderr, "triggered bug index 1244\n");
+                              else
+                                fprintf(stderr, "reached bug index 1244\n");
+                            }
+                            if ((!FIXREVERTER[1244] && (list == (void *) 0 ))
+                            #else
+                            if (0
+                            #endif
+                            )
                                 list =
                                     xmlHashLookup2(triage, BAD_CAST "#any",
                                                    node->ns->href);
+                                                   #ifdef FRCOV
+                                                   }
+                                                   #endif
                         } else
                             list =
                                 xmlHashLookup2(triage, node->name, NULL);
-                        if (list == NULL)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1245]) {
+                          if ((list == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1245\n");
+                          else
+                            fprintf(stderr, "reached bug index 1245\n");
+                        }
+                        if ((!FIXREVERTER[1245] && (list == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             list =
                                 xmlHashLookup2(triage, BAD_CAST "#any",
                                                NULL);
+                                               #ifdef FRCOV
+                                               }
+                                               #endif
                     }
                     if (list == NULL) {
                         ret = -1;
@@ -10447,11 +12076,26 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 }
                 if (content == NULL) {
                     content = xmlStrdup(BAD_CAST "");
-                    if (content == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1246]) {
+                      if ((content == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1246\n");
+                      else
+                        fprintf(stderr, "reached bug index 1246\n");
+                    }
+                    if ((!FIXREVERTER[1246] && (content == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlRngVErrMemory(ctxt, "validating\n");
                         ret = -1;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 ret = xmlRelaxNGValidateDatatype(ctxt, content, define,
                                                  ctxt->state->seq);
@@ -10490,11 +12134,26 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 }
                 if (content == NULL) {
                     content = xmlStrdup(BAD_CAST "");
-                    if (content == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1247]) {
+                      if ((content == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1247\n");
+                      else
+                        fprintf(stderr, "reached bug index 1247\n");
+                    }
+                    if ((!FIXREVERTER[1247] && (content == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlRngVErrMemory(ctxt, "validating\n");
                         ret = -1;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 oldvalue = ctxt->state->value;
                 ctxt->state->value = content;
@@ -10541,11 +12200,26 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 }
                 if (content == NULL) {
                     content = xmlStrdup(BAD_CAST "");
-                    if (content == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1248]) {
+                      if ((content == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1248\n");
+                      else
+                        fprintf(stderr, "reached bug index 1248\n");
+                    }
+                    if ((!FIXREVERTER[1248] && (content == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlRngVErrMemory(ctxt, "validating\n");
                         ret = -1;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 len = xmlStrlen(content);
                 oldvalue = ctxt->state->value;
@@ -10557,9 +12231,27 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 ctxt->state->endvalue = oldendvalue;
                 if (ret == -1) {
                     VALID_ERR(XML_RELAXNG_ERR_LIST);
-                } else if ((ret == 0) && (node != NULL)) {
+                } else 
+                #ifdef FRCOV
+                {if (FIXREVERTER[1249]) {
+                  fprintf(stderr, "reached bug index 1249\n");
+                }
+                if ((FIXREVERTER[1249] && (ret == 0 )) || (!FIXREVERTER[1249] && (ret == 0 && node != (void *) 0 ))
+                #else
+                if (ret == 0 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(node != (void *) 0 ))
+                    fprintf(stderr, "triggered bug index 1249\n");
+                  #endif
+                
                     ctxt->state->seq = node->next;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 if (content != NULL)
                     xmlFree(content);
                 break;
@@ -10604,10 +12296,28 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
     /*
      * We should NOT have both ctxt->state and ctxt->states
      */
-    if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1250]) {
+      fprintf(stderr, "reached bug index 1250\n");
+    }
+    if ((FIXREVERTER[1250] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[1250] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+    #else
+    if (ctxt -> state != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> states != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1250\n");
+      #endif
+    
         TODO xmlRelaxNGFreeValidState(ctxt, ctxt->state);
         ctxt->state = NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((ctxt->states == NULL) || (ctxt->states->nbState == 1)) {
         if (ctxt->states != NULL) {
@@ -10616,10 +12326,28 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
             ctxt->states = NULL;
         }
         ret = xmlRelaxNGValidateState(ctxt, define);
-        if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1251]) {
+          fprintf(stderr, "reached bug index 1251\n");
+        }
+        if ((FIXREVERTER[1251] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[1251] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+        #else
+        if (ctxt -> state != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(ctxt -> states != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 1251\n");
+          #endif
+        
             TODO xmlRelaxNGFreeValidState(ctxt, ctxt->state);
             ctxt->state = NULL;
         }
+        #ifdef FRCOV
+        }
+        #endif
         if ((ctxt->states != NULL) && (ctxt->states->nbState == 1)) {
             ctxt->state = ctxt->states->tabState[0];
             xmlRelaxNGFreeStates(ctxt, ctxt->states);
@@ -10641,10 +12369,28 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
         /*
          * We should NOT have both ctxt->state and ctxt->states
          */
-        if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1252]) {
+          fprintf(stderr, "reached bug index 1252\n");
+        }
+        if ((FIXREVERTER[1252] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[1252] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+        #else
+        if (ctxt -> state != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(ctxt -> states != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 1252\n");
+          #endif
+        
             TODO xmlRelaxNGFreeValidState(ctxt, ctxt->state);
             ctxt->state = NULL;
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (ret == 0) {
             if (ctxt->states == NULL) {
                 if (res != NULL) {
@@ -10707,10 +12453,28 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
             ctxt->states = NULL;
         }
     }
-    if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1253]) {
+      fprintf(stderr, "reached bug index 1253\n");
+    }
+    if ((FIXREVERTER[1253] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[1253] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+    #else
+    if (ctxt -> state != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> states != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1253\n");
+      #endif
+    
         TODO xmlRelaxNGFreeValidState(ctxt, ctxt->state);
         ctxt->state = NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (ret);
 }
 
diff --git a/runsuite.c b/runsuite.c
index aaab13e1..3dd97f90 100644
--- a/runsuite.c
+++ b/runsuite.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * runsuite.c: C program to run libxml2 againts published testsuites
  *
diff --git a/runtest.c b/runtest.c
index 02fe09a6..76fc6325 100644
--- a/runtest.c
+++ b/runtest.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * runtest.c: C program to run libxml2 regression tests without
  *            requiring make or Python, and reducing platform dependancies
diff --git a/runxmlconf.c b/runxmlconf.c
index cef20f48..8e89301c 100644
--- a/runxmlconf.c
+++ b/runxmlconf.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * runsuite.c: C program to run libxml2 againts published testsuites
  *
diff --git a/testAutomata.c b/testAutomata.c
index 6c4de900..3ecdf02c 100644
--- a/testAutomata.c
+++ b/testAutomata.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testRegexp.c: simple module for testing regular expressions
  *
diff --git a/testC14N.c b/testC14N.c
index 86e58f27..5c9e4997 100644
--- a/testC14N.c
+++ b/testC14N.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * Canonical XML implementation test program
  * (http://www.w3.org/TR/2001/REC-xml-c14n-20010315)
diff --git a/testHTML.c b/testHTML.c
index 9b42778c..030f6533 100644
--- a/testHTML.c
+++ b/testHTML.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testHTML.c : a small tester program for HTML input.
  *
diff --git a/testModule.c b/testModule.c
index e399f5c0..bbb585b6 100644
--- a/testModule.c
+++ b/testModule.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testModule.c : a small tester program for xmlModule
  *
diff --git a/testReader.c b/testReader.c
index 8f8e26d5..292b8797 100644
--- a/testReader.c
+++ b/testReader.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testSAX.c : a small tester program for parsing using the SAX API.
  *
diff --git a/testRegexp.c b/testRegexp.c
index 21dac945..4e743e63 100644
--- a/testRegexp.c
+++ b/testRegexp.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testRegexp.c: simple module for testing regular expressions
  *
diff --git a/testRelax.c b/testRelax.c
index 8e94a7a8..52d0e443 100644
--- a/testRelax.c
+++ b/testRelax.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testRelax.c : a small tester program for RelaxNG validation
  *
diff --git a/testSAX.c b/testSAX.c
index 81c4b93d..29ada871 100644
--- a/testSAX.c
+++ b/testSAX.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testSAX.c : a small tester program for parsing using the SAX API.
  *
diff --git a/testSchemas.c b/testSchemas.c
index b98e6313..c552a8e0 100644
--- a/testSchemas.c
+++ b/testSchemas.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testSchemas.c : a small tester program for Schema validation
  *
diff --git a/testThreads.c b/testThreads.c
index bff53912..650cbd7f 100644
--- a/testThreads.c
+++ b/testThreads.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 #include "libxml.h"
 
 #include <stdlib.h>
diff --git a/testURI.c b/testURI.c
index d20989d4..c40581b4 100644
--- a/testURI.c
+++ b/testURI.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testURI.c : a small tester program for XML input.
  *
diff --git a/testXPath.c b/testXPath.c
index ebb9ff7b..a2c40607 100644
--- a/testXPath.c
+++ b/testXPath.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testXPath.c : a small tester program for XPath.
  *
diff --git a/testapi.c b/testapi.c
index 0367ffd4..b5de488c 100644
--- a/testapi.c
+++ b/testapi.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testapi.c: libxml2 API tester program.
  *
diff --git a/testchar.c b/testchar.c
index 0d087927..c4cc68c3 100644
--- a/testchar.c
+++ b/testchar.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /**
  * Test the UTF-8 decoding routines
  *
diff --git a/testdict.c b/testdict.c
index 4e8581f8..6be2a81f 100644
--- a/testdict.c
+++ b/testdict.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 #include <string.h>
 #include <libxml/parser.h>
 #include <libxml/dict.h>
diff --git a/testlimits.c b/testlimits.c
index 577f593c..1446f14a 100644
--- a/testlimits.c
+++ b/testlimits.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testlimits.c: C program to run libxml2 regression tests checking various
  *       limits in document size. Will consume a lot of RAM and CPU cycles
diff --git a/testrecurse.c b/testrecurse.c
index e5d5d1b3..12089b5e 100644
--- a/testrecurse.c
+++ b/testrecurse.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * testrecurse.c: C program to run libxml2 regression tests checking entities
  *            recursions
diff --git a/tree.c b/tree.c
index 307782cf..158101a5 100644
--- a/tree.c
+++ b/tree.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * tree.c : implementation of access function for an XML tree.
  *
@@ -219,18 +223,63 @@ xmlBuildQName(const xmlChar *ncname, const xmlChar *prefix,
     int lenn, lenp;
     xmlChar *ret;
 
-    if (ncname == NULL) return(NULL);
-    if (prefix == NULL) return((xmlChar *) ncname);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4836]) {
+      if ((ncname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4836\n");
+      else
+        fprintf(stderr, "reached bug index 4836\n");
+    }
+    if ((!FIXREVERTER[4836] && (ncname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4837]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4837\n");
+      else
+        fprintf(stderr, "reached bug index 4837\n");
+    }
+    if ((!FIXREVERTER[4837] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return((xmlChar *) ncname);
+    #ifdef FRCOV
+    }
+    #endif
 
     lenn = strlen((char *) ncname);
     lenp = strlen((char *) prefix);
 
     if ((memory == NULL) || (len < lenn + lenp + 2)) {
 	ret = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (ret == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4838]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4838\n");
+	  else
+	    fprintf(stderr, "reached bug index 4838\n");
+	}
+	if ((!FIXREVERTER[4838] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlTreeErrMemory("building QName");
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
 	ret = memory;
     }
@@ -263,9 +312,39 @@ xmlSplitQName2(const xmlChar *name, xmlChar **prefix) {
     int len = 0;
     xmlChar *ret = NULL;
 
-    if (prefix == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4839]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4839\n");
+      else
+        fprintf(stderr, "reached bug index 4839\n");
+    }
+    if ((!FIXREVERTER[4839] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     *prefix = NULL;
-    if (name == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4840]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4840\n");
+      else
+        fprintf(stderr, "reached bug index 4840\n");
+    }
+    if ((!FIXREVERTER[4840] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifndef XML_XML_NAMESPACE
     /* xml: prefix is not really a namespace */
@@ -294,7 +373,19 @@ xmlSplitQName2(const xmlChar *name, xmlChar **prefix) {
 	return(NULL);
     }
     ret = xmlStrdup(&name[len + 1]);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4841]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4841\n");
+      else
+        fprintf(stderr, "reached bug index 4841\n");
+    }
+    if ((!FIXREVERTER[4841] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("QName split");
 	if (*prefix != NULL) {
 	    xmlFree(*prefix);
@@ -302,6 +393,9 @@ xmlSplitQName2(const xmlChar *name, xmlChar **prefix) {
 	}
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(ret);
 }
@@ -322,8 +416,38 @@ const xmlChar *
 xmlSplitQName3(const xmlChar *name, int *len) {
     int l = 0;
 
-    if (name == NULL) return(NULL);
-    if (len == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4842]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4842\n");
+      else
+        fprintf(stderr, "reached bug index 4842\n");
+    }
+    if ((!FIXREVERTER[4842] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4843]) {
+      if ((len == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4843\n");
+      else
+        fprintf(stderr, "reached bug index 4843\n");
+    }
+    if ((!FIXREVERTER[4843] && (len == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /* nasty but valid */
     if (name[0] == ':')
@@ -368,8 +492,23 @@ xmlValidateNCName(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4844]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4844\n");
+      else
+        fprintf(stderr, "reached bug index 4844\n");
+    }
+    if ((!FIXREVERTER[4844] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * First quick algorithm for ASCII range
@@ -442,8 +581,23 @@ xmlValidateQName(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4846]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4846\n");
+      else
+        fprintf(stderr, "reached bug index 4846\n");
+    }
+    if ((!FIXREVERTER[4846] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * First quick algorithm for ASCII range
      */
@@ -540,8 +694,23 @@ xmlValidateName(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4848]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4848\n");
+      else
+        fprintf(stderr, "reached bug index 4848\n");
+    }
+    if ((!FIXREVERTER[4848] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * First quick algorithm for ASCII range
      */
@@ -609,8 +778,23 @@ xmlValidateNMToken(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4850]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4850\n");
+      else
+        fprintf(stderr, "reached bug index 4850\n");
+    }
+    if ((!FIXREVERTER[4850] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * First quick algorithm for ASCII range
      */
@@ -749,17 +933,62 @@ xmlNewNs(xmlNodePtr node, const xmlChar *href, const xmlChar *prefix) {
      * Allocate a new Namespace and fill the fields.
      */
     cur = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4852]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4852\n");
+      else
+        fprintf(stderr, "reached bug index 4852\n");
+    }
+    if ((!FIXREVERTER[4852] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building namespace");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNs));
     cur->type = XML_LOCAL_NAMESPACE;
 
-    if (href != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4853]) {
+      if ((href != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4853\n");
+      else
+        fprintf(stderr, "reached bug index 4853\n");
+    }
+    if ((!FIXREVERTER[4853] && (href != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->href = xmlStrdup(href);
-    if (prefix != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4854]) {
+      if ((prefix != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4854\n");
+      else
+        fprintf(stderr, "reached bug index 4854\n");
+    }
+    if ((!FIXREVERTER[4854] && (prefix != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->prefix = xmlStrdup(prefix);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Add it at the end to preserve parsing order ...
@@ -799,13 +1028,28 @@ xmlNewNs(xmlNodePtr node, const xmlChar *href, const xmlChar *prefix) {
  */
 void
 xmlSetNs(xmlNodePtr node, xmlNsPtr ns) {
-    if (node == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4855]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4855\n");
+      else
+        fprintf(stderr, "reached bug index 4855\n");
+    }
+    if ((!FIXREVERTER[4855] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlSetNs: node == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((node->type == XML_ELEMENT_NODE) ||
         (node->type == XML_ATTRIBUTE_NODE))
 	node->ns = ns;
@@ -819,13 +1063,28 @@ xmlSetNs(xmlNodePtr node, xmlNsPtr ns) {
  */
 void
 xmlFreeNs(xmlNsPtr cur) {
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4856]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4856\n");
+      else
+        fprintf(stderr, "reached bug index 4856\n");
+    }
+    if ((!FIXREVERTER[4856] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlFreeNs : ns == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (cur->href != NULL) xmlFree((char *) cur->href);
     if (cur->prefix != NULL) xmlFree((char *) cur->prefix);
     xmlFree(cur);
@@ -840,13 +1099,28 @@ xmlFreeNs(xmlNsPtr cur) {
 void
 xmlFreeNsList(xmlNsPtr cur) {
     xmlNsPtr next;
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4857]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4857\n");
+      else
+        fprintf(stderr, "reached bug index 4857\n");
+    }
+    if ((!FIXREVERTER[4857] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlFreeNsList : ns == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (cur != NULL) {
         next = cur->next;
         xmlFreeNs(cur);
@@ -885,21 +1159,96 @@ xmlNewDtd(xmlDocPtr doc, const xmlChar *name,
      * Allocate a new DTD and fill the fields.
      */
     cur = (xmlDtdPtr) xmlMalloc(sizeof(xmlDtd));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4858]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4858\n");
+      else
+        fprintf(stderr, "reached bug index 4858\n");
+    }
+    if ((!FIXREVERTER[4858] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building DTD");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0 , sizeof(xmlDtd));
     cur->type = XML_DTD_NODE;
 
-    if (name != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4859]) {
+      if ((name != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4859\n");
+      else
+        fprintf(stderr, "reached bug index 4859\n");
+    }
+    if ((!FIXREVERTER[4859] && (name != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->name = xmlStrdup(name);
-    if (ExternalID != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4860]) {
+      if ((ExternalID != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4860\n");
+      else
+        fprintf(stderr, "reached bug index 4860\n");
+    }
+    if ((!FIXREVERTER[4860] && (ExternalID != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->ExternalID = xmlStrdup(ExternalID);
-    if (SystemID != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4861]) {
+      if ((SystemID != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4861\n");
+      else
+        fprintf(stderr, "reached bug index 4861\n");
+    }
+    if ((!FIXREVERTER[4861] && (SystemID != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	cur->SystemID = xmlStrdup(SystemID);
-    if (doc != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4862]) {
+      if ((doc != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4862\n");
+      else
+        fprintf(stderr, "reached bug index 4862\n");
+    }
+    if ((!FIXREVERTER[4862] && (doc != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	doc->extSubset = cur;
+	#ifdef FRCOV
+	}
+	#endif
     cur->doc = doc;
 
     if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
@@ -919,8 +1268,23 @@ xmlDtdPtr
 xmlGetIntSubset(const xmlDoc *doc) {
     xmlNodePtr cur;
 
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4863]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4863\n");
+      else
+        fprintf(stderr, "reached bug index 4863\n");
+    }
+    if ((!FIXREVERTER[4863] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     cur = doc->children;
     while (cur != NULL) {
 	if (cur->type == XML_DTD_NODE)
@@ -959,20 +1323,50 @@ xmlCreateIntSubset(xmlDocPtr doc, const xmlChar *name,
      * Allocate a new DTD and fill the fields.
      */
     cur = (xmlDtdPtr) xmlMalloc(sizeof(xmlDtd));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4864]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4864\n");
+      else
+        fprintf(stderr, "reached bug index 4864\n");
+    }
+    if ((!FIXREVERTER[4864] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building internal subset");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlDtd));
     cur->type = XML_DTD_NODE;
 
     if (name != NULL) {
 	cur->name = xmlStrdup(name);
-	if (cur->name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4865]) {
+	  if ((cur -> name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4865\n");
+	  else
+	    fprintf(stderr, "reached bug index 4865\n");
+	}
+	if ((!FIXREVERTER[4865] && (cur -> name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlTreeErrMemory("building internal subset");
 	    xmlFree(cur);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     if (ExternalID != NULL) {
 	cur->ExternalID = xmlStrdup(ExternalID);
@@ -1098,10 +1492,40 @@ void
 xmlFreeDtd(xmlDtdPtr cur) {
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4866]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4866\n");
+      else
+        fprintf(stderr, "reached bug index 4866\n");
+    }
+    if ((!FIXREVERTER[4866] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return;
     }
-    if (cur->doc != NULL) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4867]) {
+      if ((cur -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4867\n");
+      else
+        fprintf(stderr, "reached bug index 4867\n");
+    }
+    if ((!FIXREVERTER[4867] && (cur -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
 	xmlDeregisterNodeDefaultValue((xmlNodePtr)cur);
@@ -1156,26 +1580,71 @@ xmlDocPtr
 xmlNewDoc(const xmlChar *version) {
     xmlDocPtr cur;
 
-    if (version == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4868]) {
+      if ((version == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4868\n");
+      else
+        fprintf(stderr, "reached bug index 4868\n");
+    }
+    if ((!FIXREVERTER[4868] && (version == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	version = (const xmlChar *) "1.0";
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Allocate a new document and fill the fields.
      */
     cur = (xmlDocPtr) xmlMalloc(sizeof(xmlDoc));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4869]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4869\n");
+      else
+        fprintf(stderr, "reached bug index 4869\n");
+    }
+    if ((!FIXREVERTER[4869] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building doc");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlDoc));
     cur->type = XML_DOCUMENT_NODE;
 
     cur->version = xmlStrdup(version);
-    if (cur->version == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4870]) {
+      if ((cur -> version == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4870\n");
+      else
+        fprintf(stderr, "reached bug index 4870\n");
+    }
+    if ((!FIXREVERTER[4870] && (cur -> version == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building doc");
 	xmlFree(cur);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur->standalone = -1;
     cur->compression = -1; /* not initialized */
     cur->doc = cur;
@@ -1204,13 +1673,28 @@ xmlFreeDoc(xmlDocPtr cur) {
     xmlDtdPtr extSubset, intSubset;
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4871]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4871\n");
+      else
+        fprintf(stderr, "reached bug index 4871\n");
+    }
+    if ((!FIXREVERTER[4871] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlFreeDoc : document == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef LIBXML_DEBUG_RUNTIME
 #ifdef LIBXML_DEBUG_ENABLED
     xmlDebugCheckDocument(stderr, cur);
@@ -1231,8 +1715,23 @@ xmlFreeDoc(xmlDocPtr cur) {
     cur->refs = NULL;
     extSubset = cur->extSubset;
     intSubset = cur->intSubset;
-    if (intSubset == extSubset)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4873]) {
+      if ((intSubset == extSubset ) && !(0))
+        fprintf(stderr, "triggered bug index 4873\n");
+      else
+        fprintf(stderr, "reached bug index 4873\n");
+    }
+    if ((!FIXREVERTER[4873] && (intSubset == extSubset ))
+    #else
+    if (0
+    #endif
+    )
 	extSubset = NULL;
+	#ifdef FRCOV
+	}
+	#endif
     if (extSubset != NULL) {
 	xmlUnlinkNode((xmlNodePtr) cur->extSubset);
 	cur->extSubset = NULL;
@@ -1275,10 +1774,40 @@ xmlStringLenGetNodeList(const xmlDoc *doc, const xmlChar *value, int len) {
     xmlEntityPtr ent;
     xmlBufPtr buf;
 
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4874]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4874\n");
+      else
+        fprintf(stderr, "reached bug index 4874\n");
+    }
+    if ((!FIXREVERTER[4874] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     buf = xmlBufCreateSize(0);
-    if (buf == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4875]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4875\n");
+      else
+        fprintf(stderr, "reached bug index 4875\n");
+    }
+    if ((!FIXREVERTER[4875] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     xmlBufSetAllocationScheme(buf, XML_BUFFER_ALLOC_HYBRID);
 
     q = cur;
@@ -1377,10 +1906,25 @@ xmlStringLenGetNodeList(const xmlDoc *doc, const xmlChar *value, int len) {
 			 */
 			if (!xmlBufIsEmpty(buf)) {
 			    node = xmlNewDocText(doc, NULL);
-			    if (node == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[4876]) {
+			      if ((node == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 4876\n");
+			      else
+			        fprintf(stderr, "reached bug index 4876\n");
+			    }
+			    if ((!FIXREVERTER[4876] && (node == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 				if (val != NULL) xmlFree(val);
 				goto out;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 			    node->content = xmlBufDetach(buf);
 
 			    if (last == NULL) {
@@ -1447,7 +1991,22 @@ xmlStringLenGetNodeList(const xmlDoc *doc, const xmlChar *value, int len) {
 
     if (!xmlBufIsEmpty(buf)) {
 	node = xmlNewDocText(doc, NULL);
-	if (node == NULL) goto out;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4877]) {
+	  if ((node == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4877\n");
+	  else
+	    fprintf(stderr, "reached bug index 4877\n");
+	}
+	if ((!FIXREVERTER[4877] && (node == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto out;
+	#ifdef FRCOV
+	}
+	#endif
 	node->content = xmlBufDetach(buf);
 
 	if (last == NULL) {
@@ -1483,10 +2042,40 @@ xmlStringGetNodeList(const xmlDoc *doc, const xmlChar *value) {
     xmlEntityPtr ent;
     xmlBufPtr buf;
 
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4878]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4878\n");
+      else
+        fprintf(stderr, "reached bug index 4878\n");
+    }
+    if ((!FIXREVERTER[4878] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     buf = xmlBufCreateSize(0);
-    if (buf == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4879]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4879\n");
+      else
+        fprintf(stderr, "reached bug index 4879\n");
+    }
+    if ((!FIXREVERTER[4879] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     xmlBufSetAllocationScheme(buf, XML_BUFFER_ALLOC_HYBRID);
 
     q = cur;
@@ -1669,8 +2258,23 @@ xmlNodeListGetString(xmlDocPtr doc, const xmlNode *list, int inLine)
     xmlEntityPtr ent;
     int attr;
 
-    if (list == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4880]) {
+      if ((list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4880\n");
+      else
+        fprintf(stderr, "reached bug index 4880\n");
+    }
+    if ((!FIXREVERTER[4880] && (list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if ((list->parent != NULL) && (list->parent->type == XML_ATTRIBUTE_NODE))
         attr = 1;
     else
@@ -1842,7 +2446,19 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
      * Allocate a new property and fill the fields.
      */
     cur = (xmlAttrPtr) xmlMalloc(sizeof(xmlAttr));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4882]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4882\n");
+      else
+        fprintf(stderr, "reached bug index 4882\n");
+    }
+    if ((!FIXREVERTER[4882] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if ((eatname == 1) &&
 	    ((node == NULL) || (node->doc == NULL) ||
 	     (!(xmlDictOwns(node->doc->dict, name)))))
@@ -1850,6 +2466,9 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
         xmlTreeErrMemory("building attribute");
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlAttr));
     cur->type = XML_ATTRIBUTE_NODE;
 
@@ -1874,16 +2493,46 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
         if(!xmlCheckUTF8(value)) {
             xmlTreeErr(XML_TREE_NOT_UTF8, (xmlNodePtr) doc,
                        NULL);
-            if (doc != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4883]) {
+              if ((doc != (void *) 0  ) && !(0))
+                fprintf(stderr, "triggered bug index 4883\n");
+              else
+                fprintf(stderr, "reached bug index 4883\n");
+            }
+            if ((!FIXREVERTER[4883] && (doc != (void *) 0  ))
+            #else
+            if (0
+            #endif
+            )
                 doc->encoding = xmlStrdup(BAD_CAST "ISO-8859-1");
+                #ifdef FRCOV
+                }
+                #endif
         }
         cur->children = xmlNewDocText(doc, value);
         cur->last = NULL;
         tmp = cur->children;
         while (tmp != NULL) {
             tmp->parent = (xmlNodePtr) cur;
-            if (tmp->next == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4884]) {
+              if ((tmp -> next == (void *) 0  ) && !(0))
+                fprintf(stderr, "triggered bug index 4884\n");
+              else
+                fprintf(stderr, "reached bug index 4884\n");
+            }
+            if ((!FIXREVERTER[4884] && (tmp -> next == (void *) 0  ))
+            #else
+            if (0
+            #endif
+            )
                 cur->last = tmp;
+                #ifdef FRCOV
+                }
+                #endif
             tmp = tmp->next;
         }
     }
@@ -1927,13 +2576,28 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
 xmlAttrPtr
 xmlNewProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value) {
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4885]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4885\n");
+      else
+        fprintf(stderr, "reached bug index 4885\n");
+    }
+    if ((!FIXREVERTER[4885] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewProp : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 	return xmlNewPropInternal(node, NULL, name, value, 0);
 }
@@ -1953,13 +2617,28 @@ xmlAttrPtr
 xmlNewNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name,
            const xmlChar *value) {
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4886]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4886\n");
+      else
+        fprintf(stderr, "reached bug index 4886\n");
+    }
+    if ((!FIXREVERTER[4886] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewNsProp : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return xmlNewPropInternal(node, ns, name, value, 0);
 }
@@ -1978,13 +2657,28 @@ xmlAttrPtr
 xmlNewNsPropEatName(xmlNodePtr node, xmlNsPtr ns, xmlChar *name,
            const xmlChar *value) {
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4887]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4887\n");
+      else
+        fprintf(stderr, "reached bug index 4887\n");
+    }
+    if ((!FIXREVERTER[4887] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewNsPropEatName : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return xmlNewPropInternal(node, ns, name, value, 1);
 }
@@ -2002,22 +2696,52 @@ xmlAttrPtr
 xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value) {
     xmlAttrPtr cur;
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4888]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4888\n");
+      else
+        fprintf(stderr, "reached bug index 4888\n");
+    }
+    if ((!FIXREVERTER[4888] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewDocProp : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Allocate a new property and fill the fields.
      */
     cur = (xmlAttrPtr) xmlMalloc(sizeof(xmlAttr));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4889]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4889\n");
+      else
+        fprintf(stderr, "reached bug index 4889\n");
+    }
+    if ((!FIXREVERTER[4889] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building attribute");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlAttr));
     cur->type = XML_ATTRIBUTE_NODE;
 
@@ -2035,8 +2759,23 @@ xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value) {
 	tmp = cur->children;
 	while (tmp != NULL) {
 	    tmp->parent = (xmlNodePtr) cur;
-	    if (tmp->next == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4890]) {
+	      if ((tmp -> next == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 4890\n");
+	      else
+	        fprintf(stderr, "reached bug index 4890\n");
+	    }
+	    if ((!FIXREVERTER[4890] && (tmp -> next == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		cur->last = tmp;
+		#ifdef FRCOV
+		}
+		#endif
 	    tmp = tmp->next;
 	}
     }
@@ -2055,7 +2794,22 @@ xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value) {
 void
 xmlFreePropList(xmlAttrPtr cur) {
     xmlAttrPtr next;
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4891]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4891\n");
+      else
+        fprintf(stderr, "reached bug index 4891\n");
+    }
+    if ((!FIXREVERTER[4891] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     while (cur != NULL) {
         next = cur->next;
         xmlFreeProp(cur);
@@ -2072,7 +2826,22 @@ xmlFreePropList(xmlAttrPtr cur) {
 void
 xmlFreeProp(xmlAttrPtr cur) {
     xmlDictPtr dict = NULL;
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4892]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4892\n");
+      else
+        fprintf(stderr, "reached bug index 4892\n");
+    }
+    if ((!FIXREVERTER[4892] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (cur->doc != NULL) dict = cur->doc->dict;
 
@@ -2100,20 +2869,50 @@ xmlFreeProp(xmlAttrPtr cur) {
 int
 xmlRemoveProp(xmlAttrPtr cur) {
     xmlAttrPtr tmp;
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4894]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4894\n");
+      else
+        fprintf(stderr, "reached bug index 4894\n");
+    }
+    if ((!FIXREVERTER[4894] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlRemoveProp : cur == NULL\n");
 #endif
 	return(-1);
     }
-    if (cur->parent == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4895]) {
+      if ((cur -> parent == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4895\n");
+      else
+        fprintf(stderr, "reached bug index 4895\n");
+    }
+    if ((!FIXREVERTER[4895] && (cur -> parent == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlRemoveProp : cur->parent == NULL\n");
 #endif
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     tmp = cur->parent->properties;
     if (tmp == cur) {
         cur->parent->properties = cur->next;
@@ -2152,22 +2951,52 @@ xmlNodePtr
 xmlNewDocPI(xmlDocPtr doc, const xmlChar *name, const xmlChar *content) {
     xmlNodePtr cur;
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4896]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4896\n");
+      else
+        fprintf(stderr, "reached bug index 4896\n");
+    }
+    if ((!FIXREVERTER[4896] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewPI : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4897]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4897\n");
+      else
+        fprintf(stderr, "reached bug index 4897\n");
+    }
+    if ((!FIXREVERTER[4897] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building PI");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_PI_NODE;
 
@@ -2214,22 +3043,52 @@ xmlNodePtr
 xmlNewNode(xmlNsPtr ns, const xmlChar *name) {
     xmlNodePtr cur;
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4898]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4898\n");
+      else
+        fprintf(stderr, "reached bug index 4898\n");
+    }
+    if ((!FIXREVERTER[4898] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewNode : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4899]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4899\n");
+      else
+        fprintf(stderr, "reached bug index 4899\n");
+    }
+    if ((!FIXREVERTER[4899] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building node");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_ELEMENT_NODE;
 
@@ -2256,23 +3115,53 @@ xmlNodePtr
 xmlNewNodeEatName(xmlNsPtr ns, xmlChar *name) {
     xmlNodePtr cur;
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4900]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4900\n");
+      else
+        fprintf(stderr, "reached bug index 4900\n");
+    }
+    if ((!FIXREVERTER[4900] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNewNode : name == NULL\n");
 #endif
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4901]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4901\n");
+      else
+        fprintf(stderr, "reached bug index 4901\n");
+    }
+    if ((!FIXREVERTER[4901] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building node");
 	/* we can't check here that name comes from the doc dictionnary */
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_ELEMENT_NODE;
 
@@ -2432,10 +3321,25 @@ xmlNewText(const xmlChar *content) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4903]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4903\n");
+      else
+        fprintf(stderr, "reached bug index 4903\n");
+    }
+    if ((!FIXREVERTER[4903] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building text");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_TEXT_NODE;
 
@@ -2543,17 +3447,47 @@ xmlNodePtr
 xmlNewCharRef(xmlDocPtr doc, const xmlChar *name) {
     xmlNodePtr cur;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4907]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4907\n");
+      else
+        fprintf(stderr, "reached bug index 4907\n");
+    }
+    if ((!FIXREVERTER[4907] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4908]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4908\n");
+      else
+        fprintf(stderr, "reached bug index 4908\n");
+    }
+    if ((!FIXREVERTER[4908] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building character reference");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_ENTITY_REF_NODE;
 
@@ -2587,17 +3521,47 @@ xmlNewReference(const xmlDoc *doc, const xmlChar *name) {
     xmlNodePtr cur;
     xmlEntityPtr ent;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4909]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4909\n");
+      else
+        fprintf(stderr, "reached bug index 4909\n");
+    }
+    if ((!FIXREVERTER[4909] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4910]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4910\n");
+      else
+        fprintf(stderr, "reached bug index 4910\n");
+    }
+    if ((!FIXREVERTER[4910] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building reference");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_ENTITY_REF_NODE;
 
@@ -2643,7 +3607,22 @@ xmlNewDocText(const xmlDoc *doc, const xmlChar *content) {
     xmlNodePtr cur;
 
     cur = xmlNewText(content);
-    if (cur != NULL) cur->doc = (xmlDoc *)doc;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4911]) {
+      if ((cur != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4911\n");
+      else
+        fprintf(stderr, "reached bug index 4911\n");
+    }
+    if ((!FIXREVERTER[4911] && (cur != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    ) cur->doc = (xmlDoc *)doc;
+    #ifdef FRCOV
+    }
+    #endif
     return(cur);
 }
 
@@ -2663,10 +3642,25 @@ xmlNewTextLen(const xmlChar *content, int len) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4912]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4912\n");
+      else
+        fprintf(stderr, "reached bug index 4912\n");
+    }
+    if ((!FIXREVERTER[4912] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building text");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_TEXT_NODE;
 
@@ -2714,10 +3708,25 @@ xmlNewComment(const xmlChar *content) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4914]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4914\n");
+      else
+        fprintf(stderr, "reached bug index 4914\n");
+    }
+    if ((!FIXREVERTER[4914] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building comment");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_COMMENT_NODE;
 
@@ -2748,10 +3757,25 @@ xmlNewCDataBlock(xmlDocPtr doc, const xmlChar *content, int len) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4915]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4915\n");
+      else
+        fprintf(stderr, "reached bug index 4915\n");
+    }
+    if ((!FIXREVERTER[4915] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("building CDATA");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_CDATA_SECTION_NODE;
     cur->doc = doc;
@@ -2778,7 +3802,22 @@ xmlNewDocComment(xmlDocPtr doc, const xmlChar *content) {
     xmlNodePtr cur;
 
     cur = xmlNewComment(content);
-    if (cur != NULL) cur->doc = doc;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4916]) {
+      if ((cur != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4916\n");
+      else
+        fprintf(stderr, "reached bug index 4916\n");
+    }
+    if ((!FIXREVERTER[4916] && (cur != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    ) cur->doc = doc;
+    #ifdef FRCOV
+    }
+    #endif
     return(cur);
 }
 
@@ -3190,8 +4229,23 @@ xmlAddSibling(xmlNodePtr cur, xmlNodePtr elem) {
     elem->next = NULL;
     elem->parent = parent;
     cur->next = elem;
-    if (parent != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4920]) {
+      if ((parent != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4920\n");
+      else
+        fprintf(stderr, "reached bug index 4920\n");
+    }
+    if ((!FIXREVERTER[4920] && (parent != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	parent->last = elem;
+	#ifdef FRCOV
+	}
+	#endif
 
     return(elem);
 }
@@ -3251,10 +4305,25 @@ xmlAddChildList(xmlNodePtr parent, xmlNodePtr cur) {
 	    /*
 	     * if it's the only child, nothing more to be done.
 	     */
-	    if (cur->next == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4921]) {
+	      if ((cur -> next == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4921\n");
+	      else
+	        fprintf(stderr, "reached bug index 4921\n");
+	    }
+	    if ((!FIXREVERTER[4921] && (cur -> next == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFreeNode(cur);
 		return(parent->last);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    prev = cur;
 	    cur = cur->next;
 	    xmlFreeNode(prev);
@@ -3636,7 +4705,22 @@ xmlFreeNodeList(xmlNodePtr cur) {
     xmlNodePtr next;
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4927]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4927\n");
+      else
+        fprintf(stderr, "reached bug index 4927\n");
+    }
+    if ((!FIXREVERTER[4927] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (cur->type == XML_NAMESPACE_DECL) {
 	xmlFreeNsList((xmlNsPtr) cur);
 	return;
@@ -3705,7 +4789,22 @@ void
 xmlFreeNode(xmlNodePtr cur) {
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4929]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4929\n");
+      else
+        fprintf(stderr, "reached bug index 4929\n");
+    }
+    if ((!FIXREVERTER[4929] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /* use xmlFreeDtd for DTD nodes */
     if (cur->type == XML_DTD_NODE) {
@@ -3724,7 +4823,22 @@ xmlFreeNode(xmlNodePtr cur) {
     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
 	xmlDeregisterNodeDefaultValue(cur);
 
-    if (cur->doc != NULL) dict = cur->doc->dict;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4930]) {
+      if ((cur -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4930\n");
+      else
+        fprintf(stderr, "reached bug index 4930\n");
+    }
+    if ((!FIXREVERTER[4930] && (cur -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (cur->type == XML_ENTITY_DECL) {
         xmlEntityPtr ent = (xmlEntityPtr) cur;
@@ -3778,13 +4892,28 @@ xmlFreeNode(xmlNodePtr cur) {
  */
 void
 xmlUnlinkNode(xmlNodePtr cur) {
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4931]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4931\n");
+      else
+        fprintf(stderr, "reached bug index 4931\n");
+    }
+    if ((!FIXREVERTER[4931] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlUnlinkNode : node == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (cur->type == XML_NAMESPACE_DECL)
         return;
     if (cur->type == XML_DTD_NODE) {
@@ -3826,10 +4955,40 @@ xmlUnlinkNode(xmlNodePtr cur) {
 	    if (parent->properties == (xmlAttrPtr) cur)
 		parent->properties = ((xmlAttrPtr) cur)->next;
 	} else {
-	    if (parent->children == cur)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4932]) {
+	      if ((parent -> children == cur  ) && !(0))
+	        fprintf(stderr, "triggered bug index 4932\n");
+	      else
+	        fprintf(stderr, "reached bug index 4932\n");
+	    }
+	    if ((!FIXREVERTER[4932] && (parent -> children == cur  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		parent->children = cur->next;
-	    if (parent->last == cur)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4933]) {
+	      if ((parent -> last == cur  ) && !(0))
+	        fprintf(stderr, "triggered bug index 4933\n");
+	      else
+	        fprintf(stderr, "reached bug index 4933\n");
+	    }
+	    if ((!FIXREVERTER[4933] && (parent -> last == cur  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		parent->last = cur->prev;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	cur->parent = NULL;
     }
@@ -3928,7 +5087,22 @@ xmlNsPtr
 xmlCopyNamespace(xmlNsPtr cur) {
     xmlNsPtr ret;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4934]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4934\n");
+      else
+        fprintf(stderr, "reached bug index 4934\n");
+    }
+    if ((!FIXREVERTER[4934] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     switch (cur->type) {
 	case XML_LOCAL_NAMESPACE:
 	    ret = xmlNewNs(NULL, cur->href, cur->prefix);
@@ -3976,7 +5150,22 @@ static xmlAttrPtr
 xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
     xmlAttrPtr ret;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4935]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4935\n");
+      else
+        fprintf(stderr, "reached bug index 4935\n");
+    }
+    if ((!FIXREVERTER[4935] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if ((target != NULL) && (target->type != XML_ELEMENT_NODE))
         return(NULL);
     if (target != NULL)
@@ -3989,7 +5178,22 @@ xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
 	ret = xmlNewDocProp(cur->children->doc, cur->name, NULL);
     else
 	ret = xmlNewDocProp(NULL, cur->name, NULL);
-    if (ret == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4936]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4936\n");
+      else
+        fprintf(stderr, "reached bug index 4936\n");
+    }
+    if ((!FIXREVERTER[4936] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret->parent = target;
 
     if ((cur->ns != NULL) && (target != NULL)) {
@@ -4046,8 +5250,23 @@ xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
 	tmp = ret->children;
 	while (tmp != NULL) {
 	    /* tmp->parent = (xmlNodePtr)ret; */
-	    if (tmp->next == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4937]) {
+	      if ((tmp -> next == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 4937\n");
+	      else
+	        fprintf(stderr, "reached bug index 4937\n");
+	    }
+	    if ((!FIXREVERTER[4937] && (tmp -> next == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        ret->last = tmp;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    tmp = tmp->next;
 	}
     }
@@ -4102,8 +5321,23 @@ xmlCopyPropList(xmlNodePtr target, xmlAttrPtr cur) {
         return(NULL);
     while (cur != NULL) {
         q = xmlCopyProp(target, cur);
-	if (q == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4938]) {
+	  if ((q == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4938\n");
+	  else
+	    fprintf(stderr, "reached bug index 4938\n");
+	}
+	if ((!FIXREVERTER[4938] && (q == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (p == NULL) {
 	    ret = p = q;
 	} else {
@@ -4140,7 +5374,22 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
                   int extended) {
     xmlNodePtr ret;
 
-    if (node == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4939]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4939\n");
+      else
+        fprintf(stderr, "reached bug index 4939\n");
+    }
+    if ((!FIXREVERTER[4939] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     switch (node->type) {
         case XML_TEXT_NODE:
         case XML_CDATA_SECTION_NODE:
@@ -4179,10 +5428,25 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
      * Allocate a new node and fill the fields.
      */
     ret = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4940]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4940\n");
+      else
+        fprintf(stderr, "reached bug index 4940\n");
+    }
+    if ((!FIXREVERTER[4940] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("copying node");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlNode));
     ret->type = node->type;
 
@@ -4275,10 +5539,28 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
             ret->children = node->children;
 	}
 	ret->last = ret->children;
-    } else if ((node->children != NULL) && (extended != 2)) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[4941]) {
+      fprintf(stderr, "reached bug index 4941\n");
+    }
+    if ((FIXREVERTER[4941] && (extended != 2 )) || (!FIXREVERTER[4941] && (node -> children != (void *) 0 && extended != 2 ))
+    #else
+    if (extended != 2 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(node -> children != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 4941\n");
+      #endif
+    
         ret->children = xmlStaticCopyNodeList(node->children, doc, ret);
 	UPDATE_LAST_CHILD_AND_PARENT(ret)
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 out:
     /* if parent != NULL we already registered the node above */
@@ -4296,13 +5578,43 @@ xmlStaticCopyNodeList(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent) {
     while (node != NULL) {
 #ifdef LIBXML_TREE_ENABLED
 	if (node->type == XML_DTD_NODE ) {
-	    if (doc == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4942]) {
+	      if ((doc == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4942\n");
+	      else
+	        fprintf(stderr, "reached bug index 4942\n");
+	    }
+	    if ((!FIXREVERTER[4942] && (doc == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		node = node->next;
 		continue;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (doc->intSubset == NULL) {
 		q = (xmlNodePtr) xmlCopyDtd( (xmlDtdPtr) node );
-		if (q == NULL) return(NULL);
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4943]) {
+		  if ((q == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4943\n");
+		  else
+		    fprintf(stderr, "reached bug index 4943\n");
+		}
+		if ((!FIXREVERTER[4943] && (q == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 		q->doc = doc;
 		q->parent = parent;
 		doc->intSubset = (xmlDtdPtr) q;
@@ -4314,7 +5626,22 @@ xmlStaticCopyNodeList(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent) {
 	} else
 #endif /* LIBXML_TREE_ENABLED */
 	    q = xmlStaticCopyNode(node, doc, parent, 1);
-	if (q == NULL) return(NULL);
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4944]) {
+	  if ((q == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4944\n");
+	  else
+	    fprintf(stderr, "reached bug index 4944\n");
+	}
+	if ((!FIXREVERTER[4944] && (q == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 	if (ret == NULL) {
 	    q->prev = NULL;
 	    ret = p = q;
@@ -4410,24 +5737,129 @@ xmlCopyDtd(xmlDtdPtr dtd) {
     xmlDtdPtr ret;
     xmlNodePtr cur, p = NULL, q;
 
-    if (dtd == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4945]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4945\n");
+      else
+        fprintf(stderr, "reached bug index 4945\n");
+    }
+    if ((!FIXREVERTER[4945] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlNewDtd(NULL, dtd->name, dtd->ExternalID, dtd->SystemID);
-    if (ret == NULL) return(NULL);
-    if (dtd->entities != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4946]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4946\n");
+      else
+        fprintf(stderr, "reached bug index 4946\n");
+    }
+    if ((!FIXREVERTER[4946] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4947]) {
+      if ((dtd -> entities != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4947\n");
+      else
+        fprintf(stderr, "reached bug index 4947\n");
+    }
+    if ((!FIXREVERTER[4947] && (dtd -> entities != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->entities = (void *) xmlCopyEntitiesTable(
 	                    (xmlEntitiesTablePtr) dtd->entities);
-    if (dtd->notations != NULL)
+	                    #ifdef FRCOV
+	                    }
+	                    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4948]) {
+      if ((dtd -> notations != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4948\n");
+      else
+        fprintf(stderr, "reached bug index 4948\n");
+    }
+    if ((!FIXREVERTER[4948] && (dtd -> notations != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->notations = (void *) xmlCopyNotationTable(
 	                    (xmlNotationTablePtr) dtd->notations);
-    if (dtd->elements != NULL)
+	                    #ifdef FRCOV
+	                    }
+	                    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4949]) {
+      if ((dtd -> elements != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4949\n");
+      else
+        fprintf(stderr, "reached bug index 4949\n");
+    }
+    if ((!FIXREVERTER[4949] && (dtd -> elements != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->elements = (void *) xmlCopyElementTable(
 	                    (xmlElementTablePtr) dtd->elements);
-    if (dtd->attributes != NULL)
+	                    #ifdef FRCOV
+	                    }
+	                    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4950]) {
+      if ((dtd -> attributes != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4950\n");
+      else
+        fprintf(stderr, "reached bug index 4950\n");
+    }
+    if ((!FIXREVERTER[4950] && (dtd -> attributes != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->attributes = (void *) xmlCopyAttributeTable(
 	                    (xmlAttributeTablePtr) dtd->attributes);
-    if (dtd->pentities != NULL)
+	                    #ifdef FRCOV
+	                    }
+	                    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4951]) {
+      if ((dtd -> pentities != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4951\n");
+      else
+        fprintf(stderr, "reached bug index 4951\n");
+    }
+    if ((!FIXREVERTER[4951] && (dtd -> pentities != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ret->pentities = (void *) xmlCopyEntitiesTable(
 			    (xmlEntitiesTablePtr) dtd->pentities);
+			    #ifdef FRCOV
+			    }
+			    #endif
 
     cur = dtd->children;
     while (cur != NULL) {
@@ -4461,10 +5893,25 @@ xmlCopyDtd(xmlDtdPtr dtd) {
 	    q = xmlCopyNode(cur, 0);
 	}
 
-	if (q == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4952]) {
+	  if ((q == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4952\n");
+	  else
+	    fprintf(stderr, "reached bug index 4952\n");
+	}
+	if ((!FIXREVERTER[4952] && (q == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    cur = cur->next;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	if (p == NULL)
 	    ret->children = q;
@@ -4498,15 +5945,90 @@ xmlDocPtr
 xmlCopyDoc(xmlDocPtr doc, int recursive) {
     xmlDocPtr ret;
 
-    if (doc == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4953]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4953\n");
+      else
+        fprintf(stderr, "reached bug index 4953\n");
+    }
+    if ((!FIXREVERTER[4953] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlNewDoc(doc->version);
-    if (ret == NULL) return(NULL);
-    if (doc->name != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4954]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4954\n");
+      else
+        fprintf(stderr, "reached bug index 4954\n");
+    }
+    if ((!FIXREVERTER[4954] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4955]) {
+      if ((doc -> name != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4955\n");
+      else
+        fprintf(stderr, "reached bug index 4955\n");
+    }
+    if ((!FIXREVERTER[4955] && (doc -> name != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->name = xmlMemStrdup(doc->name);
-    if (doc->encoding != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4956]) {
+      if ((doc -> encoding != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4956\n");
+      else
+        fprintf(stderr, "reached bug index 4956\n");
+    }
+    if ((!FIXREVERTER[4956] && (doc -> encoding != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->encoding = xmlStrdup(doc->encoding);
-    if (doc->URL != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4957]) {
+      if ((doc -> URL != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4957\n");
+      else
+        fprintf(stderr, "reached bug index 4957\n");
+    }
+    if ((!FIXREVERTER[4957] && (doc -> URL != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->URL = xmlStrdup(doc->URL);
+        #ifdef FRCOV
+        }
+        #endif
     ret->charset = doc->charset;
     ret->compression = doc->compression;
     ret->standalone = doc->standalone;
@@ -4517,16 +6039,46 @@ xmlCopyDoc(xmlDocPtr doc, int recursive) {
 #ifdef LIBXML_TREE_ENABLED
     if (doc->intSubset != NULL) {
         ret->intSubset = xmlCopyDtd(doc->intSubset);
-	if (ret->intSubset == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4958]) {
+	  if ((ret -> intSubset == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4958\n");
+	  else
+	    fprintf(stderr, "reached bug index 4958\n");
+	}
+	if ((!FIXREVERTER[4958] && (ret -> intSubset == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFreeDoc(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	xmlSetTreeDoc((xmlNodePtr)ret->intSubset, ret);
 	ret->intSubset->parent = ret;
     }
 #endif
-    if (doc->oldNs != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4959]) {
+      if ((doc -> oldNs != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 4959\n");
+      else
+        fprintf(stderr, "reached bug index 4959\n");
+    }
+    if ((!FIXREVERTER[4959] && (doc -> oldNs != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->oldNs = xmlCopyNamespaceList(doc->oldNs);
+        #ifdef FRCOV
+        }
+        #endif
     if (doc->children != NULL) {
 	xmlNodePtr tmp;
 
@@ -4535,8 +6087,23 @@ xmlCopyDoc(xmlDocPtr doc, int recursive) {
 	ret->last = NULL;
 	tmp = ret->children;
 	while (tmp != NULL) {
-	    if (tmp->next == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4960]) {
+	      if ((tmp -> next == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 4960\n");
+	      else
+	        fprintf(stderr, "reached bug index 4960\n");
+	    }
+	    if ((!FIXREVERTER[4960] && (tmp -> next == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        ret->last = tmp;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    tmp = tmp->next;
 	}
     }
@@ -4582,8 +6149,23 @@ xmlGetLineNoInternal(const xmlNode *node, int depth)
 	        result = xmlGetLineNoInternal(node->children, depth + 1);
 	    else if (node->next != NULL)
 	        result = xmlGetLineNoInternal(node->next, depth + 1);
-	    else if (node->prev != NULL)
+	    else 
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4962]) {
+	      if ((node -> prev != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4962\n");
+	      else
+	        fprintf(stderr, "reached bug index 4962\n");
+	    }
+	    if ((!FIXREVERTER[4962] && (node -> prev != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        result = xmlGetLineNoInternal(node->prev, depth + 1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
 	if ((result == -1) || (result == 65535))
 	    result = (long) node->line;
@@ -4876,7 +6458,22 @@ xmlNodePtr
 xmlDocGetRootElement(const xmlDoc *doc) {
     xmlNodePtr ret;
 
-    if (doc == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4971]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4971\n");
+      else
+        fprintf(stderr, "reached bug index 4971\n");
+    }
+    if ((!FIXREVERTER[4971] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = doc->children;
     while (ret != NULL) {
 	if (ret->type == XML_ELEMENT_NODE)
@@ -5246,10 +6843,39 @@ xmlNodeGetBase(const xmlDoc *doc, const xmlNode *cur) {
         return(NULL);
     if ((cur != NULL) && (cur->type == XML_NAMESPACE_DECL))
         return(NULL);
-    if (doc == NULL) doc = cur->doc;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4982]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4982\n");
+      else
+        fprintf(stderr, "reached bug index 4982\n");
+    }
+    if ((!FIXREVERTER[4982] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) doc = cur->doc;
+    #ifdef FRCOV
+    }
+    #endif
     if ((doc != NULL) && (doc->type == XML_HTML_DOCUMENT_NODE)) {
         cur = doc->children;
-	while ((cur != NULL) && (cur->name != NULL)) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4983])
+	  fprintf(stderr, "reached bug index 4983\n");
+	while ((FIXREVERTER[4983] && (cur != (void *) 0 )) || (!FIXREVERTER[4983] && (cur != (void *) 0 && cur -> name != (void *) 0 ))
+	#else
+	while (cur != (void *) 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(cur -> name != (void *) 0 ))
+	    fprintf(stderr, "triggered bug index 4983\n");
+	  #endif
+	
 	    if (cur->type != XML_ELEMENT_NODE) {
 	        cur = cur->next;
 		continue;
@@ -5267,6 +6893,9 @@ xmlNodeGetBase(const xmlDoc *doc, const xmlNode *cur) {
 	    }
 	    cur = cur->next;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	return(NULL);
     }
     while (cur != NULL) {
@@ -5300,8 +6929,23 @@ xmlNodeGetBase(const xmlDoc *doc, const xmlNode *cur) {
 	cur = cur->parent;
     }
     if ((doc != NULL) && (doc->URL != NULL)) {
-	if (oldbase == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4984]) {
+	  if ((oldbase == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4984\n");
+	  else
+	    fprintf(stderr, "reached bug index 4984\n");
+	}
+	if ((!FIXREVERTER[4984] && (oldbase == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(xmlStrdup(doc->URL));
+	    #ifdef FRCOV
+	    }
+	    #endif
 	newbase = xmlBuildURI(oldbase, doc->URL);
 	xmlFree(oldbase);
 	return(newbase);
@@ -5353,7 +6997,22 @@ xmlNodeBufGetContent(xmlBufferPtr buffer, const xmlNode *cur)
 int
 xmlBufGetNodeContent(xmlBufPtr buf, const xmlNode *cur)
 {
-    if ((cur == NULL) || (buf == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4987]) {
+      if ((cur == (void *) 0 || buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4987\n");
+      else
+        fprintf(stderr, "reached bug index 4987\n");
+    }
+    if ((!FIXREVERTER[4987] && (cur == (void *) 0 || buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     switch (cur->type) {
         case XML_CDATA_SECTION_NODE:
         case XML_TEXT_NODE:
@@ -5395,8 +7054,23 @@ xmlBufGetNodeContent(xmlBufPtr buf, const xmlNode *cur)
 
                     do {
                         tmp = tmp->parent;
-                        if (tmp == NULL)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[4988]) {
+                          if ((tmp == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 4988\n");
+                          else
+                            fprintf(stderr, "reached bug index 4988\n");
+                        }
+                        if ((!FIXREVERTER[4988] && (tmp == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             break;
+                            #ifdef FRCOV
+                            }
+                            #endif
                         if (tmp == cur) {
                             tmp = NULL;
                             break;
@@ -5432,8 +7106,23 @@ xmlBufGetNodeContent(xmlBufPtr buf, const xmlNode *cur)
 
                 /* lookup entity declaration */
                 ent = xmlGetDocEntity(cur->doc, cur->name);
-                if (ent == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[4989]) {
+                  if ((ent == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 4989\n");
+                  else
+                    fprintf(stderr, "reached bug index 4989\n");
+                }
+                if ((!FIXREVERTER[4989] && (ent == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return(-1);
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 /* an entity content can be any "well balanced chunk",
                  * i.e. the result of the content [43] production:
@@ -5494,8 +7183,23 @@ xmlBufGetNodeContent(xmlBufPtr buf, const xmlNode *cur)
 xmlChar *
 xmlNodeGetContent(const xmlNode *cur)
 {
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4990]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4990\n");
+      else
+        fprintf(stderr, "reached bug index 4990\n");
+    }
+    if ((!FIXREVERTER[4990] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     switch (cur->type) {
         case XML_DOCUMENT_FRAG_NODE:
         case XML_ELEMENT_NODE:{
@@ -5503,8 +7207,23 @@ xmlNodeGetContent(const xmlNode *cur)
                 xmlChar *ret;
 
                 buf = xmlBufCreateSize(64);
-                if (buf == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[4991]) {
+                  if ((buf == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 4991\n");
+                  else
+                    fprintf(stderr, "reached bug index 4991\n");
+                }
+                if ((!FIXREVERTER[4991] && (buf == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return (NULL);
+                    #ifdef FRCOV
+                    }
+                    #endif
 		xmlBufGetNodeContent(buf, cur);
                 ret = xmlBufDetach(buf);
                 xmlBufFree(buf);
@@ -5524,12 +7243,42 @@ xmlNodeGetContent(const xmlNode *cur)
 
                 /* lookup entity declaration */
                 ent = xmlGetDocEntity(cur->doc, cur->name);
-                if (ent == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[4992]) {
+                  if ((ent == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 4992\n");
+                  else
+                    fprintf(stderr, "reached bug index 4992\n");
+                }
+                if ((!FIXREVERTER[4992] && (ent == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return (NULL);
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 buf = xmlBufCreate();
-                if (buf == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[4993]) {
+                  if ((buf == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 4993\n");
+                  else
+                    fprintf(stderr, "reached bug index 4993\n");
+                }
+                if ((!FIXREVERTER[4993] && (buf == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return (NULL);
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 xmlBufGetNodeContent(buf, cur);
 
@@ -5553,8 +7302,23 @@ xmlNodeGetContent(const xmlNode *cur)
 	    xmlChar *ret;
 
 	    buf = xmlBufCreate();
-	    if (buf == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4994]) {
+	      if ((buf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4994\n");
+	      else
+	        fprintf(stderr, "reached bug index 4994\n");
+	    }
+	    if ((!FIXREVERTER[4994] && (buf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (NULL);
+		#ifdef FRCOV
+		}
+		#endif
 
 	    xmlBufGetNodeContent(buf, (xmlNodePtr) cur);
 
@@ -5598,13 +7362,28 @@ xmlNodeGetContent(const xmlNode *cur)
  */
 void
 xmlNodeSetContent(xmlNodePtr cur, const xmlChar *content) {
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4995]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4995\n");
+      else
+        fprintf(stderr, "reached bug index 4995\n");
+    }
+    if ((!FIXREVERTER[4995] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNodeSetContent : node == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     switch (cur->type) {
         case XML_DOCUMENT_FRAG_NODE:
         case XML_ELEMENT_NODE:
@@ -5749,14 +7528,44 @@ xmlNodeSetContentLen(xmlNodePtr cur, const xmlChar *content, int len) {
  */
 void
 xmlNodeAddContentLen(xmlNodePtr cur, const xmlChar *content, int len) {
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4997]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4997\n");
+      else
+        fprintf(stderr, "reached bug index 4997\n");
+    }
+    if ((!FIXREVERTER[4997] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNodeAddContentLen : node == NULL\n");
 #endif
 	return;
     }
-    if (len <= 0) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4998]) {
+      if ((len <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4998\n");
+      else
+        fprintf(stderr, "reached bug index 4998\n");
+    }
+    if ((!FIXREVERTER[4998] && (len <= 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     switch (cur->type) {
         case XML_DOCUMENT_FRAG_NODE:
         case XML_ELEMENT_NODE: {
@@ -5826,14 +7635,44 @@ void
 xmlNodeAddContent(xmlNodePtr cur, const xmlChar *content) {
     int len;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4999]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4999\n");
+      else
+        fprintf(stderr, "reached bug index 4999\n");
+    }
+    if ((!FIXREVERTER[4999] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
 		"xmlNodeAddContent : node == NULL\n");
 #endif
 	return;
     }
-    if (content == NULL) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5000]) {
+      if ((content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5000\n");
+      else
+        fprintf(stderr, "reached bug index 5000\n");
+    }
+    if ((!FIXREVERTER[5000] && (content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     len = xmlStrlen(content);
     xmlNodeAddContentLen(cur, content, len);
 }
@@ -5848,8 +7687,38 @@ xmlNodeAddContent(xmlNodePtr cur, const xmlChar *content) {
  */
 xmlNodePtr
 xmlTextMerge(xmlNodePtr first, xmlNodePtr second) {
-    if (first == NULL) return(second);
-    if (second == NULL) return(first);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5001]) {
+      if ((first == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5001\n");
+      else
+        fprintf(stderr, "reached bug index 5001\n");
+    }
+    if ((!FIXREVERTER[5001] && (first == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(second);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5002]) {
+      if ((second == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5002\n");
+      else
+        fprintf(stderr, "reached bug index 5002\n");
+    }
+    if ((!FIXREVERTER[5002] && (second == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(first);
+    #ifdef FRCOV
+    }
+    #endif
     if (first->type != XML_TEXT_NODE) return(first);
     if (second->type != XML_TEXT_NODE) return(first);
     if (second->name != first->name)
@@ -5891,10 +7760,25 @@ xmlGetNsList(const xmlDoc *doc ATTRIBUTE_UNUSED, const xmlNode *node)
                     ret =
                         (xmlNsPtr *) xmlMalloc((maxns + 1) *
                                                sizeof(xmlNsPtr));
-                    if (ret == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[5003]) {
+                      if ((ret == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 5003\n");
+                      else
+                        fprintf(stderr, "reached bug index 5003\n");
+                    }
+                    if ((!FIXREVERTER[5003] && (ret == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 			xmlTreeErrMemory("getting namespace list");
                         return (NULL);
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret[nbns] = NULL;
                 }
                 for (i = 0; i < nbns; i++) {
@@ -5909,10 +7793,25 @@ xmlGetNsList(const xmlDoc *doc ATTRIBUTE_UNUSED, const xmlNode *node)
                                                       (maxns +
                                                        1) *
                                                       sizeof(xmlNsPtr));
-                        if (ret == NULL) {
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[5004]) {
+                          if ((ret == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 5004\n");
+                          else
+                            fprintf(stderr, "reached bug index 5004\n");
+                        }
+                        if ((!FIXREVERTER[5004] && (ret == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        ) {
 			    xmlTreeErrMemory("getting namespace list");
                             return (NULL);
                         }
+                        #ifdef FRCOV
+                        }
+                        #endif
                     }
                     ret[nbns++] = cur;
                     ret[nbns] = NULL;
@@ -5938,18 +7837,48 @@ xmlGetNsList(const xmlDoc *doc ATTRIBUTE_UNUSED, const xmlNode *node)
 static xmlNsPtr
 xmlTreeEnsureXMLDecl(xmlDocPtr doc)
 {
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5005]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5005\n");
+      else
+        fprintf(stderr, "reached bug index 5005\n");
+    }
+    if ((!FIXREVERTER[5005] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (doc->oldNs != NULL)
 	return (doc->oldNs);
     {
 	xmlNsPtr ns;
 	ns = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));
-	if (ns == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[5006]) {
+	  if ((ns == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 5006\n");
+	  else
+	    fprintf(stderr, "reached bug index 5006\n");
+	}
+	if ((!FIXREVERTER[5006] && (ns == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlTreeErrMemory(
 		"allocating the XML namespace");
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(ns, 0, sizeof(xmlNs));
 	ns->type = XML_LOCAL_NAMESPACE;
 	ns->href = xmlStrdup(XML_XML_NAMESPACE);
@@ -5991,10 +7920,25 @@ xmlSearchNs(xmlDocPtr doc, xmlNodePtr node, const xmlChar *nameSpace) {
 	     * node element.
 	     */
 	    cur = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));
-	    if (cur == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[5007]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 5007\n");
+	      else
+	        fprintf(stderr, "reached bug index 5007\n");
+	    }
+	    if ((!FIXREVERTER[5007] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlTreeErrMemory("searching namespace");
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memset(cur, 0, sizeof(xmlNs));
 	    cur->type = XML_LOCAL_NAMESPACE;
 	    cur->href = xmlStrdup(XML_XML_NAMESPACE);
@@ -6005,8 +7949,23 @@ xmlSearchNs(xmlDocPtr doc, xmlNodePtr node, const xmlChar *nameSpace) {
 	}
 	if (doc == NULL) {
 	    doc = node->doc;
-	    if (doc == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[5008]) {
+	      if ((doc == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 5008\n");
+	      else
+	        fprintf(stderr, "reached bug index 5008\n");
+	    }
+	    if ((!FIXREVERTER[5008] && (doc == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	/*
 	* Return the XML namespace declaration held by the doc.
@@ -6124,10 +8083,25 @@ xmlSearchNsByHref(xmlDocPtr doc, xmlNodePtr node, const xmlChar * href)
              * node element.
              */
             cur = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));
-            if (cur == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[5009]) {
+              if ((cur == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 5009\n");
+              else
+                fprintf(stderr, "reached bug index 5009\n");
+            }
+            if ((!FIXREVERTER[5009] && (cur == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
 		xmlTreeErrMemory("searching namespace");
                 return (NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
             memset(cur, 0, sizeof(xmlNs));
             cur->type = XML_LOCAL_NAMESPACE;
             cur->href = xmlStrdup(XML_XML_NAMESPACE);
@@ -6138,8 +8112,23 @@ xmlSearchNsByHref(xmlDocPtr doc, xmlNodePtr node, const xmlChar * href)
         }
 	if (doc == NULL) {
 	    doc = node->doc;
-	    if (doc == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[5010]) {
+	      if ((doc == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 5010\n");
+	      else
+	        fprintf(stderr, "reached bug index 5010\n");
+	    }
+	    if ((!FIXREVERTER[5010] && (doc == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	/*
 	* Return the XML namespace declaration held by the doc.
@@ -6503,8 +8492,23 @@ xmlGetPropNodeInternal(const xmlNode *node, const xmlChar *name,
 	    tmpstr = xmlStrdup(node->ns->prefix);
 	    tmpstr = xmlStrcat(tmpstr, BAD_CAST ":");
 	    tmpstr = xmlStrcat(tmpstr, node->name);
-	    if (tmpstr == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[5023]) {
+	      if ((tmpstr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 5023\n");
+	      else
+	        fprintf(stderr, "reached bug index 5023\n");
+	    }
+	    if ((!FIXREVERTER[5023] && (tmpstr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    elemQName = tmpstr;
 	} else
 	    elemQName = (xmlChar *) node->name;
@@ -6526,11 +8530,26 @@ xmlGetPropNodeInternal(const xmlNode *node, const xmlChar *name,
 	    * ns-decls corresponding to @nsName.
 	    */
 	    nsList = xmlGetNsList(node->doc, node);
-	    if (nsList == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[5024]) {
+	      if ((nsList == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 5024\n");
+	      else
+	        fprintf(stderr, "reached bug index 5024\n");
+	    }
+	    if ((!FIXREVERTER[5024] && (nsList == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if (tmpstr != NULL)
 		    xmlFree(tmpstr);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    cur = nsList;
 	    while (*cur != NULL) {
 		if (xmlStrEqual((*cur)->href, nsName)) {
@@ -6564,8 +8583,23 @@ xmlGetPropNodeInternal(const xmlNode *node, const xmlChar *name,
 static xmlChar*
 xmlGetPropNodeValueInternal(const xmlAttr *prop)
 {
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5025]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5025\n");
+      else
+        fprintf(stderr, "reached bug index 5025\n");
+    }
+    if ((!FIXREVERTER[5025] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (prop->type == XML_ATTRIBUTE_NODE) {
 	/*
 	* Note that we return at least the empty string.
@@ -6689,8 +8723,23 @@ xmlGetProp(const xmlNode *node, const xmlChar *name) {
     xmlAttrPtr prop;
 
     prop = xmlHasProp(node, name);
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5026]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5026\n");
+      else
+        fprintf(stderr, "reached bug index 5026\n");
+    }
+    if ((!FIXREVERTER[5026] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlGetPropNodeValueInternal(prop));
 }
 
@@ -6714,8 +8763,23 @@ xmlGetNoNsProp(const xmlNode *node, const xmlChar *name) {
     xmlAttrPtr prop;
 
     prop = xmlGetPropNodeInternal(node, name, NULL, xmlCheckDTD);
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5027]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5027\n");
+      else
+        fprintf(stderr, "reached bug index 5027\n");
+    }
+    if ((!FIXREVERTER[5027] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlGetPropNodeValueInternal(prop));
 }
 
@@ -6739,8 +8803,23 @@ xmlGetNsProp(const xmlNode *node, const xmlChar *name, const xmlChar *nameSpace)
     xmlAttrPtr prop;
 
     prop = xmlGetPropNodeInternal(node, name, nameSpace, xmlCheckDTD);
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5028]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5028\n");
+      else
+        fprintf(stderr, "reached bug index 5028\n");
+    }
+    if ((!FIXREVERTER[5028] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlGetPropNodeValueInternal(prop));
 }
 
@@ -6901,7 +8980,22 @@ xmlSetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name,
  */
 int
 xmlNodeIsText(const xmlNode *node) {
-    if (node == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5032]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5032\n");
+      else
+        fprintf(stderr, "reached bug index 5032\n");
+    }
+    if ((!FIXREVERTER[5032] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (node->type == XML_TEXT_NODE) return(1);
     return(0);
@@ -6919,12 +9013,42 @@ xmlNodeIsText(const xmlNode *node) {
 int
 xmlIsBlankNode(const xmlNode *node) {
     const xmlChar *cur;
-    if (node == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5033]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5033\n");
+      else
+        fprintf(stderr, "reached bug index 5033\n");
+    }
+    if ((!FIXREVERTER[5033] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((node->type != XML_TEXT_NODE) &&
         (node->type != XML_CDATA_SECTION_NODE))
 	return(0);
-    if (node->content == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5034]) {
+      if ((node -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5034\n");
+      else
+        fprintf(stderr, "reached bug index 5034\n");
+    }
+    if ((!FIXREVERTER[5034] && (node -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
     cur = node->content;
     while (*cur != 0) {
 	if (!IS_BLANK_CH(*cur)) return(0);
@@ -6947,7 +9071,22 @@ xmlIsBlankNode(const xmlNode *node) {
 
 int
 xmlTextConcat(xmlNodePtr node, const xmlChar *content, int len) {
-    if (node == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5035]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5035\n");
+      else
+        fprintf(stderr, "reached bug index 5035\n");
+    }
+    if ((!FIXREVERTER[5035] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((node->type != XML_TEXT_NODE) &&
         (node->type != XML_CDATA_SECTION_NODE) &&
@@ -6968,8 +9107,23 @@ xmlTextConcat(xmlNodePtr node, const xmlChar *content, int len) {
         node->content = xmlStrncat(node->content, content, len);
     }
     node->properties = NULL;
-    if (node->content == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5036]) {
+      if ((node -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5036\n");
+      else
+        fprintf(stderr, "reached bug index 5036\n");
+    }
+    if ((!FIXREVERTER[5036] && (node -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     return(0);
 }
 
@@ -6990,19 +9144,49 @@ xmlBufferCreate(void) {
     xmlBufferPtr ret;
 
     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5037]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5037\n");
+      else
+        fprintf(stderr, "reached bug index 5037\n");
+    }
+    if ((!FIXREVERTER[5037] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("creating buffer");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->use = 0;
     ret->size = xmlDefaultBufferSize;
     ret->alloc = xmlBufferAllocScheme;
     ret->content = (xmlChar *) xmlMallocAtomic(ret->size * sizeof(xmlChar));
-    if (ret->content == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5038]) {
+      if ((ret -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5038\n");
+      else
+        fprintf(stderr, "reached bug index 5038\n");
+    }
+    if ((!FIXREVERTER[5038] && (ret -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlTreeErrMemory("creating buffer");
 	xmlFree(ret);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->content[0] = 0;
     ret->contentIO = NULL;
     return(ret);
@@ -7134,13 +9318,28 @@ xmlBufferSetAllocationScheme(xmlBufferPtr buf,
  */
 void
 xmlBufferFree(xmlBufferPtr buf) {
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5045]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5045\n");
+      else
+        fprintf(stderr, "reached bug index 5045\n");
+    }
+    if ((!FIXREVERTER[5045] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 #ifdef DEBUG_BUFFER
         xmlGenericError(xmlGenericErrorContext,
 		"xmlBufferFree: buf == NULL\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((buf->alloc == XML_BUFFER_ALLOC_IO) &&
         (buf->contentIO != NULL)) {
@@ -7362,14 +9561,44 @@ xmlBufferResize(xmlBufferPtr buf, unsigned int size)
     xmlChar* rebuf = NULL;
     size_t start_buf;
 
-    if (buf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5058]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5058\n");
+      else
+        fprintf(stderr, "reached bug index 5058\n");
+    }
+    if ((!FIXREVERTER[5058] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);
 
     /* Don't resize if we don't have to */
-    if (size < buf->size)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5059]) {
+      if ((size < buf -> size ) && !(0))
+        fprintf(stderr, "triggered bug index 5059\n");
+      else
+        fprintf(stderr, "reached bug index 5059\n");
+    }
+    if ((!FIXREVERTER[5059] && (size < buf -> size ))
+    #else
+    if (0
+    #endif
+    )
         return 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* figure out new size */
     switch (buf->alloc){
@@ -7419,10 +9648,25 @@ xmlBufferResize(xmlBufferPtr buf, unsigned int size)
 	    buf->size += start_buf;
 	} else {
 	    rebuf = (xmlChar *) xmlRealloc(buf->contentIO, start_buf + newSize);
-	    if (rebuf == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[5060]) {
+	      if ((rebuf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 5060\n");
+	      else
+	        fprintf(stderr, "reached bug index 5060\n");
+	    }
+	    if ((!FIXREVERTER[5060] && (rebuf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlTreeErrMemory("growing buffer");
 		return 0;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf->contentIO = rebuf;
 	    buf->content = rebuf + start_buf;
 	}
@@ -7444,10 +9688,25 @@ xmlBufferResize(xmlBufferPtr buf, unsigned int size)
 		rebuf[buf->use] = 0;
 	    }
 	}
-	if (rebuf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[5061]) {
+	  if ((rebuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 5061\n");
+	  else
+	    fprintf(stderr, "reached bug index 5061\n");
+	}
+	if ((!FIXREVERTER[5061] && (rebuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlTreeErrMemory("growing buffer");
 	    return 0;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	buf->content = rebuf;
     }
     buf->size = newSize;
@@ -7471,9 +9730,24 @@ int
 xmlBufferAdd(xmlBufferPtr buf, const xmlChar *str, int len) {
     unsigned int needSize;
 
-    if ((str == NULL) || (buf == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5062]) {
+      if ((str == (void *) 0 || buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5062\n");
+      else
+        fprintf(stderr, "reached bug index 5062\n");
+    }
+    if ((!FIXREVERTER[5062] && (str == (void *) 0 || buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return -1;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;
     if (len < -1) {
 #ifdef DEBUG_BUFFER
@@ -7482,13 +9756,73 @@ xmlBufferAdd(xmlBufferPtr buf, const xmlChar *str, int len) {
 #endif
 	return -1;
     }
-    if (len == 0) return 0;
-
-    if (len < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5063]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5063\n");
+      else
+        fprintf(stderr, "reached bug index 5063\n");
+    }
+    if ((!FIXREVERTER[5063] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5064]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5064\n");
+      else
+        fprintf(stderr, "reached bug index 5064\n");
+    }
+    if ((!FIXREVERTER[5064] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
         len = xmlStrlen(str);
-
-    if (len < 0) return -1;
-    if (len == 0) return 0;
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5065]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5065\n");
+      else
+        fprintf(stderr, "reached bug index 5065\n");
+    }
+    if ((!FIXREVERTER[5065] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5066]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5066\n");
+      else
+        fprintf(stderr, "reached bug index 5066\n");
+    }
+    if ((!FIXREVERTER[5066] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
 
     needSize = buf->use + len + 2;
     if (needSize > buf->size){
diff --git a/uri.c b/uri.c
index ff47abbe..0bd29438 100644
--- a/uri.c
+++ b/uri.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /**
  * uri.c: set of generic URI related routines
  *
@@ -208,8 +212,23 @@ static int
 xmlParse3986Scheme(xmlURIPtr uri, const char **str) {
     const char *cur;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1348]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1348\n");
+      else
+        fprintf(stderr, "reached bug index 1348\n");
+    }
+    if ((!FIXREVERTER[1348] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     cur = *str;
     if (!ISA_ALPHA(cur))
@@ -245,8 +264,23 @@ xmlParse3986Fragment(xmlURIPtr uri, const char **str)
 {
     const char *cur;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1349]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1349\n");
+      else
+        fprintf(stderr, "reached bug index 1349\n");
+    }
+    if ((!FIXREVERTER[1349] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = *str;
 
@@ -282,8 +316,23 @@ xmlParse3986Query(xmlURIPtr uri, const char **str)
 {
     const char *cur;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1350]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1350\n");
+      else
+        fprintf(stderr, "reached bug index 1350\n");
+    }
+    if ((!FIXREVERTER[1350] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = *str;
 
@@ -327,11 +376,41 @@ xmlParse3986Port(xmlURIPtr uri, const char **str)
     const char *cur = *str;
 
     if (ISA_DIGIT(cur)) {
-	if (uri != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1351]) {
+	  if ((uri != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1351\n");
+	  else
+	    fprintf(stderr, "reached bug index 1351\n");
+	}
+	if ((!FIXREVERTER[1351] && (uri != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    uri->port = 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	while (ISA_DIGIT(cur)) {
-	    if (uri != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1352]) {
+	      if ((uri != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 1352\n");
+	      else
+	        fprintf(stderr, "reached bug index 1352\n");
+	    }
+	    if ((!FIXREVERTER[1352] && (uri != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		uri->port = uri->port * 10 + (*cur - '0');
+		#ifdef FRCOV
+		}
+		#endif
 	    cur++;
 	}
 	*str = cur;
@@ -759,8 +838,23 @@ xmlParse3986HierPart(xmlURIPtr uri, const char **str)
         cur += 2;
 	ret = xmlParse3986Authority(uri, &cur);
 	if (ret != 0) return(ret);
-	if (uri->server == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1362]) {
+	  if ((uri -> server == (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1362\n");
+	  else
+	    fprintf(stderr, "reached bug index 1362\n");
+	}
+	if ((!FIXREVERTER[1362] && (uri -> server == (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    uri->port = -1;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ret = xmlParse3986PathAbEmpty(uri, &cur);
 	if (ret != 0) return(ret);
 	*str = cur;
@@ -897,8 +991,23 @@ static int
 xmlParse3986URIReference(xmlURIPtr uri, const char *str) {
     int ret;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1376]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1376\n");
+      else
+        fprintf(stderr, "reached bug index 1376\n");
+    }
+    if ((!FIXREVERTER[1376] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     xmlCleanURI(uri);
 
     /*
@@ -932,8 +1041,23 @@ xmlParseURI(const char *str) {
     xmlURIPtr uri;
     int ret;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1378]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1378\n");
+      else
+        fprintf(stderr, "reached bug index 1378\n");
+    }
+    if ((!FIXREVERTER[1378] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     uri = xmlCreateURI();
     if (uri != NULL) {
 	ret = xmlParse3986URIReference(uri, str);
@@ -978,8 +1102,23 @@ xmlParseURIRaw(const char *str, int raw) {
     xmlURIPtr uri;
     int ret;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1379]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1379\n");
+      else
+        fprintf(stderr, "reached bug index 1379\n");
+    }
+    if ((!FIXREVERTER[1379] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     uri = xmlCreateURI();
     if (uri != NULL) {
         if (raw) {
@@ -1012,10 +1151,25 @@ xmlCreateURI(void) {
     xmlURIPtr ret;
 
     ret = (xmlURIPtr) xmlMalloc(sizeof(xmlURI));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1380]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1380\n");
+      else
+        fprintf(stderr, "reached bug index 1380\n");
+    }
+    if ((!FIXREVERTER[1380] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlURIErrMemory("creating URI structure\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlURI));
     return(ret);
 }
@@ -1037,10 +1191,25 @@ xmlSaveUriRealloc(xmlChar *ret, int *max) {
     }
     tmp = *max * 2;
     temp = (xmlChar *) xmlRealloc(ret, (tmp + 1));
-    if (temp == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1381]) {
+      if ((temp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1381\n");
+      else
+        fprintf(stderr, "reached bug index 1381\n");
+    }
+    if ((!FIXREVERTER[1381] && (temp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlURIErrMemory("saving URI\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     *max = tmp;
     return(temp);
 }
@@ -1061,15 +1230,45 @@ xmlSaveUri(xmlURIPtr uri) {
     int len;
     int max;
 
-    if (uri == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1382]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1382\n");
+      else
+        fprintf(stderr, "reached bug index 1382\n");
+    }
+    if ((!FIXREVERTER[1382] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
 
     max = 80;
     ret = (xmlChar *) xmlMallocAtomic((max + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1383]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1383\n");
+      else
+        fprintf(stderr, "reached bug index 1383\n");
+    }
+    if ((!FIXREVERTER[1383] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlURIErrMemory("saving URI\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     len = 0;
 
     if (uri->scheme != NULL) {
@@ -1077,14 +1276,44 @@ xmlSaveUri(xmlURIPtr uri) {
 	while (*p != 0) {
 	    if (len >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1384]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1384\n");
+                  else
+                    fprintf(stderr, "reached bug index 1384\n");
+                }
+                if ((!FIXREVERTER[1384] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
 		ret = temp;
 	    }
 	    ret[len++] = *p++;
 	}
 	if (len >= max) {
             temp = xmlSaveUriRealloc(ret, &max);
-            if (temp == NULL) goto mem_error;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1385]) {
+              if ((temp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1385\n");
+              else
+                fprintf(stderr, "reached bug index 1385\n");
+            }
+            if ((!FIXREVERTER[1385] && (temp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
             ret = temp;
 	}
 	ret[len++] = ':';
@@ -1094,7 +1323,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	while (*p != 0) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1386]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1386\n");
+                  else
+                    fprintf(stderr, "reached bug index 1386\n");
+                }
+                if ((!FIXREVERTER[1386] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    if (IS_RESERVED(*(p)) || IS_UNRESERVED(*(p)))
@@ -1111,7 +1355,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	if ((uri->server != NULL) || (uri->port == -1)) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1387]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1387\n");
+                  else
+                    fprintf(stderr, "reached bug index 1387\n");
+                }
+                if ((!FIXREVERTER[1387] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '/';
@@ -1121,7 +1380,22 @@ xmlSaveUri(xmlURIPtr uri) {
 		while (*p != 0) {
 		    if (len + 3 >= max) {
                         temp = xmlSaveUriRealloc(ret, &max);
-                        if (temp == NULL) goto mem_error;
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1388]) {
+                          if ((temp == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1388\n");
+                          else
+                            fprintf(stderr, "reached bug index 1388\n");
+                        }
+                        if ((!FIXREVERTER[1388] && (temp == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        ) goto mem_error;
+                        #ifdef FRCOV
+                        }
+                        #endif
                         ret = temp;
 		    }
 		    if ((IS_UNRESERVED(*(p))) ||
@@ -1140,7 +1414,22 @@ xmlSaveUri(xmlURIPtr uri) {
 		}
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1389]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1389\n");
+                      else
+                        fprintf(stderr, "reached bug index 1389\n");
+                    }
+                    if ((!FIXREVERTER[1389] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		ret[len++] = '@';
@@ -1150,7 +1439,22 @@ xmlSaveUri(xmlURIPtr uri) {
 		while (*p != 0) {
 		    if (len >= max) {
 			temp = xmlSaveUriRealloc(ret, &max);
-			if (temp == NULL) goto mem_error;
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1390]) {
+			  if ((temp == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 1390\n");
+			  else
+			    fprintf(stderr, "reached bug index 1390\n");
+			}
+			if ((!FIXREVERTER[1390] && (temp == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) goto mem_error;
+			#ifdef FRCOV
+			}
+			#endif
 			ret = temp;
 		    }
 		    ret[len++] = *p++;
@@ -1158,7 +1462,22 @@ xmlSaveUri(xmlURIPtr uri) {
 		if (uri->port > 0) {
 		    if (len + 10 >= max) {
 			temp = xmlSaveUriRealloc(ret, &max);
-			if (temp == NULL) goto mem_error;
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1391]) {
+			  if ((temp == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 1391\n");
+			  else
+			    fprintf(stderr, "reached bug index 1391\n");
+			}
+			if ((!FIXREVERTER[1391] && (temp == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) goto mem_error;
+			#ifdef FRCOV
+			}
+			#endif
 			ret = temp;
 		    }
 		    len += snprintf((char *) &ret[len], max - len, ":%d", uri->port);
@@ -1167,7 +1486,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	} else if (uri->authority != NULL) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1392]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1392\n");
+                  else
+                    fprintf(stderr, "reached bug index 1392\n");
+                }
+                if ((!FIXREVERTER[1392] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '/';
@@ -1176,7 +1510,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1393]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1393\n");
+                      else
+                        fprintf(stderr, "reached bug index 1393\n");
+                    }
+                    if ((!FIXREVERTER[1393] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		if ((IS_UNRESERVED(*(p))) ||
@@ -1195,7 +1544,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	} else if (uri->scheme != NULL) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1394]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1394\n");
+                  else
+                    fprintf(stderr, "reached bug index 1394\n");
+                }
+                if ((!FIXREVERTER[1394] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	}
@@ -1213,7 +1577,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	        (xmlStrEqual(BAD_CAST uri->scheme, BAD_CAST "file"))) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1395]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1395\n");
+                      else
+                        fprintf(stderr, "reached bug index 1395\n");
+                    }
+                    if ((!FIXREVERTER[1395] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		ret[len++] = *p++;
@@ -1223,7 +1602,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1396]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1396\n");
+                      else
+                        fprintf(stderr, "reached bug index 1396\n");
+                    }
+                    if ((!FIXREVERTER[1396] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		if ((IS_UNRESERVED(*(p))) || ((*(p) == '/')) ||
@@ -1243,7 +1637,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	if (uri->query_raw != NULL) {
 	    if (len + 1 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1397]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1397\n");
+                  else
+                    fprintf(stderr, "reached bug index 1397\n");
+                }
+                if ((!FIXREVERTER[1397] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '?';
@@ -1251,7 +1660,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 1 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1398]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1398\n");
+                      else
+                        fprintf(stderr, "reached bug index 1398\n");
+                    }
+                    if ((!FIXREVERTER[1398] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		ret[len++] = *p++;
@@ -1259,7 +1683,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	} else if (uri->query != NULL) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1399]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1399\n");
+                  else
+                    fprintf(stderr, "reached bug index 1399\n");
+                }
+                if ((!FIXREVERTER[1399] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '?';
@@ -1267,7 +1706,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1400]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1400\n");
+                      else
+                        fprintf(stderr, "reached bug index 1400\n");
+                    }
+                    if ((!FIXREVERTER[1400] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		if ((IS_UNRESERVED(*(p))) || (IS_RESERVED(*(p))))
@@ -1285,7 +1739,22 @@ xmlSaveUri(xmlURIPtr uri) {
     if (uri->fragment != NULL) {
 	if (len + 3 >= max) {
             temp = xmlSaveUriRealloc(ret, &max);
-            if (temp == NULL) goto mem_error;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1401]) {
+              if ((temp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1401\n");
+              else
+                fprintf(stderr, "reached bug index 1401\n");
+            }
+            if ((!FIXREVERTER[1401] && (temp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
             ret = temp;
 	}
 	ret[len++] = '#';
@@ -1293,7 +1762,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	while (*p != 0) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1402]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1402\n");
+                  else
+                    fprintf(stderr, "reached bug index 1402\n");
+                }
+                if ((!FIXREVERTER[1402] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    if ((IS_UNRESERVED(*(p))) || (IS_RESERVED(*(p))))
@@ -1309,7 +1793,22 @@ xmlSaveUri(xmlURIPtr uri) {
     }
     if (len >= max) {
         temp = xmlSaveUriRealloc(ret, &max);
-        if (temp == NULL) goto mem_error;
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1403]) {
+          if ((temp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1403\n");
+          else
+            fprintf(stderr, "reached bug index 1403\n");
+        }
+        if ((!FIXREVERTER[1403] && (temp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
         ret = temp;
     }
     ret[len] = 0;
@@ -1346,7 +1845,22 @@ xmlPrintURI(FILE *stream, xmlURIPtr uri) {
  */
 static void
 xmlCleanURI(xmlURIPtr uri) {
-    if (uri == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1404]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1404\n");
+      else
+        fprintf(stderr, "reached bug index 1404\n");
+    }
+    if ((!FIXREVERTER[1404] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (uri->scheme != NULL) xmlFree(uri->scheme);
     uri->scheme = NULL;
@@ -1376,7 +1890,22 @@ xmlCleanURI(xmlURIPtr uri) {
  */
 void
 xmlFreeURI(xmlURIPtr uri) {
-    if (uri == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1405]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1405\n");
+      else
+        fprintf(stderr, "reached bug index 1405\n");
+    }
+    if ((!FIXREVERTER[1405] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (uri->scheme != NULL) xmlFree(uri->scheme);
     if (uri->server != NULL) xmlFree(uri->server);
@@ -1411,8 +1940,23 @@ int
 xmlNormalizeURIPath(char *path) {
     char *cur, *out;
 
-    if (path == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1406]) {
+      if ((path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1406\n");
+      else
+        fprintf(stderr, "reached bug index 1406\n");
+    }
+    if ((!FIXREVERTER[1406] && (path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     /* Skip all initial "/" chars.  We want to get to the beginning of the
      * first non-empty segment.
@@ -1612,17 +2156,47 @@ xmlURIUnescapeString(const char *str, int len, char *target) {
     char *ret, *out;
     const char *in;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1407]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1407\n");
+      else
+        fprintf(stderr, "reached bug index 1407\n");
+    }
+    if ((!FIXREVERTER[1407] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (len <= 0) len = strlen(str);
     if (len < 0) return(NULL);
 
     if (target == NULL) {
 	ret = (char *) xmlMallocAtomic(len + 1);
-	if (ret == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1410]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1410\n");
+	  else
+	    fprintf(stderr, "reached bug index 1410\n");
+	}
+	if ((!FIXREVERTER[1410] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             xmlURIErrMemory("unescaping URI value\n");
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else
 	ret = target;
     in = str;
@@ -1672,8 +2246,23 @@ xmlURIEscapeStr(const xmlChar *str, const xmlChar *list) {
     const xmlChar *in;
     int len, out;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1411]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1411\n");
+      else
+        fprintf(stderr, "reached bug index 1411\n");
+    }
+    if ((!FIXREVERTER[1411] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (str[0] == 0)
 	return(xmlStrdup(str));
     len = xmlStrlen(str);
@@ -1681,20 +2270,50 @@ xmlURIEscapeStr(const xmlChar *str, const xmlChar *list) {
 
     len += 20;
     ret = (xmlChar *) xmlMallocAtomic(len);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1412]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1412\n");
+      else
+        fprintf(stderr, "reached bug index 1412\n");
+    }
+    if ((!FIXREVERTER[1412] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlURIErrMemory("escaping URI value\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     in = (const xmlChar *) str;
     out = 0;
     while(*in != 0) {
 	if (len - out <= 3) {
             temp = xmlSaveUriRealloc(ret, &len);
-	    if (temp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1413]) {
+	      if ((temp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1413\n");
+	      else
+	        fprintf(stderr, "reached bug index 1413\n");
+	    }
+	    if ((!FIXREVERTER[1413] && (temp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 xmlURIErrMemory("escaping URI value\n");
 		xmlFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    ret = temp;
 	}
 
@@ -1898,8 +2517,23 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
     else {
 	if (*URI) {
 	    ref = xmlCreateURI();
-	    if (ref == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1416]) {
+	      if ((ref == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1416\n");
+	      else
+	        fprintf(stderr, "reached bug index 1416\n");
+	    }
+	    if ((!FIXREVERTER[1416] && (ref == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto done;
+		#ifdef FRCOV
+		}
+		#endif
 	    ret = xmlParseURIReference(ref, (const char *) URI);
 	}
 	else
@@ -1918,8 +2552,23 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
 	ret = -1;
     else {
 	bas = xmlCreateURI();
-	if (bas == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1418]) {
+	  if ((bas == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1418\n");
+	  else
+	    fprintf(stderr, "reached bug index 1418\n");
+	}
+	if ((!FIXREVERTER[1418] && (bas == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto done;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ret = xmlParseURIReference(bas, (const char *) base);
     }
     if (ret != 0) {
@@ -1927,7 +2576,19 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
 	    val = xmlSaveUri(ref);
 	goto done;
     }
-    if (ref == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1420]) {
+      if ((ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1420\n");
+      else
+        fprintf(stderr, "reached bug index 1420\n");
+    }
+    if ((!FIXREVERTER[1420] && (ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * the base fragment must be ignored
 	 */
@@ -1938,6 +2599,9 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
 	val = xmlSaveUri(bas);
 	goto done;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * 2) If the path component is empty and the scheme, authority, and
@@ -1952,32 +2616,122 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
      *    document.
      */
     res = xmlCreateURI();
-    if (res == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1421]) {
+      if ((res == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1421\n");
+      else
+        fprintf(stderr, "reached bug index 1421\n");
+    }
+    if ((!FIXREVERTER[1421] && (res == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto done;
+	#ifdef FRCOV
+	}
+	#endif
     if ((ref->scheme == NULL) && (ref->path == NULL) &&
 	((ref->authority == NULL) && (ref->server == NULL))) {
-	if (bas->scheme != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1422]) {
+	  if ((bas -> scheme != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1422\n");
+	  else
+	    fprintf(stderr, "reached bug index 1422\n");
+	}
+	if ((!FIXREVERTER[1422] && (bas -> scheme != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->scheme = xmlMemStrdup(bas->scheme);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (bas->authority != NULL)
 	    res->authority = xmlMemStrdup(bas->authority);
 	else if (bas->server != NULL) {
 	    res->server = xmlMemStrdup(bas->server);
-	    if (bas->user != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1423]) {
+	      if ((bas -> user != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 1423\n");
+	      else
+	        fprintf(stderr, "reached bug index 1423\n");
+	    }
+	    if ((!FIXREVERTER[1423] && (bas -> user != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		res->user = xmlMemStrdup(bas->user);
+		#ifdef FRCOV
+		}
+		#endif
 	    res->port = bas->port;
 	}
-	if (bas->path != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1424]) {
+	  if ((bas -> path != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1424\n");
+	  else
+	    fprintf(stderr, "reached bug index 1424\n");
+	}
+	if ((!FIXREVERTER[1424] && (bas -> path != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->path = xmlMemStrdup(bas->path);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (ref->query_raw != NULL)
 	    res->query_raw = xmlMemStrdup (ref->query_raw);
 	else if (ref->query != NULL)
 	    res->query = xmlMemStrdup(ref->query);
 	else if (bas->query_raw != NULL)
 	    res->query_raw = xmlMemStrdup(bas->query_raw);
-	else if (bas->query != NULL)
+	else 
+	#ifdef FRCOV
+	{if (FIXREVERTER[1425]) {
+	  if ((bas -> query != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1425\n");
+	  else
+	    fprintf(stderr, "reached bug index 1425\n");
+	}
+	if ((!FIXREVERTER[1425] && (bas -> query != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->query = xmlMemStrdup(bas->query);
-	if (ref->fragment != NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1426]) {
+	  if ((ref -> fragment != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1426\n");
+	  else
+	    fprintf(stderr, "reached bug index 1426\n");
+	}
+	if ((!FIXREVERTER[1426] && (ref -> fragment != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->fragment = xmlMemStrdup(ref->fragment);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	goto step_7;
     }
 
@@ -1991,15 +2745,60 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
 	val = xmlSaveUri(ref);
 	goto done;
     }
-    if (bas->scheme != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1427]) {
+      if ((bas -> scheme != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1427\n");
+      else
+        fprintf(stderr, "reached bug index 1427\n");
+    }
+    if ((!FIXREVERTER[1427] && (bas -> scheme != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	res->scheme = xmlMemStrdup(bas->scheme);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ref->query_raw != NULL)
 	res->query_raw = xmlMemStrdup(ref->query_raw);
-    else if (ref->query != NULL)
+    else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[1428]) {
+      if ((ref -> query != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1428\n");
+      else
+        fprintf(stderr, "reached bug index 1428\n");
+    }
+    if ((!FIXREVERTER[1428] && (ref -> query != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	res->query = xmlMemStrdup(ref->query);
-    if (ref->fragment != NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1429]) {
+      if ((ref -> fragment != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1429\n");
+      else
+        fprintf(stderr, "reached bug index 1429\n");
+    }
+    if ((!FIXREVERTER[1429] && (ref -> fragment != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	res->fragment = xmlMemStrdup(ref->fragment);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * 4) If the authority component is defined, then the reference is a
@@ -2013,20 +2812,65 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
 	    res->authority = xmlMemStrdup(ref->authority);
 	else {
 	    res->server = xmlMemStrdup(ref->server);
-	    if (ref->user != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1430]) {
+	      if ((ref -> user != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 1430\n");
+	      else
+	        fprintf(stderr, "reached bug index 1430\n");
+	    }
+	    if ((!FIXREVERTER[1430] && (ref -> user != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		res->user = xmlMemStrdup(ref->user);
+		#ifdef FRCOV
+		}
+		#endif
             res->port = ref->port;
 	}
-	if (ref->path != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1431]) {
+	  if ((ref -> path != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1431\n");
+	  else
+	    fprintf(stderr, "reached bug index 1431\n");
+	}
+	if ((!FIXREVERTER[1431] && (ref -> path != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->path = xmlMemStrdup(ref->path);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	goto step_7;
     }
     if (bas->authority != NULL)
 	res->authority = xmlMemStrdup(bas->authority);
     else if (bas->server != NULL) {
 	res->server = xmlMemStrdup(bas->server);
-	if (bas->user != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1432]) {
+	  if ((bas -> user != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1432\n");
+	  else
+	    fprintf(stderr, "reached bug index 1432\n");
+	}
+	if ((!FIXREVERTER[1432] && (bas -> user != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    res->user = xmlMemStrdup(bas->user);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	res->port = bas->port;
     }
 
@@ -2054,10 +2898,25 @@ xmlBuildURI(const xmlChar *URI, const xmlChar *base) {
     if (bas->path != NULL)
 	len += strlen(bas->path);
     res->path = (char *) xmlMallocAtomic(len);
-    if (res->path == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1433]) {
+      if ((res -> path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1433\n");
+      else
+        fprintf(stderr, "reached bug index 1433\n");
+    }
+    if ((!FIXREVERTER[1433] && (res -> path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlURIErrMemory("resolving URI against base\n");
 	goto done;
     }
+    #ifdef FRCOV
+    }
+    #endif
     res->path[0] = 0;
 
     /*
@@ -2396,8 +3255,23 @@ xmlCanonicPath(const xmlChar *path)
     xmlChar *ret;
     const xmlChar *absuri;
 
-    if (path == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1444]) {
+      if ((path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1444\n");
+      else
+        fprintf(stderr, "reached bug index 1444\n");
+    }
+    if ((!FIXREVERTER[1444] && (path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
 #if defined(_WIN32)
     /*
@@ -2528,16 +3402,46 @@ xmlPathToURI(const xmlChar *path)
     xmlURI temp;
     xmlChar *ret, *cal;
 
-    if (path == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1446]) {
+      if ((path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1446\n");
+      else
+        fprintf(stderr, "reached bug index 1446\n");
+    }
+    if ((!FIXREVERTER[1446] && (path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((uri = xmlParseURI((const char *) path)) != NULL) {
 	xmlFreeURI(uri);
 	return xmlStrdup(path);
     }
     cal = xmlCanonicPath(path);
-    if (cal == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1447]) {
+      if ((cal == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1447\n");
+      else
+        fprintf(stderr, "reached bug index 1447\n");
+    }
+    if ((!FIXREVERTER[1447] && (cal == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 #if defined(_WIN32) && !defined(__CYGWIN__)
     /* xmlCanonicPath can return an URI on Windows (is that the intended behaviour?)
        If 'cal' is a valid URI allready then we are done here, as continuing would make
diff --git a/valid.c b/valid.c
index 409aa81d..3c16bed6 100644
--- a/valid.c
+++ b/valid.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * valid.c : part of the code use to do the DTD handling and the validity
  *           checking
@@ -441,20 +445,50 @@ nodeVPush(xmlValidCtxtPtr ctxt, xmlNodePtr value)
         ctxt->nodeTab =
             (xmlNodePtr *) xmlMalloc(ctxt->nodeMax *
                                      sizeof(ctxt->nodeTab[0]));
-        if (ctxt->nodeTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[702]) {
+          if ((ctxt -> nodeTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 702\n");
+          else
+            fprintf(stderr, "reached bug index 702\n");
+        }
+        if ((!FIXREVERTER[702] && (ctxt -> nodeTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlVErrMemory(ctxt, "malloc failed");
             ctxt->nodeMax = 0;
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     if (ctxt->nodeNr >= ctxt->nodeMax) {
         xmlNodePtr *tmp;
         tmp = (xmlNodePtr *) xmlRealloc(ctxt->nodeTab,
 			      ctxt->nodeMax * 2 * sizeof(ctxt->nodeTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[703]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 703\n");
+          else
+            fprintf(stderr, "reached bug index 703\n");
+        }
+        if ((!FIXREVERTER[703] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlVErrMemory(ctxt, "realloc failed");
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->nodeMax *= 2;
 	ctxt->nodeTab = tmp;
     }
@@ -467,8 +501,23 @@ nodeVPop(xmlValidCtxtPtr ctxt)
 {
     xmlNodePtr ret;
 
-    if (ctxt->nodeNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[704]) {
+      if ((ctxt -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 704\n");
+      else
+        fprintf(stderr, "reached bug index 704\n");
+    }
+    if ((!FIXREVERTER[704] && (ctxt -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nodeNr--;
     if (ctxt->nodeNr > 0)
         ctxt->node = ctxt->nodeTab[ctxt->nodeNr - 1];
@@ -659,12 +708,27 @@ static int
 xmlValidBuildAContentModel(xmlElementContentPtr content,
 		           xmlValidCtxtPtr ctxt,
 		           const xmlChar *name) {
-    if (content == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[705]) {
+      if ((content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 705\n");
+      else
+        fprintf(stderr, "reached bug index 705\n");
+    }
+    if ((!FIXREVERTER[705] && (content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrValidNode(ctxt, NULL, XML_ERR_INTERNAL_ERROR,
 			"Found NULL content in content model of %s\n",
 			name, NULL, NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     switch (content->type) {
 	case XML_ELEMENT_CONTENT_PCDATA:
 	    xmlErrValidNode(ctxt, NULL, XML_ERR_INTERNAL_ERROR,
@@ -678,10 +742,25 @@ xmlValidBuildAContentModel(xmlElementContentPtr content,
 	    xmlChar *fullname;
 
 	    fullname = xmlBuildQName(content->name, content->prefix, fn, 50);
-	    if (fullname == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[706]) {
+	      if ((fullname == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 706\n");
+	      else
+	        fprintf(stderr, "reached bug index 706\n");
+	    }
+	    if ((!FIXREVERTER[706] && (fullname == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlVErrMemory(ctxt, "Building content model");
 		return(0);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	    switch (content->ocur) {
 		case XML_ELEMENT_CONTENT_ONCE:
@@ -812,8 +891,23 @@ xmlValidBuildAContentModel(xmlElementContentPtr content,
 int
 xmlValidBuildContentModel(xmlValidCtxtPtr ctxt, xmlElementPtr elem) {
 
-    if ((ctxt == NULL) || (elem == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[707]) {
+      if ((ctxt == (void *) 0 || elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 707\n");
+      else
+        fprintf(stderr, "reached bug index 707\n");
+    }
+    if ((!FIXREVERTER[707] && (ctxt == (void *) 0 || elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     if (elem->type != XML_ELEMENT_DECL)
 	return(0);
     if (elem->etype != XML_ELEMENT_TYPE_ELEMENT)
@@ -828,13 +922,28 @@ xmlValidBuildContentModel(xmlValidCtxtPtr ctxt, xmlElementPtr elem) {
     }
 
     ctxt->am = xmlNewAutomata();
-    if (ctxt->am == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[708]) {
+      if ((ctxt -> am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 708\n");
+      else
+        fprintf(stderr, "reached bug index 708\n");
+    }
+    if ((!FIXREVERTER[708] && (ctxt -> am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrValidNode(ctxt, (xmlNodePtr) elem,
 	                XML_ERR_INTERNAL_ERROR,
 	                "Cannot create automata for element %s\n",
 		        elem->name, NULL, NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->state = xmlAutomataGetInitState(ctxt->am);
     xmlValidBuildAContentModel(elem->content, ctxt, elem->name);
     xmlAutomataSetFinalState(ctxt->am, ctxt->state);
@@ -923,8 +1032,23 @@ xmlNewDocElementContent(xmlDocPtr doc, const xmlChar *name,
     xmlElementContentPtr ret;
     xmlDictPtr dict = NULL;
 
-    if (doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[709]) {
+      if ((doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 709\n");
+      else
+        fprintf(stderr, "reached bug index 709\n");
+    }
+    if ((!FIXREVERTER[709] && (doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     switch(type) {
 	case XML_ELEMENT_CONTENT_ELEMENT:
@@ -950,10 +1074,25 @@ xmlNewDocElementContent(xmlDocPtr doc, const xmlChar *name,
 	    return(NULL);
     }
     ret = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[710]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 710\n");
+      else
+        fprintf(stderr, "reached bug index 710\n");
+    }
+    if ((!FIXREVERTER[710] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(NULL, "malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlElementContent));
     ret->type = type;
     ret->ocur = XML_ELEMENT_CONTENT_ONCE;
@@ -1009,16 +1148,61 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
     xmlElementContentPtr ret = NULL, prev = NULL, tmp;
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) return(NULL);
-
-    if (doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[711]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 711\n");
+      else
+        fprintf(stderr, "reached bug index 711\n");
+    }
+    if ((!FIXREVERTER[711] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[712]) {
+      if ((doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 712\n");
+      else
+        fprintf(stderr, "reached bug index 712\n");
+    }
+    if ((!FIXREVERTER[712] && (doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[713]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 713\n");
+      else
+        fprintf(stderr, "reached bug index 713\n");
+    }
+    if ((!FIXREVERTER[713] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(NULL, "malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlElementContent));
     ret->type = cur->type;
     ret->ocur = cur->ocur;
@@ -1035,8 +1219,23 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 	else
 	    ret->prefix = xmlStrdup(cur->prefix);
     }
-    if (cur->c1 != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[714]) {
+      if ((cur -> c1 != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 714\n");
+      else
+        fprintf(stderr, "reached bug index 714\n");
+    }
+    if ((!FIXREVERTER[714] && (cur -> c1 != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->c1 = xmlCopyDocElementContent(doc, cur->c1);
+        #ifdef FRCOV
+        }
+        #endif
     if (ret->c1 != NULL)
 	ret->c1->parent = ret;
     if (cur->c2 != NULL) {
@@ -1044,10 +1243,25 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 	cur = cur->c2;
 	while (cur != NULL) {
 	    tmp = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[715]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 715\n");
+	      else
+	        fprintf(stderr, "reached bug index 715\n");
+	    }
+	    if ((!FIXREVERTER[715] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlVErrMemory(NULL, "malloc failed");
 		return(ret);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memset(tmp, 0, sizeof(xmlElementContent));
 	    tmp->type = cur->type;
 	    tmp->ocur = cur->ocur;
@@ -1065,8 +1279,23 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 		else
 		    tmp->prefix = xmlStrdup(cur->prefix);
 	    }
-	    if (cur->c1 != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[716]) {
+	      if ((cur -> c1 != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 716\n");
+	      else
+	        fprintf(stderr, "reached bug index 716\n");
+	    }
+	    if ((!FIXREVERTER[716] && (cur -> c1 != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        tmp->c1 = xmlCopyDocElementContent(doc,cur->c1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    if (tmp->c1 != NULL)
 		tmp->c1->parent = ret;
 	    prev = tmp;
@@ -1102,8 +1331,23 @@ xmlFreeDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
     xmlElementContentPtr next;
     xmlDictPtr dict = NULL;
 
-    if (doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[717]) {
+      if ((doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 717\n");
+      else
+        fprintf(stderr, "reached bug index 717\n");
+    }
+    if ((!FIXREVERTER[717] && (doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     while (cur != NULL) {
         next = cur->c2;
@@ -1250,13 +1494,43 @@ void
 xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int englob) {
     int len;
 
-    if (content == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[719]) {
+      if ((content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 719\n");
+      else
+        fprintf(stderr, "reached bug index 719\n");
+    }
+    if ((!FIXREVERTER[719] && (content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     len = strlen(buf);
-    if (size - len < 50) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[720]) {
+      if ((size - len < 50 ) && !(0))
+        fprintf(stderr, "triggered bug index 720\n");
+      else
+        fprintf(stderr, "reached bug index 720\n");
+    }
+    if ((!FIXREVERTER[720] && (size - len < 50 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if ((size - len > 4) && (buf[len - 1] != '.'))
 	    strcat(buf, " ...");
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (englob) strcat(buf, "(");
     switch (content->type) {
         case XML_ELEMENT_CONTENT_PCDATA:
@@ -1285,11 +1559,26 @@ xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int
 	    else
 		xmlSnprintfElementContent(buf, size, content->c1, 0);
 	    len = strlen(buf);
-	    if (size - len < 50) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[721]) {
+	      if ((size - len < 50 ) && !(0))
+	        fprintf(stderr, "triggered bug index 721\n");
+	      else
+	        fprintf(stderr, "reached bug index 721\n");
+	    }
+	    if ((!FIXREVERTER[721] && (size - len < 50 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if ((size - len > 4) && (buf[len - 1] != '.'))
 		    strcat(buf, " ...");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
             strcat(buf, " , ");
 	    if (((content->c2->type == XML_ELEMENT_CONTENT_OR) ||
 		 (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)) &&
@@ -1305,11 +1594,26 @@ xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int
 	    else
 		xmlSnprintfElementContent(buf, size, content->c1, 0);
 	    len = strlen(buf);
-	    if (size - len < 50) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[722]) {
+	      if ((size - len < 50 ) && !(0))
+	        fprintf(stderr, "triggered bug index 722\n");
+	      else
+	        fprintf(stderr, "reached bug index 722\n");
+	    }
+	    if ((!FIXREVERTER[722] && (size - len < 50 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if ((size - len > 4) && (buf[len - 1] != '.'))
 		    strcat(buf, " ...");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
             strcat(buf, " | ");
 	    if (((content->c2->type == XML_ELEMENT_CONTENT_SEQ) ||
 		 (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)) &&
@@ -1350,7 +1654,22 @@ xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int
  */
 static void
 xmlFreeElement(xmlElementPtr elem) {
-    if (elem == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[723]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 723\n");
+      else
+        fprintf(stderr, "reached bug index 723\n");
+    }
+    if ((!FIXREVERTER[723] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     xmlUnlinkNode((xmlNodePtr) elem);
     xmlFreeDocElementContent(elem->doc, elem->content);
     if (elem->name != NULL)
@@ -1387,12 +1706,42 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
     xmlAttributePtr oldAttributes = NULL;
     xmlChar *ns, *uqname;
 
-    if (dtd == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[724]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 724\n");
+      else
+        fprintf(stderr, "reached bug index 724\n");
+    }
+    if ((!FIXREVERTER[724] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (name == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[725]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 725\n");
+      else
+        fprintf(stderr, "reached bug index 725\n");
+    }
+    if ((!FIXREVERTER[725] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     switch (type) {
         case XML_ELEMENT_TYPE_EMPTY:
@@ -1412,20 +1761,50 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
 	    }
 	    break;
 	case XML_ELEMENT_TYPE_MIXED:
-	    if (content == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[726]) {
+	      if ((content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 726\n");
+	      else
+	        fprintf(stderr, "reached bug index 726\n");
+	    }
+	    if ((!FIXREVERTER[726] && (content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,
 		        "xmlAddElementDecl: content == NULL for MIXED\n",
 			NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    break;
 	case XML_ELEMENT_TYPE_ELEMENT:
-	    if (content == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[727]) {
+	      if ((content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 727\n");
+	      else
+	        fprintf(stderr, "reached bug index 727\n");
+	    }
+	    if ((!FIXREVERTER[727] && (content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,
 		        "xmlAddElementDecl: content == NULL for ELEMENT\n",
 			NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    break;
 	default:
 	    xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,
@@ -1438,8 +1817,23 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
      * check if name is a QName
      */
     uqname = xmlSplitQName2(name, &ns);
-    if (uqname != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[728]) {
+      if ((uqname != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 728\n");
+      else
+        fprintf(stderr, "reached bug index 728\n");
+    }
+    if ((!FIXREVERTER[728] && (uqname != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	name = uqname;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Create the Element table if needed.
@@ -1448,8 +1842,23 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
     if (table == NULL) {
 	xmlDictPtr dict = NULL;
 
-	if (dtd->doc != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[729]) {
+	  if ((dtd -> doc != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 729\n");
+	  else
+	    fprintf(stderr, "reached bug index 729\n");
+	}
+	if ((!FIXREVERTER[729] && (dtd -> doc != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    dict = dtd->doc->dict;
+	    #ifdef FRCOV
+	    }
+	    #endif
         table = xmlHashCreateDict(0, dict);
 	dtd->elements = (void *) table;
     }
@@ -1568,8 +1977,23 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
         ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||
          (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1))) {
 	ret->content = content;
-	if (content != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[730]) {
+	  if ((content != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 730\n");
+	  else
+	    fprintf(stderr, "reached bug index 730\n");
+	}
+	if ((!FIXREVERTER[730] && (content != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    content->parent = (xmlElementContentPtr) 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
 	ret->content = xmlCopyDocElementContent(dtd->doc, content);
     }
@@ -1755,14 +2179,44 @@ xmlCreateEnumeration(const xmlChar *name) {
     xmlEnumerationPtr ret;
 
     ret = (xmlEnumerationPtr) xmlMalloc(sizeof(xmlEnumeration));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[734]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 734\n");
+      else
+        fprintf(stderr, "reached bug index 734\n");
+    }
+    if ((!FIXREVERTER[734] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(NULL, "malloc failed");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlEnumeration));
 
-    if (name != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[735]) {
+      if ((name != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 735\n");
+      else
+        fprintf(stderr, "reached bug index 735\n");
+    }
+    if ((!FIXREVERTER[735] && (name != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->name = xmlStrdup(name);
+        #ifdef FRCOV
+        }
+        #endif
     return(ret);
 }
 
@@ -1774,7 +2228,22 @@ xmlCreateEnumeration(const xmlChar *name) {
  */
 void
 xmlFreeEnumeration(xmlEnumerationPtr cur) {
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[736]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 736\n");
+      else
+        fprintf(stderr, "reached bug index 736\n");
+    }
+    if ((!FIXREVERTER[736] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (cur->next != NULL) xmlFreeEnumeration(cur->next);
 
@@ -1847,7 +2316,22 @@ xmlScanIDAttributeDecl(xmlValidCtxtPtr ctxt, xmlElementPtr elem, int err) {
     xmlAttributePtr cur;
     int ret = 0;
 
-    if (elem == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[740]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 740\n");
+      else
+        fprintf(stderr, "reached bug index 740\n");
+    }
+    if ((!FIXREVERTER[740] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = elem->attributes;
     while (cur != NULL) {
         if (cur->atype == XML_ATTRIBUTE_ID) {
@@ -1873,7 +2357,22 @@ static void
 xmlFreeAttribute(xmlAttributePtr attr) {
     xmlDictPtr dict;
 
-    if (attr == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[741]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 741\n");
+      else
+        fprintf(stderr, "reached bug index 741\n");
+    }
+    if ((!FIXREVERTER[741] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (attr->doc != NULL)
 	dict = attr->doc->dict;
     else
@@ -1933,20 +2432,80 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
     xmlElementPtr elemDef;
     xmlDictPtr dict = NULL;
 
-    if (dtd == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[742]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 742\n");
+      else
+        fprintf(stderr, "reached bug index 742\n");
+    }
+    if ((!FIXREVERTER[742] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeEnumeration(tree);
 	return(NULL);
     }
-    if (name == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[743]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 743\n");
+      else
+        fprintf(stderr, "reached bug index 743\n");
+    }
+    if ((!FIXREVERTER[743] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeEnumeration(tree);
 	return(NULL);
     }
-    if (elem == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[744]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 744\n");
+      else
+        fprintf(stderr, "reached bug index 744\n");
+    }
+    if ((!FIXREVERTER[744] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeEnumeration(tree);
 	return(NULL);
     }
-    if (dtd->doc != NULL)
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[745]) {
+      if ((dtd -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 745\n");
+      else
+        fprintf(stderr, "reached bug index 745\n");
+    }
+    if ((!FIXREVERTER[745] && (dtd -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	dict = dtd->doc->dict;
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifdef LIBXML_VALID_ENABLED
     /*
@@ -1986,8 +2545,23 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
 	                "Attribute %s of %s: invalid default value\n",
 	                elem, name, defaultValue);
 	defaultValue = NULL;
-	if (ctxt != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[746]) {
+	  if ((ctxt != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 746\n");
+	  else
+	    fprintf(stderr, "reached bug index 746\n");
+	}
+	if ((!FIXREVERTER[746] && (ctxt != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->valid = 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 #endif /* LIBXML_VALID_ENABLED */
 
@@ -2013,20 +2587,50 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
         table = xmlHashCreateDict(0, dict);
 	dtd->attributes = (void *) table;
     }
-    if (table == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[747]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 747\n");
+      else
+        fprintf(stderr, "reached bug index 747\n");
+    }
+    if ((!FIXREVERTER[747] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt,
             "xmlAddAttributeDecl: Table creation failed!\n");
 	xmlFreeEnumeration(tree);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 
     ret = (xmlAttributePtr) xmlMalloc(sizeof(xmlAttribute));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[748]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 748\n");
+      else
+        fprintf(stderr, "reached bug index 748\n");
+    }
+    if ((!FIXREVERTER[748] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt, "malloc failed");
 	xmlFreeEnumeration(tree);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlAttribute));
     ret->type = XML_ATTRIBUTE_DECL;
 
@@ -2088,8 +2692,23 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
 	    xmlErrValidNode(ctxt, (xmlNodePtr) dtd, XML_DTD_MULTIPLE_ID,
 	   "Element %s has too may ID attributes defined : %s\n",
 		   elem, name, NULL);
-	    if (ctxt != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[749]) {
+	      if ((ctxt != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 749\n");
+	      else
+	        fprintf(stderr, "reached bug index 749\n");
+	    }
+	    if ((!FIXREVERTER[749] && (ctxt != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		ctxt->valid = 0;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 #endif /* LIBXML_VALID_ENABLED */
 
@@ -2109,8 +2728,23 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
 		   ((xmlStrEqual(tmp->name, BAD_CAST "xmlns")) ||
 		    ((ret->prefix != NULL &&
 		     (xmlStrEqual(ret->prefix, BAD_CAST "xmlns")))))) {
-		if (tmp->nexth == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[750]) {
+		  if ((tmp -> nexth == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 750\n");
+		  else
+		    fprintf(stderr, "reached bug index 750\n");
+		}
+		if ((!FIXREVERTER[750] && (tmp -> nexth == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    break;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		tmp = tmp->nexth;
 	    }
 	    if (tmp != NULL) {
@@ -2320,7 +2954,22 @@ xmlDumpAttributeTable(xmlBufferPtr buf, xmlAttributeTablePtr table) {
  */
 static void
 xmlFreeNotation(xmlNotationPtr nota) {
-    if (nota == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[758]) {
+      if ((nota == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 758\n");
+      else
+        fprintf(stderr, "reached bug index 758\n");
+    }
+    if ((!FIXREVERTER[758] && (nota == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (nota->name != NULL)
 	xmlFree((xmlChar *) nota->name);
     if (nota->PublicID != NULL)
@@ -2350,12 +2999,42 @@ xmlAddNotationDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd,
     xmlNotationPtr ret;
     xmlNotationTablePtr table;
 
-    if (dtd == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[759]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 759\n");
+      else
+        fprintf(stderr, "reached bug index 759\n");
+    }
+    if ((!FIXREVERTER[759] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (name == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[760]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 760\n");
+      else
+        fprintf(stderr, "reached bug index 760\n");
+    }
+    if ((!FIXREVERTER[760] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((PublicID == NULL) && (SystemID == NULL)) {
 	return(NULL);
     }
@@ -2366,32 +3045,107 @@ xmlAddNotationDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd,
     table = (xmlNotationTablePtr) dtd->notations;
     if (table == NULL) {
 	xmlDictPtr dict = NULL;
-	if (dtd->doc != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[761]) {
+	  if ((dtd -> doc != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 761\n");
+	  else
+	    fprintf(stderr, "reached bug index 761\n");
+	}
+	if ((!FIXREVERTER[761] && (dtd -> doc != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    dict = dtd->doc->dict;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
         dtd->notations = table = xmlHashCreateDict(0, dict);
     }
-    if (table == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[762]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 762\n");
+      else
+        fprintf(stderr, "reached bug index 762\n");
+    }
+    if ((!FIXREVERTER[762] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt,
 		"xmlAddNotationDecl: Table creation failed!\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = (xmlNotationPtr) xmlMalloc(sizeof(xmlNotation));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[763]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 763\n");
+      else
+        fprintf(stderr, "reached bug index 763\n");
+    }
+    if ((!FIXREVERTER[763] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt, "malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlNotation));
 
     /*
      * fill the structure.
      */
     ret->name = xmlStrdup(name);
-    if (SystemID != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[764]) {
+      if ((SystemID != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 764\n");
+      else
+        fprintf(stderr, "reached bug index 764\n");
+    }
+    if ((!FIXREVERTER[764] && (SystemID != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->SystemID = xmlStrdup(SystemID);
-    if (PublicID != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[765]) {
+      if ((PublicID != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 765\n");
+      else
+        fprintf(stderr, "reached bug index 765\n");
+    }
+    if ((!FIXREVERTER[765] && (PublicID != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ret->PublicID = xmlStrdup(PublicID);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Validity Check:
@@ -2550,10 +3304,40 @@ static void
 xmlFreeID(xmlIDPtr id) {
     xmlDictPtr dict = NULL;
 
-    if (id == NULL) return;
-
-    if (id->doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[769]) {
+      if ((id == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 769\n");
+      else
+        fprintf(stderr, "reached bug index 769\n");
+    }
+    if ((!FIXREVERTER[769] && (id == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[770]) {
+      if ((id -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 770\n");
+      else
+        fprintf(stderr, "reached bug index 770\n");
+    }
+    if ((!FIXREVERTER[770] && (id -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = id->doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (id->value != NULL)
 	DICT_FREE(id->value)
@@ -2580,15 +3364,60 @@ xmlAddID(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
     xmlIDPtr ret;
     xmlIDTablePtr table;
 
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[771]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 771\n");
+      else
+        fprintf(stderr, "reached bug index 771\n");
+    }
+    if ((!FIXREVERTER[771] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (value == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[772]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 772\n");
+      else
+        fprintf(stderr, "reached bug index 772\n");
+    }
+    if ((!FIXREVERTER[772] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (attr == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[773]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 773\n");
+      else
+        fprintf(stderr, "reached bug index 773\n");
+    }
+    if ((!FIXREVERTER[773] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Create the ID table if needed.
@@ -2597,24 +3426,69 @@ xmlAddID(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
     if (table == NULL)  {
         doc->ids = table = xmlHashCreateDict(0, doc->dict);
     }
-    if (table == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[774]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 774\n");
+      else
+        fprintf(stderr, "reached bug index 774\n");
+    }
+    if ((!FIXREVERTER[774] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt,
 		"xmlAddID: Table creation failed!\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = (xmlIDPtr) xmlMalloc(sizeof(xmlID));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[775]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 775\n");
+      else
+        fprintf(stderr, "reached bug index 775\n");
+    }
+    if ((!FIXREVERTER[775] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt, "malloc failed");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * fill the structure.
      */
     ret->value = xmlStrdup(value);
     ret->doc = doc;
-    if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[776]) {
+      fprintf(stderr, "reached bug index 776\n");
+    }
+    if ((FIXREVERTER[776] && (ctxt != (void *) 0 )) || (!FIXREVERTER[776] && (ctxt != (void *) 0 && ctxt -> vstateNr != 0 ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> vstateNr != 0 ))
+        fprintf(stderr, "triggered bug index 776\n");
+      #endif
+    
 	/*
 	 * Operating in streaming mode, attr is gonna disapear
 	 */
@@ -2627,6 +3501,9 @@ xmlAddID(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
 	ret->attr = attr;
 	ret->name = NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->lineno = xmlGetLineNo(attr->parent);
 
     if (xmlHashAddEntry(table, value, ret) < 0) {
@@ -2671,12 +3548,42 @@ xmlFreeIDTable(xmlIDTablePtr table) {
  */
 int
 xmlIsID(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
-    if ((attr == NULL) || (attr->name == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[777]) {
+      if ((attr == (void *) 0 || attr -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 777\n");
+      else
+        fprintf(stderr, "reached bug index 777\n");
+    }
+    if ((!FIXREVERTER[777] && (attr == (void *) 0 || attr -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if ((attr->ns != NULL) && (attr->ns->prefix != NULL) &&
         (!strcmp((char *) attr->name, "id")) &&
         (!strcmp((char *) attr->ns->prefix, "xml")))
 	return(1);
-    if (doc == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[778]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 778\n");
+      else
+        fprintf(stderr, "reached bug index 778\n");
+    }
+    if ((!FIXREVERTER[778] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if ((doc->intSubset == NULL) && (doc->extSubset == NULL) &&
         (doc->type != XML_HTML_DOCUMENT_NODE)) {
 	return(0);
@@ -2702,13 +3609,31 @@ xmlIsID(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
 	    xmlBuildQName(attr->name, attr->ns->prefix, fattr, 50) :
 	    (xmlChar *)attr->name;
 
-	if (fullelemname != NULL && fullattrname != NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[779]) {
+	  fprintf(stderr, "reached bug index 779\n");
+	}
+	if ((FIXREVERTER[779] && (fullelemname != (void *) 0 )) || (!FIXREVERTER[779] && (fullelemname != (void *) 0 && fullattrname != (void *) 0 ))
+	#else
+	if (fullelemname != (void *) 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(fullattrname != (void *) 0 ))
+	    fprintf(stderr, "triggered bug index 779\n");
+	  #endif
+	
 	    attrDecl = xmlGetDtdAttrDesc(doc->intSubset, fullelemname,
 		                         fullattrname);
 	    if ((attrDecl == NULL) && (doc->extSubset != NULL))
 		attrDecl = xmlGetDtdAttrDesc(doc->extSubset, fullelemname,
 					     fullattrname);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	if ((fullattrname != fattr) && (fullattrname != attr->name))
 	    xmlFree(fullattrname);
@@ -2736,16 +3661,76 @@ xmlRemoveID(xmlDocPtr doc, xmlAttrPtr attr) {
     xmlIDPtr id;
     xmlChar *ID;
 
-    if (doc == NULL) return(-1);
-    if (attr == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[780]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 780\n");
+      else
+        fprintf(stderr, "reached bug index 780\n");
+    }
+    if ((!FIXREVERTER[780] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[781]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 781\n");
+      else
+        fprintf(stderr, "reached bug index 781\n");
+    }
+    if ((!FIXREVERTER[781] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     table = (xmlIDTablePtr) doc->ids;
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[782]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 782\n");
+      else
+        fprintf(stderr, "reached bug index 782\n");
+    }
+    if ((!FIXREVERTER[782] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     ID = xmlNodeListGetString(doc, attr->children, 1);
-    if (ID == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[783]) {
+      if ((ID == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 783\n");
+      else
+        fprintf(stderr, "reached bug index 783\n");
+    }
+    if ((!FIXREVERTER[783] && (ID == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     id = xmlHashLookup(table, ID);
     if (id == NULL || id->attr != attr) {
@@ -2828,7 +3813,22 @@ typedef xmlValidateMemo *xmlValidateMemoPtr;
 static void
 xmlFreeRef(xmlLinkPtr lk) {
     xmlRefPtr ref = (xmlRefPtr)xmlLinkGetData(lk);
-    if (ref == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[789]) {
+      if ((ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 789\n");
+      else
+        fprintf(stderr, "reached bug index 789\n");
+    }
+    if ((!FIXREVERTER[789] && (ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (ref->value != NULL)
         xmlFree((xmlChar *)ref->value);
     if (ref->name != NULL)
@@ -2901,15 +3901,60 @@ xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
     xmlRefTablePtr table;
     xmlListPtr ref_list;
 
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[791]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 791\n");
+      else
+        fprintf(stderr, "reached bug index 791\n");
+    }
+    if ((!FIXREVERTER[791] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
-    if (value == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[792]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 792\n");
+      else
+        fprintf(stderr, "reached bug index 792\n");
+    }
+    if ((!FIXREVERTER[792] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
-    if (attr == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[793]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 793\n");
+      else
+        fprintf(stderr, "reached bug index 793\n");
+    }
+    if ((!FIXREVERTER[793] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Create the Ref table if needed.
@@ -2918,23 +3963,68 @@ xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
     if (table == NULL) {
         doc->refs = table = xmlHashCreateDict(0, doc->dict);
     }
-    if (table == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[794]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 794\n");
+      else
+        fprintf(stderr, "reached bug index 794\n");
+    }
+    if ((!FIXREVERTER[794] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt,
             "xmlAddRef: Table creation failed!\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = (xmlRefPtr) xmlMalloc(sizeof(xmlRef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[795]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 795\n");
+      else
+        fprintf(stderr, "reached bug index 795\n");
+    }
+    if ((!FIXREVERTER[795] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlVErrMemory(ctxt, "malloc failed");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * fill the structure.
      */
     ret->value = xmlStrdup(value);
-    if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[796]) {
+      fprintf(stderr, "reached bug index 796\n");
+    }
+    if ((FIXREVERTER[796] && (ctxt != (void *) 0 )) || (!FIXREVERTER[796] && (ctxt != (void *) 0 && ctxt -> vstateNr != 0 ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> vstateNr != 0 ))
+        fprintf(stderr, "triggered bug index 796\n");
+      #endif
+    
 	/*
 	 * Operating in streaming mode, attr is gonna disapear
 	 */
@@ -2944,6 +4034,9 @@ xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
 	ret->name = NULL;
 	ret->attr = attr;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->lineno = xmlGetLineNo(attr->parent);
 
     /* To add a reference :-
@@ -3011,11 +4104,41 @@ xmlFreeRefTable(xmlRefTablePtr table) {
  */
 int
 xmlIsRef(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[797]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 797\n");
+      else
+        fprintf(stderr, "reached bug index 797\n");
+    }
+    if ((!FIXREVERTER[797] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     if (doc == NULL) {
         doc = attr->doc;
-	if (doc == NULL) return(0);
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[798]) {
+	  if ((doc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 798\n");
+	  else
+	    fprintf(stderr, "reached bug index 798\n");
+	}
+	if ((!FIXREVERTER[798] && (doc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) return(0);
+	#ifdef FRCOV
+	}
+	#endif
     }
 
     if ((doc->intSubset == NULL) && (doc->extSubset == NULL)) {
@@ -3026,7 +4149,22 @@ xmlIsRef(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
     } else {
         xmlAttributePtr attrDecl;
 
-        if (elem == NULL) return(0);
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[799]) {
+          if ((elem == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 799\n");
+          else
+            fprintf(stderr, "reached bug index 799\n");
+        }
+        if ((!FIXREVERTER[799] && (elem == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) return(0);
+        #ifdef FRCOV
+        }
+        #endif
         attrDecl = xmlGetDtdAttrDesc(doc->intSubset, elem->name, attr->name);
         if ((attrDecl == NULL) && (doc->extSubset != NULL))
             attrDecl = xmlGetDtdAttrDesc(doc->extSubset,
@@ -3147,14 +4285,59 @@ xmlGetDtdElementDesc(xmlDtdPtr dtd, const xmlChar *name) {
     xmlElementPtr cur;
     xmlChar *uqname = NULL, *prefix = NULL;
 
-    if ((dtd == NULL) || (name == NULL)) return(NULL);
-    if (dtd->elements == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[808]) {
+      if ((dtd == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 808\n");
+      else
+        fprintf(stderr, "reached bug index 808\n");
+    }
+    if ((!FIXREVERTER[808] && (dtd == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[809]) {
+      if ((dtd -> elements == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 809\n");
+      else
+        fprintf(stderr, "reached bug index 809\n");
+    }
+    if ((!FIXREVERTER[809] && (dtd -> elements == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     table = (xmlElementTablePtr) dtd->elements;
 
     uqname = xmlSplitQName2(name, &prefix);
-    if (uqname != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[810]) {
+      if ((uqname != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 810\n");
+      else
+        fprintf(stderr, "reached bug index 810\n");
+    }
+    if ((!FIXREVERTER[810] && (uqname != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         name = uqname;
+        #ifdef FRCOV
+        }
+        #endif
     cur = xmlHashLookup2(table, name, prefix);
     if (prefix != NULL) xmlFree(prefix);
     if (uqname != NULL) xmlFree(uqname);
@@ -3177,12 +4360,42 @@ xmlGetDtdElementDesc2(xmlDtdPtr dtd, const xmlChar *name, int create) {
     xmlElementPtr cur;
     xmlChar *uqname = NULL, *prefix = NULL;
 
-    if (dtd == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[811]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 811\n");
+      else
+        fprintf(stderr, "reached bug index 811\n");
+    }
+    if ((!FIXREVERTER[811] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (dtd->elements == NULL) {
 	xmlDictPtr dict = NULL;
 
-	if (dtd->doc != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[812]) {
+	  if ((dtd -> doc != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 812\n");
+	  else
+	    fprintf(stderr, "reached bug index 812\n");
+	}
+	if ((!FIXREVERTER[812] && (dtd -> doc != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    dict = dtd->doc->dict;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	if (!create)
 	    return(NULL);
@@ -3194,23 +4407,68 @@ xmlGetDtdElementDesc2(xmlDtdPtr dtd, const xmlChar *name, int create) {
 	    table = xmlHashCreateDict(0, dict);
 	    dtd->elements = (void *) table;
 	}
-	if (table == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[813]) {
+	  if ((table == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 813\n");
+	  else
+	    fprintf(stderr, "reached bug index 813\n");
+	}
+	if ((!FIXREVERTER[813] && (table == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlVErrMemory(NULL, "element table allocation failed");
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     table = (xmlElementTablePtr) dtd->elements;
 
     uqname = xmlSplitQName2(name, &prefix);
-    if (uqname != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[814]) {
+      if ((uqname != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 814\n");
+      else
+        fprintf(stderr, "reached bug index 814\n");
+    }
+    if ((!FIXREVERTER[814] && (uqname != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         name = uqname;
+        #ifdef FRCOV
+        }
+        #endif
     cur = xmlHashLookup2(table, name, prefix);
     if ((cur == NULL) && (create)) {
 	cur = (xmlElementPtr) xmlMalloc(sizeof(xmlElement));
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[815]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 815\n");
+	  else
+	    fprintf(stderr, "reached bug index 815\n");
+	}
+	if ((!FIXREVERTER[815] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlVErrMemory(NULL, "malloc failed");
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(cur, 0, sizeof(xmlElement));
 	cur->type = XML_ELEMENT_DECL;
 
@@ -3244,8 +4502,38 @@ xmlGetDtdQElementDesc(xmlDtdPtr dtd, const xmlChar *name,
 	              const xmlChar *prefix) {
     xmlElementTablePtr table;
 
-    if (dtd == NULL) return(NULL);
-    if (dtd->elements == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[816]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 816\n");
+      else
+        fprintf(stderr, "reached bug index 816\n");
+    }
+    if ((!FIXREVERTER[816] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[817]) {
+      if ((dtd -> elements == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 817\n");
+      else
+        fprintf(stderr, "reached bug index 817\n");
+    }
+    if ((!FIXREVERTER[817] && (dtd -> elements == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     table = (xmlElementTablePtr) dtd->elements;
 
     return(xmlHashLookup2(table, name, prefix));
@@ -3269,12 +4557,57 @@ xmlGetDtdAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name) {
     xmlAttributePtr cur;
     xmlChar *uqname = NULL, *prefix = NULL;
 
-    if (dtd == NULL) return(NULL);
-    if (dtd->attributes == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[818]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 818\n");
+      else
+        fprintf(stderr, "reached bug index 818\n");
+    }
+    if ((!FIXREVERTER[818] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[819]) {
+      if ((dtd -> attributes == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 819\n");
+      else
+        fprintf(stderr, "reached bug index 819\n");
+    }
+    if ((!FIXREVERTER[819] && (dtd -> attributes == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     table = (xmlAttributeTablePtr) dtd->attributes;
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[820]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 820\n");
+      else
+        fprintf(stderr, "reached bug index 820\n");
+    }
+    if ((!FIXREVERTER[820] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     uqname = xmlSplitQName2(name, &prefix);
 
@@ -3305,8 +4638,38 @@ xmlGetDtdQAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name,
 	          const xmlChar *prefix) {
     xmlAttributeTablePtr table;
 
-    if (dtd == NULL) return(NULL);
-    if (dtd->attributes == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[821]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 821\n");
+      else
+        fprintf(stderr, "reached bug index 821\n");
+    }
+    if ((!FIXREVERTER[821] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[822]) {
+      if ((dtd -> attributes == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 822\n");
+      else
+        fprintf(stderr, "reached bug index 822\n");
+    }
+    if ((!FIXREVERTER[822] && (dtd -> attributes == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     table = (xmlAttributeTablePtr) dtd->attributes;
 
     return(xmlHashLookup3(table, name, prefix, elem));
@@ -3326,8 +4689,38 @@ xmlNotationPtr
 xmlGetDtdNotationDesc(xmlDtdPtr dtd, const xmlChar *name) {
     xmlNotationTablePtr table;
 
-    if (dtd == NULL) return(NULL);
-    if (dtd->notations == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[823]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 823\n");
+      else
+        fprintf(stderr, "reached bug index 823\n");
+    }
+    if ((!FIXREVERTER[823] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[824]) {
+      if ((dtd -> notations == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 824\n");
+      else
+        fprintf(stderr, "reached bug index 824\n");
+    }
+    if ((!FIXREVERTER[824] && (dtd -> notations == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     table = (xmlNotationTablePtr) dtd->notations;
 
     return(xmlHashLookup(table, name));
@@ -3350,8 +4743,22 @@ int
 xmlValidateNotationUse(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
                        const xmlChar *notationName) {
     xmlNotationPtr notaDecl;
-    if ((doc == NULL) || (doc->intSubset == NULL) ||
-        (notationName == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[825]) {
+      if ((doc == (void *) 0 || doc -> intSubset == (void *) 0 || notationName == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 825\n");
+      else
+        fprintf(stderr, "reached bug index 825\n");
+    }
+    if ((!FIXREVERTER[825] && (doc == (void *) 0 || doc -> intSubset == (void *) 0 || notationName == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     notaDecl = xmlGetDtdNotationDesc(doc->intSubset, notationName);
     if ((notaDecl == NULL) && (doc->extSubset != NULL))
@@ -3382,12 +4789,42 @@ int
 xmlIsMixedElement(xmlDocPtr doc, const xmlChar *name) {
     xmlElementPtr elemDecl;
 
-    if ((doc == NULL) || (doc->intSubset == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[826]) {
+      if ((doc == (void *) 0 || doc -> intSubset == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 826\n");
+      else
+        fprintf(stderr, "reached bug index 826\n");
+    }
+    if ((!FIXREVERTER[826] && (doc == (void *) 0 || doc -> intSubset == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     elemDecl = xmlGetDtdElementDesc(doc->intSubset, name);
     if ((elemDecl == NULL) && (doc->extSubset != NULL))
 	elemDecl = xmlGetDtdElementDesc(doc->extSubset, name);
-    if (elemDecl == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[827]) {
+      if ((elemDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 827\n");
+      else
+        fprintf(stderr, "reached bug index 827\n");
+    }
+    if ((!FIXREVERTER[827] && (elemDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     switch (elemDecl->etype) {
 	case XML_ELEMENT_TYPE_UNDEFINED:
 	    return(-1);
@@ -3490,7 +4927,22 @@ xmlValidateNameValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[828]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 828\n");
+      else
+        fprintf(stderr, "reached bug index 828\n");
+    }
+    if ((!FIXREVERTER[828] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3538,7 +4990,22 @@ xmlValidateNamesValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[830]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 830\n");
+      else
+        fprintf(stderr, "reached bug index 830\n");
+    }
+    if ((!FIXREVERTER[830] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3608,7 +5075,22 @@ xmlValidateNmtokenValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[832]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 832\n");
+      else
+        fprintf(stderr, "reached bug index 832\n");
+    }
+    if ((!FIXREVERTER[832] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3661,7 +5143,22 @@ xmlValidateNmtokensValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[834]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 834\n");
+      else
+        fprintf(stderr, "reached bug index 834\n");
+    }
+    if ((!FIXREVERTER[834] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3877,8 +5374,23 @@ xmlValidateAttributeValue2(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	    xmlEntityPtr ent;
 
 	    dup = xmlStrdup(value);
-	    if (dup == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[837]) {
+	      if ((dup == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 837\n");
+	      else
+	        fprintf(stderr, "reached bug index 837\n");
+	    }
+	    if ((!FIXREVERTER[837] && (dup == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
+		#ifdef FRCOV
+		}
+		#endif
 	    cur = dup;
 	    while (*cur != 0) {
 		nam = cur;
@@ -3959,18 +5471,93 @@ xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     xmlAttributePtr attrDecl = NULL;
     int extsubset = 0;
 
-    if (doc == NULL) return(NULL);
-    if (elem == NULL) return(NULL);
-    if (name == NULL) return(NULL);
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[838]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 838\n");
+      else
+        fprintf(stderr, "reached bug index 838\n");
+    }
+    if ((!FIXREVERTER[838] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[839]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 839\n");
+      else
+        fprintf(stderr, "reached bug index 839\n");
+    }
+    if ((!FIXREVERTER[839] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[840]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 840\n");
+      else
+        fprintf(stderr, "reached bug index 840\n");
+    }
+    if ((!FIXREVERTER[840] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[841]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 841\n");
+      else
+        fprintf(stderr, "reached bug index 841\n");
+    }
+    if ((!FIXREVERTER[841] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((elem->ns != NULL) && (elem->ns->prefix != NULL)) {
 	xmlChar fn[50];
 	xmlChar *fullname;
 
 	fullname = xmlBuildQName(elem->name, elem->ns->prefix, fn, 50);
-	if (fullname == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[842]) {
+	  if ((fullname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 842\n");
+	  else
+	    fprintf(stderr, "reached bug index 842\n");
+	}
+	if ((!FIXREVERTER[842] && (fullname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	attrDecl = xmlGetDtdAttrDesc(doc->intSubset, fullname, name);
 	if ((attrDecl == NULL) && (doc->extSubset != NULL)) {
 	    attrDecl = xmlGetDtdAttrDesc(doc->extSubset, fullname, name);
@@ -3988,14 +5575,44 @@ xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	    extsubset = 1;
     }
 
-    if (attrDecl == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[845]) {
+      if ((attrDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 845\n");
+      else
+        fprintf(stderr, "reached bug index 845\n");
+    }
+    if ((!FIXREVERTER[845] && (attrDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (attrDecl->atype == XML_ATTRIBUTE_CDATA)
 	return(NULL);
 
     ret = xmlStrdup(value);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[846]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 846\n");
+      else
+        fprintf(stderr, "reached bug index 846\n");
+    }
+    if ((!FIXREVERTER[846] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     src = value;
     dst = ret;
     while (*src == 0x20) src++;
@@ -4044,18 +5661,93 @@ xmlValidNormalizeAttributeValue(xmlDocPtr doc, xmlNodePtr elem,
     const xmlChar *src;
     xmlAttributePtr attrDecl = NULL;
 
-    if (doc == NULL) return(NULL);
-    if (elem == NULL) return(NULL);
-    if (name == NULL) return(NULL);
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[847]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 847\n");
+      else
+        fprintf(stderr, "reached bug index 847\n");
+    }
+    if ((!FIXREVERTER[847] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[848]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 848\n");
+      else
+        fprintf(stderr, "reached bug index 848\n");
+    }
+    if ((!FIXREVERTER[848] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[849]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 849\n");
+      else
+        fprintf(stderr, "reached bug index 849\n");
+    }
+    if ((!FIXREVERTER[849] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[850]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 850\n");
+      else
+        fprintf(stderr, "reached bug index 850\n");
+    }
+    if ((!FIXREVERTER[850] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((elem->ns != NULL) && (elem->ns->prefix != NULL)) {
 	xmlChar fn[50];
 	xmlChar *fullname;
 
 	fullname = xmlBuildQName(elem->name, elem->ns->prefix, fn, 50);
-	if (fullname == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[851]) {
+	  if ((fullname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 851\n");
+	  else
+	    fprintf(stderr, "reached bug index 851\n");
+	}
+	if ((!FIXREVERTER[851] && (fullname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((fullname != fn) && (fullname != elem->name))
 	    xmlFree(fullname);
     }
@@ -4063,14 +5755,44 @@ xmlValidNormalizeAttributeValue(xmlDocPtr doc, xmlNodePtr elem,
     if ((attrDecl == NULL) && (doc->extSubset != NULL))
 	attrDecl = xmlGetDtdAttrDesc(doc->extSubset, elem->name, name);
 
-    if (attrDecl == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[852]) {
+      if ((attrDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 852\n");
+      else
+        fprintf(stderr, "reached bug index 852\n");
+    }
+    if ((!FIXREVERTER[852] && (attrDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (attrDecl->atype == XML_ATTRIBUTE_CDATA)
 	return(NULL);
 
     ret = xmlStrdup(value);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[853]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 853\n");
+      else
+        fprintf(stderr, "reached bug index 853\n");
+    }
+    if ((!FIXREVERTER[853] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     src = value;
     dst = ret;
     while (*src == 0x20) src++;
@@ -4117,7 +5839,22 @@ xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     int ret = 1;
     int val;
     CHECK_DTD;
-    if(attr == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[854]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 854\n");
+      else
+        fprintf(stderr, "reached bug index 854\n");
+    }
+    if ((!FIXREVERTER[854] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
 
     /* Attribute Default Legal */
     /* Enumeration */
@@ -4189,7 +5926,22 @@ xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     }
 
     /* Validity Constraint: Enumeration */
-    if ((attr->defaultValue != NULL) && (attr->tree != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[855]) {
+      fprintf(stderr, "reached bug index 855\n");
+    }
+    if ((FIXREVERTER[855] && (attr -> defaultValue != (void *) 0 )) || (!FIXREVERTER[855] && (attr -> defaultValue != (void *) 0 && attr -> tree != (void *) 0 ))
+    #else
+    if (attr -> defaultValue != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(attr -> tree != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 855\n");
+      #endif
+    
         xmlEnumerationPtr tree = attr->tree;
 	while (tree != NULL) {
 	    if (xmlStrEqual(tree->name, attr->defaultValue)) break;
@@ -4202,6 +5954,9 @@ xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	    ret = 0;
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(ret);
 }
@@ -4230,7 +5985,22 @@ xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
     CHECK_DTD;
 
-    if (elem == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[856]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 856\n");
+      else
+        fprintf(stderr, "reached bug index 856\n");
+    }
+    if ((!FIXREVERTER[856] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
 
 #if 0
 #ifdef LIBXML_REGEXP_ENABLED
@@ -4247,7 +6017,22 @@ xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	cur = elem->content;
 	while (cur != NULL) {
 	    if (cur->type != XML_ELEMENT_CONTENT_OR) break;
-	    if (cur->c1 == NULL) break;
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[857]) {
+	      if ((cur -> c1 == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 857\n");
+	      else
+	        fprintf(stderr, "reached bug index 857\n");
+	    }
+	    if ((!FIXREVERTER[857] && (cur -> c1 == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) break;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (cur->c1->type == XML_ELEMENT_CONTENT_ELEMENT) {
 		name = cur->c1->name;
 		next = cur->c2;
@@ -4268,7 +6053,22 @@ xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 			}
 			break;
 		    }
-		    if (next->c1 == NULL) break;
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[858]) {
+		      if ((next -> c1 == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 858\n");
+		      else
+		        fprintf(stderr, "reached bug index 858\n");
+		    }
+		    if ((!FIXREVERTER[858] && (next -> c1 == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) break;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    if (next->c1->type != XML_ELEMENT_CONTENT_ELEMENT) break;
 		    if ((xmlStrEqual(next->c1->name, name)) &&
 		        (xmlStrEqual(next->c1->prefix, cur->c1->prefix))) {
@@ -4353,16 +6153,61 @@ xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     int ret = 1;
 
     CHECK_DTD;
-    if ((elem == NULL) || (elem->name == NULL)) return(0);
-    if ((attr == NULL) || (attr->name == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[859]) {
+      if ((elem == (void *) 0 || elem -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 859\n");
+      else
+        fprintf(stderr, "reached bug index 859\n");
+    }
+    if ((!FIXREVERTER[859] && (elem == (void *) 0 || elem -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[860]) {
+      if ((attr == (void *) 0 || attr -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 860\n");
+      else
+        fprintf(stderr, "reached bug index 860\n");
+    }
+    if ((!FIXREVERTER[860] && (attr == (void *) 0 || attr -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((elem->ns != NULL) && (elem->ns->prefix != NULL)) {
 	xmlChar fn[50];
 	xmlChar *fullname;
 
 	fullname = xmlBuildQName(elem->name, elem->ns->prefix, fn, 50);
-	if (fullname == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[861]) {
+	  if ((fullname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 861\n");
+	  else
+	    fprintf(stderr, "reached bug index 861\n");
+	}
+	if ((!FIXREVERTER[861] && (fullname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (attr->ns != NULL) {
 	    attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, fullname,
 		                          attr->name, attr->ns->prefix);
@@ -4396,12 +6241,27 @@ xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
 
     /* Validity Constraint: Attribute Value Type */
-    if (attrDecl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[862]) {
+      if ((attrDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 862\n");
+      else
+        fprintf(stderr, "reached bug index 862\n");
+    }
+    if ((!FIXREVERTER[862] && (attrDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_ATTRIBUTE,
 	       "No declaration for attribute %s of element %s\n",
 	       attr->name, elem->name, NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     attr->atype = attrDecl->atype;
 
     val = xmlValidateAttributeValueInternal(doc, attrDecl->atype, value);
@@ -4441,8 +6301,23 @@ xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
         /* First check that the given NOTATION was declared */
 	nota = xmlGetDtdNotationDesc(doc->intSubset, value);
-	if (nota == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[863]) {
+	  if ((nota == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 863\n");
+	  else
+	    fprintf(stderr, "reached bug index 863\n");
+	}
+	if ((!FIXREVERTER[863] && (nota == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    nota = xmlGetDtdNotationDesc(doc->extSubset, value);
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	if (nota == NULL) {
 	    xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_NOTATION,
@@ -4530,18 +6405,63 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
     int ret = 1;
 
     CHECK_DTD;
-    if ((elem == NULL) || (elem->name == NULL)) return(0);
-    if ((ns == NULL) || (ns->href == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[864]) {
+      if ((elem == (void *) 0 || elem -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 864\n");
+      else
+        fprintf(stderr, "reached bug index 864\n");
+    }
+    if ((!FIXREVERTER[864] && (elem == (void *) 0 || elem -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[865]) {
+      if ((ns == (void *) 0 || ns -> href == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 865\n");
+      else
+        fprintf(stderr, "reached bug index 865\n");
+    }
+    if ((!FIXREVERTER[865] && (ns == (void *) 0 || ns -> href == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (prefix != NULL) {
 	xmlChar fn[50];
 	xmlChar *fullname;
 
 	fullname = xmlBuildQName(elem->name, prefix, fn, 50);
-	if (fullname == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[866]) {
+	  if ((fullname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 866\n");
+	  else
+	    fprintf(stderr, "reached bug index 866\n");
+	}
+	if ((!FIXREVERTER[866] && (fullname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlVErrMemory(ctxt, "Validating namespace");
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (ns->prefix != NULL) {
 	    attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, fullname,
 		                          ns->prefix, BAD_CAST "xmlns");
@@ -4576,7 +6496,19 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
 
 
     /* Validity Constraint: Attribute Value Type */
-    if (attrDecl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[867]) {
+      if ((attrDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 867\n");
+      else
+        fprintf(stderr, "reached bug index 867\n");
+    }
+    if ((!FIXREVERTER[867] && (attrDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (ns->prefix != NULL) {
 	    xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_ATTRIBUTE,
 		   "No declaration for attribute xmlns:%s of element %s\n",
@@ -4588,6 +6520,9 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
 	}
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     val = xmlValidateAttributeValueInternal(doc, attrDecl->atype, value);
     if (val == 0) {
@@ -4638,8 +6573,23 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
 
         /* First check that the given NOTATION was declared */
 	nota = xmlGetDtdNotationDesc(doc->intSubset, value);
-	if (nota == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[868]) {
+	  if ((nota == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 868\n");
+	  else
+	    fprintf(stderr, "reached bug index 868\n");
+	}
+	if ((!FIXREVERTER[868] && (nota == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    nota = xmlGetDtdNotationDesc(doc->extSubset, value);
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	if (nota == NULL) {
 	    if (ns->prefix != NULL) {
@@ -5142,16 +7092,46 @@ xmlSnprintfElements(char *buf, int size, xmlNodePtr node, int glob) {
     xmlNodePtr cur;
     int len;
 
-    if (node == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[869]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 869\n");
+      else
+        fprintf(stderr, "reached bug index 869\n");
+    }
+    if ((!FIXREVERTER[869] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (glob) strcat(buf, "(");
     cur = node;
     while (cur != NULL) {
 	len = strlen(buf);
-	if (size - len < 50) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[870]) {
+	  if ((size - len < 50 ) && !(0))
+	    fprintf(stderr, "triggered bug index 870\n");
+	  else
+	    fprintf(stderr, "reached bug index 870\n");
+	}
+	if ((!FIXREVERTER[870] && (size - len < 50 ))
+	#else
+	if (0
+	#endif
+	) {
 	    if ((size - len > 4) && (buf[len - 1] != '.'))
 		strcat(buf, " ...");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
         switch (cur->type) {
             case XML_ELEMENT_NODE:
 		if ((cur->ns != NULL) && (cur->ns->prefix != NULL)) {
@@ -5235,15 +7215,45 @@ xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
     xmlElementContentPtr cont;
     const xmlChar *name;
 
-    if ((elemDecl == NULL) || (parent == NULL) || (ctxt == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[871]) {
+      if ((elemDecl == (void *) 0 || parent == (void *) 0 || ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 871\n");
+      else
+        fprintf(stderr, "reached bug index 871\n");
+    }
+    if ((!FIXREVERTER[871] && (elemDecl == (void *) 0 || parent == (void *) 0 || ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     cont = elemDecl->content;
     name = elemDecl->name;
 
 #ifdef LIBXML_REGEXP_ENABLED
     /* Build the regexp associated to the content model */
-    if (elemDecl->contModel == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[872]) {
+      if ((elemDecl -> contModel == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 872\n");
+      else
+        fprintf(stderr, "reached bug index 872\n");
+    }
+    if ((!FIXREVERTER[872] && (elemDecl -> contModel == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	ret = xmlValidBuildContentModel(ctxt, elemDecl);
+	#ifdef FRCOV
+	}
+	#endif
     if (elemDecl->contModel == NULL) {
 	return(-1);
     } else {
@@ -5288,10 +7298,25 @@ xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
 
 			    fullname = xmlBuildQName(cur->name,
 				                     cur->ns->prefix, fn, 50);
-			    if (fullname == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[873]) {
+			      if ((fullname == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 873\n");
+			      else
+			        fprintf(stderr, "reached bug index 873\n");
+			    }
+			    if ((!FIXREVERTER[873] && (fullname == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 				ret = -1;
 				goto fail;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
                             ret = xmlRegExecPushString(exec, fullname, NULL);
 			    if ((fullname != fn) && (fullname != cur->name))
 				xmlFree(fullname);
@@ -5308,8 +7333,23 @@ xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
 		cur = cur->next;
 		while (cur == NULL) {
 		    cur = nodeVPop(ctxt);
-		    if (cur == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[874]) {
+		      if ((cur == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 874\n");
+		      else
+		        fprintf(stderr, "reached bug index 874\n");
+		    }
+		    if ((!FIXREVERTER[874] && (cur == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			break;
+			#ifdef FRCOV
+			}
+			#endif
 		    cur = cur->next;
 		}
 	    }
@@ -5552,8 +7592,23 @@ xmlValidateOneCdataElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	cur = cur->next;
 	while (cur == NULL) {
 	    cur = nodeVPop(ctxt);
-	    if (cur == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[875]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 875\n");
+	      else
+	        fprintf(stderr, "reached bug index 875\n");
+	    }
+	    if ((!FIXREVERTER[875] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    cur = cur->next;
 	}
     }
@@ -5651,9 +7706,23 @@ xmlValidGetElemDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     xmlElementPtr elemDecl = NULL;
     const xmlChar *prefix = NULL;
 
-    if ((ctxt == NULL) || (doc == NULL) ||
-        (elem == NULL) || (elem->name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[876]) {
+      if ((ctxt == (void *) 0 || doc == (void *) 0 || elem == (void *) 0 || elem -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 876\n");
+      else
+        fprintf(stderr, "reached bug index 876\n");
+    }
+    if ((!FIXREVERTER[876] && (ctxt == (void *) 0 || doc == (void *) 0 || elem == (void *) 0 || elem -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (extsubset != NULL)
 	*extsubset = 0;
 
@@ -5949,7 +8018,22 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
     CHECK_DTD;
 
-    if (elem == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[884]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 884\n");
+      else
+        fprintf(stderr, "reached bug index 884\n");
+    }
+    if ((!FIXREVERTER[884] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     switch (elem->type) {
         case XML_ATTRIBUTE_NODE:
 	    xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,
@@ -5968,12 +8052,27 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 				NULL,NULL,NULL);
 		return(0);
 	    }
-	    if (elem->content == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[885]) {
+	      if ((elem -> content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 885\n");
+	      else
+	        fprintf(stderr, "reached bug index 885\n");
+	    }
+	    if ((!FIXREVERTER[885] && (elem -> content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,
 		                "Text element has no content !\n",
 				NULL,NULL,NULL);
 		return(0);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    return(1);
         case XML_XINCLUDE_START:
         case XML_XINCLUDE_END:
@@ -6013,8 +8112,23 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
      * Fetch the declaration
      */
     elemDecl = xmlValidGetElemDecl(ctxt, doc, elem, &extsubset);
-    if (elemDecl == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[886]) {
+      if ((elemDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 886\n");
+      else
+        fprintf(stderr, "reached bug index 886\n");
+    }
+    if ((!FIXREVERTER[886] && (elemDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * If vstateNr is not zero that means continuous validation is
@@ -6063,8 +8177,23 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
 			fullname = xmlBuildQName(child->name, child->ns->prefix,
 				                 fn, 50);
-			if (fullname == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[887]) {
+			  if ((fullname == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 887\n");
+			  else
+			    fprintf(stderr, "reached bug index 887\n");
+			}
+			if ((!FIXREVERTER[887] && (fullname == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    return(0);
+			    #ifdef FRCOV
+			    }
+			    #endif
 			cont = elemDecl->content;
 			while (cont != NULL) {
 			    if (cont->type == XML_ELEMENT_CONTENT_ELEMENT) {
@@ -6120,7 +8249,22 @@ child_ok:
 	    }
 	    break;
         case XML_ELEMENT_TYPE_ELEMENT:
-	    if ((doc->standalone == 1) && (extsubset == 1)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[888]) {
+	      fprintf(stderr, "reached bug index 888\n");
+	    }
+	    if ((FIXREVERTER[888] && (doc -> standalone == 1 )) || (!FIXREVERTER[888] && (doc -> standalone == 1 && extsubset == 1 ))
+	    #else
+	    if (doc -> standalone == 1 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(extsubset == 1 ))
+	        fprintf(stderr, "triggered bug index 888\n");
+	      #endif
+	    
 		/*
 		 * VC: Standalone Document Declaration
 		 *     - element types with element content, if white space
@@ -6145,11 +8289,29 @@ child_ok:
 		    child =child->next;
 		}
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    child = elem->children;
 	    cont = elemDecl->content;
 	    tmp = xmlValidateElementContent(ctxt, child, elemDecl, 1, elem);
-	    if (tmp <= 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[889]) {
+	      if ((tmp <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 889\n");
+	      else
+	        fprintf(stderr, "reached bug index 889\n");
+	    }
+	    if ((!FIXREVERTER[889] && (tmp <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		ret = tmp;
+		#ifdef FRCOV
+		}
+		#endif
 	    break;
     }
     } /* not continuous */
@@ -6166,8 +8328,23 @@ child_ok:
 
 		ns = elem->nsDef;
 		while (ns != NULL) {
-		    if (ns->prefix == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[890]) {
+		      if ((ns -> prefix == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 890\n");
+		      else
+		        fprintf(stderr, "reached bug index 890\n");
+		    }
+		    if ((!FIXREVERTER[890] && (ns -> prefix == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto found;
+			#ifdef FRCOV
+			}
+			#endif
 		    ns = ns->next;
 		}
 	    } else if (xmlStrEqual(attr->prefix, BAD_CAST "xmlns")) {
@@ -6188,8 +8365,23 @@ child_ok:
 			if (attr->prefix != NULL) {
 			    xmlNsPtr nameSpace = attrib->ns;
 
-			    if (nameSpace == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[891]) {
+			      if ((nameSpace == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 891\n");
+			      else
+			        fprintf(stderr, "reached bug index 891\n");
+			    }
+			    if ((!FIXREVERTER[891] && (nameSpace == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				nameSpace = elem->ns;
+				#ifdef FRCOV
+				}
+				#endif
 			    /*
 			     * qualified names handling is problematic, having a
 			     * different prefix should be possible but DTDs don't
@@ -6250,7 +8442,19 @@ child_ok:
 
 		ns = elem->nsDef;
 		while (ns != NULL) {
-		    if (ns->prefix == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[894]) {
+		      if ((ns -> prefix == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 894\n");
+		      else
+		        fprintf(stderr, "reached bug index 894\n");
+		    }
+		    if ((!FIXREVERTER[894] && (ns -> prefix == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			if (!xmlStrEqual(attr->defaultValue, ns->href)) {
 			    xmlErrValidNode(ctxt, elem,
 			           XML_DTD_ELEM_DEFAULT_NAMESPACE,
@@ -6260,6 +8464,9 @@ child_ok:
 			}
 			goto found;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    ns = ns->next;
 		}
 	    } else if (xmlStrEqual(attr->prefix, BAD_CAST "xmlns")) {
@@ -6305,14 +8512,44 @@ xmlValidateRoot(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
     xmlNodePtr root;
     int ret;
 
-    if (doc == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[895]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 895\n");
+      else
+        fprintf(stderr, "reached bug index 895\n");
+    }
+    if ((!FIXREVERTER[895] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     root = xmlDocGetRootElement(doc);
-    if ((root == NULL) || (root->name == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[896]) {
+      if ((root == (void *) 0 || root -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 896\n");
+      else
+        fprintf(stderr, "reached bug index 896\n");
+    }
+    if ((!FIXREVERTER[896] && (root == (void *) 0 || root -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrValid(ctxt, XML_DTD_NO_ROOT,
 	            "no root element\n", NULL);
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * When doing post validation against a separate DTD, those may
@@ -6329,10 +8566,25 @@ xmlValidateRoot(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
 		xmlChar *fullname;
 
 		fullname = xmlBuildQName(root->name, root->ns->prefix, fn, 50);
-		if (fullname == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[897]) {
+		  if ((fullname == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 897\n");
+		  else
+		    fprintf(stderr, "reached bug index 897\n");
+		}
+		if ((!FIXREVERTER[897] && (fullname == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlVErrMemory(ctxt, NULL);
 		    return(0);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = xmlStrEqual(doc->intSubset->name, fullname);
 		if ((fullname != fn) && (fullname != root->name))
 		    xmlFree(fullname);
@@ -6372,7 +8624,22 @@ xmlValidateElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem) {
     const xmlChar *value;
     int ret = 1;
 
-    if (elem == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[899]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 899\n");
+      else
+        fprintf(stderr, "reached bug index 899\n");
+    }
+    if ((!FIXREVERTER[899] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * XInclude elements were added after parsing in the infoset,
@@ -6562,13 +8829,43 @@ xmlValidateDocumentFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
     xmlRefTablePtr table;
     unsigned int save;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[904]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 904\n");
+      else
+        fprintf(stderr, "reached bug index 904\n");
+    }
+    if ((!FIXREVERTER[904] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
-    if (doc == NULL) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[905]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 905\n");
+      else
+        fprintf(stderr, "reached bug index 905\n");
+    }
+    if ((!FIXREVERTER[905] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrValid(ctxt, XML_DTD_NO_DOC,
 		"xmlValidateDocumentFinal: doc == NULL\n", NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /* trick to get correct line id report */
     save = ctxt->finishDtd;
@@ -6754,31 +9051,118 @@ xmlValidateDtdFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
     xmlAttributeTablePtr table;
     xmlEntitiesTablePtr entities;
 
-    if ((doc == NULL) || (ctxt == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[916]) {
+      if ((doc == (void *) 0 || ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 916\n");
+      else
+        fprintf(stderr, "reached bug index 916\n");
+    }
+    if ((!FIXREVERTER[916] && (doc == (void *) 0 || ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if ((doc->intSubset == NULL) && (doc->extSubset == NULL))
 	return(0);
     ctxt->doc = doc;
     ctxt->valid = 1;
     dtd = doc->intSubset;
-    if ((dtd != NULL) && (dtd->attributes != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[917]) {
+      fprintf(stderr, "reached bug index 917\n");
+    }
+    if ((FIXREVERTER[917] && (dtd != (void *) 0 )) || (!FIXREVERTER[917] && (dtd != (void *) 0 && dtd -> attributes != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> attributes != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 917\n");
+      #endif
+    
 	table = (xmlAttributeTablePtr) dtd->attributes;
 	xmlHashScan(table, (xmlHashScanner) xmlValidateAttributeCallback, ctxt);
     }
-    if ((dtd != NULL) && (dtd->entities != NULL)) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[918]) {
+      fprintf(stderr, "reached bug index 918\n");
+    }
+    if ((FIXREVERTER[918] && (dtd != (void *) 0 )) || (!FIXREVERTER[918] && (dtd != (void *) 0 && dtd -> entities != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> entities != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 918\n");
+      #endif
+    
 	entities = (xmlEntitiesTablePtr) dtd->entities;
 	xmlHashScan(entities, (xmlHashScanner) xmlValidateNotationCallback,
 		    ctxt);
     }
+    #ifdef FRCOV
+    }
+    #endif
     dtd = doc->extSubset;
-    if ((dtd != NULL) && (dtd->attributes != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[919]) {
+      fprintf(stderr, "reached bug index 919\n");
+    }
+    if ((FIXREVERTER[919] && (dtd != (void *) 0 )) || (!FIXREVERTER[919] && (dtd != (void *) 0 && dtd -> attributes != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> attributes != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 919\n");
+      #endif
+    
 	table = (xmlAttributeTablePtr) dtd->attributes;
 	xmlHashScan(table, (xmlHashScanner) xmlValidateAttributeCallback, ctxt);
     }
-    if ((dtd != NULL) && (dtd->entities != NULL)) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[920]) {
+      fprintf(stderr, "reached bug index 920\n");
+    }
+    if ((FIXREVERTER[920] && (dtd != (void *) 0 )) || (!FIXREVERTER[920] && (dtd != (void *) 0 && dtd -> entities != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> entities != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 920\n");
+      #endif
+    
 	entities = (xmlEntitiesTablePtr) dtd->entities;
 	xmlHashScan(entities, (xmlHashScanner) xmlValidateNotationCallback,
 		    ctxt);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->valid);
 }
 
diff --git a/xmlIO.c b/xmlIO.c
index e628ab09..f62967db 100644
--- a/xmlIO.c
+++ b/xmlIO.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xmlIO.c : implementation of the I/O interfaces used by the parser
  *
@@ -429,8 +433,38 @@ __xmlIOErr(int domain, int code, const char *extra)
 #endif /* HAVE_ERRNO_H */
     }
     idx = 0;
-    if (code >= XML_IO_UNKNOWN) idx = code - XML_IO_UNKNOWN;
-    if (idx >= (sizeof(IOerr) / sizeof(IOerr[0]))) idx = 0;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3588]) {
+      if ((code >= XML_IO_UNKNOWN ) && !(0))
+        fprintf(stderr, "triggered bug index 3588\n");
+      else
+        fprintf(stderr, "reached bug index 3588\n");
+    }
+    if ((!FIXREVERTER[3588] && (code >= XML_IO_UNKNOWN ))
+    #else
+    if (0
+    #endif
+    ) idx = code - XML_IO_UNKNOWN;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3589]) {
+      if ((idx >= sizeof ( IOerr ) / sizeof ( IOerr [ 0 ] ) ) && !(0))
+        fprintf(stderr, "triggered bug index 3589\n");
+      else
+        fprintf(stderr, "reached bug index 3589\n");
+    }
+    if ((!FIXREVERTER[3589] && (idx >= sizeof ( IOerr ) / sizeof ( IOerr [ 0 ] ) ))
+    #else
+    if (0
+    #endif
+    ) idx = 0;
+    #ifdef FRCOV
+    }
+    #endif
 
     __xmlSimpleError(domain, code, NULL, IOerr[idx], extra);
 }
@@ -897,8 +931,23 @@ xmlFileOpen_real (const char *filename) {
     const char *path = filename;
     FILE *fd;
 
-    if (filename == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3593]) {
+      if ((filename == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3593\n");
+      else
+        fprintf(stderr, "reached bug index 3593\n");
+    }
+    if ((!FIXREVERTER[3593] && (filename == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (!strcmp(filename, "-")) {
 	fd = stdin;
@@ -999,8 +1048,23 @@ xmlFileOpenW (const char *filename) {
     } else
 	path = filename;
 
-    if (path == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3594]) {
+      if ((path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3594\n");
+      else
+        fprintf(stderr, "reached bug index 3594\n");
+    }
+    if ((!FIXREVERTER[3594] && (path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
 #if defined(_WIN32) || defined (__DJGPP__) && !defined (__CYGWIN__)
     fd = xmlWrapOpen(path, 1);
@@ -1026,8 +1090,23 @@ xmlFileOpenW (const char *filename) {
 int
 xmlFileRead (void * context, char * buffer, int len) {
     int ret;
-    if ((context == NULL) || (buffer == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3595]) {
+      if ((context == (void *) 0 || buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3595\n");
+      else
+        fprintf(stderr, "reached bug index 3595\n");
+    }
+    if ((!FIXREVERTER[3595] && (context == (void *) 0 || buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     ret = fread(&buffer[0], 1,  len, (FILE *) context);
     if (ret < 0) xmlIOErr(0, "fread()");
     return(ret);
@@ -1048,8 +1127,23 @@ static int
 xmlFileWrite (void * context, const char * buffer, int len) {
     int items;
 
-    if ((context == NULL) || (buffer == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3596]) {
+      if ((context == (void *) 0 || buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3596\n");
+      else
+        fprintf(stderr, "reached bug index 3596\n");
+    }
+    if ((!FIXREVERTER[3596] && (context == (void *) 0 || buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     items = fwrite(&buffer[0], len, 1, (FILE *) context);
     if ((items == 0) && (ferror((FILE *) context))) {
         xmlIOErr(0, "fwrite()");
@@ -1072,8 +1166,23 @@ xmlFileClose (void * context) {
     FILE *fil;
     int ret;
 
-    if (context == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3597]) {
+      if ((context == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3597\n");
+      else
+        fprintf(stderr, "reached bug index 3597\n");
+    }
+    if ((!FIXREVERTER[3597] && (context == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     fil = (FILE *) context;
     if ((fil == stdout) || (fil == stderr)) {
         ret = fflush(fil);
@@ -1881,23 +1990,68 @@ xmlIOHTTPOpenW(const char *post_uri, int compression)
 
     xmlIOHTTPWriteCtxtPtr ctxt = NULL;
 
-    if (post_uri == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3600]) {
+      if ((post_uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3600\n");
+      else
+        fprintf(stderr, "reached bug index 3600\n");
+    }
+    if ((!FIXREVERTER[3600] && (post_uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ctxt = xmlMalloc(sizeof(xmlIOHTTPWriteCtxt));
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3601]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3601\n");
+      else
+        fprintf(stderr, "reached bug index 3601\n");
+    }
+    if ((!FIXREVERTER[3601] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlIOErrMemory("creating HTTP output context");
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     (void) memset(ctxt, 0, sizeof(xmlIOHTTPWriteCtxt));
 
     ctxt->uri = (char *) xmlStrdup((const xmlChar *)post_uri);
-    if (ctxt->uri == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3602]) {
+      if ((ctxt -> uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3602\n");
+      else
+        fprintf(stderr, "reached bug index 3602\n");
+    }
+    if ((!FIXREVERTER[3602] && (ctxt -> uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlIOErrMemory("copying URI");
         xmlFreeHTTPWriteCtxt(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * **  Since the document length is required for an HTTP post,
@@ -1956,7 +2110,22 @@ xmlIOHTTPDfltOpenW( const char * post_uri ) {
  */
 int
 xmlIOHTTPRead(void * context, char * buffer, int len) {
-    if ((buffer == NULL) || (len < 0)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3603]) {
+      if ((buffer == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3603\n");
+      else
+        fprintf(stderr, "reached bug index 3603\n");
+    }
+    if ((!FIXREVERTER[3603] && (buffer == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlNanoHTTPRead(context, &buffer[0], len));
 }
 
@@ -1978,8 +2147,23 @@ xmlIOHTTPWrite( void * context, const char * buffer, int len ) {
 
     xmlIOHTTPWriteCtxtPtr	ctxt = context;
 
-    if ( ( ctxt == NULL ) || ( ctxt->doc_buff == NULL ) || ( buffer == NULL ) )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3604]) {
+      if ((ctxt == (void *) 0 || ctxt -> doc_buff == (void *) 0 || buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3604\n");
+      else
+        fprintf(stderr, "reached bug index 3604\n");
+    }
+    if ((!FIXREVERTER[3604] && (ctxt == (void *) 0 || ctxt -> doc_buff == (void *) 0 || buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     )
 	return ( -1 );
+	#ifdef FRCOV
+	}
+	#endif
 
     if ( len > 0 ) {
 
@@ -2044,8 +2228,23 @@ xmlIOHTTPCloseWrite( void * context, const char * http_mthd ) {
     char *			content_type = (char *) "text/xml";
     void *			http_ctxt = NULL;
 
-    if ( ( ctxt == NULL ) || ( http_mthd == NULL ) )
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3605]) {
+      if ((ctxt == (void *) 0 || http_mthd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3605\n");
+      else
+        fprintf(stderr, "reached bug index 3605\n");
+    }
+    if ((!FIXREVERTER[3605] && (ctxt == (void *) 0 || http_mthd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+     )
 	return ( -1 );
+	#ifdef FRCOV
+	}
+	#endif
 
     /*  Retrieve the content from the appropriate buffer  */
 
@@ -2235,7 +2434,22 @@ xmlIOFTPOpen (const char *filename) {
  */
 int
 xmlIOFTPRead(void * context, char * buffer, int len) {
-    if ((buffer == NULL) || (len < 0)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3606]) {
+      if ((buffer == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3606\n");
+      else
+        fprintf(stderr, "reached bug index 3606\n");
+    }
+    if ((!FIXREVERTER[3606] && (buffer == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlNanoFTPRead(context, &buffer[0], len));
 }
 
@@ -2424,16 +2638,46 @@ xmlAllocParserInputBuffer(xmlCharEncoding enc) {
     xmlParserInputBufferPtr ret;
 
     ret = (xmlParserInputBufferPtr) xmlMalloc(sizeof(xmlParserInputBuffer));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3609]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3609\n");
+      else
+        fprintf(stderr, "reached bug index 3609\n");
+    }
+    if ((!FIXREVERTER[3609] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlIOErrMemory("creating input buffer");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, (size_t) sizeof(xmlParserInputBuffer));
     ret->buffer = xmlBufCreateSize(2 * xmlDefaultBufferSize);
-    if (ret->buffer == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3610]) {
+      if ((ret -> buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3610\n");
+      else
+        fprintf(stderr, "reached bug index 3610\n");
+    }
+    if ((!FIXREVERTER[3610] && (ret -> buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlBufSetAllocationScheme(ret->buffer, XML_BUFFER_ALLOC_DOUBLEIT);
     ret->encoder = xmlGetCharEncodingHandler(enc);
     if (ret->encoder != NULL)
@@ -2513,16 +2757,46 @@ xmlAllocOutputBufferInternal(xmlCharEncodingHandlerPtr encoder) {
     xmlOutputBufferPtr ret;
 
     ret = (xmlOutputBufferPtr) xmlMalloc(sizeof(xmlOutputBuffer));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3614]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3614\n");
+      else
+        fprintf(stderr, "reached bug index 3614\n");
+    }
+    if ((!FIXREVERTER[3614] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlIOErrMemory("creating output buffer");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, (size_t) sizeof(xmlOutputBuffer));
     ret->buffer = xmlBufCreate();
-    if (ret->buffer == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3615]) {
+      if ((ret -> buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3615\n");
+      else
+        fprintf(stderr, "reached bug index 3615\n");
+    }
+    if ((!FIXREVERTER[3615] && (ret -> buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 
     /*
@@ -2533,10 +2807,25 @@ xmlAllocOutputBufferInternal(xmlCharEncodingHandlerPtr encoder) {
     ret->encoder = encoder;
     if (encoder != NULL) {
         ret->conv = xmlBufCreateSize(4000);
-	if (ret->conv == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3616]) {
+	  if ((ret -> conv == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3616\n");
+	  else
+	    fprintf(stderr, "reached bug index 3616\n");
+	}
+	if ((!FIXREVERTER[3616] && (ret -> conv == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	/*
 	 * This call is designed to initiate the encoder state
@@ -2562,7 +2851,22 @@ xmlAllocOutputBufferInternal(xmlCharEncodingHandlerPtr encoder) {
  */
 void
 xmlFreeParserInputBuffer(xmlParserInputBufferPtr in) {
-    if (in == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3617]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3617\n");
+      else
+        fprintf(stderr, "reached bug index 3617\n");
+    }
+    if ((!FIXREVERTER[3617] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (in->raw) {
         xmlBufFree(in->raw);
@@ -2598,8 +2902,23 @@ xmlOutputBufferClose(xmlOutputBufferPtr out)
     int written;
     int err_rc = 0;
 
-    if (out == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3618]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3618\n");
+      else
+        fprintf(stderr, "reached bug index 3618\n");
+    }
+    if ((!FIXREVERTER[3618] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (out->writecallback != NULL)
         xmlOutputBufferFlush(out);
     if (out->closecallback != NULL) {
@@ -3027,8 +3346,38 @@ xmlParserInputBufferCreateMem(const char *mem, int size, xmlCharEncoding enc) {
     xmlParserInputBufferPtr ret;
     int errcode;
 
-    if (size <= 0) return(NULL);
-    if (mem == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3629]) {
+      if ((size <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3629\n");
+      else
+        fprintf(stderr, "reached bug index 3629\n");
+    }
+    if ((!FIXREVERTER[3629] && (size <= 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3630]) {
+      if ((mem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3630\n");
+      else
+        fprintf(stderr, "reached bug index 3630\n");
+    }
+    if ((!FIXREVERTER[3630] && (mem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = xmlAllocParserInputBuffer(enc);
     if (ret != NULL) {
@@ -3335,16 +3684,46 @@ xmlParserInputBufferGrow(xmlParserInputBufferPtr in, int len) {
      */
     if (in->readcallback != NULL) {
 	res = in->readcallback(in->context, &buffer[0], len);
-	if (res <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3644]) {
+	  if ((res <= 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 3644\n");
+	  else
+	    fprintf(stderr, "reached bug index 3644\n");
+	}
+	if ((!FIXREVERTER[3644] && (res <= 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    in->readcallback = endOfInput;
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
 	xmlIOErr(XML_IO_NO_INPUT, NULL);
 	in->error = XML_IO_NO_INPUT;
 	return(-1);
     }
-    if (res < 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3645]) {
+      if ((res < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3645\n");
+      else
+        fprintf(stderr, "reached bug index 3645\n");
+    }
+    if ((!FIXREVERTER[3645] && (res < 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * try to establish compressed status of input if not done already
@@ -3367,19 +3746,49 @@ xmlParserInputBufferGrow(xmlParserInputBufferPtr in, int len) {
 	    in->raw = xmlBufCreate();
 	}
 	res = xmlBufAdd(in->raw, (const xmlChar *) buffer, len);
-	if (res != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3646]) {
+	  if ((res != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3646\n");
+	  else
+	    fprintf(stderr, "reached bug index 3646\n");
+	}
+	if ((!FIXREVERTER[3646] && (res != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	/*
 	 * convert as much as possible to the parser reading buffer.
 	 */
 	use = xmlBufUse(in->raw);
 	nbchars = xmlCharEncInput(in, 1);
-	if (nbchars < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3647]) {
+	  if ((nbchars < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3647\n");
+	  else
+	    fprintf(stderr, "reached bug index 3647\n");
+	}
+	if ((!FIXREVERTER[3647] && (nbchars < 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlIOErr(XML_IO_ENCODER, NULL);
 	    in->error = XML_IO_ENCODER;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	in->rawconsumed += (use - xmlBufUse(in->raw));
     } else {
 	nbchars = len;
@@ -3439,13 +3848,43 @@ xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf) {
     int chunk;       /* number of byte curreent processed from buf */
 
     if ((out == NULL) || (out->error)) return(-1);
-    if (len < 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3648]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3648\n");
+      else
+        fprintf(stderr, "reached bug index 3648\n");
+    }
+    if ((!FIXREVERTER[3648] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (out->error) return(-1);
 
     do {
 	chunk = len;
-	if (chunk > 4 * MINLEN)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3649]) {
+	  if ((chunk > 4 * 4000 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3649\n");
+	  else
+	    fprintf(stderr, "reached bug index 3649\n");
+	}
+	if ((!FIXREVERTER[3649] && (chunk > 4 * 4000 ))
+	#else
+	if (0
+	#endif
+	)
 	    chunk = 4 * MINLEN;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	/*
 	 * first handle encoding stuff.
@@ -3458,8 +3897,23 @@ xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf) {
 		out->conv = xmlBufCreate();
 	    }
 	    ret = xmlBufAdd(out->buffer, (const xmlChar *) buf, chunk);
-	    if (ret != 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3650]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3650\n");
+	      else
+	        fprintf(stderr, "reached bug index 3650\n");
+	    }
+	    if ((!FIXREVERTER[3650] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 
 	    if ((xmlBufUse(out->buffer) < MINLEN) && (chunk == len))
 		goto done;
@@ -3476,8 +3930,23 @@ xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf) {
 	    nbchars = xmlBufUse(out->conv);
 	} else {
 	    ret = xmlBufAdd(out->buffer, (const xmlChar *) buf, chunk);
-	    if (ret != 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3651]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3651\n");
+	      else
+	        fprintf(stderr, "reached bug index 3651\n");
+	    }
+	    if ((!FIXREVERTER[3651] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        return(-1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    nbchars = xmlBufUse(out->buffer);
 	}
 	buf += chunk;
@@ -3501,11 +3970,26 @@ xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf) {
 		if (ret >= 0)
 		    xmlBufShrink(out->buffer, ret);
 	    }
-	    if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3652]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3652\n");
+	      else
+	        fprintf(stderr, "reached bug index 3652\n");
+	    }
+	    if ((!FIXREVERTER[3652] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlIOErr(XML_IO_WRITE, NULL);
 		out->error = XML_IO_WRITE;
 		return(ret);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    out->written += ret;
 	}
 	written += nbchars;
@@ -3754,7 +4238,22 @@ xmlOutputBufferFlush(xmlOutputBufferPtr out) {
     /*
      * first handle encoding stuff.
      */
-    if ((out->conv != NULL) && (out->encoder != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3663]) {
+      fprintf(stderr, "reached bug index 3663\n");
+    }
+    if ((FIXREVERTER[3663] && (out -> conv != (void *) 0 )) || (!FIXREVERTER[3663] && (out -> conv != (void *) 0 && out -> encoder != (void *) 0 ))
+    #else
+    if (out -> conv != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(out -> encoder != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3663\n");
+      #endif
+    
 	/*
 	 * convert as much as possible to the parser output buffer.
 	 */
@@ -3767,6 +4266,9 @@ xmlOutputBufferFlush(xmlOutputBufferPtr out) {
 	    }
 	} while (nbchars);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * second flush the stuff to the I/O channel
@@ -3785,11 +4287,26 @@ xmlOutputBufferFlush(xmlOutputBufferPtr out) {
 	if (ret >= 0)
 	    xmlBufShrink(out->buffer, ret);
     }
-    if (ret < 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3664]) {
+      if ((ret < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3664\n");
+      else
+        fprintf(stderr, "reached bug index 3664\n");
+    }
+    if ((!FIXREVERTER[3664] && (ret < 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlIOErr(XML_IO_FLUSH, NULL);
 	out->error = XML_IO_FLUSH;
 	return(ret);
     }
+    #ifdef FRCOV
+    }
+    #endif
     out->written += ret;
 
 #ifdef DEBUG_INPUT
@@ -3821,7 +4338,22 @@ xmlParserGetDirectory(const char *filename) {
     if (xmlInputCallbackInitialized == 0)
 	xmlRegisterDefaultInputCallbacks();
 
-    if (filename == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3665]) {
+      if ((filename == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3665\n");
+      else
+        fprintf(stderr, "reached bug index 3665\n");
+    }
+    if ((!FIXREVERTER[3665] && (filename == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
 #if defined(WIN32) && !defined(__CYGWIN__)
 #   define IS_XMLPGD_SEP(ch) ((ch=='/')||(ch=='\\'))
@@ -3933,8 +4465,23 @@ xmlCheckHTTPInput(xmlParserCtxtPtr ctxt, xmlParserInputPtr ret) {
 static int xmlNoNetExists(const char *URL) {
     const char *path;
 
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3667]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3667\n");
+      else
+        fprintf(stderr, "reached bug index 3667\n");
+    }
+    if ((!FIXREVERTER[3667] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (!xmlStrncasecmp(BAD_CAST URL, BAD_CAST "file://localhost/", 17))
 #if defined (_WIN32) || defined (__DJGPP__) && !defined(__CYGWIN__)
@@ -4125,10 +4672,25 @@ xmlLoadExternalEntity(const char *URL, const char *ID,
 	xmlParserInputPtr ret;
 
 	canonicFilename = (char *) xmlCanonicPath((const xmlChar *) URL);
-	if (canonicFilename == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3671]) {
+	  if ((canonicFilename == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3671\n");
+	  else
+	    fprintf(stderr, "reached bug index 3671\n");
+	}
+	if ((!FIXREVERTER[3671] && (canonicFilename == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             xmlIOErrMemory("building canonical path\n");
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	ret = xmlCurrentExternalEntityLoader(canonicFilename, ID, ctxt);
 	xmlFree(canonicFilename);
diff --git a/xmlcatalog.c b/xmlcatalog.c
index b9ed6a48..65431f85 100644
--- a/xmlcatalog.c
+++ b/xmlcatalog.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * xmlcatalog.c : a small utility program to handle XML catalogs
  *
diff --git a/xmllint.c b/xmllint.c
index b297ded1..a9e65b32 100644
--- a/xmllint.c
+++ b/xmllint.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[5212];
+#endif
 /*
  * xmllint.c : a small tester program for XML input.
  *
diff --git a/xmlreader.c b/xmlreader.c
index f19e1233..606f5866 100644
--- a/xmlreader.c
+++ b/xmlreader.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xmlreader.c: implements the xmlTextReader streaming node API
  *
@@ -664,13 +668,31 @@ xmlTextReaderStartElement(void *ctx, const xmlChar *fullname,
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderStartElement(%s)\n", fullname);
 #endif
-    if ((reader != NULL) && (reader->startElement != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2986]) {
+      fprintf(stderr, "reached bug index 2986\n");
+    }
+    if ((FIXREVERTER[2986] && (reader != (void *) 0 )) || (!FIXREVERTER[2986] && (reader != (void *) 0 && reader -> startElement != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> startElement != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2986\n");
+      #endif
+    
 	reader->startElement(ctx, fullname, atts);
 	if ((ctxt->node != NULL) && (ctxt->input != NULL) &&
 	    (ctxt->input->cur != NULL) && (ctxt->input->cur[0] == '/') &&
 	    (ctxt->input->cur[1] == '>'))
 	    ctxt->node->extra = NODE_IS_EMPTY;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (reader != NULL)
 	reader->state = XML_TEXTREADER_ELEMENT;
 }
@@ -690,9 +712,27 @@ xmlTextReaderEndElement(void *ctx, const xmlChar *fullname) {
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderEndElement(%s)\n", fullname);
 #endif
-    if ((reader != NULL) && (reader->endElement != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2987]) {
+      fprintf(stderr, "reached bug index 2987\n");
+    }
+    if ((FIXREVERTER[2987] && (reader != (void *) 0 )) || (!FIXREVERTER[2987] && (reader != (void *) 0 && reader -> endElement != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> endElement != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2987\n");
+      #endif
+    
 	reader->endElement(ctx, fullname);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 /**
@@ -727,7 +767,22 @@ xmlTextReaderStartElementNs(void *ctx,
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderStartElementNs(%s)\n", localname);
 #endif
-    if ((reader != NULL) && (reader->startElementNs != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2988]) {
+      fprintf(stderr, "reached bug index 2988\n");
+    }
+    if ((FIXREVERTER[2988] && (reader != (void *) 0 )) || (!FIXREVERTER[2988] && (reader != (void *) 0 && reader -> startElementNs != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> startElementNs != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2988\n");
+      #endif
+    
 	reader->startElementNs(ctx, localname, prefix, URI, nb_namespaces,
 	                       namespaces, nb_attributes, nb_defaulted,
 			       attributes);
@@ -736,6 +791,9 @@ xmlTextReaderStartElementNs(void *ctx,
 	    (ctxt->input->cur[1] == '>'))
 	    ctxt->node->extra = NODE_IS_EMPTY;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (reader != NULL)
 	reader->state = XML_TEXTREADER_ELEMENT;
 }
@@ -761,9 +819,27 @@ xmlTextReaderEndElementNs(void *ctx,
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderEndElementNs(%s)\n", localname);
 #endif
-    if ((reader != NULL) && (reader->endElementNs != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2989]) {
+      fprintf(stderr, "reached bug index 2989\n");
+    }
+    if ((FIXREVERTER[2989] && (reader != (void *) 0 )) || (!FIXREVERTER[2989] && (reader != (void *) 0 && reader -> endElementNs != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> endElementNs != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2989\n");
+      #endif
+    
 	reader->endElementNs(ctx, localname, prefix, URI);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 
@@ -784,9 +860,27 @@ xmlTextReaderCharacters(void *ctx, const xmlChar *ch, int len)
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderCharacters()\n");
 #endif
-    if ((reader != NULL) && (reader->characters != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2990]) {
+      fprintf(stderr, "reached bug index 2990\n");
+    }
+    if ((FIXREVERTER[2990] && (reader != (void *) 0 )) || (!FIXREVERTER[2990] && (reader != (void *) 0 && reader -> characters != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> characters != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2990\n");
+      #endif
+    
 	reader->characters(ctx, ch, len);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 /**
@@ -806,9 +900,27 @@ xmlTextReaderCDataBlock(void *ctx, const xmlChar *ch, int len)
 #ifdef DEBUG_CALLBACKS
     printf("xmlTextReaderCDataBlock()\n");
 #endif
-    if ((reader != NULL) && (reader->cdataBlock != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2991]) {
+      fprintf(stderr, "reached bug index 2991\n");
+    }
+    if ((FIXREVERTER[2991] && (reader != (void *) 0 )) || (!FIXREVERTER[2991] && (reader != (void *) 0 && reader -> cdataBlock != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> cdataBlock != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2991\n");
+      #endif
+    
 	reader->cdataBlock(ctx, ch, len);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 /**
@@ -2552,14 +2664,59 @@ xmlChar *
 xmlTextReaderLookupNamespace(xmlTextReaderPtr reader, const xmlChar *prefix) {
     xmlNsPtr ns;
 
-    if (reader == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3041]) {
+      if ((reader == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3041\n");
+      else
+        fprintf(stderr, "reached bug index 3041\n");
+    }
+    if ((!FIXREVERTER[3041] && (reader == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (reader->node == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3042]) {
+      if ((reader -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3042\n");
+      else
+        fprintf(stderr, "reached bug index 3042\n");
+    }
+    if ((!FIXREVERTER[3042] && (reader -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ns = xmlSearchNs(reader->node->doc, reader->node, prefix);
-    if (ns == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3043]) {
+      if ((ns == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3043\n");
+      else
+        fprintf(stderr, "reached bug index 3043\n");
+    }
+    if ((!FIXREVERTER[3043] && (ns == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlStrdup(ns->href));
 }
 
diff --git a/xmlregexp.c b/xmlregexp.c
index 3e912ab9..94f72aa5 100644
--- a/xmlregexp.c
+++ b/xmlregexp.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * regexp.c: generic and extensible Regular Expression engine
  *
@@ -431,10 +435,25 @@ xmlRegEpxFromParse(xmlRegParserCtxtPtr ctxt) {
     xmlRegexpPtr ret;
 
     ret = (xmlRegexpPtr) xmlMalloc(sizeof(xmlRegexp));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1714]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1714\n");
+      else
+        fprintf(stderr, "reached bug index 1714\n");
+    }
+    if ((!FIXREVERTER[1714] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt, "compiling regexp");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegexp));
     ret->string = ctxt->string;
     ret->nbStates = ctxt->nbStates;
@@ -472,11 +491,26 @@ xmlRegEpxFromParse(xmlRegParserCtxtPtr ctxt) {
 	 */
 
 	stateRemap = xmlMalloc(ret->nbStates * sizeof(int));
-	if (stateRemap == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1715]) {
+	  if ((stateRemap == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1715\n");
+	  else
+	    fprintf(stderr, "reached bug index 1715\n");
+	}
+	if ((!FIXREVERTER[1715] && (stateRemap == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "compiling regexp");
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	for (i = 0;i < ret->nbStates;i++) {
 	    if (ret->states[i] != NULL) {
 		stateRemap[i] = nbstates;
@@ -686,11 +720,41 @@ xmlRegNewParserCtxt(const xmlChar *string) {
     xmlRegParserCtxtPtr ret;
 
     ret = (xmlRegParserCtxtPtr) xmlMalloc(sizeof(xmlRegParserCtxt));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1716]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1716\n");
+      else
+        fprintf(stderr, "reached bug index 1716\n");
+    }
+    if ((!FIXREVERTER[1716] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(ret, 0, sizeof(xmlRegParserCtxt));
-    if (string != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1717]) {
+      if ((string != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1717\n");
+      else
+        fprintf(stderr, "reached bug index 1717\n");
+    }
+    if ((!FIXREVERTER[1717] && (string != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ret->string = xmlStrdup(string);
+	#ifdef FRCOV
+	}
+	#endif
     ret->cur = ret->string;
     ret->neg = 0;
     ret->negs = 0;
@@ -717,10 +781,25 @@ xmlRegNewRange(xmlRegParserCtxtPtr ctxt,
     xmlRegRangePtr ret;
 
     ret = (xmlRegRangePtr) xmlMalloc(sizeof(xmlRegRange));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1718]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1718\n");
+      else
+        fprintf(stderr, "reached bug index 1718\n");
+    }
+    if ((!FIXREVERTER[1718] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt, "allocating range");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->neg = neg;
     ret->type = type;
     ret->start = start;
@@ -736,8 +815,23 @@ xmlRegNewRange(xmlRegParserCtxtPtr ctxt,
  */
 static void
 xmlRegFreeRange(xmlRegRangePtr range) {
-    if (range == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1719]) {
+      if ((range == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1719\n");
+      else
+        fprintf(stderr, "reached bug index 1719\n");
+    }
+    if ((!FIXREVERTER[1719] && (range == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (range->blockName != NULL)
 	xmlFree(range->blockName);
@@ -756,20 +850,65 @@ static xmlRegRangePtr
 xmlRegCopyRange(xmlRegParserCtxtPtr ctxt, xmlRegRangePtr range) {
     xmlRegRangePtr ret;
 
-    if (range == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1720]) {
+      if ((range == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1720\n");
+      else
+        fprintf(stderr, "reached bug index 1720\n");
+    }
+    if ((!FIXREVERTER[1720] && (range == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlRegNewRange(ctxt, range->neg, range->type, range->start,
                          range->end);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1721]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1721\n");
+      else
+        fprintf(stderr, "reached bug index 1721\n");
+    }
+    if ((!FIXREVERTER[1721] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (range->blockName != NULL) {
 	ret->blockName = xmlStrdup(range->blockName);
-	if (ret->blockName == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1722]) {
+	  if ((ret -> blockName == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1722\n");
+	  else
+	    fprintf(stderr, "reached bug index 1722\n");
+	}
+	if ((!FIXREVERTER[1722] && (ret -> blockName == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "allocating range");
 	    xmlRegFreeRange(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return(ret);
 }
@@ -788,10 +927,25 @@ xmlRegNewAtom(xmlRegParserCtxtPtr ctxt, xmlRegAtomType type) {
     xmlRegAtomPtr ret;
 
     ret = (xmlRegAtomPtr) xmlMalloc(sizeof(xmlRegAtom));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1723]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1723\n");
+      else
+        fprintf(stderr, "reached bug index 1723\n");
+    }
+    if ((!FIXREVERTER[1723] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt, "allocating atom");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegAtom));
     ret->type = type;
     ret->quant = XML_REGEXP_QUANT_ONCE;
@@ -810,8 +964,23 @@ static void
 xmlRegFreeAtom(xmlRegAtomPtr atom) {
     int i;
 
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1724]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1724\n");
+      else
+        fprintf(stderr, "reached bug index 1724\n");
+    }
+    if ((!FIXREVERTER[1724] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     for (i = 0;i < atom->nbRanges;i++)
 	xmlRegFreeRange(atom->ranges[i]);
@@ -840,10 +1009,25 @@ xmlRegCopyAtom(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom) {
     xmlRegAtomPtr ret;
 
     ret = (xmlRegAtomPtr) xmlMalloc(sizeof(xmlRegAtom));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1725]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1725\n");
+      else
+        fprintf(stderr, "reached bug index 1725\n");
+    }
+    if ((!FIXREVERTER[1725] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt, "copying atom");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegAtom));
     ret->type = atom->type;
     ret->quant = atom->quant;
@@ -854,10 +1038,25 @@ xmlRegCopyAtom(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom) {
 
         ret->ranges = (xmlRegRangePtr *) xmlMalloc(sizeof(xmlRegRangePtr) *
 	                                           atom->nbRanges);
-	if (ret->ranges == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1726]) {
+	  if ((ret -> ranges == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1726\n");
+	  else
+	    fprintf(stderr, "reached bug index 1726\n");
+	}
+	if ((!FIXREVERTER[1726] && (ret -> ranges == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "copying atom");
 	    goto error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	for (i = 0;i < atom->nbRanges;i++) {
 	    ret->ranges[i] = xmlRegCopyRange(ctxt, atom->ranges[i]);
 	    if (ret->ranges[i] == NULL)
@@ -877,10 +1076,25 @@ xmlRegNewState(xmlRegParserCtxtPtr ctxt) {
     xmlRegStatePtr ret;
 
     ret = (xmlRegStatePtr) xmlMalloc(sizeof(xmlRegState));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1727]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1727\n");
+      else
+        fprintf(stderr, "reached bug index 1727\n");
+    }
+    if ((!FIXREVERTER[1727] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt, "allocating state");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegState));
     ret->type = XML_REGEXP_TRANS_STATE;
     ret->mark = XML_REGEXP_MARK_NORMAL;
@@ -895,8 +1109,23 @@ xmlRegNewState(xmlRegParserCtxtPtr ctxt) {
  */
 static void
 xmlRegFreeState(xmlRegStatePtr state) {
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1728]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1728\n");
+      else
+        fprintf(stderr, "reached bug index 1728\n");
+    }
+    if ((!FIXREVERTER[1728] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (state->trans != NULL)
 	xmlFree(state->trans);
@@ -914,8 +1143,23 @@ xmlRegFreeState(xmlRegStatePtr state) {
 static void
 xmlRegFreeParserCtxt(xmlRegParserCtxtPtr ctxt) {
     int i;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1729]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1729\n");
+      else
+        fprintf(stderr, "reached bug index 1729\n");
+    }
+    if ((!FIXREVERTER[1729] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ctxt->string != NULL)
 	xmlFree(ctxt->string);
@@ -1231,26 +1475,71 @@ xmlRegAtomAddRange(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom,
 	atom->maxRanges = 4;
 	atom->ranges = (xmlRegRangePtr *) xmlMalloc(atom->maxRanges *
 		                             sizeof(xmlRegRangePtr));
-	if (atom->ranges == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1735]) {
+	  if ((atom -> ranges == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1735\n");
+	  else
+	    fprintf(stderr, "reached bug index 1735\n");
+	}
+	if ((!FIXREVERTER[1735] && (atom -> ranges == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding ranges");
 	    atom->maxRanges = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (atom->nbRanges >= atom->maxRanges) {
 	xmlRegRangePtr *tmp;
 	atom->maxRanges *= 2;
 	tmp = (xmlRegRangePtr *) xmlRealloc(atom->ranges, atom->maxRanges *
 		                             sizeof(xmlRegRangePtr));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1736]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1736\n");
+	  else
+	    fprintf(stderr, "reached bug index 1736\n");
+	}
+	if ((!FIXREVERTER[1736] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding ranges");
 	    atom->maxRanges /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	atom->ranges = tmp;
     }
     range = xmlRegNewRange(ctxt, neg, type, start, end);
-    if (range == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1737]) {
+      if ((range == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1737\n");
+      else
+        fprintf(stderr, "reached bug index 1737\n");
+    }
+    if ((!FIXREVERTER[1737] && (range == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     range->blockName = blockName;
     atom->ranges[atom->nbRanges++] = range;
 
@@ -1262,21 +1551,51 @@ xmlRegGetCounter(xmlRegParserCtxtPtr ctxt) {
 	ctxt->maxCounters = 4;
 	ctxt->counters = (xmlRegCounter *) xmlMalloc(ctxt->maxCounters *
 		                             sizeof(xmlRegCounter));
-	if (ctxt->counters == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1738]) {
+	  if ((ctxt -> counters == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1738\n");
+	  else
+	    fprintf(stderr, "reached bug index 1738\n");
+	}
+	if ((!FIXREVERTER[1738] && (ctxt -> counters == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "allocating counter");
 	    ctxt->maxCounters = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (ctxt->nbCounters >= ctxt->maxCounters) {
 	xmlRegCounter *tmp;
 	ctxt->maxCounters *= 2;
 	tmp = (xmlRegCounter *) xmlRealloc(ctxt->counters, ctxt->maxCounters *
 		                           sizeof(xmlRegCounter));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1739]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1739\n");
+	  else
+	    fprintf(stderr, "reached bug index 1739\n");
+	}
+	if ((!FIXREVERTER[1739] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "allocating counter");
 	    ctxt->maxCounters /= 2;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->counters = tmp;
     }
     ctxt->counters[ctxt->nbCounters].min = -1;
@@ -1294,21 +1613,51 @@ xmlRegAtomPush(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom) {
 	ctxt->maxAtoms = 4;
 	ctxt->atoms = (xmlRegAtomPtr *) xmlMalloc(ctxt->maxAtoms *
 		                             sizeof(xmlRegAtomPtr));
-	if (ctxt->atoms == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1740]) {
+	  if ((ctxt -> atoms == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1740\n");
+	  else
+	    fprintf(stderr, "reached bug index 1740\n");
+	}
+	if ((!FIXREVERTER[1740] && (ctxt -> atoms == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "pushing atom");
 	    ctxt->maxAtoms = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (ctxt->nbAtoms >= ctxt->maxAtoms) {
 	xmlRegAtomPtr *tmp;
 	ctxt->maxAtoms *= 2;
 	tmp = (xmlRegAtomPtr *) xmlRealloc(ctxt->atoms, ctxt->maxAtoms *
 		                             sizeof(xmlRegAtomPtr));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1741]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1741\n");
+	  else
+	    fprintf(stderr, "reached bug index 1741\n");
+	}
+	if ((!FIXREVERTER[1741] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "allocating counter");
 	    ctxt->maxAtoms /= 2;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->atoms = tmp;
     }
     atom->no = ctxt->nbAtoms;
@@ -1323,21 +1672,51 @@ xmlRegStateAddTransTo(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr target,
 	target->maxTransTo = 8;
 	target->transTo = (int *) xmlMalloc(target->maxTransTo *
 		                             sizeof(int));
-	if (target->transTo == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1742]) {
+	  if ((target -> transTo == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1742\n");
+	  else
+	    fprintf(stderr, "reached bug index 1742\n");
+	}
+	if ((!FIXREVERTER[1742] && (target -> transTo == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding transition");
 	    target->maxTransTo = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (target->nbTransTo >= target->maxTransTo) {
 	int *tmp;
 	target->maxTransTo *= 2;
 	tmp = (int *) xmlRealloc(target->transTo, target->maxTransTo *
 		                             sizeof(int));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1743]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1743\n");
+	  else
+	    fprintf(stderr, "reached bug index 1743\n");
+	}
+	if ((!FIXREVERTER[1743] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding transition");
 	    target->maxTransTo /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	target->transTo = tmp;
     }
     target->transTo[target->nbTransTo] = from;
@@ -1383,21 +1762,51 @@ xmlRegStateAddTrans(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
 	state->maxTrans = 8;
 	state->trans = (xmlRegTrans *) xmlMalloc(state->maxTrans *
 		                             sizeof(xmlRegTrans));
-	if (state->trans == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1744]) {
+	  if ((state -> trans == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1744\n");
+	  else
+	    fprintf(stderr, "reached bug index 1744\n");
+	}
+	if ((!FIXREVERTER[1744] && (state -> trans == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding transition");
 	    state->maxTrans = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (state->nbTrans >= state->maxTrans) {
 	xmlRegTrans *tmp;
 	state->maxTrans *= 2;
 	tmp = (xmlRegTrans *) xmlRealloc(state->trans, state->maxTrans *
 		                             sizeof(xmlRegTrans));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1745]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1745\n");
+	  else
+	    fprintf(stderr, "reached bug index 1745\n");
+	}
+	if ((!FIXREVERTER[1745] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding transition");
 	    state->maxTrans /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	state->trans = tmp;
     }
 #ifdef DEBUG_REGEXP_GRAPH
@@ -1425,26 +1834,71 @@ xmlRegStateAddTrans(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
 
 static int
 xmlRegStatePush(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state) {
-    if (state == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1746]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1746\n");
+      else
+        fprintf(stderr, "reached bug index 1746\n");
+    }
+    if ((!FIXREVERTER[1746] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->maxStates == 0) {
 	ctxt->maxStates = 4;
 	ctxt->states = (xmlRegStatePtr *) xmlMalloc(ctxt->maxStates *
 		                             sizeof(xmlRegStatePtr));
-	if (ctxt->states == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1747]) {
+	  if ((ctxt -> states == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1747\n");
+	  else
+	    fprintf(stderr, "reached bug index 1747\n");
+	}
+	if ((!FIXREVERTER[1747] && (ctxt -> states == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding state");
 	    ctxt->maxStates = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (ctxt->nbStates >= ctxt->maxStates) {
 	xmlRegStatePtr *tmp;
 	ctxt->maxStates *= 2;
 	tmp = (xmlRegStatePtr *) xmlRealloc(ctxt->states, ctxt->maxStates *
 		                             sizeof(xmlRegStatePtr));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1748]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1748\n");
+	  else
+	    fprintf(stderr, "reached bug index 1748\n");
+	}
+	if ((!FIXREVERTER[1748] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt, "adding state");
 	    ctxt->maxStates /= 2;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->states = tmp;
     }
     state->no = ctxt->nbStates;
@@ -1629,8 +2083,23 @@ xmlFAGenerateTransitions(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr from,
 		        case, I suppose this got optimized out before when
 			building the automata */
 		    copy = xmlRegCopyAtom(ctxt, atom);
-		    if (copy == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1749]) {
+		      if ((copy == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1749\n");
+		      else
+		        fprintf(stderr, "reached bug index 1749\n");
+		    }
+		    if ((!FIXREVERTER[1749] && (copy == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        return(-1);
+		        #ifdef FRCOV
+		        }
+		        #endif
 		    copy->quant = XML_REGEXP_QUANT_ONCE;
 		    copy->min = 0;
 		    copy->max = 0;
@@ -1778,11 +2247,41 @@ xmlFAReduceEpsilonTransitions(xmlRegParserCtxtPtr ctxt, int fromnr,
     printf("xmlFAReduceEpsilonTransitions(%d, %d)\n", fromnr, tonr);
 #endif
     from = ctxt->states[fromnr];
-    if (from == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1750]) {
+      if ((from == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1750\n");
+      else
+        fprintf(stderr, "reached bug index 1750\n");
+    }
+    if ((!FIXREVERTER[1750] && (from == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     to = ctxt->states[tonr];
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1751]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1751\n");
+      else
+        fprintf(stderr, "reached bug index 1751\n");
+    }
+    if ((!FIXREVERTER[1751] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((to->mark == XML_REGEXP_MARK_START) ||
 	(to->mark == XML_REGEXP_MARK_VISITED))
 	return;
@@ -1863,10 +2362,40 @@ xmlFAEliminateSimpleEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
 
     for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1752]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1752\n");
+	  else
+	    fprintf(stderr, "reached bug index 1752\n");
+	}
+	if ((!FIXREVERTER[1752] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
-	if (state->nbTrans != 1)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1753]) {
+	  if ((state -> nbTrans != 1 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1753\n");
+	  else
+	    fprintf(stderr, "reached bug index 1753\n");
+	}
+	if ((!FIXREVERTER[1753] && (state -> nbTrans != 1 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (state->type == XML_REGEXP_UNREACH_STATE)
 	    continue;
 	/* is the only transition out a basic transition */
@@ -1926,7 +2455,22 @@ xmlFAEliminateEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
     xmlRegStatePtr state;
     int has_epsilon;
 
-    if (ctxt->states == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1754]) {
+      if ((ctxt -> states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1754\n");
+      else
+        fprintf(stderr, "reached bug index 1754\n");
+    }
+    if ((!FIXREVERTER[1754] && (ctxt -> states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Eliminate simple epsilon transition and the associated unreachable
@@ -1956,8 +2500,23 @@ xmlFAEliminateEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
      */
     for (statenr = ctxt->nbStates - 1;statenr >= 0;statenr--) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1755]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1755\n");
+	  else
+	    fprintf(stderr, "reached bug index 1755\n");
+	}
+	if ((!FIXREVERTER[1755] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((state->nbTrans == 0) &&
 	    (state->type != XML_REGEXP_FINAL_STATE)) {
 	    state->type = XML_REGEXP_SINK_STATE;
@@ -1999,8 +2558,23 @@ xmlFAEliminateEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
     if (has_epsilon) {
 	for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	    state = ctxt->states[statenr];
-	    if (state == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1756]) {
+	      if ((state == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1756\n");
+	      else
+	        fprintf(stderr, "reached bug index 1756\n");
+	    }
+	    if ((!FIXREVERTER[1756] && (state == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    for (transnr = 0;transnr < state->nbTrans;transnr++) {
 		xmlRegTransPtr trans = &(state->trans[transnr]);
 		if ((trans->atom == NULL) &&
@@ -2453,8 +3027,23 @@ xmlFAEqualAtoms(xmlRegAtomPtr atom1, xmlRegAtomPtr atom2, int deep) {
 
     if (atom1 == atom2)
 	return(1);
-    if ((atom1 == NULL) || (atom2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1758]) {
+      if ((atom1 == (void *) 0 || atom2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1758\n");
+      else
+        fprintf(stderr, "reached bug index 1758\n");
+    }
+    if ((!FIXREVERTER[1758] && (atom1 == (void *) 0 || atom2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (atom1->type != atom2->type)
         return(0);
@@ -2498,8 +3087,23 @@ xmlFACompareAtoms(xmlRegAtomPtr atom1, xmlRegAtomPtr atom2, int deep) {
 
     if (atom1 == atom2)
 	return(1);
-    if ((atom1 == NULL) || (atom2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1759]) {
+      if ((atom1 == (void *) 0 || atom2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1759\n");
+      else
+        fprintf(stderr, "reached bug index 1759\n");
+    }
+    if ((!FIXREVERTER[1759] && (atom1 == (void *) 0 || atom2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if ((atom1->type == XML_REGEXP_ANYCHAR) ||
         (atom2->type == XML_REGEXP_ANYCHAR))
@@ -2588,8 +3192,23 @@ xmlFARecurseDeterminism(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
     xmlRegTransPtr t1;
     int deep = 1;
 
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1764]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1764\n");
+      else
+        fprintf(stderr, "reached bug index 1764\n");
+    }
+    if ((!FIXREVERTER[1764] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(ret);
+	#ifdef FRCOV
+	}
+	#endif
     if (state->markd == XML_REGEXP_MARK_VISITED)
 	return(ret);
 
@@ -2607,8 +3226,23 @@ xmlFARecurseDeterminism(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
 	 * check transitions conflicting with the one looked at
 	 */
 	if (t1->atom == NULL) {
-	    if (t1->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1765]) {
+	      if ((t1 -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1765\n");
+	      else
+	        fprintf(stderr, "reached bug index 1765\n");
+	    }
+	    if ((!FIXREVERTER[1765] && (t1 -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    state->markd = XML_REGEXP_MARK_VISITED;
 	    res = xmlFARecurseDeterminism(ctxt, ctxt->states[t1->to],
 		                           to, atom);
@@ -2619,8 +3253,23 @@ xmlFARecurseDeterminism(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
 	    }
 	    continue;
 	}
-	if (t1->to != to)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1766]) {
+	  if ((t1 -> to != to ) && !(0))
+	    fprintf(stderr, "triggered bug index 1766\n");
+	  else
+	    fprintf(stderr, "reached bug index 1766\n");
+	}
+	if ((!FIXREVERTER[1766] && (t1 -> to != to ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (xmlFACompareAtoms(t1->atom, atom, deep)) {
 	    ret = 0;
 	    /* mark the transition as non-deterministic */
@@ -2662,20 +3311,65 @@ xmlFAComputesDeterminism(xmlRegParserCtxtPtr ctxt) {
      */
     for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1767]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1767\n");
+	  else
+	    fprintf(stderr, "reached bug index 1767\n");
+	}
+	if ((!FIXREVERTER[1767] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
-	if (state->nbTrans < 2)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1768]) {
+	  if ((state -> nbTrans < 2 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1768\n");
+	  else
+	    fprintf(stderr, "reached bug index 1768\n");
+	}
+	if ((!FIXREVERTER[1768] && (state -> nbTrans < 2 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	for (transnr = 0;transnr < state->nbTrans;transnr++) {
 	    t1 = &(state->trans[transnr]);
 	    /*
 	     * Determinism checks in case of counted or all transitions
 	     * will have to be handled separately
 	     */
-	    if (t1->atom == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1769]) {
+	      if ((t1 -> atom == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1769\n");
+	      else
+	        fprintf(stderr, "reached bug index 1769\n");
+	    }
+	    if ((!FIXREVERTER[1769] && (t1 -> atom == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/* t1->nd = 1; */
 		continue;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (t1->to == -1) /* eliminated */
 		continue;
 	    for (i = 0;i < transnr;i++) {
@@ -2704,10 +3398,40 @@ xmlFAComputesDeterminism(xmlRegParserCtxtPtr ctxt) {
      */
     for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1770]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1770\n");
+	  else
+	    fprintf(stderr, "reached bug index 1770\n");
+	}
+	if ((!FIXREVERTER[1770] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
-	if (state->nbTrans < 2)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1771]) {
+	  if ((state -> nbTrans < 2 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1771\n");
+	  else
+	    fprintf(stderr, "reached bug index 1771\n");
+	}
+	if ((!FIXREVERTER[1771] && (state -> nbTrans < 2 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	last = NULL;
 	for (transnr = 0;transnr < state->nbTrans;transnr++) {
 	    t1 = &(state->trans[transnr]);
@@ -2715,9 +3439,24 @@ xmlFAComputesDeterminism(xmlRegParserCtxtPtr ctxt) {
 	     * Determinism checks in case of counted or all transitions
 	     * will have to be handled separately
 	     */
-	    if (t1->atom == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1772]) {
+	      if ((t1 -> atom == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1772\n");
+	      else
+	        fprintf(stderr, "reached bug index 1772\n");
+	    }
+	    if ((!FIXREVERTER[1772] && (t1 -> atom == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		continue;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (t1->to == -1) /* eliminated */
 		continue;
 	    for (i = 0;i < transnr;i++) {
@@ -3091,9 +3830,24 @@ xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
     exec->transno--;
 #endif
 #ifdef MAX_PUSH
-    if (exec->nbPush > MAX_PUSH) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1777]) {
+      if ((exec -> nbPush > 10000000 ) && !(0))
+        fprintf(stderr, "triggered bug index 1777\n");
+      else
+        fprintf(stderr, "reached bug index 1777\n");
+    }
+    if ((!FIXREVERTER[1777] && (exec -> nbPush > 10000000 ))
+    #else
+    if (0
+    #endif
+    ) {
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     exec->nbPush++;
 #endif
 
@@ -3101,11 +3855,26 @@ xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
 	exec->maxRollbacks = 4;
 	exec->rollbacks = (xmlRegExecRollback *) xmlMalloc(exec->maxRollbacks *
 		                             sizeof(xmlRegExecRollback));
-	if (exec->rollbacks == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1778]) {
+	  if ((exec -> rollbacks == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1778\n");
+	  else
+	    fprintf(stderr, "reached bug index 1778\n");
+	}
+	if ((!FIXREVERTER[1778] && (exec -> rollbacks == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "saving regexp");
 	    exec->maxRollbacks = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(exec->rollbacks, 0,
 	       exec->maxRollbacks * sizeof(xmlRegExecRollback));
     } else if (exec->nbRollbacks >= exec->maxRollbacks) {
@@ -3115,11 +3884,26 @@ xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
 	exec->maxRollbacks *= 2;
 	tmp = (xmlRegExecRollback *) xmlRealloc(exec->rollbacks,
 			exec->maxRollbacks * sizeof(xmlRegExecRollback));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1779]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1779\n");
+	  else
+	    fprintf(stderr, "reached bug index 1779\n");
+	}
+	if ((!FIXREVERTER[1779] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "saving regexp");
 	    exec->maxRollbacks /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	exec->rollbacks = tmp;
 	tmp = &exec->rollbacks[len];
 	memset(tmp, 0, (exec->maxRollbacks - len) * sizeof(xmlRegExecRollback));
@@ -3145,13 +3929,28 @@ xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
 
 static void
 xmlFARegExecRollBack(xmlRegExecCtxtPtr exec) {
-    if (exec->nbRollbacks <= 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1780]) {
+      if ((exec -> nbRollbacks <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1780\n");
+      else
+        fprintf(stderr, "reached bug index 1780\n");
+    }
+    if ((!FIXREVERTER[1780] && (exec -> nbRollbacks <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	exec->status = -1;
 #ifdef DEBUG_REGEXP_EXEC
 	printf("rollback failed on empty stack\n");
 #endif
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     exec->nbRollbacks--;
     exec->state = exec->rollbacks[exec->nbRollbacks].state;
     exec->index = exec->rollbacks[exec->nbRollbacks].index;
@@ -3202,10 +4001,25 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
     exec->inputStackMax = 0;
     if (comp->nbCounters > 0) {
 	exec->counts = (int *) xmlMalloc(comp->nbCounters * sizeof(int));
-	if (exec->counts == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1781]) {
+	  if ((exec -> counts == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1781\n");
+	  else
+	    fprintf(stderr, "reached bug index 1781\n");
+	}
+	if ((!FIXREVERTER[1781] && (exec -> counts == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "running regexp");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         memset(exec->counts, 0, comp->nbCounters * sizeof(int));
     } else
 	exec->counts = NULL;
@@ -3243,8 +4057,23 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 	exec->transcount = 0;
 	for (;exec->transno < exec->state->nbTrans;exec->transno++) {
 	    trans = &exec->state->trans[exec->transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1782]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1782\n");
+	      else
+	        fprintf(stderr, "reached bug index 1782\n");
+	    }
+	    if ((!FIXREVERTER[1782] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
 	    ret = 0;
 	    deter = 1;
@@ -3252,10 +4081,25 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 		int count;
 		xmlRegCounterPtr counter;
 
-		if (exec->counts == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1783]) {
+		  if ((exec -> counts == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1783\n");
+		  else
+		    fprintf(stderr, "reached bug index 1783\n");
+		}
+		if ((!FIXREVERTER[1783] && (exec -> counts == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    exec->status = -1;
 		    goto error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		/*
 		 * A counted transition.
 		 */
@@ -3312,9 +4156,24 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 			/*
 			 * Try to progress as much as possible on the input
 			 */
-			if (exec->transcount == atom->max) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1784]) {
+			  if ((exec -> transcount == atom -> max ) && !(0))
+			    fprintf(stderr, "triggered bug index 1784\n");
+			  else
+			    fprintf(stderr, "reached bug index 1784\n");
+			}
+			if ((!FIXREVERTER[1784] && (exec -> transcount == atom -> max ))
+			#else
+			if (0
+			#endif
+			) {
 			    break;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			exec->index += len;
 			/*
 			 * End of input: stop here
@@ -3354,10 +4213,25 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 			goto rollback;
 		    }
 		    if (trans->counter >= 0) {
-			if (exec->counts == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1788]) {
+			  if ((exec -> counts == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 1788\n");
+			  else
+			    fprintf(stderr, "reached bug index 1788\n");
+			}
+			if ((!FIXREVERTER[1788] && (exec -> counts == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    exec->status = -1;
 			    goto error;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 #ifdef DEBUG_REGEXP_EXEC
 			printf("Decreasing count %d\n", trans->counter);
 #endif
@@ -3413,10 +4287,25 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 		}
 		if ((trans->count >= 0) &&
 		    (trans->count < REGEXP_ALL_COUNTER)) {
-		    if (exec->counts == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1791]) {
+		      if ((exec -> counts == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1791\n");
+		      else
+		        fprintf(stderr, "reached bug index 1791\n");
+		    }
+		    if ((!FIXREVERTER[1791] && (exec -> counts == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 		        exec->status = -1;
 			goto error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 #ifdef DEBUG_REGEXP_EXEC
 		    printf("resetting count %d on transition\n",
 		           trans->count);
@@ -3463,15 +4352,60 @@ error:
 	}
 	xmlFree(exec->rollbacks);
     }
-    if (exec->state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1794]) {
+      if ((exec -> state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1794\n");
+      else
+        fprintf(stderr, "reached bug index 1794\n");
+    }
+    if ((!FIXREVERTER[1794] && (exec -> state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (exec->counts != NULL)
 	xmlFree(exec->counts);
-    if (exec->status == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1795]) {
+      if ((exec -> status == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1795\n");
+      else
+        fprintf(stderr, "reached bug index 1795\n");
+    }
+    if ((!FIXREVERTER[1795] && (exec -> status == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(1);
+	#ifdef FRCOV
+	}
+	#endif
     if (exec->status == -1) {
-	if (exec->nbPush > MAX_PUSH)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1796]) {
+	  if ((exec -> nbPush > 10000000 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1796\n");
+	  else
+	    fprintf(stderr, "reached bug index 1796\n");
+	}
+	if ((!FIXREVERTER[1796] && (exec -> nbPush > 10000000 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return(0);
     }
     return(exec->status);
@@ -3501,15 +4435,45 @@ xmlRegExecCtxtPtr
 xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
     xmlRegExecCtxtPtr exec;
 
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1797]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1797\n");
+      else
+        fprintf(stderr, "reached bug index 1797\n");
+    }
+    if ((!FIXREVERTER[1797] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((comp->compact == NULL) && (comp->states == NULL))
         return(NULL);
     exec = (xmlRegExecCtxtPtr) xmlMalloc(sizeof(xmlRegExecCtxt));
-    if (exec == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1798]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1798\n");
+      else
+        fprintf(stderr, "reached bug index 1798\n");
+    }
+    if ((!FIXREVERTER[1798] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(NULL, "creating execution context");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(exec, 0, sizeof(xmlRegExecCtxt));
     exec->inputString = NULL;
     exec->index = 0;
@@ -3519,8 +4483,23 @@ xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
     exec->rollbacks = NULL;
     exec->status = 0;
     exec->comp = comp;
-    if (comp->compact == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1799]) {
+      if ((comp -> compact == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1799\n");
+      else
+        fprintf(stderr, "reached bug index 1799\n");
+    }
+    if ((!FIXREVERTER[1799] && (comp -> compact == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	exec->state = comp->states[0];
+	#ifdef FRCOV
+	}
+	#endif
     exec->transno = 0;
     exec->transcount = 0;
     exec->callback = callback;
@@ -3532,11 +4511,26 @@ xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
 	 */
 	exec->counts = (int *) xmlMalloc(comp->nbCounters * sizeof(int)
 	                                 * 2);
-	if (exec->counts == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1800]) {
+	  if ((exec -> counts == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1800\n");
+	  else
+	    fprintf(stderr, "reached bug index 1800\n");
+	}
+	if ((!FIXREVERTER[1800] && (exec -> counts == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "creating execution context");
 	    xmlFree(exec);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         memset(exec->counts, 0, comp->nbCounters * sizeof(int) * 2);
 	exec->errCounts = &exec->counts[comp->nbCounters];
     } else {
@@ -3560,8 +4554,23 @@ xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
  */
 void
 xmlRegFreeExecCtxt(xmlRegExecCtxtPtr exec) {
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1801]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1801\n");
+      else
+        fprintf(stderr, "reached bug index 1801\n");
+    }
+    if ((!FIXREVERTER[1801] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (exec->rollbacks != NULL) {
 	if (exec->counts != NULL) {
@@ -3599,22 +4608,52 @@ xmlFARegExecSaveInputString(xmlRegExecCtxtPtr exec, const xmlChar *value,
 	exec->inputStackMax = 4;
 	exec->inputStack = (xmlRegInputTokenPtr)
 	    xmlMalloc(exec->inputStackMax * sizeof(xmlRegInputToken));
-	if (exec->inputStack == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1802]) {
+	  if ((exec -> inputStack == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1802\n");
+	  else
+	    fprintf(stderr, "reached bug index 1802\n");
+	}
+	if ((!FIXREVERTER[1802] && (exec -> inputStack == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "pushing input string");
 	    exec->inputStackMax = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (exec->inputStackNr + 1 >= exec->inputStackMax) {
 	xmlRegInputTokenPtr tmp;
 
 	exec->inputStackMax *= 2;
 	tmp = (xmlRegInputTokenPtr) xmlRealloc(exec->inputStack,
 			exec->inputStackMax * sizeof(xmlRegInputToken));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1803]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1803\n");
+	  else
+	    fprintf(stderr, "reached bug index 1803\n");
+	}
+	if ((!FIXREVERTER[1803] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(NULL, "pushing input string");
 	    exec->inputStackMax /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	exec->inputStack = tmp;
     }
     exec->inputStack[exec->inputStackNr].value = xmlStrdup(value);
@@ -3640,8 +4679,38 @@ xmlFARegExecSaveInputString(xmlRegExecCtxtPtr exec, const xmlChar *value,
 static int
 xmlRegStrEqualWildcard(const xmlChar *expStr, const xmlChar *valStr) {
     if (expStr == valStr) return(1);
-    if (expStr == NULL) return(0);
-    if (valStr == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1804]) {
+      if ((expStr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1804\n");
+      else
+        fprintf(stderr, "reached bug index 1804\n");
+    }
+    if ((!FIXREVERTER[1804] && (expStr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1805]) {
+      if ((valStr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1805\n");
+      else
+        fprintf(stderr, "reached bug index 1805\n");
+    }
+    if ((!FIXREVERTER[1805] && (valStr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     do {
 	/*
 	* Eval if we have a wildcard for the current item.
@@ -3694,10 +4763,37 @@ xmlRegCompactPushString(xmlRegExecCtxtPtr exec,
     int state = exec->index;
     int i, target;
 
-    if ((comp == NULL) || (comp->compact == NULL) || (comp->stringMap == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1806]) {
+      if ((comp == (void *) 0 || comp -> compact == (void *) 0 || comp -> stringMap == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1806\n");
+      else
+        fprintf(stderr, "reached bug index 1806\n");
+    }
+    if ((!FIXREVERTER[1806] && (comp == (void *) 0 || comp -> compact == (void *) 0 || comp -> stringMap == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-
-    if (value == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1807]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1807\n");
+      else
+        fprintf(stderr, "reached bug index 1807\n");
+    }
+    if ((!FIXREVERTER[1807] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * are we at a final state ?
 	 */
@@ -3706,6 +4802,9 @@ xmlRegCompactPushString(xmlRegExecCtxtPtr exec,
 	    return(1);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef DEBUG_PUSH
     printf("value pushed: %s\n", value);
@@ -3716,14 +4815,47 @@ xmlRegCompactPushString(xmlRegExecCtxtPtr exec,
      */
     for (i = 0;i < comp->nbstrings;i++) {
 	target = comp->compact[state * (comp->nbstrings + 1) + i + 1];
-	if ((target > 0) && (target <= comp->nbstates)) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1809]) {
+	  fprintf(stderr, "reached bug index 1809\n");
+	}
+	if ((FIXREVERTER[1809] && (target > 0 )) || (!FIXREVERTER[1809] && (target > 0 && target <= comp -> nbstates ))
+	#else
+	if (target > 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(target <= comp -> nbstates ))
+	    fprintf(stderr, "triggered bug index 1809\n");
+	  #endif
+	
 	    target--; /* to avoid 0 */
 	    if (xmlRegStrEqualWildcard(comp->stringMap[i], value)) {
 		exec->index = target;
-		if ((exec->callback != NULL) && (comp->transdata != NULL)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1808]) {
+		  fprintf(stderr, "reached bug index 1808\n");
+		}
+		if ((FIXREVERTER[1808] && (exec -> callback != (void *) 0 )) || (!FIXREVERTER[1808] && (exec -> callback != (void *) 0 && comp -> transdata != (void *) 0 ))
+		#else
+		if (exec -> callback != (void *) 0 
+		#endif
+		) {
+		  
+		#ifdef FRCOV
+		  if (!(comp -> transdata != (void *) 0 ))
+		    fprintf(stderr, "triggered bug index 1808\n");
+		  #endif
+		
 		    exec->callback(exec->data, value,
 			  comp->transdata[state * comp->nbstrings + i], data);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 #ifdef DEBUG_PUSH
 		printf("entering state %d\n", target);
 #endif
@@ -3737,6 +4869,9 @@ xmlRegCompactPushString(xmlRegExecCtxtPtr exec,
 		return(0);
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     /*
      * Failed to find an exit transition out from current state for the
@@ -3778,12 +4913,57 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
     int final = 0;
     int progress = 1;
 
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1810]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1810\n");
+      else
+        fprintf(stderr, "reached bug index 1810\n");
+    }
+    if ((!FIXREVERTER[1810] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->comp == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1811]) {
+      if ((exec -> comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1811\n");
+      else
+        fprintf(stderr, "reached bug index 1811\n");
+    }
+    if ((!FIXREVERTER[1811] && (exec -> comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->status != 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1812]) {
+      if ((exec -> status != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1812\n");
+      else
+        fprintf(stderr, "reached bug index 1812\n");
+    }
+    if ((!FIXREVERTER[1812] && (exec -> status != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(exec->status);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (exec->comp->compact != NULL)
 	return(xmlRegCompactPushString(exec, exec->comp, value, data));
@@ -3801,7 +4981,22 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
      * If we have an active rollback stack push the new value there
      * and get back to where we were left
      */
-    if ((value != NULL) && (exec->inputStackNr > 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1813]) {
+      fprintf(stderr, "reached bug index 1813\n");
+    }
+    if ((FIXREVERTER[1813] && (value != (void *) 0 )) || (!FIXREVERTER[1813] && (value != (void *) 0 && exec -> inputStackNr > 0 ))
+    #else
+    if (value != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(exec -> inputStackNr > 0 ))
+        fprintf(stderr, "triggered bug index 1813\n");
+      #endif
+    
 	xmlFARegExecSaveInputString(exec, value, data);
 	value = exec->inputStack[exec->index].value;
 	data = exec->inputStack[exec->index].data;
@@ -3809,6 +5004,9 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 	printf("value loaded: %s\n", value);
 #endif
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     while ((exec->status == 0) &&
 	   ((value != NULL) ||
@@ -3826,8 +5024,23 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 	exec->transcount = 0;
 	for (;exec->transno < exec->state->nbTrans;exec->transno++) {
 	    trans = &exec->state->trans[exec->transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1814]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1814\n");
+	      else
+	        fprintf(stderr, "reached bug index 1814\n");
+	    }
+	    if ((!FIXREVERTER[1814] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
 	    ret = 0;
 	    if (trans->count == REGEXP_ALL_LAX_COUNTER) {
@@ -3888,10 +5101,25 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			continue;
                     counter = &exec->comp->counters[t->counter];
 		    count = exec->counts[t->counter];
-		    if ((count < counter->min) || (count > counter->max)) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1815]) {
+		      if ((count < counter -> min || count > counter -> max ) && !(0))
+		        fprintf(stderr, "triggered bug index 1815\n");
+		      else
+		        fprintf(stderr, "reached bug index 1815\n");
+		    }
+		    if ((!FIXREVERTER[1815] && (count < counter -> min || count > counter -> max ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			ret = 0;
 			break;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		}
 	    } else if (trans->count >= 0) {
 		int count;
@@ -3919,7 +5147,22 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 		    if (!compound)
 		        ret = 0;
 		}
-		if ((ret == 1) && (trans->counter >= 0)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1817]) {
+		  fprintf(stderr, "reached bug index 1817\n");
+		}
+		if ((FIXREVERTER[1817] && (ret == 1 )) || (!FIXREVERTER[1817] && (ret == 1 && trans -> counter >= 0 ))
+		#else
+		if (ret == 1 
+		#endif
+		) {
+		  
+		#ifdef FRCOV
+		  if (!(trans -> counter >= 0 ))
+		    fprintf(stderr, "triggered bug index 1817\n");
+		  #endif
+		
 		    xmlRegCounterPtr counter;
 		    int count;
 
@@ -3928,8 +5171,26 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 		    if (count >= counter->max)
 			ret = 0;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 
-		if ((ret == 1) && (atom->min > 0) && (atom->max > 0)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1823]) {
+		  fprintf(stderr, "reached bug index 1823\n");
+		}
+		if ((FIXREVERTER[1823] && (ret == 1 && atom -> min > 0 )) || (!FIXREVERTER[1823] && (ret == 1 && atom -> min > 0 && atom -> max > 0 ))
+		#else
+		if (ret == 1 && atom -> min > 0 
+		#endif
+		) {
+		  
+		#ifdef FRCOV
+		  if (!(atom -> max > 0 ))
+		    fprintf(stderr, "triggered bug index 1823\n");
+		  #endif
+		
 		    xmlRegStatePtr to = exec->comp->states[trans->to];
 
 		    /*
@@ -3946,9 +5207,24 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			/*
 			 * Try to progress as much as possible on the input
 			 */
-			if (exec->transcount == atom->max) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1818]) {
+			  if ((exec -> transcount == atom -> max ) && !(0))
+			    fprintf(stderr, "triggered bug index 1818\n");
+			  else
+			    fprintf(stderr, "reached bug index 1818\n");
+			}
+			if ((!FIXREVERTER[1818] && (exec -> transcount == atom -> max ))
+			#else
+			if (0
+			#endif
+			) {
 			    break;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			exec->index++;
 			value = exec->inputStack[exec->index].value;
 			data = exec->inputStack[exec->index].data;
@@ -3959,10 +5235,25 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			/*
 			 * End of input: stop here
 			 */
-			if (value == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1819]) {
+			  if ((value == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 1819\n");
+			  else
+			    fprintf(stderr, "reached bug index 1819\n");
+			}
+			if ((!FIXREVERTER[1819] && (value == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    exec->index --;
 			    break;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			if (exec->transcount >= atom->min) {
 			    int transno = exec->transno;
 			    xmlRegStatePtr state = exec->state;
@@ -3995,13 +5286,33 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			goto rollback;
 		    }
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 	    if (ret == 1) {
-		if ((exec->callback != NULL) && (atom != NULL) &&
-			(data != NULL)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1824]) {
+		  fprintf(stderr, "reached bug index 1824\n");
+		}
+		if ((FIXREVERTER[1824] && (exec -> callback != (void *) 0 && atom != (void *) 0 )) || (!FIXREVERTER[1824] && (exec -> callback != (void *) 0 && atom != (void *) 0 && data != (void *) 0 ))
+		#else
+		if (exec -> callback != (void *) 0 && atom != (void *) 0 
+		#endif
+		) {
+			  
+			#ifdef FRCOV
+			  if (!(data != (void *) 0 ))
+			    fprintf(stderr, "triggered bug index 1824\n");
+			  #endif
+			
 		    exec->callback(exec->data, atom->valuep,
 			           atom->data, data);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		if (exec->state->nbTrans > exec->transno + 1) {
 		    if (exec->inputStackNr <= 0) {
 			xmlFARegExecSaveInputString(exec, value, data);
@@ -4014,14 +5325,31 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 #endif
 		    exec->counts[trans->counter]++;
 		}
-		if ((trans->count >= 0) &&
-		    (trans->count < REGEXP_ALL_COUNTER)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1825]) {
+		  fprintf(stderr, "reached bug index 1825\n");
+		}
+		if ((FIXREVERTER[1825] && (trans -> count >= 0 )) || (!FIXREVERTER[1825] && (trans -> count >= 0 && trans -> count < 1193046 ))
+		#else
+		if (trans -> count >= 0 
+		#endif
+		) {
+		      
+		    #ifdef FRCOV
+		      if (!(trans -> count < 1193046 ))
+		        fprintf(stderr, "triggered bug index 1825\n");
+		      #endif
+		    
 #ifdef DEBUG_REGEXP_EXEC
 		    printf("resetting count %d on transition\n",
 		           trans->count);
 #endif
 		    exec->counts[trans->count] = 0;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 #ifdef DEBUG_PUSH
 		printf("entering state %d\n", trans->to);
 #endif
@@ -4093,22 +5421,55 @@ rollback:
 	     */
 	    exec->determinist = 0;
 	    xmlFARegExecRollBack(exec);
-	    if ((exec->inputStack != NULL ) && (exec->status == 0)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1827]) {
+	      fprintf(stderr, "reached bug index 1827\n");
+	    }
+	    if ((FIXREVERTER[1827] && (exec -> inputStack != (void *) 0 )) || (!FIXREVERTER[1827] && (exec -> inputStack != (void *) 0 && exec -> status == 0 ))
+	    #else
+	    if (exec -> inputStack != (void *) 0 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(exec -> status == 0 ))
+	        fprintf(stderr, "triggered bug index 1827\n");
+	      #endif
+	    
 		value = exec->inputStack[exec->index].value;
 		data = exec->inputStack[exec->index].data;
 #ifdef DEBUG_PUSH
 		printf("value loaded: %s\n", value);
 #endif
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	continue;
 progress:
         progress = 1;
 	continue;
     }
-    if (exec->status == 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1828]) {
+      if ((exec -> status == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1828\n");
+      else
+        fprintf(stderr, "reached bug index 1828\n");
+    }
+    if ((!FIXREVERTER[1828] && (exec -> status == 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(exec->state->type == XML_REGEXP_FINAL_STATE);
     }
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef DEBUG_ERR
     if (exec->status < 0) {
 	testerr(exec);
@@ -4153,25 +5514,100 @@ xmlRegExecPushString2(xmlRegExecCtxtPtr exec, const xmlChar *value,
     int lenn, lenp, ret;
     xmlChar *str;
 
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1829]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1829\n");
+      else
+        fprintf(stderr, "reached bug index 1829\n");
+    }
+    if ((!FIXREVERTER[1829] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->comp == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1830]) {
+      if ((exec -> comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1830\n");
+      else
+        fprintf(stderr, "reached bug index 1830\n");
+    }
+    if ((!FIXREVERTER[1830] && (exec -> comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->status != 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1831]) {
+      if ((exec -> status != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1831\n");
+      else
+        fprintf(stderr, "reached bug index 1831\n");
+    }
+    if ((!FIXREVERTER[1831] && (exec -> status != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(exec->status);
-
-    if (value2 == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1832]) {
+      if ((value2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1832\n");
+      else
+        fprintf(stderr, "reached bug index 1832\n");
+    }
+    if ((!FIXREVERTER[1832] && (value2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlRegExecPushString(exec, value, data));
+        #ifdef FRCOV
+        }
+        #endif
 
     lenn = strlen((char *) value2);
     lenp = strlen((char *) value);
 
     if (150 < lenn + lenp + 2) {
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1833]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1833\n");
+	  else
+	    fprintf(stderr, "reached bug index 1833\n");
+	}
+	if ((!FIXREVERTER[1833] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    exec->status = -1;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
 	str = buf;
     }
@@ -4237,7 +5673,21 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 	    else
 		*terminal = 0;
 	}
-	for (i = 0;(i < comp->nbstrings) && (nb < maxval);i++) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1834])
+	  fprintf(stderr, "reached bug index 1834\n");
+	for (i = 0; (FIXREVERTER[1834] && (i < comp -> nbstrings )) || (!FIXREVERTER[1834] && (i < comp -> nbstrings && nb < maxval ))
+	#else
+	for (i = 0; i < comp -> nbstrings 
+	#endif
+	;i++) {
+	  
+	#ifdef FRCOV
+	  if (!(nb < maxval ))
+	    fprintf(stderr, "triggered bug index 1834\n");
+	  #endif
+	
 	    target = comp->compact[state * (comp->nbstrings + 1) + i + 1];
 	    if ((target > 0) && (target <= comp->nbstates) &&
 	        (comp->compact[(target - 1) * (comp->nbstrings + 1)] !=
@@ -4246,7 +5696,24 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		(*nbval)++;
 	    }
 	}
-	for (i = 0;(i < comp->nbstrings) && (nb < maxval);i++) {
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1835])
+	  fprintf(stderr, "reached bug index 1835\n");
+	for (i = 0; (FIXREVERTER[1835] && (i < comp -> nbstrings )) || (!FIXREVERTER[1835] && (i < comp -> nbstrings && nb < maxval ))
+	#else
+	for (i = 0; i < comp -> nbstrings 
+	#endif
+	;i++) {
+	  
+	#ifdef FRCOV
+	  if (!(nb < maxval ))
+	    fprintf(stderr, "triggered bug index 1835\n");
+	  #endif
+	
 	    target = comp->compact[state * (comp->nbstrings + 1) + i + 1];
 	    if ((target > 0) && (target <= comp->nbstates) &&
 	        (comp->compact[(target - 1) * (comp->nbstrings + 1)] ==
@@ -4255,6 +5722,9 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		(*nbneg)++;
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
         int transno;
 	xmlRegTransPtr trans;
@@ -4269,21 +5739,94 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 	}
 
 	if (err) {
-	    if (exec->errState == NULL) return(-1);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1836]) {
+	      if ((exec -> errState == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1836\n");
+	      else
+	        fprintf(stderr, "reached bug index 1836\n");
+	    }
+	    if ((!FIXREVERTER[1836] && (exec -> errState == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    state = exec->errState;
 	} else {
-	    if (exec->state == NULL) return(-1);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1837]) {
+	      if ((exec -> state == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1837\n");
+	      else
+	        fprintf(stderr, "reached bug index 1837\n");
+	    }
+	    if ((!FIXREVERTER[1837] && (exec -> state == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    state = exec->state;
 	}
-	for (transno = 0;
-	     (transno < state->nbTrans) && (nb < maxval);
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1841])
+	  fprintf(stderr, "reached bug index 1841\n");
+	for (transno = 0; (FIXREVERTER[1841] && (transno < state -> nbTrans )) || (!FIXREVERTER[1841] && (transno < state -> nbTrans && nb < maxval ))
+	#else
+	for (transno = 0; transno < state -> nbTrans 
+	#endif
+	;
 	     transno++) {
+	       
+	     #ifdef FRCOV
+	       if (!(nb < maxval ))
+	         fprintf(stderr, "triggered bug index 1841\n");
+	       #endif
+	     
 	    trans = &state->trans[transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1838]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1838\n");
+	      else
+	        fprintf(stderr, "reached bug index 1838\n");
+	    }
+	    if ((!FIXREVERTER[1838] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
-	    if ((atom == NULL) || (atom->valuep == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1839]) {
+	      if ((atom == (void *) 0 || atom -> valuep == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1839\n");
+	      else
+	        fprintf(stderr, "reached bug index 1839\n");
+	    }
+	    if ((!FIXREVERTER[1839] && (atom == (void *) 0 || atom -> valuep == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    if (trans->count == REGEXP_ALL_LAX_COUNTER) {
 	        /* this should not be reached but ... */
 	        TODO;
@@ -4298,8 +5841,23 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		    count = exec->errCounts[trans->counter];
 		else
 		    count = exec->counts[trans->counter];
-		if (exec->comp != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1840]) {
+		  if ((exec -> comp != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1840\n");
+		  else
+		    fprintf(stderr, "reached bug index 1840\n");
+		}
+		if ((!FIXREVERTER[1840] && (exec -> comp != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    counter = &exec->comp->counters[trans->counter];
+		    #ifdef FRCOV
+		    }
+		    #endif
 		if ((counter == NULL) || (count < counter->max)) {
 		    if (atom->neg)
 			values[nb++] = (xmlChar *) atom->valuep2;
@@ -4319,15 +5877,61 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		}
 	    }
 	}
-	for (transno = 0;
-	     (transno < state->nbTrans) && (nb < maxval);
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1844])
+	  fprintf(stderr, "reached bug index 1844\n");
+	for (transno = 0; (FIXREVERTER[1844] && (transno < state -> nbTrans )) || (!FIXREVERTER[1844] && (transno < state -> nbTrans && nb < maxval ))
+	#else
+	for (transno = 0; transno < state -> nbTrans 
+	#endif
+	;
 	     transno++) {
+	       
+	     #ifdef FRCOV
+	       if (!(nb < maxval ))
+	         fprintf(stderr, "triggered bug index 1844\n");
+	       #endif
+	     
 	    trans = &state->trans[transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1842]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1842\n");
+	      else
+	        fprintf(stderr, "reached bug index 1842\n");
+	    }
+	    if ((!FIXREVERTER[1842] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
-	    if ((atom == NULL) || (atom->valuep == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1843]) {
+	      if ((atom == (void *) 0 || atom -> valuep == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1843\n");
+	      else
+	        fprintf(stderr, "reached bug index 1843\n");
+	    }
+	    if ((!FIXREVERTER[1843] && (atom == (void *) 0 || atom -> valuep == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    if (trans->count == REGEXP_ALL_LAX_COUNTER) {
 	        continue;
 	    } else if (trans->count == REGEXP_ALL_COUNTER) {
@@ -4346,6 +5950,9 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		}
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return(0);
 }
@@ -4395,8 +6002,23 @@ xmlRegExecNextValues(xmlRegExecCtxtPtr exec, int *nbval, int *nbneg,
 int
 xmlRegExecErrInfo(xmlRegExecCtxtPtr exec, const xmlChar **string,
                   int *nbval, int *nbneg, xmlChar **values, int *terminal) {
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1845]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1845\n");
+      else
+        fprintf(stderr, "reached bug index 1845\n");
+    }
+    if ((!FIXREVERTER[1845] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (string != NULL) {
         if (exec->status != 0)
 	    *string = exec->errString;
@@ -5134,8 +6756,23 @@ xmlFAParseCharClass(xmlRegParserCtxtPtr ctxt) {
     if (CUR == '[') {
 	NEXT;
 	ctxt->atom = xmlRegNewAtom(ctxt, XML_REGEXP_RANGES);
-	if (ctxt->atom == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1846]) {
+	  if ((ctxt -> atom == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1846\n");
+	  else
+	    fprintf(stderr, "reached bug index 1846\n");
+	}
+	if ((!FIXREVERTER[1846] && (ctxt -> atom == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlFAParseCharGroup(ctxt);
 	if (CUR == ']') {
 	    NEXT;
@@ -5203,8 +6840,23 @@ xmlFAParseQuantifier(xmlRegParserCtxtPtr ctxt) {
 
 	NEXT;
 	cur = xmlFAParseQuantExact(ctxt);
-	if (cur >= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1848]) {
+	  if ((cur >= 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1848\n");
+	  else
+	    fprintf(stderr, "reached bug index 1848\n");
+	}
+	if ((!FIXREVERTER[1848] && (cur >= 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    min = cur;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (CUR == ',') {
 	    NEXT;
 	    if (CUR == '}')
@@ -5223,8 +6875,23 @@ xmlFAParseQuantifier(xmlRegParserCtxtPtr ctxt) {
 	} else {
 	    ERROR("Unterminated quantifier");
 	}
-	if (max == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1849]) {
+	  if ((max == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1849\n");
+	  else
+	    fprintf(stderr, "reached bug index 1849\n");
+	}
+	if ((!FIXREVERTER[1849] && (max == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    max = min;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (ctxt->atom != NULL) {
 	    ctxt->atom->quant = XML_REGEXP_QUANT_RANGE;
 	    ctxt->atom->min = min;
@@ -5248,8 +6915,23 @@ xmlFAParseAtom(xmlRegParserCtxtPtr ctxt) {
     codepoint = xmlFAIsChar(ctxt);
     if (codepoint > 0) {
 	ctxt->atom = xmlRegNewAtom(ctxt, XML_REGEXP_CHARVAL);
-	if (ctxt->atom == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1850]) {
+	  if ((ctxt -> atom == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1850\n");
+	  else
+	    fprintf(stderr, "reached bug index 1850\n");
+	}
+	if ((!FIXREVERTER[1850] && (ctxt -> atom == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	codepoint = CUR_SCHAR(ctxt->cur, len);
 	ctxt->atom->codepoint = codepoint;
 	NEXTL(len);
@@ -5282,8 +6964,23 @@ xmlFAParseAtom(xmlRegParserCtxtPtr ctxt) {
 	    ERROR("xmlFAParseAtom: expecting ')'");
 	}
 	ctxt->atom = xmlRegNewAtom(ctxt, XML_REGEXP_SUBREG);
-	if (ctxt->atom == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1851]) {
+	  if ((ctxt -> atom == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1851\n");
+	  else
+	    fprintf(stderr, "reached bug index 1851\n");
+	}
+	if ((!FIXREVERTER[1851] && (ctxt -> atom == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->atom->start = start;
 	ctxt->atom->start0 = start0;
 	ctxt->atom->stop = ctxt->state;
@@ -5341,7 +7038,21 @@ xmlFAParseBranch(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr to) {
 	previous = ctxt->state;
 	ctxt->atom = NULL;
     }
-    while ((ret != 0) && (ctxt->error == 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1853])
+      fprintf(stderr, "reached bug index 1853\n");
+    while ((FIXREVERTER[1853] && (ret != 0 )) || (!FIXREVERTER[1853] && (ret != 0 && ctxt -> error == 0 ))
+    #else
+    while (ret != 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> error == 0 ))
+        fprintf(stderr, "triggered bug index 1853\n");
+      #endif
+    
 	ret = xmlFAParsePiece(ctxt);
 	if (ret != 0) {
 	    if (xmlFAGenerateTransitions(ctxt, previous,
@@ -5351,6 +7062,9 @@ xmlFAParseBranch(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr to) {
 	    ctxt->atom = NULL;
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(0);
 }
 
@@ -5455,8 +7169,23 @@ xmlRegexpCompile(const xmlChar *regexp) {
     xmlRegParserCtxtPtr ctxt;
 
     ctxt = xmlRegNewParserCtxt(regexp);
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1856]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1856\n");
+      else
+        fprintf(stderr, "reached bug index 1856\n");
+    }
+    if ((!FIXREVERTER[1856] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     /* initialize the parser */
     ctxt->end = NULL;
@@ -5468,10 +7197,25 @@ xmlRegexpCompile(const xmlChar *regexp) {
     if (CUR != 0) {
 	ERROR("xmlFAParseRegExp: extra characters");
     }
-    if (ctxt->error != 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1857]) {
+      if ((ctxt -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1857\n");
+      else
+        fprintf(stderr, "reached bug index 1857\n");
+    }
+    if ((!FIXREVERTER[1857] && (ctxt -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegFreeParserCtxt(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->end = ctxt->state;
     ctxt->start->type = XML_REGEXP_START_STATE;
     ctxt->end->type = XML_REGEXP_FINAL_STATE;
@@ -5480,10 +7224,25 @@ xmlRegexpCompile(const xmlChar *regexp) {
     xmlFAEliminateEpsilonTransitions(ctxt);
 
 
-    if (ctxt->error != 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1858]) {
+      if ((ctxt -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1858\n");
+      else
+        fprintf(stderr, "reached bug index 1858\n");
+    }
+    if ((!FIXREVERTER[1858] && (ctxt -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegFreeParserCtxt(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlRegEpxFromParse(ctxt);
     xmlRegFreeParserCtxt(ctxt);
     return(ret);
@@ -5500,8 +7259,23 @@ xmlRegexpCompile(const xmlChar *regexp) {
  */
 int
 xmlRegexpExec(xmlRegexpPtr comp, const xmlChar *content) {
-    if ((comp == NULL) || (content == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1859]) {
+      if ((comp == (void *) 0 || content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1859\n");
+      else
+        fprintf(stderr, "reached bug index 1859\n");
+    }
+    if ((!FIXREVERTER[1859] && (comp == (void *) 0 || content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlFARegExec(comp, content));
 }
 
@@ -5518,8 +7292,23 @@ xmlRegexpIsDeterminist(xmlRegexpPtr comp) {
     xmlAutomataPtr am;
     int ret;
 
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1860]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1860\n");
+      else
+        fprintf(stderr, "reached bug index 1860\n");
+    }
+    if ((!FIXREVERTER[1860] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (comp->determinist != -1)
 	return(comp->determinist);
 
@@ -5554,8 +7343,23 @@ xmlRegexpIsDeterminist(xmlRegexpPtr comp) {
 void
 xmlRegFreeRegexp(xmlRegexpPtr regexp) {
     int i;
-    if (regexp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1861]) {
+      if ((regexp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1861\n");
+      else
+        fprintf(stderr, "reached bug index 1861\n");
+    }
+    if ((!FIXREVERTER[1861] && (regexp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (regexp->string != NULL)
 	xmlFree(regexp->string);
@@ -5603,16 +7407,46 @@ xmlNewAutomata(void) {
     xmlAutomataPtr ctxt;
 
     ctxt = xmlRegNewParserCtxt(NULL);
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1862]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1862\n");
+      else
+        fprintf(stderr, "reached bug index 1862\n");
+    }
+    if ((!FIXREVERTER[1862] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     /* initialize the parser */
     ctxt->end = NULL;
     ctxt->start = ctxt->state = xmlRegNewState(ctxt);
-    if (ctxt->start == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1863]) {
+      if ((ctxt -> start == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1863\n");
+      else
+        fprintf(stderr, "reached bug index 1863\n");
+    }
+    if ((!FIXREVERTER[1863] && (ctxt -> start == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeAutomata(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->start->type = XML_REGEXP_START_STATE;
     if (xmlRegStatePush(ctxt, ctxt->start) < 0) {
         xmlRegFreeState(ctxt->start);
@@ -5632,8 +7466,23 @@ xmlNewAutomata(void) {
  */
 void
 xmlFreeAutomata(xmlAutomataPtr am) {
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1864]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1864\n");
+      else
+        fprintf(stderr, "reached bug index 1864\n");
+    }
+    if ((!FIXREVERTER[1864] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     xmlRegFreeParserCtxt(am);
 }
 
@@ -5661,8 +7510,23 @@ xmlAutomataSetFlags(xmlAutomataPtr am, int flags) {
  */
 xmlAutomataStatePtr
 xmlAutomataGetInitState(xmlAutomataPtr am) {
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1866]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1866\n");
+      else
+        fprintf(stderr, "reached bug index 1866\n");
+    }
+    if ((!FIXREVERTER[1866] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(am->start);
 }
 
@@ -5677,8 +7541,23 @@ xmlAutomataGetInitState(xmlAutomataPtr am) {
  */
 int
 xmlAutomataSetFinalState(xmlAutomataPtr am, xmlAutomataStatePtr state) {
-    if ((am == NULL) || (state == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1867]) {
+      if ((am == (void *) 0 || state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1867\n");
+      else
+        fprintf(stderr, "reached bug index 1867\n");
+    }
+    if ((!FIXREVERTER[1867] && (am == (void *) 0 || state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     state->type = XML_REGEXP_FINAL_STATE;
     return(0);
 }
@@ -5703,11 +7582,41 @@ xmlAutomataNewTransition(xmlAutomataPtr am, xmlAutomataStatePtr from,
 			 void *data) {
     xmlRegAtomPtr atom;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1868]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1868\n");
+      else
+        fprintf(stderr, "reached bug index 1868\n");
+    }
+    if ((!FIXREVERTER[1868] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1869]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1869\n");
+      else
+        fprintf(stderr, "reached bug index 1869\n");
+    }
+    if ((!FIXREVERTER[1869] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     atom->data = data;
     atom->valuep = xmlStrdup(token);
 
@@ -5715,8 +7624,23 @@ xmlAutomataNewTransition(xmlAutomataPtr am, xmlAutomataStatePtr from,
         xmlRegFreeAtom(atom);
 	return(NULL);
     }
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1870]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1870\n");
+      else
+        fprintf(stderr, "reached bug index 1870\n");
+    }
+    if ((!FIXREVERTER[1870] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -5741,11 +7665,41 @@ xmlAutomataNewTransition2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 			  const xmlChar *token2, void *data) {
     xmlRegAtomPtr atom;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1871]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1871\n");
+      else
+        fprintf(stderr, "reached bug index 1871\n");
+    }
+    if ((!FIXREVERTER[1871] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1872]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1872\n");
+      else
+        fprintf(stderr, "reached bug index 1872\n");
+    }
+    if ((!FIXREVERTER[1872] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom->data = data;
     if ((token2 == NULL) || (*token2 == 0)) {
 	atom->valuep = xmlStrdup(token);
@@ -5757,10 +7711,25 @@ xmlAutomataNewTransition2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1873]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1873\n");
+	  else
+	    fprintf(stderr, "reached bug index 1873\n");
+	}
+	if ((!FIXREVERTER[1873] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegFreeAtom(atom);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -5773,8 +7742,23 @@ xmlAutomataNewTransition2(xmlAutomataPtr am, xmlAutomataStatePtr from,
         xmlRegFreeAtom(atom);
 	return(NULL);
     }
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1874]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1874\n");
+      else
+        fprintf(stderr, "reached bug index 1874\n");
+    }
+    if ((!FIXREVERTER[1874] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -5802,11 +7786,41 @@ xmlAutomataNewNegTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
     xmlRegAtomPtr atom;
     xmlChar err_msg[200];
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1875]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1875\n");
+      else
+        fprintf(stderr, "reached bug index 1875\n");
+    }
+    if ((!FIXREVERTER[1875] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1876]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1876\n");
+      else
+        fprintf(stderr, "reached bug index 1876\n");
+    }
+    if ((!FIXREVERTER[1876] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom->data = data;
     atom->neg = 1;
     if ((token2 == NULL) || (*token2 == 0)) {
@@ -5819,10 +7833,25 @@ xmlAutomataNewNegTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1877]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1877\n");
+	  else
+	    fprintf(stderr, "reached bug index 1877\n");
+	}
+	if ((!FIXREVERTER[1877] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegFreeAtom(atom);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -5839,8 +7868,23 @@ xmlAutomataNewNegTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	return(NULL);
     }
     am->negs++;
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1878]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1878\n");
+      else
+        fprintf(stderr, "reached bug index 1878\n");
+    }
+    if ((!FIXREVERTER[1878] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -5870,15 +7914,75 @@ xmlAutomataNewCountTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
     xmlRegAtomPtr atom;
     int counter;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1879]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1879\n");
+      else
+        fprintf(stderr, "reached bug index 1879\n");
+    }
+    if ((!FIXREVERTER[1879] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (min < 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1880]) {
+      if ((min < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1880\n");
+      else
+        fprintf(stderr, "reached bug index 1880\n");
+    }
+    if ((!FIXREVERTER[1880] && (min < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if ((max < min) || (max < 1))
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1881]) {
+      if ((max < min || max < 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 1881\n");
+      else
+        fprintf(stderr, "reached bug index 1881\n");
+    }
+    if ((!FIXREVERTER[1881] && (max < min || max < 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1882]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1882\n");
+      else
+        fprintf(stderr, "reached bug index 1882\n");
+    }
+    if ((!FIXREVERTER[1882] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((token2 == NULL) || (*token2 == 0)) {
 	atom->valuep = xmlStrdup(token);
     } else {
@@ -5889,10 +7993,25 @@ xmlAutomataNewCountTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1883]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1883\n");
+	  else
+	    fprintf(stderr, "reached bug index 1883\n");
+	}
+	if ((!FIXREVERTER[1883] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegFreeAtom(atom);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -5923,10 +8042,40 @@ xmlAutomataNewCountTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
     xmlRegAtomPush(am, atom);
     am->state = to;
 
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1884]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1884\n");
+      else
+        fprintf(stderr, "reached bug index 1884\n");
+    }
+    if ((!FIXREVERTER[1884] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	to = am->state;
-    if (to == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1885]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1885\n");
+      else
+        fprintf(stderr, "reached bug index 1885\n");
+    }
+    if ((!FIXREVERTER[1885] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (min == 0)
 	xmlFAGenerateEpsilonTransition(am, from, to);
     return(to);
@@ -6025,15 +8174,75 @@ xmlAutomataNewOnceTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
     xmlRegAtomPtr atom;
     int counter;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1892]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1892\n");
+      else
+        fprintf(stderr, "reached bug index 1892\n");
+    }
+    if ((!FIXREVERTER[1892] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (min < 1)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1893]) {
+      if ((min < 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 1893\n");
+      else
+        fprintf(stderr, "reached bug index 1893\n");
+    }
+    if ((!FIXREVERTER[1893] && (min < 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if ((max < min) || (max < 1))
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1894]) {
+      if ((max < min || max < 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 1894\n");
+      else
+        fprintf(stderr, "reached bug index 1894\n");
+    }
+    if ((!FIXREVERTER[1894] && (max < min || max < 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1895]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1895\n");
+      else
+        fprintf(stderr, "reached bug index 1895\n");
+    }
+    if ((!FIXREVERTER[1895] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((token2 == NULL) || (*token2 == 0)) {
 	atom->valuep = xmlStrdup(token);
     } else {
@@ -6044,10 +8253,25 @@ xmlAutomataNewOnceTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1896]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1896\n");
+	  else
+	    fprintf(stderr, "reached bug index 1896\n");
+	}
+	if ((!FIXREVERTER[1896] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegFreeAtom(atom);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -6148,8 +8372,23 @@ xmlAutomataStatePtr
 xmlAutomataNewState(xmlAutomataPtr am) {
     xmlAutomataStatePtr to;
 
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1901]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1901\n");
+      else
+        fprintf(stderr, "reached bug index 1901\n");
+    }
+    if ((!FIXREVERTER[1901] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     to = xmlRegNewState(am);
     xmlRegStatePush(am, to);
     return(to);
@@ -6170,11 +8409,41 @@ xmlAutomataNewState(xmlAutomataPtr am) {
 xmlAutomataStatePtr
 xmlAutomataNewEpsilon(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		      xmlAutomataStatePtr to) {
-    if ((am == NULL) || (from == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1902]) {
+      if ((am == (void *) 0 || from == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1902\n");
+      else
+        fprintf(stderr, "reached bug index 1902\n");
+    }
+    if ((!FIXREVERTER[1902] && (am == (void *) 0 || from == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateEpsilonTransition(am, from, to);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1903]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1903\n");
+      else
+        fprintf(stderr, "reached bug index 1903\n");
+    }
+    if ((!FIXREVERTER[1903] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6195,11 +8464,41 @@ xmlAutomataNewEpsilon(xmlAutomataPtr am, xmlAutomataStatePtr from,
 xmlAutomataStatePtr
 xmlAutomataNewAllTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		       xmlAutomataStatePtr to, int lax) {
-    if ((am == NULL) || (from == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1904]) {
+      if ((am == (void *) 0 || from == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1904\n");
+      else
+        fprintf(stderr, "reached bug index 1904\n");
+    }
+    if ((!FIXREVERTER[1904] && (am == (void *) 0 || from == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateAllTransition(am, from, to, lax);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1905]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1905\n");
+      else
+        fprintf(stderr, "reached bug index 1905\n");
+    }
+    if ((!FIXREVERTER[1905] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6217,12 +8516,42 @@ int
 xmlAutomataNewCounter(xmlAutomataPtr am, int min, int max) {
     int ret;
 
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1906]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1906\n");
+      else
+        fprintf(stderr, "reached bug index 1906\n");
+    }
+    if ((!FIXREVERTER[1906] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlRegGetCounter(am);
-    if (ret < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1907]) {
+      if ((ret < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1907\n");
+      else
+        fprintf(stderr, "reached bug index 1907\n");
+    }
+    if ((!FIXREVERTER[1907] && (ret < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     am->counters[ret].min = min;
     am->counters[ret].max = max;
     return(ret);
@@ -6244,11 +8573,41 @@ xmlAutomataNewCounter(xmlAutomataPtr am, int min, int max) {
 xmlAutomataStatePtr
 xmlAutomataNewCountedTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		xmlAutomataStatePtr to, int counter) {
-    if ((am == NULL) || (from == NULL) || (counter < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1908]) {
+      if ((am == (void *) 0 || from == (void *) 0 || counter < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1908\n");
+      else
+        fprintf(stderr, "reached bug index 1908\n");
+    }
+    if ((!FIXREVERTER[1908] && (am == (void *) 0 || from == (void *) 0 || counter < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateCountedEpsilonTransition(am, from, to, counter);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1909]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1909\n");
+      else
+        fprintf(stderr, "reached bug index 1909\n");
+    }
+    if ((!FIXREVERTER[1909] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6268,11 +8627,41 @@ xmlAutomataNewCountedTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 xmlAutomataStatePtr
 xmlAutomataNewCounterTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		xmlAutomataStatePtr to, int counter) {
-    if ((am == NULL) || (from == NULL) || (counter < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1910]) {
+      if ((am == (void *) 0 || from == (void *) 0 || counter < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1910\n");
+      else
+        fprintf(stderr, "reached bug index 1910\n");
+    }
+    if ((!FIXREVERTER[1910] && (am == (void *) 0 || from == (void *) 0 || counter < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateCountedTransition(am, from, to, counter);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1911]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1911\n");
+      else
+        fprintf(stderr, "reached bug index 1911\n");
+    }
+    if ((!FIXREVERTER[1911] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6289,7 +8678,22 @@ xmlRegexpPtr
 xmlAutomataCompile(xmlAutomataPtr am) {
     xmlRegexpPtr ret;
 
-    if ((am == NULL) || (am->error != 0)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1912]) {
+      if ((am == (void *) 0 || am -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1912\n");
+      else
+        fprintf(stderr, "reached bug index 1912\n");
+    }
+    if ((!FIXREVERTER[1912] && (am == (void *) 0 || am -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     xmlFAEliminateEpsilonTransitions(am);
     /* xmlFAComputesDeterminism(am); */
     ret = xmlRegEpxFromParse(am);
diff --git a/xmlschemas.c b/xmlschemas.c
index 0657b66a..aa393db0 100644
--- a/xmlschemas.c
+++ b/xmlschemas.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * schemas.c : implementation of the XML Schema handling and
  *             schema validity checking
@@ -1300,8 +1304,23 @@ xmlSchemaFormatQName(xmlChar **buf,
 	*buf = xmlStrcat(*buf, BAD_CAST "}");
     }
     if (localName != NULL) {
-	if (namespaceName == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1991]) {
+	  if ((namespaceName == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1991\n");
+	  else
+	    fprintf(stderr, "reached bug index 1991\n");
+	}
+	if ((!FIXREVERTER[1991] && (namespaceName == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(localName);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	*buf = xmlStrcat(*buf, localName);
     } else {
 	*buf = xmlStrcat(*buf, BAD_CAST "(NULL)");
@@ -1487,8 +1506,23 @@ xmlSchemaGetCanonValueWhtspExt(xmlSchemaValPtr val,
     const xmlChar *value, *value2 = NULL;
 
 
-    if ((retValue == NULL) || (val == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1992]) {
+      if ((retValue == (void *) 0 || val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1992\n");
+      else
+        fprintf(stderr, "reached bug index 1992\n");
+    }
+    if ((!FIXREVERTER[1992] && (retValue == (void *) 0 || val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     list = xmlSchemaValueGetNext(val) ? 1 : 0;
     *retValue = NULL;
     do {
@@ -1504,8 +1538,23 @@ xmlSchemaGetCanonValueWhtspExt(xmlSchemaValPtr val,
 			value2 = xmlSchemaCollapseString(value);
 		    else if (ws == XML_SCHEMA_WHITESPACE_REPLACE)
 			value2 = xmlSchemaWhiteSpaceReplace(value);
-		    if (value2 != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1993]) {
+		      if ((value2 != (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1993\n");
+		      else
+		        fprintf(stderr, "reached bug index 1993\n");
+		    }
+		    if ((!FIXREVERTER[1993] && (value2 != (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			value = value2;
+			#ifdef FRCOV
+			}
+			#endif
 		}
 		break;
 	    default:
@@ -1740,7 +1789,22 @@ xmlSchemaFormatItemForReport(xmlChar **buf,
     } else
 	named = 0;
 
-    if ((named == 0) && (itemNode != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1994]) {
+      fprintf(stderr, "reached bug index 1994\n");
+    }
+    if ((FIXREVERTER[1994] && (named == 0 )) || (!FIXREVERTER[1994] && (named == 0 && itemNode != (void *) 0 ))
+    #else
+    if (named == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(itemNode != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1994\n");
+      #endif
+    
 	xmlNodePtr elem;
 
 	if (itemNode->type == XML_ATTRIBUTE_NODE)
@@ -1757,6 +1821,9 @@ xmlSchemaFormatItemForReport(xmlChar **buf,
 	*buf = xmlStrcat(*buf, BAD_CAST "'");
 
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((itemNode != NULL) && (itemNode->type == XML_ATTRIBUTE_NODE)) {
 	*buf = xmlStrcat(*buf, BAD_CAST ", attribute '");
 	if (itemNode->ns != NULL) {
@@ -2090,10 +2157,40 @@ xmlSchemaErr4Line(xmlSchemaAbstractCtxtPtr ctxt,
 		    unsigned long l;
 		    const char *f;
 		    vctxt->locFunc(vctxt->locCtxt, &f, &l);
-		    if (file == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1995]) {
+		      if ((file == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1995\n");
+		      else
+		        fprintf(stderr, "reached bug index 1995\n");
+		    }
+		    if ((!FIXREVERTER[1995] && (file == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        file = f;
-		    if (line == 0)
+		        #ifdef FRCOV
+		        }
+		        #endif
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1996]) {
+		      if ((line == 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1996\n");
+		      else
+		        fprintf(stderr, "reached bug index 1996\n");
+		    }
+		    if ((!FIXREVERTER[1996] && (line == 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        line = (int) l;
+		        #ifdef FRCOV
+		        }
+		        #endif
 		}
 	    }
 	    if ((file == NULL) && (vctxt->filename != NULL))
@@ -2271,8 +2368,23 @@ xmlSchemaInternalErr2(xmlSchemaAbstractCtxtPtr actxt,
 {
     xmlChar *msg = NULL;
 
-    if (actxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1997]) {
+      if ((actxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1997\n");
+      else
+        fprintf(stderr, "reached bug index 1997\n");
+    }
+    if ((!FIXREVERTER[1997] && (actxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     msg = xmlStrdup(BAD_CAST "Internal error: ");
     msg = xmlStrcat(msg, BAD_CAST funcName);
     msg = xmlStrcat(msg, BAD_CAST ", ");
@@ -2557,8 +2669,23 @@ xmlSchemaComplexTypeErr(xmlSchemaAbstractCtxtPtr actxt,
 
 	for (i = 0; i < nbval + nbneg; i++) {
 	    cur = values[i];
-	    if (cur == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1998]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1998\n");
+	      else
+	        fprintf(stderr, "reached bug index 1998\n");
+	    }
+	    if ((!FIXREVERTER[1998] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        continue;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    if ((cur[0] == 'n') && (cur[1] == 'o') && (cur[2] == 't') &&
 	        (cur[3] == ' ')) {
 		cur += 4;
@@ -2822,8 +2949,23 @@ xmlSchemaPResCompAttrErr(xmlSchemaParserCtxtPtr ctxt,
     xmlChar *des = NULL, *strA = NULL;
 
     xmlSchemaFormatItemForReport(&des, NULL, ownerItem, ownerElem);
-    if (refTypeStr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1999]) {
+      if ((refTypeStr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1999\n");
+      else
+        fprintf(stderr, "reached bug index 1999\n");
+    }
+    if ((!FIXREVERTER[1999] && (refTypeStr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	refTypeStr = (const char *) xmlSchemaItemTypeToStr(refType);
+	#ifdef FRCOV
+	}
+	#endif
 	xmlSchemaPErrExt(ctxt, ownerElem, error,
 	    NULL, NULL, NULL,
 	    "%s, attribute '%s': The QName value '%s' does not resolve to a(n) "
@@ -3255,10 +3397,25 @@ xmlSchemaNewSchema(xmlSchemaParserCtxtPtr ctxt)
     xmlSchemaPtr ret;
 
     ret = (xmlSchemaPtr) xmlMalloc(sizeof(xmlSchema));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2000]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2000\n");
+      else
+        fprintf(stderr, "reached bug index 2000\n");
+    }
+    if ((!FIXREVERTER[2000] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating schema", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchema));
     ret->dict = ctxt->dict;
     xmlDictReference(ret->dict);
@@ -3279,9 +3436,24 @@ xmlSchemaNewFacet(void)
     xmlSchemaFacetPtr ret;
 
     ret = (xmlSchemaFacetPtr) xmlMalloc(sizeof(xmlSchemaFacet));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2001]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2001\n");
+      else
+        fprintf(stderr, "reached bug index 2001\n");
+    }
+    if ((!FIXREVERTER[2001] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaFacet));
 
     return (ret);
@@ -3302,10 +3474,25 @@ xmlSchemaNewAnnot(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node)
     xmlSchemaAnnotPtr ret;
 
     ret = (xmlSchemaAnnotPtr) xmlMalloc(sizeof(xmlSchemaAnnot));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2002]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2002\n");
+      else
+        fprintf(stderr, "reached bug index 2002\n");
+    }
+    if ((!FIXREVERTER[2002] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating annotation", node);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAnnot));
     ret->content = node;
     return (ret);
@@ -3317,11 +3504,26 @@ xmlSchemaItemListCreate(void)
     xmlSchemaItemListPtr ret;
 
     ret = xmlMalloc(sizeof(xmlSchemaItemList));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2003]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2003\n");
+      else
+        fprintf(stderr, "reached bug index 2003\n");
+    }
+    if ((!FIXREVERTER[2003] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL,
 	    "allocating an item list structure", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaItemList));
     return (ret);
 }
@@ -3343,20 +3545,50 @@ xmlSchemaItemListAdd(xmlSchemaItemListPtr list, void *item)
     if (list->items == NULL) {
 	list->items = (void **) xmlMalloc(
 	    20 * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2004]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2004\n");
+	  else
+	    fprintf(stderr, "reached bug index 2004\n");
+	}
+	if ((!FIXREVERTER[2004] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "allocating new item list", NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	list->sizeItems = 20;
     } else if (list->sizeItems <= list->nbItems) {
 	list->sizeItems *= 2;
 	list->items = (void **) xmlRealloc(list->items,
 	    list->sizeItems * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2005]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2005\n");
+	  else
+	    fprintf(stderr, "reached bug index 2005\n");
+	}
+	if ((!FIXREVERTER[2005] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "growing item list", NULL);
 	    list->sizeItems = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     list->items[list->nbItems++] = item;
     return(0);
@@ -3368,24 +3600,69 @@ xmlSchemaItemListAddSize(xmlSchemaItemListPtr list,
 			 void *item)
 {
     if (list->items == NULL) {
-	if (initialSize <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2006]) {
+	  if ((initialSize <= 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2006\n");
+	  else
+	    fprintf(stderr, "reached bug index 2006\n");
+	}
+	if ((!FIXREVERTER[2006] && (initialSize <= 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    initialSize = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	list->items = (void **) xmlMalloc(
 	    initialSize * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2007]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2007\n");
+	  else
+	    fprintf(stderr, "reached bug index 2007\n");
+	}
+	if ((!FIXREVERTER[2007] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "allocating new item list", NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	list->sizeItems = initialSize;
     } else if (list->sizeItems <= list->nbItems) {
 	list->sizeItems *= 2;
 	list->items = (void **) xmlRealloc(list->items,
 	    list->sizeItems * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2008]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2008\n");
+	  else
+	    fprintf(stderr, "reached bug index 2008\n");
+	}
+	if ((!FIXREVERTER[2008] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "growing item list", NULL);
 	    list->sizeItems = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     list->items[list->nbItems++] = item;
     return(0);
@@ -3397,20 +3674,50 @@ xmlSchemaItemListInsert(xmlSchemaItemListPtr list, void *item, int idx)
     if (list->items == NULL) {
 	list->items = (void **) xmlMalloc(
 	    20 * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2009]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2009\n");
+	  else
+	    fprintf(stderr, "reached bug index 2009\n");
+	}
+	if ((!FIXREVERTER[2009] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "allocating new item list", NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	list->sizeItems = 20;
     } else if (list->sizeItems <= list->nbItems) {
 	list->sizeItems *= 2;
 	list->items = (void **) xmlRealloc(list->items,
 	    list->sizeItems * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2010]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2010\n");
+	  else
+	    fprintf(stderr, "reached bug index 2010\n");
+	}
+	if ((!FIXREVERTER[2010] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "growing item list", NULL);
 	    list->sizeItems = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     /*
     * Just append if the index is greater/equal than the item count.
@@ -3474,11 +3781,26 @@ static int
 xmlSchemaItemListRemove(xmlSchemaItemListPtr list, int idx)
 {
     int i;
-    if ((list->items == NULL) || (idx >= list->nbItems)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2011]) {
+      if ((list -> items == (void *) 0 || idx >= list -> nbItems ) && !(0))
+        fprintf(stderr, "triggered bug index 2011\n");
+      else
+        fprintf(stderr, "reached bug index 2011\n");
+    }
+    if ((!FIXREVERTER[2011] && (list -> items == (void *) 0 || idx >= list -> nbItems ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPSimpleErr("Internal error: xmlSchemaItemListRemove, "
 	    "index error.\n");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (list->nbItems == 1) {
 	/* TODO: Really free the list? */
@@ -3505,8 +3827,23 @@ xmlSchemaItemListRemove(xmlSchemaItemListPtr list, int idx)
 static void
 xmlSchemaItemListFree(xmlSchemaItemListPtr list)
 {
-    if (list == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2012]) {
+      if ((list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2012\n");
+      else
+        fprintf(stderr, "reached bug index 2012\n");
+    }
+    if ((!FIXREVERTER[2012] && (list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (list->items != NULL)
 	xmlFree(list->items);
     xmlFree(list);
@@ -3515,8 +3852,23 @@ xmlSchemaItemListFree(xmlSchemaItemListPtr list)
 static void
 xmlSchemaBucketFree(xmlSchemaBucketPtr bucket)
 {
-    if (bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2013]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2013\n");
+      else
+        fprintf(stderr, "reached bug index 2013\n");
+    }
+    if ((!FIXREVERTER[2013] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (bucket->globals != NULL) {
 	xmlSchemaComponentListFree(bucket->globals);
 	xmlSchemaItemListFree(bucket->globals);
@@ -3563,23 +3915,68 @@ xmlSchemaBucketCreate(xmlSchemaParserCtxtPtr pctxt,
     else
 	size = sizeof(xmlSchemaImport);
     ret = (xmlSchemaBucketPtr) xmlMalloc(size);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2014]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2014\n");
+      else
+        fprintf(stderr, "reached bug index 2014\n");
+    }
+    if ((!FIXREVERTER[2014] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL, "allocating schema bucket", NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, size);
     ret->targetNamespace = targetNamespace;
     ret->type = type;
     ret->globals = xmlSchemaItemListCreate();
-    if (ret->globals == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2015]) {
+      if ((ret -> globals == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2015\n");
+      else
+        fprintf(stderr, "reached bug index 2015\n");
+    }
+    if ((!FIXREVERTER[2015] && (ret -> globals == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->locals = xmlSchemaItemListCreate();
-    if (ret->locals == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2016]) {
+      if ((ret -> locals == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2016\n");
+      else
+        fprintf(stderr, "reached bug index 2016\n");
+    }
+    if ((!FIXREVERTER[2016] && (ret -> locals == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * The following will assure that only the first bucket is marked as
     * XML_SCHEMA_SCHEMA_MAIN and it points to the *main* schema.
@@ -3632,10 +4029,25 @@ xmlSchemaBucketCreate(xmlSchemaParserCtxtPtr pctxt,
 	if (mainSchema->schemasImports == NULL) {
 	    mainSchema->schemasImports = xmlHashCreateDict(5,
 		WXS_CONSTRUCTOR(pctxt)->dict);
-	    if (mainSchema->schemasImports == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2017]) {
+	      if ((mainSchema -> schemasImports == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2017\n");
+	      else
+	        fprintf(stderr, "reached bug index 2017\n");
+	    }
+	    if ((!FIXREVERTER[2017] && (mainSchema -> schemasImports == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaBucketFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	if (targetNamespace == NULL)
 	    res = xmlHashAddEntry(mainSchema->schemasImports,
@@ -3661,10 +4073,25 @@ xmlSchemaBucketCreate(xmlSchemaParserCtxtPtr pctxt,
 	/* Includes got into the "includes" slot of the *main* schema. */
 	if (mainSchema->includes == NULL) {
 	    mainSchema->includes = xmlSchemaItemListCreate();
-	    if (mainSchema->includes == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2018]) {
+	      if ((mainSchema -> includes == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2018\n");
+	      else
+	        fprintf(stderr, "reached bug index 2018\n");
+	    }
+	    if ((!FIXREVERTER[2018] && (mainSchema -> includes == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaBucketFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	xmlSchemaItemListAdd(mainSchema->includes, ret);
     }
@@ -3698,8 +4125,23 @@ xmlSchemaAddItemSize(xmlSchemaItemListPtr *list, int initialSize, void *item)
 static void
 xmlSchemaFreeAnnot(xmlSchemaAnnotPtr annot)
 {
-    if (annot == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2019]) {
+      if ((annot == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2019\n");
+      else
+        fprintf(stderr, "reached bug index 2019\n");
+    }
+    if ((!FIXREVERTER[2019] && (annot == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (annot->next == NULL) {
 	xmlFree(annot);
     } else {
@@ -3722,8 +4164,23 @@ xmlSchemaFreeAnnot(xmlSchemaAnnotPtr annot)
 static void
 xmlSchemaFreeNotation(xmlSchemaNotationPtr nota)
 {
-    if (nota == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2020]) {
+      if ((nota == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2020\n");
+      else
+        fprintf(stderr, "reached bug index 2020\n");
+    }
+    if ((!FIXREVERTER[2020] && (nota == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     xmlFree(nota);
 }
 
@@ -3736,8 +4193,23 @@ xmlSchemaFreeNotation(xmlSchemaNotationPtr nota)
 static void
 xmlSchemaFreeAttribute(xmlSchemaAttributePtr attr)
 {
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2021]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2021\n");
+      else
+        fprintf(stderr, "reached bug index 2021\n");
+    }
+    if ((!FIXREVERTER[2021] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (attr->annot != NULL)
 	xmlSchemaFreeAnnot(attr->annot);
     if (attr->defVal != NULL)
@@ -3754,8 +4226,23 @@ xmlSchemaFreeAttribute(xmlSchemaAttributePtr attr)
 static void
 xmlSchemaFreeAttributeUse(xmlSchemaAttributeUsePtr use)
 {
-    if (use == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2022]) {
+      if ((use == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2022\n");
+      else
+        fprintf(stderr, "reached bug index 2022\n");
+    }
+    if ((!FIXREVERTER[2022] && (use == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (use->annot != NULL)
 	xmlSchemaFreeAnnot(use->annot);
     if (use->defVal != NULL)
@@ -3772,8 +4259,23 @@ xmlSchemaFreeAttributeUse(xmlSchemaAttributeUsePtr use)
 static void
 xmlSchemaFreeAttributeUseProhib(xmlSchemaAttributeUseProhibPtr prohib)
 {
-    if (prohib == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2023]) {
+      if ((prohib == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2023\n");
+      else
+        fprintf(stderr, "reached bug index 2023\n");
+    }
+    if ((!FIXREVERTER[2023] && (prohib == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     xmlFree(prohib);
 }
 
@@ -3804,8 +4306,23 @@ xmlSchemaFreeWildcardNsSet(xmlSchemaWildcardNsPtr set)
 void
 xmlSchemaFreeWildcard(xmlSchemaWildcardPtr wildcard)
 {
-    if (wildcard == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2024]) {
+      if ((wildcard == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2024\n");
+      else
+        fprintf(stderr, "reached bug index 2024\n");
+    }
+    if ((!FIXREVERTER[2024] && (wildcard == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (wildcard->annot != NULL)
         xmlSchemaFreeAnnot(wildcard->annot);
     if (wildcard->nsSet != NULL)
@@ -3824,8 +4341,23 @@ xmlSchemaFreeWildcard(xmlSchemaWildcardPtr wildcard)
 static void
 xmlSchemaFreeAttributeGroup(xmlSchemaAttributeGroupPtr attrGr)
 {
-    if (attrGr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2025]) {
+      if ((attrGr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2025\n");
+      else
+        fprintf(stderr, "reached bug index 2025\n");
+    }
+    if ((!FIXREVERTER[2025] && (attrGr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (attrGr->annot != NULL)
         xmlSchemaFreeAnnot(attrGr->annot);
     if (attrGr->attrUses != NULL)
@@ -3889,8 +4421,23 @@ xmlSchemaFreeIDC(xmlSchemaIDCPtr idcDef)
 {
     xmlSchemaIDCSelectPtr cur, prev;
 
-    if (idcDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2026]) {
+      if ((idcDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2026\n");
+      else
+        fprintf(stderr, "reached bug index 2026\n");
+    }
+    if ((!FIXREVERTER[2026] && (idcDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (idcDef->annot != NULL)
         xmlSchemaFreeAnnot(idcDef->annot);
     /* Selector */
@@ -3922,8 +4469,23 @@ xmlSchemaFreeIDC(xmlSchemaIDCPtr idcDef)
 static void
 xmlSchemaFreeElement(xmlSchemaElementPtr elem)
 {
-    if (elem == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2027]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2027\n");
+      else
+        fprintf(stderr, "reached bug index 2027\n");
+    }
+    if ((!FIXREVERTER[2027] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (elem->annot != NULL)
         xmlSchemaFreeAnnot(elem->annot);
     if (elem->contModel != NULL)
@@ -3942,8 +4504,23 @@ xmlSchemaFreeElement(xmlSchemaElementPtr elem)
 void
 xmlSchemaFreeFacet(xmlSchemaFacetPtr facet)
 {
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2028]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2028\n");
+      else
+        fprintf(stderr, "reached bug index 2028\n");
+    }
+    if ((!FIXREVERTER[2028] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (facet->val != NULL)
         xmlSchemaFreeValue(facet->val);
     if (facet->regexp != NULL)
@@ -3962,8 +4539,23 @@ xmlSchemaFreeFacet(xmlSchemaFacetPtr facet)
 void
 xmlSchemaFreeType(xmlSchemaTypePtr type)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2029]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2029\n");
+      else
+        fprintf(stderr, "reached bug index 2029\n");
+    }
+    if ((!FIXREVERTER[2029] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (type->annot != NULL)
         xmlSchemaFreeAnnot(type->annot);
     if (type->facets != NULL) {
@@ -4026,8 +4618,23 @@ xmlSchemaFreeModelGroup(xmlSchemaModelGroupPtr item)
 static void
 xmlSchemaComponentListFree(xmlSchemaItemListPtr list)
 {
-    if ((list == NULL) || (list->nbItems == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2030]) {
+      if ((list == (void *) 0 || list -> nbItems == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2030\n");
+      else
+        fprintf(stderr, "reached bug index 2030\n");
+    }
+    if ((!FIXREVERTER[2030] && (list == (void *) 0 || list -> nbItems == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     {
 	xmlSchemaTreeItemPtr item;
 	xmlSchemaTreeItemPtr *items = (xmlSchemaTreeItemPtr *) list->items;
@@ -4035,8 +4642,23 @@ xmlSchemaComponentListFree(xmlSchemaItemListPtr list)
 
 	for (i = 0; i < list->nbItems; i++) {
 	    item = items[i];
-	    if (item == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2031]) {
+	      if ((item == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2031\n");
+	      else
+	        fprintf(stderr, "reached bug index 2031\n");
+	    }
+	    if ((!FIXREVERTER[2031] && (item == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    switch (item->type) {
 		case XML_SCHEMA_TYPE_SIMPLE:
 		case XML_SCHEMA_TYPE_COMPLEX:
@@ -4111,8 +4733,23 @@ xmlSchemaComponentListFree(xmlSchemaItemListPtr list)
 void
 xmlSchemaFree(xmlSchemaPtr schema)
 {
-    if (schema == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2032]) {
+      if ((schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2032\n");
+      else
+        fprintf(stderr, "reached bug index 2032\n");
+    }
+    if ((!FIXREVERTER[2032] && (schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     /* @volatiles is not used anymore :-/ */
     if (schema->volatiles != NULL)
 	TODO
@@ -4627,8 +5264,23 @@ xmlSchemaGetPropNode(xmlNodePtr node, const char *name)
 {
     xmlAttrPtr prop;
 
-    if ((node == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2041]) {
+      if ((node == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2041\n");
+      else
+        fprintf(stderr, "reached bug index 2041\n");
+    }
+    if ((!FIXREVERTER[2041] && (node == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     prop = node->properties;
     while (prop != NULL) {
         if ((prop->ns == NULL) && xmlStrEqual(prop->name, BAD_CAST name))
@@ -4654,8 +5306,23 @@ xmlSchemaGetPropNodeNs(xmlNodePtr node, const char *uri, const char *name)
 {
     xmlAttrPtr prop;
 
-    if ((node == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2042]) {
+      if ((node == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2042\n");
+      else
+        fprintf(stderr, "reached bug index 2042\n");
+    }
+    if ((!FIXREVERTER[2042] && (node == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     prop = node->properties;
     while (prop != NULL) {
 	if ((prop->ns != NULL) &&
@@ -4674,8 +5341,23 @@ xmlSchemaGetNodeContent(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node)
     const xmlChar *ret;
 
     val = xmlNodeGetContent(node);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2043]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2043\n");
+      else
+        fprintf(stderr, "reached bug index 2043\n");
+    }
+    if ((!FIXREVERTER[2043] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	val = xmlStrdup((xmlChar *)"");
+	#ifdef FRCOV
+	}
+	#endif
     ret = xmlDictLookup(ctxt->dict, val, -1);
     xmlFree(val);
     return(ret);
@@ -4705,8 +5387,23 @@ xmlSchemaGetProp(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node,
     const xmlChar *ret;
 
     val = xmlGetNoNsProp(node, BAD_CAST name);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2044]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2044\n");
+      else
+        fprintf(stderr, "reached bug index 2044\n");
+    }
+    if ((!FIXREVERTER[2044] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret = xmlDictLookup(ctxt->dict, val, -1);
     xmlFree(val);
     return(ret);
@@ -4751,8 +5448,23 @@ xmlSchemaGetElem(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaElementPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2045]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2045\n");
+      else
+        fprintf(stderr, "reached bug index 2045\n");
+    }
+    if ((!FIXREVERTER[2045] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(elemDecl)
     }
@@ -4785,8 +5497,23 @@ xmlSchemaGetType(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaTypePtr ret = NULL;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2046]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2046\n");
+      else
+        fprintf(stderr, "reached bug index 2046\n");
+    }
+    if ((!FIXREVERTER[2046] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* First try the built-in types. */
     if ((nsName != NULL) && xmlStrEqual(nsName, xmlSchemaNs)) {
 	ret = xmlSchemaGetPredefinedType(name, nsName);
@@ -4832,8 +5559,23 @@ xmlSchemaGetAttributeDecl(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaAttributePtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2047]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2047\n");
+      else
+        fprintf(stderr, "reached bug index 2047\n");
+    }
+    if ((!FIXREVERTER[2047] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(attrDecl)
     }
@@ -4866,8 +5608,23 @@ xmlSchemaGetAttributeGroup(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaAttributeGroupPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2048]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2048\n");
+      else
+        fprintf(stderr, "reached bug index 2048\n");
+    }
+    if ((!FIXREVERTER[2048] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(attrgrpDecl)
     }
@@ -4906,8 +5663,23 @@ xmlSchemaGetGroup(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaModelGroupDefPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2049]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2049\n");
+      else
+        fprintf(stderr, "reached bug index 2049\n");
+    }
+    if ((!FIXREVERTER[2049] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(groupDecl)
     }
@@ -4932,8 +5704,23 @@ xmlSchemaGetNotation(xmlSchemaPtr schema,
 {
     xmlSchemaNotationPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2050]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2050\n");
+      else
+        fprintf(stderr, "reached bug index 2050\n");
+    }
+    if ((!FIXREVERTER[2050] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(notaDecl)
     }
@@ -4948,8 +5735,23 @@ xmlSchemaGetIDC(xmlSchemaPtr schema,
 {
     xmlSchemaIDCPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2051]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2051\n");
+      else
+        fprintf(stderr, "reached bug index 2051\n");
+    }
+    if ((!FIXREVERTER[2051] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(idcDef)
     }
@@ -5007,8 +5809,23 @@ xmlSchemaGetNamedComponent(xmlSchemaPtr schema,
 static int
 xmlSchemaIsBlank(xmlChar * str, int len)
 {
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2052]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2052\n");
+      else
+        fprintf(stderr, "reached bug index 2052\n");
+    }
+    if ((!FIXREVERTER[2052] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
     if (len < 0) {
 	while (*str != 0) {
 	    if (!(IS_BLANK_CH(*str)))
@@ -5040,8 +5857,23 @@ xmlSchemaFindRedefCompInGraph(xmlSchemaBucketPtr bucket,
     xmlSchemaBasicItemPtr ret;
     int i;
 
-    if ((bucket == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2053]) {
+      if ((bucket == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2053\n");
+      else
+        fprintf(stderr, "reached bug index 2053\n");
+    }
+    if ((!FIXREVERTER[2053] && (bucket == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((bucket->globals == NULL) ||
 	(bucket->globals->nbItems == 0))
 	goto subschemas;
@@ -5130,14 +5962,44 @@ xmlSchemaAddNotation(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaNotationPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2054]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2054\n");
+      else
+        fprintf(stderr, "reached bug index 2054\n");
+    }
+    if ((!FIXREVERTER[2054] && (ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaNotationPtr) xmlMalloc(sizeof(xmlSchemaNotation));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2055]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2055\n");
+      else
+        fprintf(stderr, "reached bug index 2055\n");
+    }
+    if ((!FIXREVERTER[2055] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "add annotation", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaNotation));
     ret->type = XML_SCHEMA_TYPE_NOTATION;
     ret->name = name;
@@ -5167,14 +6029,44 @@ xmlSchemaAddAttribute(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaAttributePtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2056]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2056\n");
+      else
+        fprintf(stderr, "reached bug index 2056\n");
+    }
+    if ((!FIXREVERTER[2056] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaAttributePtr) xmlMalloc(sizeof(xmlSchemaAttribute));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2057]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2057\n");
+      else
+        fprintf(stderr, "reached bug index 2057\n");
+    }
+    if ((!FIXREVERTER[2057] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating attribute", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttribute));
     ret->type = XML_SCHEMA_TYPE_ATTRIBUTE;
     ret->node = node;
@@ -5207,14 +6099,44 @@ xmlSchemaAddAttributeUse(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlSchemaAttributeUsePtr ret = NULL;
 
-    if (pctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2058]) {
+      if ((pctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2058\n");
+      else
+        fprintf(stderr, "reached bug index 2058\n");
+    }
+    if ((!FIXREVERTER[2058] && (pctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaAttributeUsePtr) xmlMalloc(sizeof(xmlSchemaAttributeUse));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2059]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2059\n");
+      else
+        fprintf(stderr, "reached bug index 2059\n");
+    }
+    if ((!FIXREVERTER[2059] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(pctxt, "allocating attribute", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttributeUse));
     ret->type = XML_SCHEMA_TYPE_ATTRIBUTE_USE;
     ret->node = node;
@@ -5240,11 +6162,26 @@ xmlSchemaAddRedef(xmlSchemaParserCtxtPtr pctxt,
 
     ret = (xmlSchemaRedefPtr)
 	xmlMalloc(sizeof(xmlSchemaRedef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2060]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2060\n");
+      else
+        fprintf(stderr, "reached bug index 2060\n");
+    }
+    if ((!FIXREVERTER[2060] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt,
 	    "allocating redefinition info", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaRedef));
     ret->item = item;
     ret->targetBucket = targetBucket;
@@ -5280,15 +6217,45 @@ xmlSchemaAddAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlSchemaAttributeGroupPtr ret = NULL;
 
-    if ((pctxt == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2061]) {
+      if ((pctxt == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2061\n");
+      else
+        fprintf(stderr, "reached bug index 2061\n");
+    }
+    if ((!FIXREVERTER[2061] && (pctxt == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaAttributeGroupPtr)
         xmlMalloc(sizeof(xmlSchemaAttributeGroup));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2062]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2062\n");
+      else
+        fprintf(stderr, "reached bug index 2062\n");
+    }
+    if ((!FIXREVERTER[2062] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt, "allocating attribute group", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttributeGroup));
     ret->type = XML_SCHEMA_TYPE_ATTRIBUTEGROUP;
     ret->name = name;
@@ -5300,10 +6267,25 @@ xmlSchemaAddAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
     if (pctxt->isRedefine) {
 	pctxt->redef = xmlSchemaAddRedef(pctxt, pctxt->redefined,
 	    ret, name, nsName);
-	if (pctxt->redef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2063]) {
+	  if ((pctxt -> redef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2063\n");
+	  else
+	    fprintf(stderr, "reached bug index 2063\n");
+	}
+	if ((!FIXREVERTER[2063] && (pctxt -> redef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	pctxt->redefCounter = 0;
     }
     WXS_ADD_GLOBAL(pctxt, ret);
@@ -5330,14 +6312,44 @@ xmlSchemaAddElement(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaElementPtr ret = NULL;
 
-    if ((ctxt == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2064]) {
+      if ((ctxt == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2064\n");
+      else
+        fprintf(stderr, "reached bug index 2064\n");
+    }
+    if ((!FIXREVERTER[2064] && (ctxt == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaElementPtr) xmlMalloc(sizeof(xmlSchemaElement));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2065]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2065\n");
+      else
+        fprintf(stderr, "reached bug index 2065\n");
+    }
+    if ((!FIXREVERTER[2065] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating element", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaElement));
     ret->type = XML_SCHEMA_TYPE_ELEMENT;
     ret->name = name;
@@ -5372,14 +6384,44 @@ xmlSchemaAddType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaTypePtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2066]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2066\n");
+      else
+        fprintf(stderr, "reached bug index 2066\n");
+    }
+    if ((!FIXREVERTER[2066] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaTypePtr) xmlMalloc(sizeof(xmlSchemaType));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2067]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2067\n");
+      else
+        fprintf(stderr, "reached bug index 2067\n");
+    }
+    if ((!FIXREVERTER[2067] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating type", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaType));
     ret->type = type;
     ret->name = name;
@@ -5389,10 +6431,25 @@ xmlSchemaAddType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	if (ctxt->isRedefine) {
 	    ctxt->redef = xmlSchemaAddRedef(ctxt, ctxt->redefined,
 		ret, name, nsName);
-	    if (ctxt->redef == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2068]) {
+	      if ((ctxt -> redef == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2068\n");
+	      else
+	        fprintf(stderr, "reached bug index 2068\n");
+	    }
+	    if ((!FIXREVERTER[2068] && (ctxt -> redef == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    ctxt->redefCounter = 0;
 	}
 	WXS_ADD_GLOBAL(ctxt, ret);
@@ -5412,11 +6469,26 @@ xmlSchemaNewQNameRef(xmlSchemaParserCtxtPtr pctxt,
 
     ret = (xmlSchemaQNameRefPtr)
 	xmlMalloc(sizeof(xmlSchemaQNameRef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2069]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2069\n");
+      else
+        fprintf(stderr, "reached bug index 2069\n");
+    }
+    if ((!FIXREVERTER[2069] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt,
 	    "allocating QName reference item", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->node = NULL;
     ret->type = XML_SCHEMA_EXTRA_QNAMEREF;
     ret->name = refName;
@@ -5437,11 +6509,26 @@ xmlSchemaAddAttributeUseProhib(xmlSchemaParserCtxtPtr pctxt)
 
     ret = (xmlSchemaAttributeUseProhibPtr)
 	xmlMalloc(sizeof(xmlSchemaAttributeUseProhib));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2070]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2070\n");
+      else
+        fprintf(stderr, "reached bug index 2070\n");
+    }
+    if ((!FIXREVERTER[2070] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt,
 	    "allocating attribute use prohibition", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttributeUseProhib));
     ret->type = XML_SCHEMA_EXTRA_ATTR_USE_PROHIB;
     WXS_ADD_LOCAL(pctxt, ret);
@@ -5469,16 +6556,46 @@ xmlSchemaAddModelGroup(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaModelGroupPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2071]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2071\n");
+      else
+        fprintf(stderr, "reached bug index 2071\n");
+    }
+    if ((!FIXREVERTER[2071] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaModelGroupPtr)
 	xmlMalloc(sizeof(xmlSchemaModelGroup));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2072]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2072\n");
+      else
+        fprintf(stderr, "reached bug index 2072\n");
+    }
+    if ((!FIXREVERTER[2072] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(ctxt, "allocating model group component",
 	    NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaModelGroup));
     ret->type = type;
     ret->node = node;
@@ -5508,19 +6625,49 @@ xmlSchemaAddParticle(xmlSchemaParserCtxtPtr ctxt,
 		     xmlNodePtr node, int min, int max)
 {
     xmlSchemaParticlePtr ret = NULL;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2073]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2073\n");
+      else
+        fprintf(stderr, "reached bug index 2073\n");
+    }
+    if ((!FIXREVERTER[2073] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
 #ifdef DEBUG
     fprintf(stderr, "Adding particle component\n");
 #endif
     ret = (xmlSchemaParticlePtr)
 	xmlMalloc(sizeof(xmlSchemaParticle));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2074]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2074\n");
+      else
+        fprintf(stderr, "reached bug index 2074\n");
+    }
+    if ((!FIXREVERTER[2074] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(ctxt, "allocating particle component",
 	    NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->type = XML_SCHEMA_TYPE_PARTICLE;
     ret->annot = NULL;
     ret->node = node;
@@ -5558,15 +6705,45 @@ xmlSchemaAddModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaModelGroupDefPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2075]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2075\n");
+      else
+        fprintf(stderr, "reached bug index 2075\n");
+    }
+    if ((!FIXREVERTER[2075] && (ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaModelGroupDefPtr)
 	xmlMalloc(sizeof(xmlSchemaModelGroupDef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2076]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2076\n");
+      else
+        fprintf(stderr, "reached bug index 2076\n");
+    }
+    if ((!FIXREVERTER[2076] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "adding group", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaModelGroupDef));
     ret->name = name;
     ret->type = XML_SCHEMA_TYPE_GROUP;
@@ -5576,10 +6753,25 @@ xmlSchemaAddModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
     if (ctxt->isRedefine) {
 	ctxt->redef = xmlSchemaAddRedef(ctxt, ctxt->redefined,
 	    ret, name, nsName);
-	if (ctxt->redef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2077]) {
+	  if ((ctxt -> redef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2077\n");
+	  else
+	    fprintf(stderr, "reached bug index 2077\n");
+	}
+	if ((!FIXREVERTER[2077] && (ctxt -> redef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->redefCounter = 0;
     }
     WXS_ADD_GLOBAL(ctxt, ret);
@@ -5602,10 +6794,25 @@ xmlSchemaNewWildcardNsConstraint(xmlSchemaParserCtxtPtr ctxt)
 
     ret = (xmlSchemaWildcardNsPtr)
 	xmlMalloc(sizeof(xmlSchemaWildcardNs));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2078]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2078\n");
+      else
+        fprintf(stderr, "reached bug index 2078\n");
+    }
+    if ((!FIXREVERTER[2078] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(ctxt, "creating wildcard namespace constraint", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->value = NULL;
     ret->next = NULL;
     return (ret);
@@ -5618,15 +6825,45 @@ xmlSchemaAddIDC(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaIDCPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2079]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2079\n");
+      else
+        fprintf(stderr, "reached bug index 2079\n");
+    }
+    if ((!FIXREVERTER[2079] && (ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaIDCPtr) xmlMalloc(sizeof(xmlSchemaIDC));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2080]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2080\n");
+      else
+        fprintf(stderr, "reached bug index 2080\n");
+    }
+    if ((!FIXREVERTER[2080] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt,
 	    "allocating an identity-constraint definition", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaIDC));
     /* The target namespace of the parent element declaration. */
     ret->targetNamespace = nsName;
@@ -5659,14 +6896,44 @@ xmlSchemaAddWildcard(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaWildcardPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2081]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2081\n");
+      else
+        fprintf(stderr, "reached bug index 2081\n");
+    }
+    if ((!FIXREVERTER[2081] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaWildcardPtr) xmlMalloc(sizeof(xmlSchemaWildcard));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2082]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2082\n");
+      else
+        fprintf(stderr, "reached bug index 2082\n");
+    }
+    if ((!FIXREVERTER[2082] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "adding wildcard", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaWildcard));
     ret->type = type;
     ret->node = node;
@@ -5677,8 +6944,23 @@ xmlSchemaAddWildcard(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 static void
 xmlSchemaSubstGroupFree(xmlSchemaSubstGroupPtr group)
 {
-    if (group == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2083]) {
+      if ((group == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2083\n");
+      else
+        fprintf(stderr, "reached bug index 2083\n");
+    }
+    if ((!FIXREVERTER[2083] && (group == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (group->members != NULL)
 	xmlSchemaItemListFree(group->members);
     xmlFree(group);
@@ -5698,19 +6980,49 @@ xmlSchemaSubstGroupAdd(xmlSchemaParserCtxtPtr pctxt,
     }
     /* Create a new substitution group. */
     ret = (xmlSchemaSubstGroupPtr) xmlMalloc(sizeof(xmlSchemaSubstGroup));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2084]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2084\n");
+      else
+        fprintf(stderr, "reached bug index 2084\n");
+    }
+    if ((!FIXREVERTER[2084] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL,
 	    "allocating a substitution group container", NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaSubstGroup));
     ret->head = head;
     /* Create list of members. */
     ret->members = xmlSchemaItemListCreate();
-    if (ret->members == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2085]) {
+      if ((ret -> members == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2085\n");
+      else
+        fprintf(stderr, "reached bug index 2085\n");
+    }
+    if ((!FIXREVERTER[2085] && (ret -> members == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaSubstGroupFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /* Add subst group to hash. */
     if (xmlHashAddEntry2(WXS_SUBST_GROUPS(pctxt),
 	head->name, head->targetNamespace, ret) != 0) {
@@ -5750,14 +7062,59 @@ xmlSchemaAddElementSubstitutionMember(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlSchemaSubstGroupPtr substGroup = NULL;
 
-    if ((pctxt == NULL) || (head == NULL) || (member == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2086]) {
+      if ((pctxt == (void *) 0 || head == (void *) 0 || member == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2086\n");
+      else
+        fprintf(stderr, "reached bug index 2086\n");
+    }
+    if ((!FIXREVERTER[2086] && (pctxt == (void *) 0 || head == (void *) 0 || member == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     substGroup = xmlSchemaSubstGroupGet(pctxt, head);
-    if (substGroup == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2087]) {
+      if ((substGroup == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2087\n");
+      else
+        fprintf(stderr, "reached bug index 2087\n");
+    }
+    if ((!FIXREVERTER[2087] && (substGroup == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	substGroup = xmlSchemaSubstGroupAdd(pctxt, head);
-    if (substGroup == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2088]) {
+      if ((substGroup == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2088\n");
+      else
+        fprintf(stderr, "reached bug index 2088\n");
+    }
+    if ((!FIXREVERTER[2088] && (substGroup == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (xmlSchemaItemListAdd(substGroup->members, member) == -1)
 	return(-1);
     return(0);
@@ -5910,11 +7267,26 @@ xmlSchemaPValAttrQName(xmlSchemaParserCtxtPtr ctxt,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(ownerElem, name);
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2090]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2090\n");
+      else
+        fprintf(stderr, "reached bug index 2090\n");
+    }
+    if ((!FIXREVERTER[2090] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	*local = NULL;
 	*uri = NULL;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (xmlSchemaPValAttrNodeQName(ctxt, schema,
 	ownerItem, attr, uri, local));
 }
@@ -5939,8 +7311,23 @@ xmlSchemaPValAttrNodeID(xmlSchemaParserCtxtPtr ctxt, xmlAttrPtr attr)
     int ret;
     const xmlChar *value;
 
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2091]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2091\n");
+      else
+        fprintf(stderr, "reached bug index 2091\n");
+    }
+    if ((!FIXREVERTER[2091] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     value = xmlSchemaGetNodeContentNoDict((xmlNodePtr) attr);
     ret = xmlValidateNCName(value, 1);
     if (ret == 0) {
@@ -5996,8 +7383,23 @@ xmlSchemaPValAttrID(xmlSchemaParserCtxtPtr ctxt,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(ownerElem, (const char *) name);
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2092]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2092\n");
+      else
+        fprintf(stderr, "reached bug index 2092\n");
+    }
+    if ((!FIXREVERTER[2092] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlSchemaPValAttrNodeID(ctxt, attr));
 
 }
@@ -6020,8 +7422,23 @@ xmlGetMaxOccurs(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(node, "maxOccurs");
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2093]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2093\n");
+      else
+        fprintf(stderr, "reached bug index 2093\n");
+    }
+    if ((!FIXREVERTER[2093] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (def);
+	#ifdef FRCOV
+	}
+	#endif
     val = xmlSchemaGetNodeContent(ctxt, (xmlNodePtr) attr);
 
     if (xmlStrEqual(val, (const xmlChar *) "unbounded")) {
@@ -6085,8 +7502,23 @@ xmlGetMinOccurs(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(node, "minOccurs");
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2094]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2094\n");
+      else
+        fprintf(stderr, "reached bug index 2094\n");
+    }
+    if ((!FIXREVERTER[2094] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (def);
+	#ifdef FRCOV
+	}
+	#endif
     val = xmlSchemaGetNodeContent(ctxt, (xmlNodePtr) attr);
     cur = val;
     while (IS_BLANK_CH(*cur))
@@ -6185,8 +7617,23 @@ xmlGetBooleanProp(xmlSchemaParserCtxtPtr ctxt,
     const xmlChar *val;
 
     val = xmlSchemaGetProp(ctxt, node, name);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2095]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2095\n");
+      else
+        fprintf(stderr, "reached bug index 2095\n");
+    }
+    if ((!FIXREVERTER[2095] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (def);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * 3.2.2.1 Lexical representation
     * An instance of a datatype that is defined as `boolean`
@@ -6274,8 +7721,23 @@ xmlSchemaPValAttrNodeValue(xmlSchemaParserCtxtPtr pctxt,
     * NOTE: Should we move this to xmlschematypes.c? Hmm, but this
     * one is really meant to be used internally, so better not.
     */
-    if ((pctxt == NULL) || (type == NULL) || (attr == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2096]) {
+      if ((pctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2096\n");
+      else
+        fprintf(stderr, "reached bug index 2096\n");
+    }
+    if ((!FIXREVERTER[2096] && (pctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (type->type != XML_SCHEMA_TYPE_BASIC) {
 	PERROR_INT("xmlSchemaPValAttrNodeValue",
 	    "the given type is not a built-in type");
@@ -6342,8 +7804,23 @@ xmlSchemaPValAttrNode(xmlSchemaParserCtxtPtr ctxt,
 {
     const xmlChar *val;
 
-    if ((ctxt == NULL) || (type == NULL) || (attr == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2097]) {
+      if ((ctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2097\n");
+      else
+        fprintf(stderr, "reached bug index 2097\n");
+    }
+    if ((!FIXREVERTER[2097] && (ctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     val = xmlSchemaGetNodeContent(ctxt, (xmlNodePtr) attr);
     if (value != NULL)
@@ -6382,11 +7859,26 @@ xmlSchemaPValAttr(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (type == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2098]) {
+      if ((ctxt == (void *) 0 || type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2098\n");
+      else
+        fprintf(stderr, "reached bug index 2098\n");
+    }
+    if ((!FIXREVERTER[2098] && (ctxt == (void *) 0 || type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (value != NULL)
 	    *value = NULL;
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (type->type != XML_SCHEMA_TYPE_BASIC) {
 	if (value != NULL)
 	    *value = NULL;
@@ -6398,11 +7890,26 @@ xmlSchemaPValAttr(xmlSchemaParserCtxtPtr ctxt,
 	return (-1);
     }
     attr = xmlSchemaGetPropNode(ownerElem, name);
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2099]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2099\n");
+      else
+        fprintf(stderr, "reached bug index 2099\n");
+    }
+    if ((!FIXREVERTER[2099] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (value != NULL)
 	    *value = NULL;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (xmlSchemaPValAttrNode(ctxt, ownerItem, attr,
 	type, value));
 }
@@ -6525,8 +8032,23 @@ xmlSchemaParseAnnotation(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node, int neede
     * {any attributes with non-schema namespace . . .}>
     * Content: (appinfo | documentation)*
     */
-    if ((ctxt == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2100]) {
+      if ((ctxt == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2100\n");
+      else
+        fprintf(stderr, "reached bug index 2100\n");
+    }
+    if ((!FIXREVERTER[2100] && (ctxt == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (needed)
 	ret = xmlSchemaNewAnnot(ctxt, node);
     else
@@ -6636,22 +8158,67 @@ xmlSchemaParseFacet(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     const xmlChar *value;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2101]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2101\n");
+      else
+        fprintf(stderr, "reached bug index 2101\n");
+    }
+    if ((!FIXREVERTER[2101] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     facet = xmlSchemaNewFacet();
-    if (facet == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2102]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2102\n");
+      else
+        fprintf(stderr, "reached bug index 2102\n");
+    }
+    if ((!FIXREVERTER[2102] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt, "allocating facet", node);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     facet->node = node;
     value = xmlSchemaGetProp(ctxt, node, "value");
-    if (value == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2103]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2103\n");
+      else
+        fprintf(stderr, "reached bug index 2103\n");
+    }
+    if ((!FIXREVERTER[2103] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErr2(ctxt, node, child, XML_SCHEMAP_FACET_NO_VALUE,
                        "Facet %s has no value\n", node->name, NULL);
         xmlSchemaFreeFacet(facet);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (IS_SCHEMA(node, "minInclusive")) {
         facet->type = XML_SCHEMA_FACET_MININCLUSIVE;
     } else if (IS_SCHEMA(node, "minExclusive")) {
@@ -6759,9 +8326,24 @@ xmlSchemaParseWildcardNs(xmlSchemaParserCtxtPtr ctxt,
 	wildc->any = 1;
     else if (xmlStrEqual(ns, BAD_CAST "##other")) {
 	wildc->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-	if (wildc->negNsSet == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2104]) {
+	  if ((wildc -> negNsSet == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2104\n");
+	  else
+	    fprintf(stderr, "reached bug index 2104\n");
+	}
+	if ((!FIXREVERTER[2104] && (wildc -> negNsSet == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	wildc->negNsSet->value = ctxt->targetNamespace;
     } else {
 	const xmlChar *end, *cur;
@@ -6810,16 +8392,46 @@ xmlSchemaParseWildcardNs(xmlSchemaParserCtxtPtr ctxt,
 		}
 		if (tmp == NULL) {
 		    tmp = xmlSchemaNewWildcardNsConstraint(ctxt);
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2105]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2105\n");
+		      else
+		        fprintf(stderr, "reached bug index 2105\n");
+		    }
+		    if ((!FIXREVERTER[2105] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlFree(nsItem);
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    tmp->value = dictnsItem;
 		    tmp->next = NULL;
 		    if (wildc->nsSet == NULL)
 			wildc->nsSet = tmp;
-		    else if (lastNs != NULL)
+		    else 
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2106]) {
+		      if ((lastNs != (void *) 0  ) && !(0))
+		        fprintf(stderr, "triggered bug index 2106\n");
+		      else
+		        fprintf(stderr, "reached bug index 2106\n");
+		    }
+		    if ((!FIXREVERTER[2106] && (lastNs != (void *) 0  ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			lastNs->next = tmp;
+			#ifdef FRCOV
+			}
+			#endif
 		    lastNs = tmp;
 		}
 
@@ -6899,8 +8511,23 @@ xmlSchemaParseAny(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     xmlSchemaAnnotPtr annot = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2108]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2108\n");
+      else
+        fprintf(stderr, "reached bug index 2108\n");
+    }
+    if ((!FIXREVERTER[2108] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * Check for illegal attributes.
     */
@@ -6934,8 +8561,23 @@ xmlSchemaParseAny(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     * Create & parse the wildcard.
     */
     wild = xmlSchemaAddWildcard(ctxt, schema, XML_SCHEMA_TYPE_ANY, node);
-    if (wild == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2109]) {
+      if ((wild == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2109\n");
+      else
+        fprintf(stderr, "reached bug index 2109\n");
+    }
+    if ((!FIXREVERTER[2109] && (wild == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlSchemaParseWildcardNs(ctxt, schema, wild, node);
     /*
     * And now for the children...
@@ -6962,8 +8604,23 @@ xmlSchemaParseAny(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     * Create the particle.
     */
     particle = xmlSchemaAddParticle(ctxt, node, min, max);
-    if (particle == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2110]) {
+      if ((particle == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2110\n");
+      else
+        fprintf(stderr, "reached bug index 2110\n");
+    }
+    if ((!FIXREVERTER[2110] && (particle == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     particle->annot = annot;
     particle->children = (xmlSchemaTreeItemPtr) wild;
 
@@ -6988,18 +8645,63 @@ xmlSchemaParseNotation(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlSchemaNotationPtr ret;
     xmlNodePtr child = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2111]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2111\n");
+      else
+        fprintf(stderr, "reached bug index 2111\n");
+    }
+    if ((!FIXREVERTER[2111] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     name = xmlSchemaGetProp(ctxt, node, "name");
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2112]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2112\n");
+      else
+        fprintf(stderr, "reached bug index 2112\n");
+    }
+    if ((!FIXREVERTER[2112] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErr2(ctxt, node, child, XML_SCHEMAP_NOTATION_NO_NAME,
                        "Notation has no name\n", NULL, NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlSchemaAddNotation(ctxt, schema, name,
 	ctxt->targetNamespace, node);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2113]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2113\n");
+      else
+        fprintf(stderr, "reached bug index 2113\n");
+    }
+    if ((!FIXREVERTER[2113] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaPValAttrID(ctxt, node, BAD_CAST "id");
 
     child = node->children;
@@ -7036,14 +8738,44 @@ xmlSchemaParseAnyAttribute(xmlSchemaParserCtxtPtr ctxt,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2114]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2114\n");
+      else
+        fprintf(stderr, "reached bug index 2114\n");
+    }
+    if ((!FIXREVERTER[2114] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = xmlSchemaAddWildcard(ctxt, schema, XML_SCHEMA_TYPE_ANY_ATTRIBUTE,
 	node);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2115]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2115\n");
+      else
+        fprintf(stderr, "reached bug index 2115\n");
+    }
+    if ((!FIXREVERTER[2115] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Check for illegal attributes.
     */
@@ -7120,8 +8852,23 @@ xmlSchemaParseLocalAttribute(xmlSchemaParserCtxtPtr pctxt,
      * 3.2.3 Constraints on XML Representations of Attribute Declarations
      */
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2116]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2116\n");
+      else
+        fprintf(stderr, "reached bug index 2116\n");
+    }
+    if ((!FIXREVERTER[2116] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     attr = xmlSchemaGetPropNode(node, "ref");
     if (attr != NULL) {
 	if (xmlSchemaPValAttrNodeQName(pctxt, schema,
@@ -7237,8 +8984,22 @@ attr_next:
     * If default and use are both present, use must have
     * the actual value optional.
     */
-    if ((defValueType == WXS_ATTR_DEF_VAL_DEFAULT) &&
-	(occurs != XML_SCHEMAS_ATTR_USE_OPTIONAL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2117]) {
+      fprintf(stderr, "reached bug index 2117\n");
+    }
+    if ((FIXREVERTER[2117] && (defValueType == 1 )) || (!FIXREVERTER[2117] && (defValueType == 1 && occurs != 2 ))
+    #else
+    if (defValueType == 1 
+    #endif
+    ) {
+	  
+	#ifdef FRCOV
+	  if (!(occurs != 2 ))
+	    fprintf(stderr, "triggered bug index 2117\n");
+	  #endif
+	
 	xmlSchemaPSimpleTypeErr(pctxt,
 	    XML_SCHEMAP_SRC_ATTRIBUTE_2,
 	    NULL, node, NULL,
@@ -7247,11 +9008,29 @@ attr_next:
 	    "if the attribute 'default' is present",
 	    NULL, NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * We want correct attributes.
     */
-    if (nberrors != pctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2118]) {
+      if ((nberrors != pctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 2118\n");
+      else
+        fprintf(stderr, "reached bug index 2118\n");
+    }
+    if ((!FIXREVERTER[2118] && (nberrors != pctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (! isRef) {
 	xmlSchemaAttributePtr attrDecl;
 
@@ -7270,11 +9049,26 @@ attr_next:
 		xmlSchemaInstanceNs, NULL);
 	}
 	attr = xmlSchemaGetPropNode(node, "name");
-	if (attr == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2119]) {
+	  if ((attr == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2119\n");
+	  else
+	    fprintf(stderr, "reached bug index 2119\n");
+	}
+	if ((!FIXREVERTER[2119] && (attr == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPMissingAttrErr(pctxt, XML_SCHEMAP_S4S_ATTR_MISSING,
 		NULL, node, "name", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (xmlSchemaPValAttrNode(pctxt, NULL, attr,
 	    xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME), &name) != 0) {
 	    return (NULL);
@@ -7292,21 +9086,66 @@ attr_next:
 		NULL, NULL);
 	    return (NULL);
 	}
-	if (occurs == XML_SCHEMAS_ATTR_USE_PROHIBITED)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2120]) {
+	  if ((occurs == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2120\n");
+	  else
+	    fprintf(stderr, "reached bug index 2120\n");
+	}
+	if ((!FIXREVERTER[2120] && (occurs == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto check_children;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Create the attribute use component.
 	*/
 	use = xmlSchemaAddAttributeUse(pctxt, node);
-	if (use == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2121]) {
+	  if ((use == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2121\n");
+	  else
+	    fprintf(stderr, "reached bug index 2121\n");
+	}
+	if ((!FIXREVERTER[2121] && (use == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	use->occurs = occurs;
 	/*
 	* Create the attribute declaration.
 	*/
 	attrDecl = xmlSchemaAddAttribute(pctxt, schema, name, ns, node, 0);
-	if (attrDecl == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2122]) {
+	  if ((attrDecl == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2122\n");
+	  else
+	    fprintf(stderr, "reached bug index 2122\n");
+	}
+	if ((!FIXREVERTER[2122] && (attrDecl == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (tmpName != NULL) {
 	    attrDecl->typeName = tmpName;
 	    attrDecl->typeNs = tmpNs;
@@ -7327,8 +9166,23 @@ attr_next:
 	* Create the attribute use component.
 	*/
 	use = xmlSchemaAddAttributeUse(pctxt, node);
-	if (use == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2123]) {
+	  if ((use == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2123\n");
+	  else
+	    fprintf(stderr, "reached bug index 2123\n");
+	}
+	if ((!FIXREVERTER[2123] && (use == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* We need to resolve the reference at later stage.
 	*/
@@ -7339,8 +9193,23 @@ attr_next:
 	*/
 	ref = xmlSchemaNewQNameRef(pctxt, XML_SCHEMA_TYPE_ATTRIBUTE,
 	    tmpName, tmpNs);
-	if (ref == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2124]) {
+	  if ((ref == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2124\n");
+	  else
+	    fprintf(stderr, "reached bug index 2124\n");
+	}
+	if ((!FIXREVERTER[2124] && (ref == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Assign the reference. This will be substituted for the
 	* referenced attribute declaration when the QName is resolved.
@@ -7349,8 +9218,23 @@ attr_next:
 	/*
 	* Value constraint.
 	*/
-	if (defValue != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2125]) {
+	  if ((defValue != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2125\n");
+	  else
+	    fprintf(stderr, "reached bug index 2125\n");
+	}
+	if ((!FIXREVERTER[2125] && (defValue != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    use->defValue = defValue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (defValueType == WXS_ATTR_DEF_VAL_FIXED)
 		use->flags |= XML_SCHEMA_ATTR_USE_FIXED;
     }
@@ -7426,8 +9310,23 @@ check_children:
 	* Create the attribute prohibition helper component.
 	*/
 	prohib = xmlSchemaAddAttributeUseProhib(pctxt);
-	if (prohib == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2127]) {
+	  if ((prohib == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2127\n");
+	  else
+	    fprintf(stderr, "reached bug index 2127\n");
+	}
+	if ((!FIXREVERTER[2127] && (prohib == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	prohib->node = node;
 	prohib->name = tmpName;
 	prohib->targetNamespace = tmpNs;
@@ -7506,18 +9405,48 @@ xmlSchemaParseGlobalAttribute(xmlSchemaParserCtxtPtr pctxt,
      *
      * 3.2.3 Constraints on XML Representations of Attribute Declarations
      */
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2128]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2128\n");
+      else
+        fprintf(stderr, "reached bug index 2128\n");
+    }
+    if ((!FIXREVERTER[2128] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * 3.2.3 : 3.1
     * One of ref or name must be present, but not both
     */
     attr = xmlSchemaGetPropNode(node, "name");
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2129]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2129\n");
+      else
+        fprintf(stderr, "reached bug index 2129\n");
+    }
+    if ((!FIXREVERTER[2129] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPMissingAttrErr(pctxt, XML_SCHEMAP_S4S_ATTR_MISSING,
 	    NULL, node, "name", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlSchemaPValAttrNode(pctxt, NULL, attr,
 	xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME), &attrValue) != 0) {
 	return (NULL);
@@ -7550,8 +9479,23 @@ xmlSchemaParseGlobalAttribute(xmlSchemaParserCtxtPtr pctxt,
 
     ret = xmlSchemaAddAttribute(pctxt, schema, attrValue,
 	pctxt->targetNamespace, node, 1);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2130]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2130\n");
+      else
+        fprintf(stderr, "reached bug index 2130\n");
+    }
+    if ((!FIXREVERTER[2130] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ret->flags |= XML_SCHEMAS_ATTR_GLOBAL;
 
     /*
@@ -7653,16 +9597,46 @@ xmlSchemaParseAttributeGroupRef(xmlSchemaParserCtxtPtr pctxt,
     xmlAttrPtr attr;
     const xmlChar *refNs = NULL, *ref = NULL;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2131]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2131\n");
+      else
+        fprintf(stderr, "reached bug index 2131\n");
+    }
+    if ((!FIXREVERTER[2131] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "ref");
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2132]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2132\n");
+      else
+        fprintf(stderr, "reached bug index 2132\n");
+    }
+    if ((!FIXREVERTER[2132] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPMissingAttrErr(pctxt,
 	    XML_SCHEMAP_S4S_ATTR_MISSING,
 	    NULL, node, "ref", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlSchemaPValAttrNodeQName(pctxt, schema,
 	NULL, attr, &refNs, &ref);
     if (xmlSchemaCheckReference(pctxt, schema, node, attr, refNs) != 0)
@@ -7742,8 +9716,23 @@ xmlSchemaParseAttributeGroupRef(xmlSchemaParserCtxtPtr pctxt,
 	*/
 	ret = xmlSchemaNewQNameRef(pctxt,
 	    XML_SCHEMA_TYPE_ATTRIBUTEGROUP, ref, refNs);
-	if (ret == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2133]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2133\n");
+	  else
+	    fprintf(stderr, "reached bug index 2133\n");
+	}
+	if ((!FIXREVERTER[2133] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ret->node = node;
 	pctxt->redef->reference = WXS_BASIC_CAST ret;
     } else {
@@ -7754,8 +9743,23 @@ xmlSchemaParseAttributeGroupRef(xmlSchemaParserCtxtPtr pctxt,
 	*/
 	ret = xmlSchemaNewQNameRef(pctxt,
 	    XML_SCHEMA_TYPE_ATTRIBUTEGROUP, ref, refNs);
-	if (ret == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2134]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2134\n");
+	  else
+	    fprintf(stderr, "reached bug index 2134\n");
+	}
+	if ((!FIXREVERTER[2134] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ret->node = node;
 	/* Add to pending items, to be able to resolve the reference. */
 	WXS_ADD_PENDING(pctxt, ret);
@@ -7785,16 +9789,46 @@ xmlSchemaParseAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
     xmlAttrPtr attr;
     int hasRefs = 0;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2135]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2135\n");
+      else
+        fprintf(stderr, "reached bug index 2135\n");
+    }
+    if ((!FIXREVERTER[2135] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "name");
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2136]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2136\n");
+      else
+        fprintf(stderr, "reached bug index 2136\n");
+    }
+    if ((!FIXREVERTER[2136] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPMissingAttrErr(pctxt,
 	    XML_SCHEMAP_S4S_ATTR_MISSING,
 	    NULL, node, "name", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * The name is crucial, exit if invalid.
     */
@@ -7805,8 +9839,23 @@ xmlSchemaParseAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
     }
     ret = xmlSchemaAddAttributeGroupDefinition(pctxt, schema,
 	name, pctxt->targetNamespace, node);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2137]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2137\n");
+      else
+        fprintf(stderr, "reached bug index 2137\n");
+    }
+    if ((!FIXREVERTER[2137] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Check for illegal attributes.
     */
@@ -7915,8 +9964,23 @@ xmlSchemaPValAttrBlockFinal(const xmlChar *value,
     /*
     * TODO: This does not check for dublicate entries.
     */
-    if ((flags == NULL) || (value == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2138]) {
+      if ((flags == (void *) 0 || value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2138\n");
+      else
+        fprintf(stderr, "reached bug index 2138\n");
+    }
+    if ((!FIXREVERTER[2138] && (flags == (void *) 0 || value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (value[0] == 0)
 	return (0);
     if (xmlStrEqual(value, BAD_CAST "#all")) {
@@ -8004,13 +10068,28 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
     * TODO: 1 The {selector} must be a valid XPath expression, as defined
     * in [XPath].
     */
-    if (selector == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2139]) {
+      if ((selector == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2139\n");
+      else
+        fprintf(stderr, "reached bug index 2139\n");
+    }
+    if ((!FIXREVERTER[2139] && (selector == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErr(ctxt, idc->node,
 	    XML_SCHEMAP_INTERNAL,
 	    "Internal error: xmlSchemaCheckCSelectorXPath, "
 	    "the selector is not specified.\n", NULL, NULL);
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (attr == NULL)
 	node = idc->node;
     else
@@ -8048,12 +10127,27 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
 
 	    nsArray = (const xmlChar **) xmlMalloc(
 		(count * 2 + 1) * sizeof(const xmlChar *));
-	    if (nsArray == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2140]) {
+	      if ((nsArray == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2140\n");
+	      else
+	        fprintf(stderr, "reached bug index 2140\n");
+	    }
+	    if ((!FIXREVERTER[2140] && (nsArray == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaPErrMemory(ctxt, "allocating a namespace array",
 		    NULL);
 		xmlFree(nsList);
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    for (i = 0; i < count; i++) {
 		nsArray[2 * i] = nsList[i]->href;
 		nsArray[2 * i + 1] = nsList[i]->prefix;
@@ -8073,7 +10167,19 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
 	if (nsArray != NULL)
 	    xmlFree((xmlChar **) nsArray);
 
-	if (selector->xpathComp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2141]) {
+	  if ((selector -> xpathComp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2141\n");
+	  else
+	    fprintf(stderr, "reached bug index 2141\n");
+	}
+	if ((!FIXREVERTER[2141] && (selector -> xpathComp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPCustomErr(ctxt,
 		/* TODO: Adjust error code? */
 		XML_SCHEMAP_S4S_ATTR_INVALID_VALUE,
@@ -8082,6 +10188,9 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
 		"compiled", selector->xpath);
 	    return (XML_SCHEMAP_S4S_ATTR_INVALID_VALUE);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return (0);
 }
@@ -8111,8 +10220,23 @@ static xmlSchemaAnnotPtr
 xmlSchemaAddAnnotation(xmlSchemaAnnotItemPtr annItem,
 		       xmlSchemaAnnotPtr annot)
 {
-    if ((annItem == NULL) || (annot == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2142]) {
+      if ((annItem == (void *) 0 || annot == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2142\n");
+      else
+        fprintf(stderr, "reached bug index 2142\n");
+    }
+    if ((!FIXREVERTER[2142] && (annItem == (void *) 0 || annot == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     switch (annItem->type) {
 	case XML_SCHEMA_TYPE_ELEMENT: {
 		xmlSchemaElementPtr item = (xmlSchemaElementPtr) annItem;
@@ -8236,12 +10360,27 @@ xmlSchemaParseIDCSelectorAndField(xmlSchemaParserCtxtPtr ctxt,
     * Create the item.
     */
     item = (xmlSchemaIDCSelectPtr) xmlMalloc(sizeof(xmlSchemaIDCSelect));
-    if (item == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2143]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2143\n");
+      else
+        fprintf(stderr, "reached bug index 2143\n");
+    }
+    if ((!FIXREVERTER[2143] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt,
 	    "allocating a 'selector' of an identity-constraint definition",
 	    NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(item, 0, sizeof(xmlSchemaIDCSelect));
     /*
     * Attribute "xpath" (mandatory).
@@ -8352,8 +10491,23 @@ xmlSchemaParseIDC(xmlSchemaParserCtxtPtr ctxt,
     /* Create the component. */
     item = xmlSchemaAddIDC(ctxt, schema, name, targetNamespace,
 	idcCategory, node);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2144]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2144\n");
+      else
+        fprintf(stderr, "reached bug index 2144\n");
+    }
+    if ((!FIXREVERTER[2144] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     xmlSchemaPValAttrID(ctxt, node, BAD_CAST "id");
     if (idcCategory == XML_SCHEMA_TYPE_IDC_KEYREF) {
@@ -8372,8 +10526,23 @@ xmlSchemaParseIDC(xmlSchemaParserCtxtPtr ctxt,
 	    */
 	    item->ref = xmlSchemaNewQNameRef(ctxt, XML_SCHEMA_TYPE_IDC_KEY,
 		NULL, NULL);
-	    if (item->ref == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2145]) {
+	      if ((item -> ref == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2145\n");
+	      else
+	        fprintf(stderr, "reached bug index 2145\n");
+	    }
+	    if ((!FIXREVERTER[2145] && (item -> ref == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    xmlSchemaPValAttrNodeQName(ctxt, schema,
 		NULL, attr,
 		&(item->ref->targetNamespace),
@@ -8467,8 +10636,23 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     /* 3.3.3 Constraints on XML Representations of Element Declarations */
     /* TODO: Complete implementation of 3.3.6 */
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2146]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2146\n");
+      else
+        fprintf(stderr, "reached bug index 2146\n");
+    }
+    if ((!FIXREVERTER[2146] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (isElemRef != NULL)
 	*isElemRef = 0;
@@ -8480,12 +10664,27 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     nameAttr = xmlSchemaGetPropNode(node, "name");
     attr = xmlSchemaGetPropNode(node, "ref");
     if ((topLevel) || (attr == NULL)) {
-	if (nameAttr == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2147]) {
+	  if ((nameAttr == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2147\n");
+	  else
+	    fprintf(stderr, "reached bug index 2147\n");
+	}
+	if ((!FIXREVERTER[2147] && (nameAttr == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPMissingAttrErr(ctxt,
 		XML_SCHEMAP_S4S_ATTR_MISSING,
 		NULL, node, "name", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else
 	isRef = 1;
 
@@ -8507,8 +10706,23 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     max = xmlGetMaxOccurs(ctxt, node, 0, UNBOUNDED, 1, "(xs:nonNegativeInteger | unbounded)");
     xmlSchemaPCheckParticleCorrect_2(ctxt, NULL, node, min, max);
     particle = xmlSchemaAddParticle(ctxt, node, min, max);
-    if (particle == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2148]) {
+      if ((particle == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2148\n");
+      else
+        fprintf(stderr, "reached bug index 2148\n");
+    }
+    if ((!FIXREVERTER[2148] && (particle == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto return_null;
+	#ifdef FRCOV
+	}
+	#endif
 
     /* ret->flags |= XML_SCHEMAS_ELEM_REF; */
 
@@ -8574,8 +10788,23 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	*/
 	refer = xmlSchemaNewQNameRef(ctxt, XML_SCHEMA_TYPE_ELEMENT,
 	    ref, refNs);
-	if (refer == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2149]) {
+	  if ((refer == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2149\n");
+	  else
+	    fprintf(stderr, "reached bug index 2149\n");
+	}
+	if ((!FIXREVERTER[2149] && (refer == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto return_null;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	particle->children = (xmlSchemaTreeItemPtr) refer;
 	particle->annot = annot;
 	/*
@@ -8618,9 +10847,24 @@ declaration_part:
 		ns = ctxt->targetNamespace;
 	}
 	decl = xmlSchemaAddElement(ctxt, name, ns, node, topLevel);
-	if (decl == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2150]) {
+	  if ((decl == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2150\n");
+	  else
+	    fprintf(stderr, "reached bug index 2150\n");
+	}
+	if ((!FIXREVERTER[2150] && (decl == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    goto return_null;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Check for illegal attributes.
 	*/
@@ -8829,10 +11073,40 @@ declaration_part:
 return_null:
     FREE_AND_NULL(des);
     if (annot != NULL) {
-	if (particle != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2151]) {
+	  if ((particle != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2151\n");
+	  else
+	    fprintf(stderr, "reached bug index 2151\n");
+	}
+	if ((!FIXREVERTER[2151] && (particle != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    particle->annot = NULL;
-	if (decl != NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2152]) {
+	  if ((decl != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2152\n");
+	  else
+	    fprintf(stderr, "reached bug index 2152\n");
+	}
+	if ((!FIXREVERTER[2152] && (decl != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    decl->annot = NULL;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlSchemaFreeAnnot(annot);
     }
     return (NULL);
@@ -8859,8 +11133,23 @@ xmlSchemaParseUnion(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     const xmlChar *cur = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2153]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2153\n");
+      else
+        fprintf(stderr, "reached bug index 2153\n");
+    }
+    if ((!FIXREVERTER[2153] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     /*
@@ -8920,11 +11209,26 @@ xmlSchemaParseUnion(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 		*/
 		link = (xmlSchemaTypeLinkPtr)
 		    xmlMalloc(sizeof(xmlSchemaTypeLink));
-		if (link == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2154]) {
+		  if ((link == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2154\n");
+		  else
+		    fprintf(stderr, "reached bug index 2154\n");
+		}
+		if ((!FIXREVERTER[2154] && (link == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaPErrMemory(ctxt, "xmlSchemaParseUnion, "
 			"allocating a type link", NULL);
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		link->type = NULL;
 		link->next = NULL;
 		if (lastLink == NULL)
@@ -8937,10 +11241,25 @@ xmlSchemaParseUnion(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 		*/
 		ref = xmlSchemaNewQNameRef(ctxt, XML_SCHEMA_TYPE_SIMPLE,
 		    localName, nsName);
-		if (ref == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2155]) {
+		  if ((ref == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2155\n");
+		  else
+		    fprintf(stderr, "reached bug index 2155\n");
+		}
+		if ((!FIXREVERTER[2155] && (ref == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    FREE_AND_NULL(tmp)
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		/*
 		* Assign the reference to the link, it will be resolved
 		* later during fixup of the union simple type.
@@ -9027,8 +11346,23 @@ xmlSchemaParseList(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2156]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2156\n");
+      else
+        fprintf(stderr, "reached bug index 2156\n");
+    }
+    if ((!FIXREVERTER[2156] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     /*
@@ -9140,8 +11474,23 @@ xmlSchemaParseSimpleType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     int hasRestriction = 0;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2157]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2157\n");
+      else
+        fprintf(stderr, "reached bug index 2157\n");
+    }
+    if ((!FIXREVERTER[2157] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (topLevel) {
 	attr = xmlSchemaGetPropNode(node, "name");
@@ -9204,8 +11553,23 @@ xmlSchemaParseSimpleType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    XML_SCHEMA_TYPE_SIMPLE,
 	    NULL, ctxt->targetNamespace, node, 0);
 #endif
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2158]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2158\n");
+	  else
+	    fprintf(stderr, "reached bug index 2158\n");
+	}
+	if ((!FIXREVERTER[2158] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	type->type = XML_SCHEMA_TYPE_SIMPLE;
 	type->contentType = XML_SCHEMA_CONTENT_SIMPLE;
 	/*
@@ -9232,8 +11596,23 @@ xmlSchemaParseSimpleType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	*/
 	type = xmlSchemaAddType(ctxt, schema, XML_SCHEMA_TYPE_SIMPLE,
 	    attrValue, ctxt->targetNamespace, node, 1);
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2159]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2159\n");
+	  else
+	    fprintf(stderr, "reached bug index 2159\n");
+	}
+	if ((!FIXREVERTER[2159] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	type->type = XML_SCHEMA_TYPE_SIMPLE;
 	type->contentType = XML_SCHEMA_CONTENT_SIMPLE;
 	type->flags |= XML_SCHEMAS_TYPE_GLOBAL;
@@ -9355,8 +11734,23 @@ xmlSchemaParseModelGroupDefRef(xmlSchemaParserCtxtPtr ctxt,
     const xmlChar *ref = NULL, *refNs = NULL;
     int min, max;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2160]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2160\n");
+      else
+        fprintf(stderr, "reached bug index 2160\n");
+    }
+    if ((!FIXREVERTER[2160] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "ref");
     if (attr == NULL) {
@@ -9393,8 +11787,23 @@ xmlSchemaParseModelGroupDefRef(xmlSchemaParserCtxtPtr ctxt,
     }
     xmlSchemaPValAttrID(ctxt, node, BAD_CAST "id");
     item = xmlSchemaAddParticle(ctxt, node, min, max);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2161]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2161\n");
+      else
+        fprintf(stderr, "reached bug index 2161\n");
+    }
+    if ((!FIXREVERTER[2161] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Create a qname-reference and set as the term; it will be substituted
     * for the model group after the reference has been resolved.
@@ -9456,8 +11865,23 @@ xmlSchemaParseModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
     xmlAttrPtr attr;
     const xmlChar *name;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2162]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2162\n");
+      else
+        fprintf(stderr, "reached bug index 2162\n");
+    }
+    if ((!FIXREVERTER[2162] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "name");
     if (attr == NULL) {
@@ -9472,8 +11896,23 @@ xmlSchemaParseModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
     }
     item = xmlSchemaAddModelGroupDefinition(ctxt, schema, name,
 	ctxt->targetNamespace, node);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2163]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2163\n");
+      else
+        fprintf(stderr, "reached bug index 2163\n");
+    }
+    if ((!FIXREVERTER[2163] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Check for illegal attributes.
     */
@@ -9537,7 +11976,22 @@ xmlSchemaCleanupDoc(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr root)
 {
     xmlNodePtr delete, cur;
 
-    if ((ctxt == NULL) || (root == NULL)) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2164]) {
+      if ((ctxt == (void *) 0 || root == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2164\n");
+      else
+        fprintf(stderr, "reached bug index 2164\n");
+    }
+    if ((!FIXREVERTER[2164] && (ctxt == (void *) 0 || root == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Remove all the blank text nodes
@@ -9581,8 +12035,23 @@ xmlSchemaCleanupDoc(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr root)
 
         do {
             cur = cur->parent;
-            if (cur == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2165]) {
+              if ((cur == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2165\n");
+              else
+                fprintf(stderr, "reached bug index 2165\n");
+            }
+            if ((!FIXREVERTER[2165] && (cur == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
             if (cur == root) {
                 cur = NULL;
                 break;
@@ -9661,10 +12130,25 @@ xmlSchemaParseSchemaElement(xmlSchemaParserCtxtPtr ctxt,
 	res = xmlSchemaPValAttrNode(ctxt, NULL, attr,
 	    xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI), NULL);
 	HFAILURE;
-	if (res != 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2166]) {
+	  if ((res != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2166\n");
+	  else
+	    fprintf(stderr, "reached bug index 2166\n");
+	}
+	if ((!FIXREVERTER[2166] && (res != 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ctxt->stop = XML_SCHEMAP_S4S_ATTR_INVALID_VALUE;
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     attr = xmlSchemaGetPropNode(node, "elementFormDefault");
     if (attr != NULL) {
@@ -9728,8 +12212,23 @@ xmlSchemaParseSchemaElement(xmlSchemaParserCtxtPtr ctxt,
     }
 
 exit:
-    if (oldErrs != ctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2167]) {
+      if ((oldErrs != ctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 2167\n");
+      else
+        fprintf(stderr, "reached bug index 2167\n");
+    }
+    if ((!FIXREVERTER[2167] && (oldErrs != ctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	res = ctxt->err;
+	#ifdef FRCOV
+	}
+	#endif
     return(res);
 exit_failure:
     return(-1);
@@ -9752,8 +12251,23 @@ xmlSchemaParseSchemaTopLevel(xmlSchemaParserCtxtPtr ctxt,
     xmlSchemaAnnotPtr annot;
     int res = 0, oldErrs, tmpOldErrs;
 
-    if ((ctxt == NULL) || (schema == NULL) || (nodes == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2168]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || nodes == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2168\n");
+      else
+        fprintf(stderr, "reached bug index 2168\n");
+    }
+    if ((!FIXREVERTER[2168] && (ctxt == (void *) 0 || schema == (void *) 0 || nodes == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     oldErrs = ctxt->nberrors;
     child = nodes;
@@ -9772,22 +12286,67 @@ xmlSchemaParseSchemaTopLevel(xmlSchemaParserCtxtPtr ctxt,
 	    res = xmlSchemaParseImport(ctxt, schema, child);
 	    HFAILURE;
 	    HSTOP(ctxt);
-	    if (tmpOldErrs != ctxt->nberrors)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2169]) {
+	      if ((tmpOldErrs != ctxt -> nberrors ) && !(0))
+	        fprintf(stderr, "triggered bug index 2169\n");
+	      else
+	        fprintf(stderr, "reached bug index 2169\n");
+	    }
+	    if ((!FIXREVERTER[2169] && (tmpOldErrs != ctxt -> nberrors ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit;
+		#ifdef FRCOV
+		}
+		#endif
 	} else if (IS_SCHEMA(child, "include")) {
 	    tmpOldErrs = ctxt->nberrors;
 	    res = xmlSchemaParseInclude(ctxt, schema, child);
 	    HFAILURE;
 	    HSTOP(ctxt);
-	    if (tmpOldErrs != ctxt->nberrors)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2170]) {
+	      if ((tmpOldErrs != ctxt -> nberrors ) && !(0))
+	        fprintf(stderr, "triggered bug index 2170\n");
+	      else
+	        fprintf(stderr, "reached bug index 2170\n");
+	    }
+	    if ((!FIXREVERTER[2170] && (tmpOldErrs != ctxt -> nberrors ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit;
+		#ifdef FRCOV
+		}
+		#endif
 	} else if (IS_SCHEMA(child, "redefine")) {
 	    tmpOldErrs = ctxt->nberrors;
 	    res = xmlSchemaParseRedefine(ctxt, schema, child);
 	    HFAILURE;
 	    HSTOP(ctxt);
-	    if (tmpOldErrs != ctxt->nberrors)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2171]) {
+	      if ((tmpOldErrs != ctxt -> nberrors ) && !(0))
+	        fprintf(stderr, "triggered bug index 2171\n");
+	      else
+	        fprintf(stderr, "reached bug index 2171\n");
+	    }
+	    if ((!FIXREVERTER[2171] && (tmpOldErrs != ctxt -> nberrors ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	child = child->next;
     }
@@ -9840,8 +12399,23 @@ xmlSchemaParseSchemaTopLevel(xmlSchemaParserCtxtPtr ctxt,
     }
 exit:
     ctxt->ctxtType = NULL;
-    if (oldErrs != ctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2172]) {
+      if ((oldErrs != ctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 2172\n");
+      else
+        fprintf(stderr, "reached bug index 2172\n");
+    }
+    if ((!FIXREVERTER[2172] && (oldErrs != ctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	res = ctxt->err;
+	#ifdef FRCOV
+	}
+	#endif
     return(res);
 exit_failure:
     return(-1);
@@ -9854,10 +12428,25 @@ xmlSchemaSchemaRelationCreate(void)
 
     ret = (xmlSchemaSchemaRelationPtr)
 	xmlMalloc(sizeof(xmlSchemaSchemaRelation));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2173]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2173\n");
+      else
+        fprintf(stderr, "reached bug index 2173\n");
+    }
+    if ((!FIXREVERTER[2173] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL, "allocating schema relation", NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaSchemaRelation));
     return(ret);
 }
@@ -9944,18 +12533,48 @@ xmlSchemaParserCtxtCreate(void)
     xmlSchemaParserCtxtPtr ret;
 
     ret = (xmlSchemaParserCtxtPtr) xmlMalloc(sizeof(xmlSchemaParserCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2177]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2177\n");
+      else
+        fprintf(stderr, "reached bug index 2177\n");
+    }
+    if ((!FIXREVERTER[2177] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(NULL, "allocating schema parser context",
                             NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaParserCtxt));
     ret->type = XML_SCHEMA_CTXT_PARSER;
     ret->attrProhibs = xmlSchemaItemListCreate();
-    if (ret->attrProhibs == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2178]) {
+      if ((ret -> attrProhibs == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2178\n");
+      else
+        fprintf(stderr, "reached bug index 2178\n");
+    }
+    if ((!FIXREVERTER[2178] && (ret -> attrProhibs == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(ret);
 }
 
@@ -9975,12 +12594,42 @@ xmlSchemaNewParserCtxtUseDict(const char *URL, xmlDictPtr dict)
     xmlSchemaParserCtxtPtr ret;
 
     ret = xmlSchemaParserCtxtCreate();
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2179]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2179\n");
+      else
+        fprintf(stderr, "reached bug index 2179\n");
+    }
+    if ((!FIXREVERTER[2179] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret->dict = dict;
     xmlDictReference(dict);
-    if (URL != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2180]) {
+      if ((URL != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2180\n");
+      else
+        fprintf(stderr, "reached bug index 2180\n");
+    }
+    if ((!FIXREVERTER[2180] && (URL != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ret->URL = xmlDictLookup(dict, (const xmlChar *) URL, -1);
+	#ifdef FRCOV
+	}
+	#endif
     return (ret);
 }
 
@@ -10135,15 +12784,60 @@ xmlSchemaParseNewDocWithContext(xmlSchemaParserCtxtPtr pctxt,
     /* Compile the schema doc. */
     node = xmlDocGetRootElement(bucket->doc);
     ret = xmlSchemaParseSchemaElement(pctxt, schema, node);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2182]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2182\n");
+      else
+        fprintf(stderr, "reached bug index 2182\n");
+    }
+    if ((!FIXREVERTER[2182] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit;
+	#ifdef FRCOV
+	}
+	#endif
     /* An empty schema; just get out. */
-    if (node->children == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2183]) {
+      if ((node -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2183\n");
+      else
+        fprintf(stderr, "reached bug index 2183\n");
+    }
+    if ((!FIXREVERTER[2183] && (node -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit;
+	#ifdef FRCOV
+	}
+	#endif
     oldErrs = pctxt->nberrors;
     ret = xmlSchemaParseSchemaTopLevel(pctxt, schema, node->children);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2184]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2184\n");
+      else
+        fprintf(stderr, "reached bug index 2184\n");
+    }
+    if ((!FIXREVERTER[2184] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * TODO: Not nice, but I'm not 100% sure we will get always an error
     * as a result of the obove functions; so better rely on pctxt->err
@@ -10170,28 +12864,88 @@ xmlSchemaParseNewDoc(xmlSchemaParserCtxtPtr pctxt,
     xmlSchemaParserCtxtPtr newpctxt;
     int res = 0;
 
-    if (bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2185]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2185\n");
+      else
+        fprintf(stderr, "reached bug index 2185\n");
+    }
+    if ((!FIXREVERTER[2185] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     if (bucket->parsed) {
 	PERROR_INT("xmlSchemaParseNewDoc",
 	    "reparsing a schema doc");
 	return(-1);
     }
-    if (bucket->doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2186]) {
+      if ((bucket -> doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2186\n");
+      else
+        fprintf(stderr, "reached bug index 2186\n");
+    }
+    if ((!FIXREVERTER[2186] && (bucket -> doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaParseNewDoc",
 	    "parsing a schema doc, but there's no doc");
 	return(-1);
     }
-    if (pctxt->constructor == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2187]) {
+      if ((pctxt -> constructor == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2187\n");
+      else
+        fprintf(stderr, "reached bug index 2187\n");
+    }
+    if ((!FIXREVERTER[2187] && (pctxt -> constructor == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaParseNewDoc",
 	    "no constructor");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /* Create and init the temporary parser context. */
     newpctxt = xmlSchemaNewParserCtxtUseDict(
 	(const char *) bucket->schemaLocation, pctxt->dict);
-    if (newpctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2188]) {
+      if ((newpctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2188\n");
+      else
+        fprintf(stderr, "reached bug index 2188\n");
+    }
+    if ((!FIXREVERTER[2188] && (newpctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     newpctxt->constructor = pctxt->constructor;
     /*
     * TODO: Can we avoid that the parser knows about the main schema?
@@ -10209,8 +12963,23 @@ xmlSchemaParseNewDoc(xmlSchemaParserCtxtPtr pctxt,
     res = xmlSchemaParseNewDocWithContext(newpctxt, schema, bucket);
 
     /* Channel back errors and cleanup the temporary parser context. */
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2189]) {
+      if ((res != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2189\n");
+      else
+        fprintf(stderr, "reached bug index 2189\n");
+    }
+    if ((!FIXREVERTER[2189] && (res != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	pctxt->err = res;
+	#ifdef FRCOV
+	}
+	#endif
     pctxt->nberrors += newpctxt->nberrors;
     pctxt->counter = newpctxt->counter;
     newpctxt->constructor = NULL;
@@ -10225,10 +12994,25 @@ xmlSchemaSchemaRelationAddChild(xmlSchemaBucketPtr bucket,
 {
     xmlSchemaSchemaRelationPtr cur = bucket->relations;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2190]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2190\n");
+      else
+        fprintf(stderr, "reached bug index 2190\n");
+    }
+    if ((!FIXREVERTER[2190] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	bucket->relations = rel;
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (cur->next != NULL)
 	cur = cur->next;
     cur->next = rel;
@@ -10340,8 +13124,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
     * Create a relation for the graph of schemas.
     */
     relation = xmlSchemaSchemaRelationCreate();
-    if (relation == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2191]) {
+      if ((relation == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2191\n");
+      else
+        fprintf(stderr, "reached bug index 2191\n");
+    }
+    if ((!FIXREVERTER[2191] && (relation == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     xmlSchemaSchemaRelationAddChild(pctxt->constructor->bucket,
 	relation);
     relation->type = type;
@@ -10351,7 +13150,19 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
     */
     if (WXS_IS_BUCKET_IMPMAIN(type)) {
 	relation->importNamespace = importNamespace;
-	if (schemaLocation == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2192]) {
+	  if ((schemaLocation == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2192\n");
+	  else
+	    fprintf(stderr, "reached bug index 2192\n");
+	}
+	if ((!FIXREVERTER[2192] && (schemaLocation == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * No location; this is just an import of the namespace.
 	    * Note that we don't assign a bucket to the relation
@@ -10359,6 +13170,9 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 	    */
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	targetNamespace = importNamespace;
     }
 
@@ -10369,8 +13183,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 	    * We included/redefined and then try to import a schema,
 	    * but the new location provided for import was different.
 	    */
-	    if (schemaLocation == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2193]) {
+	      if ((schemaLocation == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2193\n");
+	      else
+	        fprintf(stderr, "reached bug index 2193\n");
+	    }
+	    if ((!FIXREVERTER[2193] && (schemaLocation == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		schemaLocation = BAD_CAST "in_memory_buffer";
+		#ifdef FRCOV
+		}
+		#endif
 	    if (!xmlStrEqual(schemaLocation,
 		bkt->schemaLocation)) {
 		xmlSchemaCustomErr(ACTXT_CAST pctxt, err,
@@ -10386,8 +13215,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 	    * but the new location provided for the include/redefine
 	    * was different.
 	    */
-	    if (schemaLocation == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2194]) {
+	      if ((schemaLocation == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2194\n");
+	      else
+	        fprintf(stderr, "reached bug index 2194\n");
+	    }
+	    if ((!FIXREVERTER[2194] && (schemaLocation == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		schemaLocation = BAD_CAST "in_memory_buffer";
+		#ifdef FRCOV
+		}
+		#endif
 	    if (!xmlStrEqual(schemaLocation,
 		bkt->schemaLocation)) {
 		xmlSchemaCustomErr(ACTXT_CAST pctxt, err,
@@ -10441,8 +13285,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 		    * URGENT TODO: We should report a warning here.
 		    * res = XML_SCHEMAP_SRC_IMPORT;
 		    */
-		    if (schemaLocation == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2195]) {
+		      if ((schemaLocation == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2195\n");
+		      else
+		        fprintf(stderr, "reached bug index 2195\n");
+		    }
+		    if ((!FIXREVERTER[2195] && (schemaLocation == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			schemaLocation = BAD_CAST "in_memory_buffer";
+			#ifdef FRCOV
+			}
+			#endif
 
 		    xmlSchemaCustomWarning(ACTXT_CAST pctxt,
 			XML_SCHEMAP_WARN_SKIP_SCHEMA,
@@ -10530,12 +13389,42 @@ doc_load:
 	xmlParserCtxtPtr parserCtxt;
 
 	parserCtxt = xmlNewParserCtxt();
-	if (parserCtxt == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2196]) {
+	  if ((parserCtxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2196\n");
+	  else
+	    fprintf(stderr, "reached bug index 2196\n");
+	}
+	if ((!FIXREVERTER[2196] && (parserCtxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL, "xmlSchemaGetDoc, "
 		"allocating a parser context", NULL);
 	    goto exit_failure;
 	}
-	if ((pctxt->dict != NULL) && (parserCtxt->dict != NULL)) {
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2197]) {
+	  fprintf(stderr, "reached bug index 2197\n");
+	}
+	if ((FIXREVERTER[2197] && (pctxt -> dict != (void *) 0 )) || (!FIXREVERTER[2197] && (pctxt -> dict != (void *) 0 && parserCtxt -> dict != (void *) 0 ))
+	#else
+	if (pctxt -> dict != (void *) 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(parserCtxt -> dict != (void *) 0 ))
+	    fprintf(stderr, "triggered bug index 2197\n");
+	  #endif
+	
 	    /*
 	    * TODO: Do we have to burden the schema parser dict with all
 	    * the content of the schema doc?
@@ -10544,6 +13433,9 @@ doc_load:
 	    parserCtxt->dict = pctxt->dict;
 	    xmlDictReference(parserCtxt->dict);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (schemaLocation != NULL) {
 	    /* Parse from file. */
 	    doc = xmlCtxtReadFile(parserCtxt, (const char *) schemaLocation,
@@ -10553,8 +13445,23 @@ doc_load:
 	    doc = xmlCtxtReadMemory(parserCtxt, schemaBuffer, schemaBufferLen,
 		NULL, NULL, SCHEMAS_PARSE_OPTIONS);
 	    schemaLocation = BAD_CAST "in_memory_buffer";
-	    if (doc != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2198]) {
+	      if ((doc != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 2198\n");
+	      else
+	        fprintf(stderr, "reached bug index 2198\n");
+	    }
+	    if ((!FIXREVERTER[2198] && (doc != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		doc->URL = xmlStrdup(schemaLocation);
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	/*
 	* For <import>:
@@ -10610,13 +13517,28 @@ doc_load:
 
 	located = 1;
 	docElem = xmlDocGetRootElement(doc);
-	if (docElem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2199]) {
+	  if ((docElem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2199\n");
+	  else
+	    fprintf(stderr, "reached bug index 2199\n");
+	}
+	if ((!FIXREVERTER[2199] && (docElem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaCustomErr(ACTXT_CAST pctxt, XML_SCHEMAP_NOROOT,
 		invokingNode, NULL,
 		"The document '%s' has no document element",
 		schemaLocation, NULL);
 	    goto exit_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Remove all the blank text nodes.
 	*/
@@ -10644,8 +13566,23 @@ doc_load:
 	/* Only create a bucket if the schema was located. */
         bkt = xmlSchemaBucketCreate(pctxt, type,
 	    targetNamespace);
-	if (bkt == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2200]) {
+	  if ((bkt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2200\n");
+	  else
+	    fprintf(stderr, "reached bug index 2200\n");
+	}
+	if ((!FIXREVERTER[2200] && (bkt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto exit_failure;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     if (bkt != NULL) {
 	bkt->schemaLocation = schemaLocation;
@@ -10662,8 +13599,23 @@ doc_load:
 	    /*
 	    * Add it to the graph of schemas.
 	    */
-	if (relation != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2201]) {
+	  if ((relation != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2201\n");
+	  else
+	    fprintf(stderr, "reached bug index 2201\n");
+	}
+	if ((!FIXREVERTER[2201] && (relation != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    relation->bucket = bkt;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
 exit:
@@ -10678,16 +13630,46 @@ exit:
 exit_error:
     if ((doc != NULL) && (! preserveDoc)) {
 	xmlFreeDoc(doc);
-	if (bkt != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2202]) {
+	  if ((bkt != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2202\n");
+	  else
+	    fprintf(stderr, "reached bug index 2202\n");
+	}
+	if ((!FIXREVERTER[2202] && (bkt != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    bkt->doc = NULL;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     return(pctxt->err);
 
 exit_failure:
     if ((doc != NULL) && (! preserveDoc)) {
 	xmlFreeDoc(doc);
-	if (bkt != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2203]) {
+	  if ((bkt != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2203\n");
+	  else
+	    fprintf(stderr, "reached bug index 2203\n");
+	}
+	if ((!FIXREVERTER[2203] && (bkt != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    bkt->doc = NULL;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     return (-1);
 }
@@ -10715,8 +13697,23 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
     int ret = 0;
     xmlSchemaBucketPtr bucket = NULL;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2204]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2204\n");
+      else
+        fprintf(stderr, "reached bug index 2204\n");
+    }
+    if ((!FIXREVERTER[2204] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
     * Check for illegal attributes.
@@ -10806,7 +13803,19 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 	* 1.2 If the namespace [attribute] is not present, then the enclosing
 	* <schema> must have a targetNamespace [attribute].
 	*/
-	if (thisTargetNamespace == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2205]) {
+	  if ((thisTargetNamespace == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2205\n");
+	  else
+	    fprintf(stderr, "reached bug index 2205\n");
+	}
+	if ((!FIXREVERTER[2205] && (thisTargetNamespace == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPCustomErr(pctxt,
 		XML_SCHEMAP_SRC_IMPORT_1_2,
 		NULL, node,
@@ -10815,19 +13824,52 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 		NULL);
 	    return (pctxt->err);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     /*
     * Locate and acquire the schema document.
     */
-    if (schemaLocation != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2206]) {
+      if ((schemaLocation != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2206\n");
+      else
+        fprintf(stderr, "reached bug index 2206\n");
+    }
+    if ((!FIXREVERTER[2206] && (schemaLocation != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	schemaLocation = xmlSchemaBuildAbsoluteURI(pctxt->dict,
 	    schemaLocation, node);
+	    #ifdef FRCOV
+	    }
+	    #endif
     ret = xmlSchemaAddSchemaDoc(pctxt, XML_SCHEMA_SCHEMA_IMPORT,
 	schemaLocation, NULL, NULL, 0, node, thisTargetNamespace,
 	namespaceName, &bucket);
 
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2207]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2207\n");
+      else
+        fprintf(stderr, "reached bug index 2207\n");
+    }
+    if ((!FIXREVERTER[2207] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(ret);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * For <import>: "It is *not* an error for the application
@@ -10844,9 +13886,27 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 	    "Skipping the import", schemaLocation, NULL, NULL);
     }
 
-    if ((bucket != NULL) && CAN_PARSE_SCHEMA(bucket)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2208]) {
+      fprintf(stderr, "reached bug index 2208\n");
+    }
+    if ((FIXREVERTER[2208] && (bucket != (void *) 0 && bucket -> doc != (void *) 0 )) || (!FIXREVERTER[2208] && (bucket != (void *) 0 && bucket -> doc != (void *) 0 && bucket -> parsed == 0 ))
+    #else
+    if (bucket != (void *) 0 && bucket -> doc != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(bucket -> parsed == 0 ))
+        fprintf(stderr, "triggered bug index 2208\n");
+      #endif
+    
 	ret = xmlSchemaParseNewDoc(pctxt, schema, bucket);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return (ret);
 }
@@ -10860,9 +13920,23 @@ xmlSchemaParseIncludeOrRedefineAttrs(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlAttrPtr attr;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL) ||
-	(schemaLocation == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2209]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || schemaLocation == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2209\n");
+      else
+        fprintf(stderr, "reached bug index 2209\n");
+    }
+    if ((!FIXREVERTER[2209] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || schemaLocation == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     *schemaLocation = NULL;
     /*
@@ -10907,11 +13981,26 @@ xmlSchemaParseIncludeOrRedefineAttrs(xmlSchemaParserCtxtPtr pctxt,
 	    uri = xmlBuildURI(*schemaLocation, base);
 	    xmlFree(base);
 	}
-	if (uri == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2210]) {
+	  if ((uri == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2210\n");
+	  else
+	    fprintf(stderr, "reached bug index 2210\n");
+	}
+	if ((!FIXREVERTER[2210] && (uri == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    PERROR_INT("xmlSchemaParseIncludeOrRedefine",
 		"could not build an URI from the schemaLocation")
 	    goto exit_failure;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	(*schemaLocation) = (xmlChar *) xmlDictLookup(pctxt->dict, uri, -1);
 	xmlFree(uri);
     } else {
@@ -10959,8 +14048,23 @@ xmlSchemaParseIncludeOrRedefine(xmlSchemaParserCtxtPtr pctxt,
     int isChameleon = 0, wasChameleon = 0;
     xmlSchemaBucketPtr bucket = NULL;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2211]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2211\n");
+      else
+        fprintf(stderr, "reached bug index 2211\n");
+    }
+    if ((!FIXREVERTER[2211] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
     * Parse attributes. Note that the returned schemaLocation will
@@ -10968,15 +14072,45 @@ xmlSchemaParseIncludeOrRedefine(xmlSchemaParserCtxtPtr pctxt,
     */
     res = xmlSchemaParseIncludeOrRedefineAttrs(pctxt, schema,
 	node, (xmlChar **) (&schemaLocation), type);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2212]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2212\n");
+      else
+        fprintf(stderr, "reached bug index 2212\n");
+    }
+    if ((!FIXREVERTER[2212] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Load and add the schema document.
     */
     res = xmlSchemaAddSchemaDoc(pctxt, type, schemaLocation, NULL,
 	NULL, 0, node, pctxt->targetNamespace, NULL, &bucket);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2213]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2213\n");
+      else
+        fprintf(stderr, "reached bug index 2213\n");
+    }
+    if ((!FIXREVERTER[2213] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * If we get no schema bucket back, then this means that the schema
     * document could not be located or was broken XML or was not
@@ -11166,8 +14300,23 @@ xmlSchemaParseRedefine(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 #endif
     res = xmlSchemaParseIncludeOrRedefine(pctxt, schema, node,
 	XML_SCHEMA_SCHEMA_REDEFINE);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2214]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2214\n");
+      else
+        fprintf(stderr, "reached bug index 2214\n");
+    }
+    if ((!FIXREVERTER[2214] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 }
 
@@ -11179,8 +14328,23 @@ xmlSchemaParseInclude(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 
     res = xmlSchemaParseIncludeOrRedefine(pctxt, schema, node,
 	XML_SCHEMA_SCHEMA_INCLUDE);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2215]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2215\n");
+      else
+        fprintf(stderr, "reached bug index 2215\n");
+    }
+    if ((!FIXREVERTER[2215] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 }
 
@@ -11220,14 +14384,44 @@ xmlSchemaParseModelGroup(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     int min = 1, max = 1, isElemRef, hasRefs = 0;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2216]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2216\n");
+      else
+        fprintf(stderr, "reached bug index 2216\n");
+    }
+    if ((!FIXREVERTER[2216] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * Create a model group with the given compositor.
     */
     item = xmlSchemaAddModelGroup(ctxt, schema, type, node);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2217]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2217\n");
+      else
+        fprintf(stderr, "reached bug index 2217\n");
+    }
+    if ((!FIXREVERTER[2217] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (withParticle) {
 	if (type == XML_SCHEMA_TYPE_ALL) {
@@ -11244,8 +14438,23 @@ xmlSchemaParseModelGroup(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	* Create a particle
 	*/
 	particle = xmlSchemaAddParticle(ctxt, node, min, max);
-	if (particle == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2218]) {
+	  if ((particle == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2218\n");
+	  else
+	    fprintf(stderr, "reached bug index 2218\n");
+	}
+	if ((!FIXREVERTER[2218] && (particle == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	particle->children = (xmlSchemaTreeItemPtr) item;
 	/*
 	* Check for illegal attributes.
@@ -11483,8 +14692,23 @@ xmlSchemaParseRestriction(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2219]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2219\n");
+      else
+        fprintf(stderr, "reached bug index 2219\n");
+    }
+    if ((!FIXREVERTER[2219] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     type->flags |= XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION;
@@ -11650,8 +14874,23 @@ xmlSchemaParseRestriction(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    */
 	    type->contentTypeDef = (xmlSchemaTypePtr)
 		xmlSchemaParseSimpleType(ctxt, schema, child, 0);
-	    if ( type->contentTypeDef == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2220]) {
+	      if ((type -> contentTypeDef == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2220\n");
+	      else
+	        fprintf(stderr, "reached bug index 2220\n");
+	    }
+	    if ((!FIXREVERTER[2220] && (type -> contentTypeDef == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    child = child->next;
 	}
     }
@@ -11705,11 +14944,26 @@ xmlSchemaParseRestriction(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    do {
 		facetLink = (xmlSchemaFacetLinkPtr)
 		    xmlMalloc(sizeof(xmlSchemaFacetLink));
-		if (facetLink == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2221]) {
+		  if ((facetLink == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2221\n");
+		  else
+		    fprintf(stderr, "reached bug index 2221\n");
+		}
+		if ((!FIXREVERTER[2221] && (facetLink == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaPErrMemory(ctxt, "allocating a facet link", NULL);
 		    xmlFree(facetLink);
 		    return (NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		facetLink->facet = facet;
 		facetLink->next = NULL;
 		if (lastFacetLink == NULL)
@@ -11787,8 +15041,23 @@ xmlSchemaParseExtension(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2222]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2222\n");
+      else
+        fprintf(stderr, "reached bug index 2222\n");
+    }
+    if ((!FIXREVERTER[2222] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     type->flags |= XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION;
@@ -11923,9 +15192,23 @@ xmlSchemaParseSimpleContent(xmlSchemaParserCtxtPtr ctxt,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL) ||
-	(hasRestrictionOrExtension == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2223]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2223\n");
+      else
+        fprintf(stderr, "reached bug index 2223\n");
+    }
+    if ((!FIXREVERTER[2223] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     *hasRestrictionOrExtension = 0;
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
@@ -12013,9 +15296,23 @@ xmlSchemaParseComplexContent(xmlSchemaParserCtxtPtr ctxt,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL) ||
-	(hasRestrictionOrExtension == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2224]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2224\n");
+      else
+        fprintf(stderr, "reached bug index 2224\n");
+    }
+    if ((!FIXREVERTER[2224] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     *hasRestrictionOrExtension = 0;
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
@@ -12114,8 +15411,23 @@ xmlSchemaParseComplexType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     int final = 0, block = 0, hasRestrictionOrExtension = 0;
 
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2225]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2225\n");
+      else
+        fprintf(stderr, "reached bug index 2225\n");
+    }
+    if ((!FIXREVERTER[2225] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ctxtType = ctxt->ctxtType;
 
@@ -12146,8 +15458,23 @@ xmlSchemaParseComplexType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    XML_SCHEMA_TYPE_COMPLEX,
 	    NULL, ctxt->targetNamespace, node, 0);
 #endif
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2226]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2226\n");
+	  else
+	    fprintf(stderr, "reached bug index 2226\n");
+	}
+	if ((!FIXREVERTER[2226] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	name = type->name;
 	type->node = node;
 	type->type = XML_SCHEMA_TYPE_COMPLEX;
@@ -12161,8 +15488,23 @@ xmlSchemaParseComplexType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	type = xmlSchemaAddType(ctxt, schema,
 	    XML_SCHEMA_TYPE_COMPLEX,
 	    name, ctxt->targetNamespace, node, 1);
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2227]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2227\n");
+	  else
+	    fprintf(stderr, "reached bug index 2227\n");
+	}
+	if ((!FIXREVERTER[2227] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	type->node = node;
 	type->type = XML_SCHEMA_TYPE_COMPLEX;
 	type->flags |= XML_SCHEMAS_TYPE_GLOBAL;
@@ -12449,12 +15791,42 @@ xmlSchemaNewParserCtxt(const char *URL)
 {
     xmlSchemaParserCtxtPtr ret;
 
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2228]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2228\n");
+      else
+        fprintf(stderr, "reached bug index 2228\n");
+    }
+    if ((!FIXREVERTER[2228] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = xmlSchemaParserCtxtCreate();
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2229]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2229\n");
+      else
+        fprintf(stderr, "reached bug index 2229\n");
+    }
+    if ((!FIXREVERTER[2229] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ret->dict = xmlDictCreate();
     ret->URL = xmlDictLookup(ret->dict, (const xmlChar *) URL, -1);
     return (ret);
@@ -12522,8 +15894,23 @@ xmlSchemaNewDocParserCtxt(xmlDocPtr doc)
 void
 xmlSchemaFreeParserCtxt(xmlSchemaParserCtxtPtr ctxt)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2234]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2234\n");
+      else
+        fprintf(stderr, "reached bug index 2234\n");
+    }
+    if ((!FIXREVERTER[2234] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->doc != NULL && !ctxt->preserve)
         xmlFreeDoc(ctxt->doc);
     if (ctxt->vctxt != NULL) {
@@ -12566,10 +15953,37 @@ xmlSchemaBuildContentModelForSubstGroup(xmlSchemaParserCtxtPtr pctxt,
     * Wrap the substitution group with a CHOICE.
     */
     start = pctxt->state;
-    if (end == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2235]) {
+      if ((end == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2235\n");
+      else
+        fprintf(stderr, "reached bug index 2235\n");
+    }
+    if ((!FIXREVERTER[2235] && (end == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	end = xmlAutomataNewState(pctxt->am);
+	#ifdef FRCOV
+	}
+	#endif
     substGroup = xmlSchemaSubstGroupGet(pctxt, elemDecl);
-    if (substGroup == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2236]) {
+      if ((substGroup == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2236\n");
+      else
+        fprintf(stderr, "reached bug index 2236\n");
+    }
+    if ((!FIXREVERTER[2236] && (substGroup == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErr(pctxt, WXS_ITEM_NODE(particle),
 	    XML_SCHEMAP_INTERNAL,
 	    "Internal error: xmlSchemaBuildContentModelForSubstGroup, "
@@ -12577,6 +15991,9 @@ xmlSchemaBuildContentModelForSubstGroup(xmlSchemaParserCtxtPtr pctxt,
 	    "available.\n", elemDecl->name, NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (counter >= 0) {
 	/*
 	* NOTE that we put the declaration in, even if it's abstract.
@@ -12739,17 +16156,47 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
 {
     int ret = 0, tmp2;
 
-    if (particle == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2237]) {
+      if ((particle == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2237\n");
+      else
+        fprintf(stderr, "reached bug index 2237\n");
+    }
+    if ((!FIXREVERTER[2237] && (particle == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaBuildAContentModel", "particle is NULL");
 	return(1);
     }
-    if (particle->children == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2238]) {
+      if ((particle -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2238\n");
+      else
+        fprintf(stderr, "reached bug index 2238\n");
+    }
+    if ((!FIXREVERTER[2238] && (particle -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Just return in this case. A missing "term" of the particle
 	* might arise due to an invalid "term" component.
 	*/
 	return(1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     switch (particle->children->type) {
 	case XML_SCHEMA_TYPE_ANY: {
@@ -12852,7 +16299,22 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
              * If max and min occurances are default (1) then
              * simply iterate over the particles of the <sequence>.
              */
-            if ((particle->minOccurs == 1) && (particle->maxOccurs == 1)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2244]) {
+              fprintf(stderr, "reached bug index 2244\n");
+            }
+            if ((FIXREVERTER[2244] && (particle -> minOccurs == 1 )) || (!FIXREVERTER[2244] && (particle -> minOccurs == 1 && particle -> maxOccurs == 1 ))
+            #else
+            if (particle -> minOccurs == 1 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(particle -> maxOccurs == 1 ))
+                fprintf(stderr, "triggered bug index 2244\n");
+              #endif
+            
                 sub = particle->children->children;
 
                 while (sub != NULL) {
@@ -12975,6 +16437,9 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                     }
                 }
             }
+            #ifdef FRCOV
+            }
+            #endif
             break;
         }
         case XML_SCHEMA_TYPE_CHOICE:{
@@ -13046,8 +16511,23 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
             ret = 1;
 
             sub = (xmlSchemaParticlePtr) particle->children->children;
-            if (sub == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2247]) {
+              if ((sub == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2247\n");
+              else
+                fprintf(stderr, "reached bug index 2247\n");
+            }
+            if ((!FIXREVERTER[2247] && (sub == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
 
             ret = 0;
 
@@ -13059,11 +16539,26 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                 pctxt->state = tmp;
 
                 elemDecl = (xmlSchemaElementPtr) sub->children;
-                if (elemDecl == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2248]) {
+                  if ((elemDecl == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2248\n");
+                  else
+                    fprintf(stderr, "reached bug index 2248\n");
+                }
+                if ((!FIXREVERTER[2248] && (elemDecl == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     PERROR_INT("xmlSchemaBuildAContentModel",
                         "<element> particle has no term");
                     return(ret);
                 };
+                #ifdef FRCOV
+                }
+                #endif
                 /*
                 * NOTE: The {max occurs} of all the particles in the
                 * {particles} of the group must be 0 or 1; this is
@@ -13090,8 +16585,22 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                                                 elemDecl->name,
                                                 elemDecl->targetNamespace,
                                                 1, 1, elemDecl);
-                    } else if ((sub->minOccurs == 0) &&
-                        (sub->maxOccurs == 1)) {
+                    } else 
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2249]) {
+                      fprintf(stderr, "reached bug index 2249\n");
+                    }
+                    if ((FIXREVERTER[2249] && (sub -> minOccurs == 0 )) || (!FIXREVERTER[2249] && (sub -> minOccurs == 0 && sub -> maxOccurs == 1 ))
+                    #else
+                    if (sub -> minOccurs == 0 
+                    #endif
+                    ) {
+                          
+                        #ifdef FRCOV
+                          if (!(sub -> maxOccurs == 1 ))
+                            fprintf(stderr, "triggered bug index 2249\n");
+                          #endif
+                        
 
                         xmlAutomataNewCountTrans2(pctxt->am, pctxt->state,
                                                  pctxt->state,
@@ -13101,6 +16610,9 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                                                  1,
                                                  elemDecl);
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 sub = (xmlSchemaParticlePtr) sub->next;
             }
@@ -13156,11 +16668,26 @@ xmlSchemaBuildContentModel(xmlSchemaTypePtr type,
 #endif
     ctxt->am = NULL;
     ctxt->am = xmlNewAutomata();
-    if (ctxt->am == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2250]) {
+      if ((ctxt -> am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2250\n");
+      else
+        fprintf(stderr, "reached bug index 2250\n");
+    }
+    if ((!FIXREVERTER[2250] && (ctxt -> am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlGenericError(xmlGenericErrorContext,
 	    "Cannot create automata for complex type %s\n", type->name);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->state = xmlAutomataGetInitState(ctxt->am);
     /*
     * Build the automaton.
@@ -13255,8 +16782,23 @@ xmlSchemaResolveElementReferences(xmlSchemaElementPtr elemDecl,
 	    * declaration `resolved` to by the `actual value`
 	    * of the substitutionGroup [attribute], if present"
 	    */
-	    if (elemDecl->subtypes == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2251]) {
+	      if ((elemDecl -> subtypes == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 2251\n");
+	      else
+	        fprintf(stderr, "reached bug index 2251\n");
+	    }
+	    if ((!FIXREVERTER[2251] && (elemDecl -> subtypes == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		elemDecl->subtypes = substHead->subtypes;
+		#ifdef FRCOV
+		}
+		#endif
 	}
     }
     /*
@@ -13333,10 +16875,25 @@ xmlSchemaResolveUnionMemberTypes(xmlSchemaParserCtxtPtr ctxt,
     memberType = type->subtypes;
     while (memberType != NULL) {
 	link = (xmlSchemaTypeLinkPtr) xmlMalloc(sizeof(xmlSchemaTypeLink));
-	if (link == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2252]) {
+	  if ((link == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2252\n");
+	  else
+	    fprintf(stderr, "reached bug index 2252\n");
+	}
+	if ((!FIXREVERTER[2252] && (link == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(ctxt, "allocating a type link", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	link->type = memberType;
 	link->next = NULL;
 	if (lastLink == NULL)
@@ -13362,16 +16919,60 @@ xmlSchemaResolveUnionMemberTypes(xmlSchemaParserCtxtPtr ctxt,
 static int
 xmlSchemaIsDerivedFromBuiltInType(xmlSchemaTypePtr type, int valType)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2253]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2253\n");
+      else
+        fprintf(stderr, "reached bug index 2253\n");
+    }
+    if ((!FIXREVERTER[2253] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     if (WXS_IS_COMPLEX(type))
 	return (0);
     if (type->type == XML_SCHEMA_TYPE_BASIC) {
-	if (type->builtInType == valType)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2254]) {
+	  if ((type -> builtInType == valType ) && !(0))
+	    fprintf(stderr, "triggered bug index 2254\n");
+	  else
+	    fprintf(stderr, "reached bug index 2254\n");
+	}
+	if ((!FIXREVERTER[2254] && (type -> builtInType == valType ))
+	#else
+	if (0
+	#endif
+	)
 	    return(1);
-	if ((type->builtInType == XML_SCHEMAS_ANYSIMPLETYPE) ||
-	    (type->builtInType == XML_SCHEMAS_ANYTYPE))
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2255]) {
+	  if ((type -> builtInType == XML_SCHEMAS_ANYSIMPLETYPE || type -> builtInType == XML_SCHEMAS_ANYTYPE ) && !(0))
+	    fprintf(stderr, "triggered bug index 2255\n");
+	  else
+	    fprintf(stderr, "reached bug index 2255\n");
+	}
+	if ((!FIXREVERTER[2255] && (type -> builtInType == XML_SCHEMAS_ANYSIMPLETYPE || type -> builtInType == XML_SCHEMAS_ANYTYPE ))
+	#else
+	if (0
+	#endif
+	)
 	    return (0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return(xmlSchemaIsDerivedFromBuiltInType(type->subtypes, valType));
     }
     return(xmlSchemaIsDerivedFromBuiltInType(type->subtypes, valType));
@@ -13483,15 +17084,45 @@ xmlSchemaCloneWildcardNsConstraints(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaWildcardNsPtr cur, tmp, last;
 
-    if ((source == NULL) || (dest == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2256]) {
+      if ((source == (void *) 0 || dest == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2256\n");
+      else
+        fprintf(stderr, "reached bug index 2256\n");
+    }
+    if ((!FIXREVERTER[2256] && (source == (void *) 0 || dest == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     dest->any = source->any;
     cur = source->nsSet;
     last = NULL;
     while (cur != NULL) {
 	tmp = xmlSchemaNewWildcardNsConstraint(ctxt);
-	if (tmp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2257]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2257\n");
+	  else
+	    fprintf(stderr, "reached bug index 2257\n");
+	}
+	if ((!FIXREVERTER[2257] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	tmp->value = cur->value;
 	if (last == NULL)
 	    dest->nsSet = tmp;
@@ -13504,8 +17135,23 @@ xmlSchemaCloneWildcardNsConstraints(xmlSchemaParserCtxtPtr ctxt,
 	xmlSchemaFreeWildcardNsSet(dest->negNsSet);
     if (source->negNsSet != NULL) {
 	dest->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-	if (dest->negNsSet == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2258]) {
+	  if ((dest -> negNsSet == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2258\n");
+	  else
+	    fprintf(stderr, "reached bug index 2258\n");
+	}
+	if ((!FIXREVERTER[2258] && (dest -> negNsSet == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	dest->negNsSet->value = source->negNsSet->value;
     } else
 	dest->negNsSet = NULL;
@@ -13571,7 +17217,19 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
     /*
     * 2 If either O1 or O2 is any, then any must be the value
     */
-    if (completeWild->any != curWild->any) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2259]) {
+      if ((completeWild -> any != curWild -> any ) && !(0))
+        fprintf(stderr, "triggered bug index 2259\n");
+      else
+        fprintf(stderr, "reached bug index 2259\n");
+    }
+    if ((!FIXREVERTER[2259] && (completeWild -> any != curWild -> any ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (completeWild->any == 0) {
 	    completeWild->any = 1;
 	    if (completeWild->nsSet != NULL) {
@@ -13585,6 +17243,9 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 	}
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * 3 If both O1 and O2 are sets of (namespace names or `absent`),
     * then the union of those sets must be the value.
@@ -13607,8 +17268,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 	    }
 	    if (!found) {
 		tmp = xmlSchemaNewWildcardNsConstraint(ctxt);
-		if (tmp == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2260]) {
+		  if ((tmp == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2260\n");
+		  else
+		    fprintf(stderr, "reached bug index 2260\n");
+		}
+		if ((!FIXREVERTER[2260] && (tmp == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (-1);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		tmp->value = cur->value;
 		tmp->next = completeWild->nsSet;
 		completeWild->nsSet = tmp;
@@ -13685,8 +17361,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 	    }
 	    if (completeWild->negNsSet == NULL) {
 		completeWild->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-		if (completeWild->negNsSet == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2262]) {
+		  if ((completeWild -> negNsSet == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2262\n");
+		  else
+		    fprintf(stderr, "reached bug index 2262\n");
+		}
+		if ((!FIXREVERTER[2262] && (completeWild -> negNsSet == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (-1);
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	    completeWild->negNsSet->value = NULL;
 	} else if ((!nsFound) && absentFound) {
@@ -13711,8 +17402,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 		    completeWild->nsSet = NULL;
 		}
 		completeWild->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-		if (completeWild->negNsSet == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2263]) {
+		  if ((completeWild -> negNsSet == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2263\n");
+		  else
+		    fprintf(stderr, "reached bug index 2263\n");
+		}
+		if ((!FIXREVERTER[2263] && (completeWild -> negNsSet == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (-1);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		completeWild->negNsSet->value = curWild->negNsSet->value;
 	    }
 	}
@@ -13762,8 +17468,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 		completeWild->nsSet = NULL;
 	    }
 	    completeWild->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-	    if (completeWild->negNsSet == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2264]) {
+	      if ((completeWild -> negNsSet == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2264\n");
+	      else
+	        fprintf(stderr, "reached bug index 2264\n");
+	    }
+	    if ((!FIXREVERTER[2264] && (completeWild -> negNsSet == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (-1);
+		#ifdef FRCOV
+		}
+		#endif
 	    completeWild->negNsSet->value = NULL;
 	}
 	return (0);
@@ -13858,7 +17579,19 @@ xmlSchemaIntersectWildcards(xmlSchemaParserCtxtPtr ctxt,
 	prev = NULL;
 	cur = completeWild->nsSet;
 	while (cur != NULL) {
-	    if (cur->value == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2265]) {
+	      if ((cur -> value == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2265\n");
+	      else
+	        fprintf(stderr, "reached bug index 2265\n");
+	    }
+	    if ((!FIXREVERTER[2265] && (cur -> value == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if (prev == NULL)
 		    completeWild->nsSet = cur->next;
 		else
@@ -13866,6 +17599,9 @@ xmlSchemaIntersectWildcards(xmlSchemaParserCtxtPtr ctxt,
 		xmlFree(cur);
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    prev = cur;
 	    cur = cur->next;
 	}
@@ -14068,8 +17804,23 @@ static int
 xmlSchemaCheckCVCWildcardNamespace(xmlSchemaWildcardPtr wild,
 				   const xmlChar* ns)
 {
-    if (wild == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2266]) {
+      if ((wild == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2266\n");
+      else
+        fprintf(stderr, "reached bug index 2266\n");
+    }
+    if ((!FIXREVERTER[2266] && (wild == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (wild->any)
 	return(0);
@@ -14125,8 +17876,23 @@ xmlSchemaCheckDerivationOKRestriction2to4(xmlSchemaParserCtxtPtr pctxt,
 	for (i = 0; i < uses->nbItems; i++) {
 	    cur = uses->items[i];
 	    found = 0;
-	    if (baseUses == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2267]) {
+	      if ((baseUses == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2267\n");
+	      else
+	        fprintf(stderr, "reached bug index 2267\n");
+	    }
+	    if ((!FIXREVERTER[2267] && (baseUses == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto not_found;
+		#ifdef FRCOV
+		}
+		#endif
 	    for (j = 0; j < baseUses->nbItems; j++) {
 		bcur = baseUses->items[j];
 		if ((WXS_ATTRUSE_DECL_NAME(cur) ==
@@ -14207,8 +17973,22 @@ xmlSchemaCheckDerivationOKRestriction2to4(xmlSchemaParserCtxtPtr pctxt,
 			* 2.1.3.1 B's `effective value constraint` is
 			* `absent` or default.
 			*/
-			if ((bEffValue != NULL) &&
-			    (effFixed == 1)) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2268]) {
+			  fprintf(stderr, "reached bug index 2268\n");
+			}
+			if ((FIXREVERTER[2268] && (bEffValue != (void *) 0 )) || (!FIXREVERTER[2268] && (bEffValue != (void *) 0 && effFixed == 1 ))
+			#else
+			if (bEffValue != (void *) 0 
+			#endif
+			) {
+			      
+			    #ifdef FRCOV
+			      if (!(effFixed == 1 ))
+			        fprintf(stderr, "triggered bug index 2268\n");
+			      #endif
+			    
 			    const xmlChar *rEffValue = NULL;
 
 			    xmlSchemaGetEffectiveValueConstraint(bcur,
@@ -14239,6 +18019,9 @@ xmlSchemaCheckDerivationOKRestriction2to4(xmlSchemaParserCtxtPtr pctxt,
 				/* err = pctxt->err; */
 			    }
 			}
+			#ifdef FRCOV
+			}
+			#endif
 		    }
 		    break;
 		}
@@ -14283,8 +18066,23 @@ not_found:
     if (baseUses != NULL) {
 	for (j = 0; j < baseUses->nbItems; j++) {
 	    bcur = baseUses->items[j];
-	    if (bcur->occurs != XML_SCHEMAS_ATTR_USE_REQUIRED)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2269]) {
+	      if ((bcur -> occurs != 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2269\n");
+	      else
+	        fprintf(stderr, "reached bug index 2269\n");
+	    }
+	    if ((!FIXREVERTER[2269] && (bcur -> occurs != 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    found = 0;
 	    if (uses != NULL) {
 		for (i = 0; i < uses->nbItems; i++) {
@@ -14417,11 +18215,26 @@ xmlSchemaFixupTypeAttributeUses(xmlSchemaParserCtxtPtr pctxt,
     xmlSchemaAttributeUsePtr use;
     xmlSchemaItemListPtr uses, baseUses, prohibs = NULL;
 
-    if (type->baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2270]) {
+      if ((type -> baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2270\n");
+      else
+        fprintf(stderr, "reached bug index 2270\n");
+    }
+    if ((!FIXREVERTER[2270] && (type -> baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaFixupTypeAttributeUses",
 	    "no base type");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     baseType = type->baseType;
     if (WXS_IS_TYPE_NOT_FIXED(baseType))
 	if (xmlSchemaTypeFixup(baseType, ACTXT_CAST pctxt) == -1)
@@ -14509,8 +18322,23 @@ xmlSchemaFixupTypeAttributeUses(xmlSchemaParserCtxtPtr pctxt,
 		}
 		if (uses == NULL) {
 		    type->attrUses = xmlSchemaItemListCreate();
-		    if (type->attrUses == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2271]) {
+		      if ((type -> attrUses == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2271\n");
+		      else
+		        fprintf(stderr, "reached bug index 2271\n");
+		    }
+		    if ((!FIXREVERTER[2271] && (type -> attrUses == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    uses = type->attrUses;
 		}
 		xmlSchemaItemListAddSize(uses, 2, use);
@@ -14522,8 +18350,23 @@ inherit_next: {}
 		use = baseUses->items[i];
 		if (uses == NULL) {
 		    type->attrUses = xmlSchemaItemListCreate();
-		    if (type->attrUses == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2272]) {
+		      if ((type -> attrUses == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2272\n");
+		      else
+		        fprintf(stderr, "reached bug index 2272\n");
+		    }
+		    if ((!FIXREVERTER[2272] && (type -> attrUses == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    uses = type->attrUses;
 		}
 		xmlSchemaItemListAddSize(uses, baseUses->nbItems, use);
@@ -14610,8 +18453,23 @@ exit_failure:
 static int
 xmlSchemaTypeFinalContains(xmlSchemaTypePtr type, int final)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2273]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2273\n");
+      else
+        fprintf(stderr, "reached bug index 2273\n");
+    }
+    if ((!FIXREVERTER[2273] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     if (type->flags & final)
 	return (1);
     else
@@ -14649,16 +18507,45 @@ xmlSchemaGetUnionSimpleTypeMemberTypes(xmlSchemaTypePtr type)
 static int
 xmlSchemaGetParticleTotalRangeMin(xmlSchemaParticlePtr particle)
 {
-    if ((particle->children == NULL) ||
-	(particle->minOccurs == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2274]) {
+      if ((particle -> children == (void *) 0 || particle -> minOccurs == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2274\n");
+      else
+        fprintf(stderr, "reached bug index 2274\n");
+    }
+    if ((!FIXREVERTER[2274] && (particle -> children == (void *) 0 || particle -> minOccurs == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     if (particle->children->type == XML_SCHEMA_TYPE_CHOICE) {
 	int min = -1, cur;
 	xmlSchemaParticlePtr part =
 	    (xmlSchemaParticlePtr) particle->children->children;
 
-	if (part == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2275]) {
+	  if ((part == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2275\n");
+	  else
+	    fprintf(stderr, "reached bug index 2275\n");
+	}
+	if ((!FIXREVERTER[2275] && (part == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	while (part != NULL) {
 	    if ((part->children->type == XML_SCHEMA_TYPE_ELEMENT) ||
 		(part->children->type == XML_SCHEMA_TYPE_ANY))
@@ -14678,8 +18565,23 @@ xmlSchemaGetParticleTotalRangeMin(xmlSchemaParticlePtr particle)
 	xmlSchemaParticlePtr part =
 	    (xmlSchemaParticlePtr) particle->children->children;
 
-	if (part == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2277]) {
+	  if ((part == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2277\n");
+	  else
+	    fprintf(stderr, "reached bug index 2277\n");
+	}
+	if ((!FIXREVERTER[2277] && (part == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	do {
 	    if ((part->children->type == XML_SCHEMA_TYPE_ELEMENT) ||
 		(part->children->type == XML_SCHEMA_TYPE_ANY))
@@ -14769,9 +18671,23 @@ xmlSchemaIsParticleEmptiable(xmlSchemaParticlePtr particle)
     /*
     * SPEC (1) "Its {min occurs} is 0."
     */
-    if ((particle == NULL) || (particle->minOccurs == 0) ||
-	(particle->children == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2278]) {
+      if ((particle == (void *) 0 || particle -> minOccurs == 0 || particle -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2278\n");
+      else
+        fprintf(stderr, "reached bug index 2278\n");
+    }
+    if ((!FIXREVERTER[2278] && (particle == (void *) 0 || particle -> minOccurs == 0 || particle -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (1);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * SPEC (2) "Its {term} is a group and the minimum part of the
     * effective total range of that group, [...] is 0."
@@ -15022,8 +18938,23 @@ static void
 xmlSchemaResolveTypeReferences(xmlSchemaTypePtr typeDef,
 			 xmlSchemaParserCtxtPtr ctxt)
 {
-    if (typeDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2280]) {
+      if ((typeDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2280\n");
+      else
+        fprintf(stderr, "reached bug index 2280\n");
+    }
+    if ((!FIXREVERTER[2280] && (typeDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Resolve the base type.
@@ -15031,7 +18962,19 @@ xmlSchemaResolveTypeReferences(xmlSchemaTypePtr typeDef,
     if (typeDef->baseType == NULL) {
 	typeDef->baseType = xmlSchemaGetType(ctxt->schema,
 	    typeDef->base, typeDef->baseNs);
-	if (typeDef->baseType == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2281]) {
+	  if ((typeDef -> baseType == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2281\n");
+	  else
+	    fprintf(stderr, "reached bug index 2281\n");
+	}
+	if ((!FIXREVERTER[2281] && (typeDef -> baseType == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPResCompAttrErr(ctxt,
 		XML_SCHEMAP_SRC_RESOLVE,
 		WXS_BASIC_CAST typeDef, typeDef->node,
@@ -15039,6 +18982,9 @@ xmlSchemaResolveTypeReferences(xmlSchemaTypePtr typeDef,
 		XML_SCHEMA_TYPE_SIMPLE, NULL);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     if (WXS_IS_SIMPLE(typeDef)) {
 	if (WXS_IS_UNION(typeDef)) {
@@ -15165,7 +19111,19 @@ xmlSchemaCheckSTPropsCorrect(xmlSchemaParserCtxtPtr ctxt,
     * then the Simple Type Definition component from which it is `derived`,
     * otherwise the Simple Type Definition for anySimpleType ($4.1.6).
     */
-    if (baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2282]) {
+      if ((baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2282\n");
+      else
+        fprintf(stderr, "reached bug index 2282\n");
+    }
+    if ((!FIXREVERTER[2282] && (baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* TODO: Think about: "modulo the impact of Missing
 	* Sub-components ($5.3)."
@@ -15177,6 +19135,9 @@ xmlSchemaCheckSTPropsCorrect(xmlSchemaParserCtxtPtr ctxt,
 	return (XML_SCHEMAP_ST_PROPS_CORRECT_1);
 
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (! WXS_IS_SIMPLE(baseType)) {
 	xmlSchemaPCustomErr(ctxt,
 	    XML_SCHEMAP_ST_PROPS_CORRECT_1,
@@ -15304,11 +19265,26 @@ xmlSchemaCheckCOSSTRestricts(xmlSchemaParserCtxtPtr pctxt,
 	    int ok = 1;
 
 	    primitive = xmlSchemaGetPrimitiveType(type);
-	    if (primitive == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2283]) {
+	      if ((primitive == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2283\n");
+	      else
+	        fprintf(stderr, "reached bug index 2283\n");
+	    }
+	    if ((!FIXREVERTER[2283] && (primitive == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		PERROR_INT("xmlSchemaCheckCOSSTRestricts",
 		    "failed to get primitive type");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    facet = type->facets;
 	    do {
 		if (xmlSchemaIsBuiltInTypeFacet(primitive, facet->type) == 0) {
@@ -15666,8 +19642,23 @@ xmlSchemaCheckCOSSTRestricts(xmlSchemaParserCtxtPtr pctxt,
 			    return (XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3);
 			}
 			member = member->next;
-                        if (baseMember != NULL)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[2286]) {
+                          if ((baseMember != (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 2286\n");
+                          else
+                            fprintf(stderr, "reached bug index 2286\n");
+                        }
+                        if ((!FIXREVERTER[2286] && (baseMember != (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             baseMember = baseMember->next;
+                            #ifdef FRCOV
+                            }
+                            #endif
 		    }
 		}
 	    }
@@ -15758,7 +19749,19 @@ xmlSchemaCreateVCtxtOnPCtxt(xmlSchemaParserCtxtPtr ctxt)
 {
    if (ctxt->vctxt == NULL) {
 	ctxt->vctxt = xmlSchemaNewValidCtxt(NULL);
-	if (ctxt->vctxt == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2288]) {
+	  if ((ctxt -> vctxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2288\n");
+	  else
+	    fprintf(stderr, "reached bug index 2288\n");
+	}
+	if ((!FIXREVERTER[2288] && (ctxt -> vctxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErr(ctxt, NULL,
 		XML_SCHEMAP_INTERNAL,
 		"Internal error: xmlSchemaCreateVCtxtOnPCtxt, "
@@ -15766,6 +19769,9 @@ xmlSchemaCreateVCtxtOnPCtxt(xmlSchemaParserCtxtPtr ctxt)
 		NULL, NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/* TODO: Pass user data. */
 	xmlSchemaSetValidErrors(ctxt->vctxt,
 	    ctxt->error, ctxt->warning, ctxt->errCtxt);
@@ -16275,7 +20281,19 @@ xmlSchemaCheckCOSCTExtends(xmlSchemaParserCtxtPtr ctxt,
 	    /*
 	    * SPEC (1.4.3) "All of the following must be true:"
 	    */
-	    if (type->subtypes == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2290]) {
+	      if ((type -> subtypes == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2290\n");
+	      else
+	        fprintf(stderr, "reached bug index 2290\n");
+	    }
+	    if ((!FIXREVERTER[2290] && (type -> subtypes == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/*
 		* SPEC 1.4.3.1 The {content type} of the complex type
 		* definition itself must specify a particle.
@@ -16286,6 +20304,9 @@ xmlSchemaCheckCOSCTExtends(xmlSchemaParserCtxtPtr ctxt,
 		    "The content type must specify a particle", NULL);
 		return (XML_SCHEMAP_COS_CT_EXTENDS_1_1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * SPEC (1.4.3.2) "One of the following must be true:"
 	    */
@@ -16669,7 +20690,19 @@ xmlSchemaCheckSRCCT(xmlSchemaParserCtxtPtr ctxt,
 		* simple type definition;
 		* PASS
 		*/
-		if (base->contentTypeDef == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2292]) {
+		  if ((base -> contentTypeDef == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2292\n");
+		  else
+		    fprintf(stderr, "reached bug index 2292\n");
+		}
+		if ((!FIXREVERTER[2292] && (base -> contentTypeDef == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaPCustomErr(ctxt, XML_SCHEMAP_INTERNAL,
 			WXS_BASIC_CAST type, NULL,
 			"Internal error: xmlSchemaCheckSRCCT, "
@@ -16677,6 +20710,9 @@ xmlSchemaCheckSRCCT(xmlSchemaParserCtxtPtr ctxt,
 			type->name);
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    } else if ((base->contentType == XML_SCHEMA_CONTENT_MIXED) &&
 		(WXS_IS_RESTRICTION(type))) {
 
@@ -17185,8 +21221,23 @@ xmlSchemaDeriveFacetErr(xmlSchemaParserCtxtPtr pctxt,
     msg = xmlStrdup(BAD_CAST "'");
     msg = xmlStrcat(msg, xmlSchemaFacetTypeToString(facet1->type));
     msg = xmlStrcat(msg, BAD_CAST "' has to be");
-    if (lessGreater == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2293]) {
+      if ((lessGreater == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2293\n");
+      else
+        fprintf(stderr, "reached bug index 2293\n");
+    }
+    if ((!FIXREVERTER[2293] && (lessGreater == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	msg = xmlStrcat(msg, BAD_CAST " equal to");
+	#ifdef FRCOV
+	}
+	#endif
     if (lessGreater == 1)
 	msg = xmlStrcat(msg, BAD_CAST " greater than");
     else
@@ -17732,11 +21783,26 @@ xmlSchemaDeriveAndValidateFacets(xmlSchemaParserCtxtPtr pctxt,
 	if (link == NULL) {
 	    link = (xmlSchemaFacetLinkPtr)
 		xmlMalloc(sizeof(xmlSchemaFacetLink));
-	    if (link == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2294]) {
+	      if ((link == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2294\n");
+	      else
+	        fprintf(stderr, "reached bug index 2294\n");
+	    }
+	    if ((!FIXREVERTER[2294] && (link == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaPErrMemory(pctxt,
 		    "deriving facets, creating a facet link", NULL);
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    link->facet = cur->facet;
 	    link->next = NULL;
 	    if (last == NULL)
@@ -17786,11 +21852,26 @@ xmlSchemaFinishMemberTypeDefinitionsProperty(xmlSchemaParserCtxtPtr pctxt,
 		    while (subLink != NULL) {
 			newLink = (xmlSchemaTypeLinkPtr)
 			    xmlMalloc(sizeof(xmlSchemaTypeLink));
-			if (newLink == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2295]) {
+			  if ((newLink == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 2295\n");
+			  else
+			    fprintf(stderr, "reached bug index 2295\n");
+			}
+			if ((!FIXREVERTER[2295] && (newLink == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    xmlSchemaPErrMemory(pctxt, "allocating a type link",
 				NULL);
 			    return (-1);
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			newLink->type = subLink->type;
 			prevLink->next = newLink;
 			prevLink = newLink;
@@ -17903,9 +21984,22 @@ xmlSchemaTypeFixupWhitespace(xmlSchemaTypePtr type)
     {
 	xmlSchemaTypePtr anc;
 
-	for (anc = type->baseType; anc != NULL &&
-		anc->builtInType != XML_SCHEMAS_ANYTYPE;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2297])
+	  fprintf(stderr, "reached bug index 2297\n");
+	for (anc = type->baseType; (FIXREVERTER[2297] && (anc != (void *) 0 )) || (!FIXREVERTER[2297] && (anc != (void *) 0 && anc -> builtInType != XML_SCHEMAS_ANYTYPE ))
+	#else
+	for (anc = type->baseType; anc != (void *) 0 
+	#endif
+	;
 		anc = anc->baseType) {
+		  
+		#ifdef FRCOV
+		  if (!(anc -> builtInType != XML_SCHEMAS_ANYTYPE ))
+		    fprintf(stderr, "triggered bug index 2297\n");
+		  #endif
+		
 
 	    if (anc->type == XML_SCHEMA_TYPE_BASIC) {
 		if (anc->builtInType == XML_SCHEMAS_NORMSTRING) {
@@ -17920,6 +22014,9 @@ xmlSchemaTypeFixupWhitespace(xmlSchemaTypePtr type)
 		break;
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return (0);
 }
@@ -17938,7 +22035,19 @@ xmlSchemaFixupSimpleTypeStageOne(xmlSchemaParserCtxtPtr pctxt,
 	/*
 	* Corresponds to <simpleType><list>...
 	*/
-	if (type->subtypes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2298]) {
+	  if ((type -> subtypes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2298\n");
+	  else
+	    fprintf(stderr, "reached bug index 2298\n");
+	}
+	if ((!FIXREVERTER[2298] && (type -> subtypes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * This one is really needed, so get out.
 	    */
@@ -17946,11 +22055,26 @@ xmlSchemaFixupSimpleTypeStageOne(xmlSchemaParserCtxtPtr pctxt,
 		"list type has no item-type assigned");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (WXS_IS_UNION(type)) {
 	/*
 	* Corresponds to <simpleType><union>...
 	*/
-	if (type->memberTypes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2299]) {
+	  if ((type -> memberTypes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2299\n");
+	  else
+	    fprintf(stderr, "reached bug index 2299\n");
+	}
+	if ((!FIXREVERTER[2299] && (type -> memberTypes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * This one is really needed, so get out.
 	    */
@@ -17958,15 +22082,33 @@ xmlSchemaFixupSimpleTypeStageOne(xmlSchemaParserCtxtPtr pctxt,
 		"union type has no member-types assigned");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
 	/*
 	* Corresponds to <simpleType><restriction>...
 	*/
-	if (type->baseType == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2300]) {
+	  if ((type -> baseType == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2300\n");
+	  else
+	    fprintf(stderr, "reached bug index 2300\n");
+	}
+	if ((!FIXREVERTER[2300] && (type -> baseType == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    PERROR_INT("xmlSchemaFixupSimpleTypeStageOne",
 		"type has no base-type assigned");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (WXS_IS_TYPE_NOT_FIXED_1(type->baseType))
 	    if (xmlSchemaFixupSimpleTypeStageOne(pctxt, type->baseType) == -1)
 		return(-1);
@@ -18066,11 +22208,26 @@ xmlSchemaFixupSimpleTypeStageTwo(xmlSchemaParserCtxtPtr pctxt,
     type->flags |= XML_SCHEMAS_TYPE_INTERNAL_RESOLVED;
     type->contentType = XML_SCHEMA_CONTENT_SIMPLE;
 
-    if (type->baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2301]) {
+      if ((type -> baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2301\n");
+      else
+        fprintf(stderr, "reached bug index 2301\n");
+    }
+    if ((!FIXREVERTER[2301] && (type -> baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaFixupSimpleTypeStageTwo",
 	    "missing baseType");
 	goto exit_failure;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (WXS_IS_TYPE_NOT_FIXED(type->baseType))
 	xmlSchemaTypeFixup(type->baseType, ACTXT_CAST pctxt);
     /*
@@ -18133,8 +22290,23 @@ exit_error:
 #ifdef DEBUG_TYPE
     xmlSchemaDebugFixedType(pctxt, type);
 #endif
-    if (olderrs != pctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2302]) {
+      if ((olderrs != pctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 2302\n");
+      else
+        fprintf(stderr, "reached bug index 2302\n");
+    }
+    if ((!FIXREVERTER[2302] && (olderrs != pctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	return(pctxt->err);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 
 exit_failure:
@@ -18154,11 +22326,26 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
     if (! WXS_IS_TYPE_NOT_FIXED(type))
 	return(0);
     type->flags |= XML_SCHEMAS_TYPE_INTERNAL_RESOLVED;
-    if (baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2303]) {
+      if ((baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2303\n");
+      else
+        fprintf(stderr, "reached bug index 2303\n");
+    }
+    if ((!FIXREVERTER[2303] && (baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaFixupComplexType",
 	    "missing baseType");
 	goto exit_failure;
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Fixup the base type.
     */
@@ -18233,8 +22420,23 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		XML_SCHEMA_TYPE_SIMPLE, NULL, type->targetNamespace,
 		type->node, 0);
 #endif
-	    if (content == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2304]) {
+	      if ((content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2304\n");
+	      else
+	        fprintf(stderr, "reached bug index 2304\n");
+	    }
+	    if ((!FIXREVERTER[2304] && (content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit_failure;
+		#ifdef FRCOV
+		}
+		#endif
 	    /*
 	    * We will use the same node as for the <complexType>
 	    * to have it somehow anchored in the schema doc.
@@ -18290,7 +22492,19 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 	    * <simpleType> content, "...then the {content type} of that
 	    * complex type definition"
 	    */
-	    if (baseType->contentTypeDef == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2305]) {
+	      if ((baseType -> contentTypeDef == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2305\n");
+	      else
+	        fprintf(stderr, "reached bug index 2305\n");
+	    }
+	    if ((!FIXREVERTER[2305] && (baseType -> contentTypeDef == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/*
 		* TODO: Check if this ever happens. xmlSchemaCheckSRCCT
 		* should have catched this already.
@@ -18304,6 +22518,9 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		    type->name);
 		goto exit_failure;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    type->contentTypeDef = baseType->contentTypeDef;
 	} else if ((WXS_IS_SIMPLE(baseType)) && WXS_IS_EXTENSION(type)) {
 	    /*
@@ -18361,16 +22578,46 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		    */
 		    particle = xmlSchemaAddParticle(pctxt,
 			type->node, 1, 1);
-		    if (particle == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2306]) {
+		      if ((particle == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2306\n");
+		      else
+		        fprintf(stderr, "reached bug index 2306\n");
+		    }
+		    if ((!FIXREVERTER[2306] && (particle == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * Create the model group.
 		    */ /* URGENT TODO: avoid adding to pending items. */
 		    particle->children = (xmlSchemaTreeItemPtr)
 			xmlSchemaAddModelGroup(pctxt, pctxt->schema,
 			XML_SCHEMA_TYPE_SEQUENCE, type->node);
-		    if (particle->children == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2307]) {
+		      if ((particle -> children == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2307\n");
+		      else
+		        fprintf(stderr, "reached bug index 2307\n");
+		    }
+		    if ((!FIXREVERTER[2307] && (particle -> children == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 
 		    type->subtypes = (xmlSchemaTypePtr) particle;
 		}
@@ -18486,16 +22733,46 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		    */
 		    particle = xmlSchemaAddParticle(pctxt,
 			type->node, 1, 1);
-		    if (particle == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2308]) {
+		      if ((particle == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2308\n");
+		      else
+		        fprintf(stderr, "reached bug index 2308\n");
+		    }
+		    if ((!FIXREVERTER[2308] && (particle == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * Create the "sequence" model group.
 		    */
 		    particle->children = (xmlSchemaTreeItemPtr)
 			xmlSchemaAddModelGroup(pctxt, pctxt->schema,
 			XML_SCHEMA_TYPE_SEQUENCE, type->node);
-		    if (particle->children == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2309]) {
+		      if ((particle -> children == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2309\n");
+		      else
+		        fprintf(stderr, "reached bug index 2309\n");
+		    }
+		    if ((!FIXREVERTER[2309] && (particle -> children == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    WXS_TYPE_CONTENTTYPE(type) = (xmlSchemaTypePtr) particle;
 		    /*
 		    * SPEC "the particle of the {content type} of
@@ -18598,13 +22875,43 @@ static int
 xmlSchemaTypeFixup(xmlSchemaTypePtr type,
                    xmlSchemaAbstractCtxtPtr actxt)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2310]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2310\n");
+      else
+        fprintf(stderr, "reached bug index 2310\n");
+    }
+    if ((!FIXREVERTER[2310] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
-    if (actxt->type != XML_SCHEMA_CTXT_PARSER) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2311]) {
+      if ((actxt -> type != 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 2311\n");
+      else
+        fprintf(stderr, "reached bug index 2311\n");
+    }
+    if ((!FIXREVERTER[2311] && (actxt -> type != 1 ))
+    #else
+    if (0
+    #endif
+    ) {
 	AERROR_INT("xmlSchemaTypeFixup",
 	    "this function needs a parser context");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (! WXS_IS_TYPE_NOT_FIXED(type))
 	return(0);
     if (type->type == XML_SCHEMA_TYPE_COMPLEX)
@@ -18634,8 +22941,23 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 {
     int ret = 0, ctxtGiven;
 
-    if ((facet == NULL) || (typeDecl == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2312]) {
+      if ((facet == (void *) 0 || typeDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2312\n");
+      else
+        fprintf(stderr, "reached bug index 2312\n");
+    }
+    if ((!FIXREVERTER[2312] && (facet == (void *) 0 || typeDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * TODO: will the parser context be given if used from
     * the relaxNG module?
@@ -18677,11 +22999,26 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		*/
 		if (typeDecl->type != XML_SCHEMA_TYPE_BASIC) {
 		    base = typeDecl->baseType;
-		    if (base == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2313]) {
+		      if ((base == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2313\n");
+		      else
+		        fprintf(stderr, "reached bug index 2313\n");
+		    }
+		    if ((!FIXREVERTER[2313] && (base == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			PERROR_INT("xmlSchemaCheckFacet",
 			    "a type user derived type has no base type");
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		} else
 		    base = typeDecl;
 
@@ -18690,8 +23027,23 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    * A context is needed if called from RelaxNG.
 		    */
 		    pctxt = xmlSchemaNewParserCtxt("*");
-		    if (pctxt == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2314]) {
+		      if ((pctxt == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2314\n");
+		      else
+		        fprintf(stderr, "reached bug index 2314\n");
+		    }
+		    if ((!FIXREVERTER[2314] && (pctxt == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		}
 		/*
 		* NOTE: This call does not check the content nodes,
@@ -18704,7 +23056,19 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    ACTXT_CAST pctxt, facet->node, base,
 		    facet->value, &(facet->val), 1, 1, 0);
                 if (ret != 0) {
-		    if (ret < 0) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2315]) {
+		      if ((ret < 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2315\n");
+		      else
+		        fprintf(stderr, "reached bug index 2315\n");
+		    }
+		    if ((!FIXREVERTER[2315] && (ret < 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			/* No error message for RelaxNG. */
 			if (ctxtGiven) {
 			    xmlSchemaCustomErr(ACTXT_CAST pctxt,
@@ -18716,6 +23080,9 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 			}
 			goto internal_error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    ret = XML_SCHEMAP_INVALID_FACET_VALUE;
 		    /* No error message for RelaxNG. */
 		    if (ctxtGiven) {
@@ -18770,7 +23137,19 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    facet->value, &(facet->val));
 	    }
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2316]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2316\n");
+		  else
+		    fprintf(stderr, "reached bug index 2316\n");
+		}
+		if ((!FIXREVERTER[2316] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    /* No error message for RelaxNG. */
 		    if (ctxtGiven) {
 			PERROR_INT("xmlSchemaCheckFacet",
@@ -18778,6 +23157,9 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    }
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAP_INVALID_FACET_VALUE;
 		/* No error message for RelaxNG. */
 		if (ctxtGiven) {
@@ -18863,8 +23245,23 @@ xmlSchemaCheckFacetValues(xmlSchemaTypePtr typeDecl,
 	}
 	pctxt->vctxt->schema = NULL;
     }
-    if (olderrs != pctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2317]) {
+      if ((olderrs != pctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 2317\n");
+      else
+        fprintf(stderr, "reached bug index 2317\n");
+    }
+    if ((!FIXREVERTER[2317] && (olderrs != pctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	return(pctxt->err);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 exit_failure:
     return(-1);
@@ -18892,8 +23289,23 @@ xmlSchemaGetCircModelGrDefRef(xmlSchemaModelGroupDefPtr groupDef,
 
     for (; particle != NULL; particle = particle->next) {
 	term = particle->children;
-	if (term == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2318]) {
+	  if ((term == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2318\n");
+	  else
+	    fprintf(stderr, "reached bug index 2318\n");
+	}
+	if ((!FIXREVERTER[2318] && (term == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	switch (term->type) {
 	    case XML_SCHEMA_TYPE_GROUP:
 		gdef = (xmlSchemaModelGroupDefPtr) term;
@@ -19174,11 +23586,26 @@ xmlSchemaExpandAttributeGroupRefs(xmlSchemaParserCtxtPtr pctxt,
 	use = list->items[i];
 
 	if (use->type == XML_SCHEMA_EXTRA_ATTR_USE_PROHIB) {
-	    if (prohibs == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2319]) {
+	      if ((prohibs == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2319\n");
+	      else
+	        fprintf(stderr, "reached bug index 2319\n");
+	    }
+	    if ((!FIXREVERTER[2319] && (prohibs == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		PERROR_INT("xmlSchemaExpandAttributeGroupRefs",
 		    "unexpected attr prohibition found");
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Remove from attribute uses.
 	    */
@@ -19232,8 +23659,23 @@ xmlSchemaExpandAttributeGroupRefs(xmlSchemaParserCtxtPtr pctxt,
 			tmpWild =  xmlSchemaAddWildcard(pctxt, pctxt->schema,
 			    XML_SCHEMA_TYPE_ANY_ATTRIBUTE,
 			    WXS_ITEM_NODE(item));
-			if (tmpWild == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2320]) {
+			  if ((tmpWild == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 2320\n");
+			  else
+			    fprintf(stderr, "reached bug index 2320\n");
+			}
+			if ((!FIXREVERTER[2320] && (tmpWild == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    return(-1);
+			    #ifdef FRCOV
+			    }
+			    #endif
 			if (xmlSchemaCloneWildcardNsConstraints(pctxt,
 			    tmpWild, *completeWild) == -1)
 			    return (-1);
@@ -19252,12 +23694,27 @@ xmlSchemaExpandAttributeGroupRefs(xmlSchemaParserCtxtPtr pctxt,
 	    * contain any attribute uses.
 	    */
 	    sublist = ((xmlSchemaItemListPtr) gr->attrUses);
-	    if ((sublist == NULL) || sublist->nbItems == 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2321]) {
+	      if ((sublist == (void *) 0 || sublist -> nbItems == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2321\n");
+	      else
+	        fprintf(stderr, "reached bug index 2321\n");
+	    }
+	    if ((!FIXREVERTER[2321] && (sublist == (void *) 0 || sublist -> nbItems == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if (xmlSchemaItemListRemove(list, i) == -1)
 		    return(-1);
 		i--;
 		continue;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Add the attribute uses.
 	    */
@@ -19458,7 +23915,19 @@ xmlSchemaResolveAttrGroupReferences(xmlSchemaQNameRefPtr ref,
     group = xmlSchemaGetAttributeGroup(ctxt->schema,
 	ref->name,
 	ref->targetNamespace);
-    if (group == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2322]) {
+      if ((group == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2322\n");
+      else
+        fprintf(stderr, "reached bug index 2322\n");
+    }
+    if ((!FIXREVERTER[2322] && (group == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPResCompAttrErr(ctxt,
 	    XML_SCHEMAP_SRC_RESOLVE,
 	    NULL, ref->node,
@@ -19466,6 +23935,9 @@ xmlSchemaResolveAttrGroupReferences(xmlSchemaQNameRefPtr ref,
 	    ref->itemType, NULL);
 	return(ctxt->err);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ref->item = WXS_BASIC_CAST group;
     return(0);
 }
@@ -19497,8 +23969,23 @@ xmlSchemaCheckAttrPropsCorrect(xmlSchemaParserCtxtPtr pctxt,
     * Missing Sub-components ($5.3)."
     */
 
-    if (WXS_ATTR_TYPEDEF(attr) == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2323]) {
+      if ((attr -> subtypes == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2323\n");
+      else
+        fprintf(stderr, "reached bug index 2323\n");
+    }
+    if ((!FIXREVERTER[2323] && (attr -> subtypes == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (attr->defValue != NULL) {
 	int ret;
@@ -19555,8 +24042,23 @@ xmlSchemaCheckSubstGroupCircular(xmlSchemaElementPtr elemDecl,
 {
     xmlSchemaElementPtr ret;
 
-    if (WXS_SUBST_HEAD(ancestor) == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2326]) {
+      if ((ancestor -> refDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2326\n");
+      else
+        fprintf(stderr, "reached bug index 2326\n");
+    }
+    if ((!FIXREVERTER[2326] && (ancestor -> refDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (WXS_SUBST_HEAD(ancestor) == elemDecl)
 	return (ancestor);
 
@@ -19713,7 +24215,19 @@ xmlSchemaCheckElemPropsCorrect(xmlSchemaParserCtxtPtr pctxt,
 	* {type definition} as defined in Element Default Valid (Immediate)
 	* ($3.3.6)."
 	*/
-	if (typeDef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2327]) {
+	  if ((typeDef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2327\n");
+	  else
+	    fprintf(stderr, "reached bug index 2327\n");
+	}
+	if ((!FIXREVERTER[2327] && (typeDef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErr(pctxt, elemDecl->node,
 		XML_SCHEMAP_INTERNAL,
 		"Internal error: xmlSchemaCheckElemPropsCorrect, "
@@ -19721,6 +24235,9 @@ xmlSchemaCheckElemPropsCorrect(xmlSchemaParserCtxtPtr pctxt,
 		"the value constraint", NULL, NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (elemDecl->node != NULL) {
 	    if (elemDecl->flags & XML_SCHEMAS_ELEM_FIXED)
 		node = (xmlNodePtr) xmlHasProp(elemDecl->node,
@@ -19993,8 +24510,23 @@ static void
 xmlSchemaCheckElementDeclComponent(xmlSchemaElementPtr elemDecl,
 				   xmlSchemaParserCtxtPtr ctxt)
 {
-    if (elemDecl == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2330]) {
+      if ((elemDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2330\n");
+      else
+        fprintf(stderr, "reached bug index 2330\n");
+    }
+    if ((!FIXREVERTER[2330] && (elemDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (elemDecl->flags & XML_SCHEMAS_ELEM_INTERNAL_CHECKED)
 	return;
     elemDecl->flags |= XML_SCHEMAS_ELEM_INTERNAL_CHECKED;
@@ -20042,13 +24574,28 @@ xmlSchemaResolveModelGroupParticleReferences(
 
 	refItem = xmlSchemaGetNamedComponent(ctxt->schema,
 	    ref->itemType, ref->name, ref->targetNamespace);
-	if (refItem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2331]) {
+	  if ((refItem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2331\n");
+	  else
+	    fprintf(stderr, "reached bug index 2331\n");
+	}
+	if ((!FIXREVERTER[2331] && (refItem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPResCompAttrErr(ctxt, XML_SCHEMAP_SRC_RESOLVE,
 		NULL, WXS_ITEM_NODE(particle), "ref", ref->name,
 		ref->targetNamespace, ref->itemType, NULL);
 	    /* TODO: remove the particle. */
 	    goto next_particle;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (refItem->type == XML_SCHEMA_TYPE_GROUP) {
 	    if (WXS_MODELGROUPDEF_MODEL(refItem) == NULL)
 		/* TODO: remove the particle. */
@@ -20145,8 +24692,23 @@ xmlSchemaAreValuesEqual(xmlSchemaValPtr x,
 	x = xmlSchemaValueGetNext(x);
 	if (x != NULL) {
 	    y = xmlSchemaValueGetNext(y);
-	    if (y == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2333]) {
+	      if ((y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2333\n");
+	      else
+	        fprintf(stderr, "reached bug index 2333\n");
+	    }
+	    if ((!FIXREVERTER[2333] && (y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (0);
+		#ifdef FRCOV
+		}
+		#endif
 	} else if (xmlSchemaValueGetNext(y) != NULL)
 	    return (0);
 	else
@@ -20166,8 +24728,23 @@ static int
 xmlSchemaResolveAttrUseReferences(xmlSchemaAttributeUsePtr ause,
 				  xmlSchemaParserCtxtPtr ctxt)
 {
-    if ((ctxt == NULL) || (ause == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2334]) {
+      if ((ctxt == (void *) 0 || ause == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2334\n");
+      else
+        fprintf(stderr, "reached bug index 2334\n");
+    }
+    if ((!FIXREVERTER[2334] && (ctxt == (void *) 0 || ause == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if ((ause->attrDecl == NULL) ||
 	(ause->attrDecl->type != XML_SCHEMA_EXTRA_QNAMEREF))
 	return(0);
@@ -20206,8 +24783,23 @@ static int
 xmlSchemaCheckAttrUsePropsCorrect(xmlSchemaParserCtxtPtr ctxt,
 			     xmlSchemaAttributeUsePtr use)
 {
-    if ((ctxt == NULL) || (use == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2335]) {
+      if ((ctxt == (void *) 0 || use == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2335\n");
+      else
+        fprintf(stderr, "reached bug index 2335\n");
+    }
+    if ((!FIXREVERTER[2335] && (ctxt == (void *) 0 || use == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if ((use->defValue == NULL) || (WXS_ATTRUSE_DECL(use) == NULL) ||
 	((WXS_ATTRUSE_DECL(use))->type != XML_SCHEMA_TYPE_ATTRIBUTE))
 	return(0);
@@ -20456,8 +25048,23 @@ xmlSchemaCheckSRCRedefineFirst(xmlSchemaParserCtxtPtr pctxt)
     xmlSchemaBasicItemPtr prev, item;
     int wasRedefined;
 
-    if (redef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2338]) {
+      if ((redef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2338\n");
+      else
+        fprintf(stderr, "reached bug index 2338\n");
+    }
+    if ((!FIXREVERTER[2338] && (redef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     do {
 	item = redef->item;
@@ -20630,14 +25237,44 @@ xmlSchemaCheckSRCRedefineSecond(xmlSchemaParserCtxtPtr pctxt)
     xmlSchemaRedefPtr redef = WXS_CONSTRUCTOR(pctxt)->redefs;
     xmlSchemaBasicItemPtr item;
 
-    if (redef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2339]) {
+      if ((redef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2339\n");
+      else
+        fprintf(stderr, "reached bug index 2339\n");
+    }
+    if ((!FIXREVERTER[2339] && (redef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     do {
-	if (redef->target == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2340]) {
+	  if ((redef -> target == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2340\n");
+	  else
+	    fprintf(stderr, "reached bug index 2340\n");
+	}
+	if ((!FIXREVERTER[2340] && (redef -> target == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    redef = redef->next;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	item = redef->item;
 
 	switch (item->type) {
@@ -20727,8 +25364,23 @@ xmlSchemaAddComponents(xmlSchemaParserCtxtPtr pctxt,
     *   components as well to be able to catch clashing components.
     *   (I hope I'll still know what this means after some months :-()
     */
-    if (bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2341]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2341\n");
+      else
+        fprintf(stderr, "reached bug index 2341\n");
+    }
+    if ((!FIXREVERTER[2341] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (bucket->flags & XML_SCHEMA_BUCKET_COMPS_ADDED)
 	return(0);
     bucket->flags |= XML_SCHEMA_BUCKET_COMPS_ADDED;
@@ -20841,8 +25493,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
     * a bucket.
     * TODO: Think about storing locals _only_ on the main bucket.
     */
-    if (con->bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2342]) {
+      if ((con -> bucket == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2342\n");
+      else
+        fprintf(stderr, "reached bug index 2342\n");
+    }
+    if ((!FIXREVERTER[2342] && (con -> bucket == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	con->bucket = rootBucket;
+	#ifdef FRCOV
+	}
+	#endif
 
     /* TODO:
     * SPEC (src-redefine):
@@ -20951,8 +25618,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2343]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2343\n");
+      else
+        fprintf(stderr, "reached bug index 2343\n");
+    }
+    if ((!FIXREVERTER[2343] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Now that all references are resolved we
@@ -20973,29 +25655,89 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		xmlSchemaCheckTypeDefCircular(
 		    (xmlSchemaTypePtr) item, pctxt);
 		FIXHFAILURE;
-		if (pctxt->nberrors != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2344]) {
+		  if ((pctxt -> nberrors != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2344\n");
+		  else
+		    fprintf(stderr, "reached bug index 2344\n");
+		}
+		if ((!FIXREVERTER[2344] && (pctxt -> nberrors != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto exit_error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_SCHEMA_TYPE_GROUP:
 		xmlSchemaCheckGroupDefCircular(
 		    (xmlSchemaModelGroupDefPtr) item, pctxt);
 		FIXHFAILURE;
-		if (pctxt->nberrors != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2345]) {
+		  if ((pctxt -> nberrors != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2345\n");
+		  else
+		    fprintf(stderr, "reached bug index 2345\n");
+		}
+		if ((!FIXREVERTER[2345] && (pctxt -> nberrors != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto exit_error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_SCHEMA_TYPE_ATTRIBUTEGROUP:
 		xmlSchemaCheckAttrGroupCircular(
 		    (xmlSchemaAttributeGroupPtr) item, pctxt);
 		FIXHFAILURE;
-		if (pctxt->nberrors != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2346]) {
+		  if ((pctxt -> nberrors != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2346\n");
+		  else
+		    fprintf(stderr, "reached bug index 2346\n");
+		}
+		if ((!FIXREVERTER[2346] && (pctxt -> nberrors != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto exit_error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    default:
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2347]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2347\n");
+      else
+        fprintf(stderr, "reached bug index 2347\n");
+    }
+    if ((!FIXREVERTER[2347] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Model group definition references:
     * Such a reference is reflected by a particle at the component
@@ -21016,8 +25758,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2348]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2348\n");
+      else
+        fprintf(stderr, "reached bug index 2348\n");
+    }
+    if ((!FIXREVERTER[2348] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Expand attribute group references of attribute group definitions.
     */
@@ -21037,8 +25794,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2349]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2349\n");
+      else
+        fprintf(stderr, "reached bug index 2349\n");
+    }
+    if ((!FIXREVERTER[2349] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * First compute the variety of simple types. This is needed as
     * a seperate step, since otherwise we won't be able to detect
@@ -21058,8 +25830,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2350]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2350\n");
+      else
+        fprintf(stderr, "reached bug index 2350\n");
+    }
+    if ((!FIXREVERTER[2350] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Detect circular union types. Note that this needs the variety to
     * be already computed.
@@ -21078,8 +25865,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2351]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2351\n");
+      else
+        fprintf(stderr, "reached bug index 2351\n");
+    }
+    if ((!FIXREVERTER[2351] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Do the complete type fixup for simple types.
@@ -21097,8 +25899,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2352]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2352\n");
+      else
+        fprintf(stderr, "reached bug index 2352\n");
+    }
+    if ((!FIXREVERTER[2352] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * At this point we need build and check all simple types.
     */
@@ -21116,8 +25933,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2353]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2353\n");
+      else
+        fprintf(stderr, "reached bug index 2353\n");
+    }
+    if ((!FIXREVERTER[2353] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Apply constraints for attribute uses.
     */
@@ -21135,8 +25967,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2354]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2354\n");
+      else
+        fprintf(stderr, "reached bug index 2354\n");
+    }
+    if ((!FIXREVERTER[2354] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Apply constraints for attribute group definitions.
@@ -21156,16 +26003,46 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 	    break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2355]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2355\n");
+      else
+        fprintf(stderr, "reached bug index 2355\n");
+    }
+    if ((!FIXREVERTER[2355] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Apply constraints for redefinitions.
     */
     if (WXS_CONSTRUCTOR(pctxt)->redefs != NULL)
 	xmlSchemaCheckSRCRedefineSecond(pctxt);
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2356]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2356\n");
+      else
+        fprintf(stderr, "reached bug index 2356\n");
+    }
+    if ((!FIXREVERTER[2356] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Complex types are builded and checked.
@@ -21183,8 +26060,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2357]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2357\n");
+      else
+        fprintf(stderr, "reached bug index 2357\n");
+    }
+    if ((!FIXREVERTER[2357] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * The list could have changed, since xmlSchemaFixupComplexType()
@@ -21229,8 +26121,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2358]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2358\n");
+      else
+        fprintf(stderr, "reached bug index 2358\n");
+    }
+    if ((!FIXREVERTER[2358] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Finally we can build the automaton from the content model of
@@ -21248,8 +26155,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2359]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2359\n");
+      else
+        fprintf(stderr, "reached bug index 2359\n");
+    }
+    if ((!FIXREVERTER[2359] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * URGENT TODO: cos-element-consistent
     */
@@ -21419,8 +26341,23 @@ xmlSchemaSetParserErrors(xmlSchemaParserCtxtPtr ctxt,
                          xmlSchemaValidityErrorFunc err,
                          xmlSchemaValidityWarningFunc warn, void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2366]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2366\n");
+      else
+        fprintf(stderr, "reached bug index 2366\n");
+    }
+    if ((!FIXREVERTER[2366] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->error = err;
     ctxt->warning = warn;
     ctxt->errCtxt = ctx;
@@ -21441,8 +26378,23 @@ xmlSchemaSetParserStructuredErrors(xmlSchemaParserCtxtPtr ctxt,
 				   xmlStructuredErrorFunc serror,
 				   void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2367]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2367\n");
+      else
+        fprintf(stderr, "reached bug index 2367\n");
+    }
+    if ((!FIXREVERTER[2367] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     ctxt->serror = serror;
     ctxt->errCtxt = ctx;
     if (ctxt->vctxt != NULL)
@@ -21600,20 +26552,65 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaParserCtxtPtr pctxt;
     xmlSchemaBucketPtr bucket = NULL;
 
-    if ((vctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2369]) {
+      if ((vctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2369\n");
+      else
+        fprintf(stderr, "reached bug index 2369\n");
+    }
+    if ((!FIXREVERTER[2369] && (vctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
-
-    if (vctxt->pctxt == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2370]) {
+      if ((vctxt -> pctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2370\n");
+      else
+        fprintf(stderr, "reached bug index 2370\n");
+    }
+    if ((!FIXREVERTER[2370] && (vctxt -> pctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaAssembleByLocation",
 	    "no parser context available");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     pctxt = vctxt->pctxt;
-    if (pctxt->constructor == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2371]) {
+      if ((pctxt -> constructor == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2371\n");
+      else
+        fprintf(stderr, "reached bug index 2371\n");
+    }
+    if ((!FIXREVERTER[2371] && (pctxt -> constructor == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaAssembleByLocation",
 	    "no constructor");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Acquire the schema document.
     */
@@ -21627,9 +26624,36 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
     ret = xmlSchemaAddSchemaDoc(pctxt, XML_SCHEMA_SCHEMA_IMPORT,
 	location, NULL, NULL, 0, node, NULL, nsName,
 	&bucket);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2372]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2372\n");
+      else
+        fprintf(stderr, "reached bug index 2372\n");
+    }
+    if ((!FIXREVERTER[2372] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(ret);
-    if (bucket == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2373]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2373\n");
+      else
+        fprintf(stderr, "reached bug index 2373\n");
+    }
+    if ((!FIXREVERTER[2373] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Generate a warning that the document could not be located.
 	*/
@@ -21639,6 +26663,9 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
 	    location, NULL, NULL);
 	return(ret);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * The first located schema will be handled as if all other
     * schemas imported by XSI were imported by this first schema.
@@ -21666,8 +26693,25 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
 	goto exit_failure;
     }
     /* Paranoid error channelling. */
-    if ((ret == 0) && (pctxt->nberrors != 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2374]) {
+      fprintf(stderr, "reached bug index 2374\n");
+    }
+    if ((FIXREVERTER[2374] && (ret == 0 )) || (!FIXREVERTER[2374] && (ret == 0 && pctxt -> nberrors != 0 ))
+    #else
+    if (ret == 0 
+    #endif
+    )
+	
+	#ifdef FRCOV
+	{if (!(pctxt -> nberrors != 0 ))
+	  fprintf(stderr, "triggered bug index 2374\n");
+	#endif
 	ret = pctxt->err;
+	#ifdef FRCOV
+	}}
+	#endif
     if (pctxt->nberrors == 0) {
 	/*
 	* Only bother to fixup pending components, if there was
@@ -21681,8 +26725,25 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
 	* Not nice, but we need somehow to channel the schema parser
 	* error to the validation context.
 	*/
-	if ((ret != 0) && (vctxt->err == 0))
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2375]) {
+	  fprintf(stderr, "reached bug index 2375\n");
+	}
+	if ((FIXREVERTER[2375] && (ret != 0 )) || (!FIXREVERTER[2375] && (ret != 0 && vctxt -> err == 0  ))
+	#else
+	if (ret != 0 
+	#endif
+	)
+	    
+	    #ifdef FRCOV
+	    {if (!(vctxt -> err == 0  ))
+	      fprintf(stderr, "triggered bug index 2375\n");
+	    #endif
 	    vctxt->err = ret;
+	    #ifdef FRCOV
+	    }}
+	    #endif
 	vctxt->nberrors += pctxt->nberrors;
     } else {
 	/* Add to validation error sum. */
@@ -21699,16 +26760,46 @@ static xmlSchemaAttrInfoPtr
 xmlSchemaGetMetaAttrInfo(xmlSchemaValidCtxtPtr vctxt,
 			 int metaType)
 {
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2376]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2376\n");
+      else
+        fprintf(stderr, "reached bug index 2376\n");
+    }
+    if ((!FIXREVERTER[2376] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     {
 	int i;
 	xmlSchemaAttrInfoPtr iattr;
 
 	for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	    iattr = vctxt->attrInfos[i];
-	    if (iattr->metaType == metaType)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2377]) {
+	      if ((iattr -> metaType == metaType ) && !(0))
+	        fprintf(stderr, "triggered bug index 2377\n");
+	      else
+	        fprintf(stderr, "reached bug index 2377\n");
+	    }
+	    if ((!FIXREVERTER[2377] && (iattr -> metaType == metaType ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (iattr);
+		#ifdef FRCOV
+		}
+		#endif
 	}
 
     }
@@ -21746,11 +26837,41 @@ xmlSchemaAssembleByXSI(xmlSchemaValidCtxtPtr vctxt)
     */
     iattr = xmlSchemaGetMetaAttrInfo(vctxt,
 	XML_SCHEMA_ATTR_INFO_META_XSI_SCHEMA_LOC);
-    if (iattr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2378]) {
+      if ((iattr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2378\n");
+      else
+        fprintf(stderr, "reached bug index 2378\n");
+    }
+    if ((!FIXREVERTER[2378] && (iattr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	iattr = xmlSchemaGetMetaAttrInfo(vctxt,
 	XML_SCHEMA_ATTR_INFO_META_XSI_NO_NS_SCHEMA_LOC);
-    if (iattr == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2379]) {
+      if ((iattr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2379\n");
+      else
+        fprintf(stderr, "reached bug index 2379\n");
+    }
+    if ((!FIXREVERTER[2379] && (iattr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     cur = iattr->value;
     do {
 	/*
@@ -21885,8 +27006,23 @@ xmlSchemaValidateNotation(xmlSchemaValidCtxtPtr vctxt,
 	return (-1);
     }
     ret = xmlValidateQName(value, 1);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2380]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2380\n");
+      else
+        fprintf(stderr, "reached bug index 2380\n");
+    }
+    if ((!FIXREVERTER[2380] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (ret);
+	#ifdef FRCOV
+	}
+	#endif
     {
 	xmlChar *localName = NULL;
 	xmlChar *prefix = NULL;
@@ -21899,18 +27035,48 @@ xmlSchemaValidateNotation(xmlSchemaValidCtxtPtr vctxt,
 		nsName = xmlSchemaLookupNamespace(vctxt, BAD_CAST prefix);
 	    else if (node != NULL) {
 		xmlNsPtr ns = xmlSearchNs(node->doc, node, prefix);
-		if (ns != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2381]) {
+		  if ((ns != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2381\n");
+		  else
+		    fprintf(stderr, "reached bug index 2381\n");
+		}
+		if ((!FIXREVERTER[2381] && (ns != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    nsName = ns->href;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    } else {
 		xmlFree(prefix);
 		xmlFree(localName);
 		return (1);
 	    }
-	    if (nsName == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2382]) {
+	      if ((nsName == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2382\n");
+	      else
+	        fprintf(stderr, "reached bug index 2382\n");
+	    }
+	    if ((!FIXREVERTER[2382] && (nsName == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFree(prefix);
 		xmlFree(localName);
 		return (1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (xmlSchemaGetNotation(schema, localName, nsName) != NULL) {
 		if ((valNeeded) && (val != NULL)) {
 		    (*val) = xmlSchemaNewNOTATIONValue(xmlStrdup(localName),
@@ -21945,12 +27111,42 @@ xmlSchemaVAddNodeQName(xmlSchemaValidCtxtPtr vctxt,
     int i;
 
     lname = xmlDictLookup(vctxt->dict, lname, -1);
-    if (lname == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2383]) {
+      if ((lname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2383\n");
+      else
+        fprintf(stderr, "reached bug index 2383\n");
+    }
+    if ((!FIXREVERTER[2383] && (lname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (nsname != NULL) {
 	nsname = xmlDictLookup(vctxt->dict, nsname, -1);
-	if (nsname == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2384]) {
+	  if ((nsname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2384\n");
+	  else
+	    fprintf(stderr, "reached bug index 2384\n");
+	}
+	if ((!FIXREVERTER[2384] && (nsname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     for (i = 0; i < vctxt->nodeQNames->nbItems; i += 2) {
 	if ((vctxt->nodeQNames->items [i] == lname) &&
@@ -22038,11 +27234,26 @@ xmlSchemaIDCNewBinding(xmlSchemaIDCPtr idcDef)
 
     ret = (xmlSchemaPSVIIDCBindingPtr) xmlMalloc(
 	    sizeof(xmlSchemaPSVIIDCBinding));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2386]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2386\n");
+      else
+        fprintf(stderr, "reached bug index 2386\n");
+    }
+    if ((!FIXREVERTER[2386] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaVErrMemory(NULL,
 	    "allocating a PSVI IDC binding item", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaPSVIIDCBinding));
     ret->definition = idcDef;
     return (ret);
@@ -22069,22 +27280,52 @@ xmlSchemaIDCStoreNodeTableItem(xmlSchemaValidCtxtPtr vctxt,
     if (vctxt->idcNodes == NULL) {
 	vctxt->idcNodes = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlMalloc(20 * sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (vctxt->idcNodes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2387]) {
+	  if ((vctxt -> idcNodes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2387\n");
+	  else
+	    fprintf(stderr, "reached bug index 2387\n");
+	}
+	if ((!FIXREVERTER[2387] && (vctxt -> idcNodes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"allocating the IDC node table item list", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	vctxt->sizeIdcNodes = 20;
     } else if (vctxt->sizeIdcNodes <= vctxt->nbIdcNodes) {
 	vctxt->sizeIdcNodes *= 2;
 	vctxt->idcNodes = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlRealloc(vctxt->idcNodes, vctxt->sizeIdcNodes *
 	    sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (vctxt->idcNodes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2388]) {
+	  if ((vctxt -> idcNodes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2388\n");
+	  else
+	    fprintf(stderr, "reached bug index 2388\n");
+	}
+	if ((!FIXREVERTER[2388] && (vctxt -> idcNodes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"re-allocating the IDC node table item list", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     vctxt->idcNodes[vctxt->nbIdcNodes++] = item;
 
@@ -22110,22 +27351,52 @@ xmlSchemaIDCStoreKey(xmlSchemaValidCtxtPtr vctxt,
     if (vctxt->idcKeys == NULL) {
 	vctxt->idcKeys = (xmlSchemaPSVIIDCKeyPtr *)
 	    xmlMalloc(40 * sizeof(xmlSchemaPSVIIDCKeyPtr));
-	if (vctxt->idcKeys == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2389]) {
+	  if ((vctxt -> idcKeys == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2389\n");
+	  else
+	    fprintf(stderr, "reached bug index 2389\n");
+	}
+	if ((!FIXREVERTER[2389] && (vctxt -> idcKeys == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"allocating the IDC key storage list", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	vctxt->sizeIdcKeys = 40;
     } else if (vctxt->sizeIdcKeys <= vctxt->nbIdcKeys) {
 	vctxt->sizeIdcKeys *= 2;
 	vctxt->idcKeys = (xmlSchemaPSVIIDCKeyPtr *)
 	    xmlRealloc(vctxt->idcKeys, vctxt->sizeIdcKeys *
 	    sizeof(xmlSchemaPSVIIDCKeyPtr));
-	if (vctxt->idcKeys == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2390]) {
+	  if ((vctxt -> idcKeys == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2390\n");
+	  else
+	    fprintf(stderr, "reached bug index 2390\n");
+	}
+	if ((!FIXREVERTER[2390] && (vctxt -> idcKeys == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"re-allocating the IDC key storage list", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     vctxt->idcKeys[vctxt->nbIdcKeys++] = key;
 
@@ -22149,21 +27420,51 @@ xmlSchemaIDCAppendNodeTableItem(xmlSchemaPSVIIDCBindingPtr bind,
 	bind->sizeNodes = 10;
 	bind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlMalloc(10 * sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (bind->nodeTable == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2391]) {
+	  if ((bind -> nodeTable == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2391\n");
+	  else
+	    fprintf(stderr, "reached bug index 2391\n");
+	}
+	if ((!FIXREVERTER[2391] && (bind -> nodeTable == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(NULL,
 		"allocating an array of IDC node-table items", NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (bind->sizeNodes <= bind->nbNodes) {
 	bind->sizeNodes *= 2;
 	bind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlRealloc(bind->nodeTable, bind->sizeNodes *
 		sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (bind->nodeTable == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2392]) {
+	  if ((bind -> nodeTable == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2392\n");
+	  else
+	    fprintf(stderr, "reached bug index 2392\n");
+	}
+	if ((!FIXREVERTER[2392] && (bind -> nodeTable == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(NULL,
 		"re-allocating an array of IDC node-table items", NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     bind->nodeTable[bind->nbNodes++] = ntItem;
     return(0);
@@ -22190,8 +27491,23 @@ xmlSchemaIDCAcquireBinding(xmlSchemaValidCtxtPtr vctxt,
 
     if (ielem->idcTable == NULL) {
 	ielem->idcTable = xmlSchemaIDCNewBinding(matcher->aidc->def);
-	if (ielem->idcTable == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2393]) {
+	  if ((ielem -> idcTable == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2393\n");
+	  else
+	    fprintf(stderr, "reached bug index 2393\n");
+	}
+	if ((!FIXREVERTER[2393] && (ielem -> idcTable == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return(ielem->idcTable);
     } else {
 	xmlSchemaPSVIIDCBindingPtr bind = NULL;
@@ -22200,12 +27516,42 @@ xmlSchemaIDCAcquireBinding(xmlSchemaValidCtxtPtr vctxt,
 	do {
 	    if (bind->definition == matcher->aidc->def)
 		return(bind);
-	    if (bind->next == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2395]) {
+	      if ((bind -> next == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2395\n");
+	      else
+	        fprintf(stderr, "reached bug index 2395\n");
+	    }
+	    if ((!FIXREVERTER[2395] && (bind -> next == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		bind->next = xmlSchemaIDCNewBinding(matcher->aidc->def);
-		if (bind->next == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2394]) {
+		  if ((bind -> next == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2394\n");
+		  else
+		    fprintf(stderr, "reached bug index 2394\n");
+		}
+		if ((!FIXREVERTER[2394] && (bind -> next == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (NULL);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		return(bind->next);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    bind = bind->next;
 	} while (bind != NULL);
     }
@@ -22216,8 +27562,23 @@ static xmlSchemaItemListPtr
 xmlSchemaIDCAcquireTargetList(xmlSchemaValidCtxtPtr vctxt ATTRIBUTE_UNUSED,
 			     xmlSchemaIDCMatcherPtr matcher)
 {
-    if (matcher->targets == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2396]) {
+      if ((matcher -> targets == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2396\n");
+      else
+        fprintf(stderr, "reached bug index 2396\n");
+    }
+    if ((!FIXREVERTER[2396] && (matcher -> targets == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	matcher->targets = xmlSchemaItemListCreate();
+	#ifdef FRCOV
+	}
+	#endif
     return(matcher->targets);
 }
 
@@ -22361,8 +27722,23 @@ xmlSchemaIDCReleaseMatcherList(xmlSchemaValidCtxtPtr vctxt,
 	/*
 	* Cache the matcher.
 	*/
-	if (vctxt->idcMatcherCache != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2397]) {
+	  if ((vctxt -> idcMatcherCache != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2397\n");
+	  else
+	    fprintf(stderr, "reached bug index 2397\n");
+	}
+	if ((!FIXREVERTER[2397] && (vctxt -> idcMatcherCache != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    matcher->nextCached = vctxt->idcMatcherCache;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	vctxt->idcMatcherCache = matcher;
 
 	matcher = next;
@@ -22403,18 +27779,48 @@ xmlSchemaIDCAddStateObject(xmlSchemaValidCtxtPtr vctxt,
 	* Create a new state object.
 	*/
 	sto = (xmlSchemaIDCStateObjPtr) xmlMalloc(sizeof(xmlSchemaIDCStateObj));
-	if (sto == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2398]) {
+	  if ((sto == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2398\n");
+	  else
+	    fprintf(stderr, "reached bug index 2398\n");
+	}
+	if ((!FIXREVERTER[2398] && (sto == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(NULL,
 		"allocating an IDC state object", NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(sto, 0, sizeof(xmlSchemaIDCStateObj));
     }
     /*
     * Add to global list.
     */
-    if (vctxt->xpathStates != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2399]) {
+      if ((vctxt -> xpathStates != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2399\n");
+      else
+        fprintf(stderr, "reached bug index 2399\n");
+    }
+    if ((!FIXREVERTER[2399] && (vctxt -> xpathStates != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	sto->next = vctxt->xpathStates;
+	#ifdef FRCOV
+	}
+	#endif
     vctxt->xpathStates = sto;
 
     /*
@@ -22428,11 +27834,26 @@ xmlSchemaIDCAddStateObject(xmlSchemaValidCtxtPtr vctxt,
     */
     sto->xpathCtxt = (void *) xmlPatternGetStreamCtxt(
 	(xmlPatternPtr) sel->xpathComp);
-    if (sto->xpathCtxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2400]) {
+      if ((sto -> xpathCtxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2400\n");
+      else
+        fprintf(stderr, "reached bug index 2400\n");
+    }
+    if ((!FIXREVERTER[2400] && (sto -> xpathCtxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaIDCAddStateObject",
 	    "failed to create an XPath validation context");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     sto->type = type;
     sto->depth = vctxt->depth;
     sto->matcher = matcher;
@@ -22463,8 +27884,23 @@ xmlSchemaXPathEvaluate(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaIDCStateObjPtr sto, head = NULL, first;
     int res, resolved = 0, depth = vctxt->depth;
 
-    if (vctxt->xpathStates == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2401]) {
+      if ((vctxt -> xpathStates == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2401\n");
+      else
+        fprintf(stderr, "reached bug index 2401\n");
+    }
+    if ((!FIXREVERTER[2401] && (vctxt -> xpathStates == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (nodeType == XML_ATTRIBUTE_NODE)
 	depth++;
@@ -22518,21 +27954,51 @@ xmlSchemaXPathEvaluate(xmlSchemaValidCtxtPtr vctxt,
 	*/
 	if (sto->history == NULL) {
 	    sto->history = (int *) xmlMalloc(5 * sizeof(int));
-	    if (sto->history == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2403]) {
+	      if ((sto -> history == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2403\n");
+	      else
+	        fprintf(stderr, "reached bug index 2403\n");
+	    }
+	    if ((!FIXREVERTER[2403] && (sto -> history == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaVErrMemory(NULL,
 		    "allocating the state object history", NULL);
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    sto->sizeHistory = 5;
 	} else if (sto->sizeHistory <= sto->nbHistory) {
 	    sto->sizeHistory *= 2;
 	    sto->history = (int *) xmlRealloc(sto->history,
 		sto->sizeHistory * sizeof(int));
-	    if (sto->history == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2404]) {
+	      if ((sto -> history == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2404\n");
+	      else
+	        fprintf(stderr, "reached bug index 2404\n");
+	    }
+	    if ((!FIXREVERTER[2404] && (sto -> history == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaVErrMemory(NULL,
 		    "re-allocating the state object history", NULL);
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	sto->history[sto->nbHistory++] = depth;
 
@@ -22640,8 +28106,23 @@ xmlSchemaXPathPop(xmlSchemaValidCtxtPtr vctxt)
     xmlSchemaIDCStateObjPtr sto;
     int res;
 
-    if (vctxt->xpathStates == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2405]) {
+      if ((vctxt -> xpathStates == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2405\n");
+      else
+        fprintf(stderr, "reached bug index 2405\n");
+    }
+    if ((!FIXREVERTER[2405] && (vctxt -> xpathStates == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     sto = vctxt->xpathStates;
     do {
 	res = xmlStreamPop((xmlStreamCtxtPtr) sto->xpathCtxt);
@@ -22672,8 +28153,23 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaPSVIIDCKeyPtr key = NULL;
     xmlSchemaTypePtr type = vctxt->inode->typeDef, simpleType = NULL;
 
-    if (vctxt->xpathStates == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2406]) {
+      if ((vctxt -> xpathStates == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2406\n");
+      else
+        fprintf(stderr, "reached bug index 2406\n");
+    }
+    if ((!FIXREVERTER[2406] && (vctxt -> xpathStates == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     sto = vctxt->xpathStates;
 
 #ifdef DEBUG_IDC
@@ -22700,18 +28196,48 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 	xmlGenericError(xmlGenericErrorContext, "IDC:   stream pop '%s'\n",
 	    sto->sel->xpath);
 #endif
-	if (sto->nbHistory == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2407]) {
+	  if ((sto -> nbHistory == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2407\n");
+	  else
+	    fprintf(stderr, "reached bug index 2407\n");
+	}
+	if ((!FIXREVERTER[2407] && (sto -> nbHistory == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto deregister_check;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	matchDepth = sto->history[sto->nbHistory -1];
 
 	/*
 	* Only matches at the current depth are of interest.
 	*/
-	if (matchDepth != depth) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2408]) {
+	  if ((matchDepth != depth ) && !(0))
+	    fprintf(stderr, "triggered bug index 2408\n");
+	  else
+	    fprintf(stderr, "reached bug index 2408\n");
+	}
+	if ((!FIXREVERTER[2408] && (matchDepth != depth ))
+	#else
+	if (0
+	#endif
+	) {
 	    sto = sto->next;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (sto->type == XPATH_STATE_OBJ_TYPE_IDC_FIELD) {
 	    /*
 	    * NOTE: According to
@@ -22725,12 +28251,27 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 		    * Sanity check for complex types with simple content.
 		    */
 		    simpleType = type->contentTypeDef;
-		    if (simpleType == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2409]) {
+		      if ((simpleType == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2409\n");
+		      else
+		        fprintf(stderr, "reached bug index 2409\n");
+		    }
+		    if ((!FIXREVERTER[2409] && (simpleType == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			VERROR_INT("xmlSchemaXPathProcessHistory",
 			    "field resolves to a CT with simple content "
 			    "but the CT is missing the ST definition");
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		} else
 		    simpleType = NULL;
 	    } else
@@ -22802,12 +28343,27 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 		    matcher->keySeqs = (xmlSchemaPSVIIDCKeyPtr **)
 			xmlMalloc(matcher->sizeKeySeqs *
 			sizeof(xmlSchemaPSVIIDCKeyPtr *));
-		    if (matcher->keySeqs == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2410]) {
+		      if ((matcher -> keySeqs == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2410\n");
+		      else
+		        fprintf(stderr, "reached bug index 2410\n");
+		    }
+		    if ((!FIXREVERTER[2410] && (matcher -> keySeqs == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlSchemaVErrMemory(NULL,
 			    "allocating an array of key-sequences",
 			    NULL);
 			return(-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    memset(matcher->keySeqs, 0,
 			matcher->sizeKeySeqs *
 			sizeof(xmlSchemaPSVIIDCKeyPtr *));
@@ -22819,12 +28375,27 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 			xmlRealloc(matcher->keySeqs,
 			matcher->sizeKeySeqs *
 			sizeof(xmlSchemaPSVIIDCKeyPtr *));
-		    if (matcher->keySeqs == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2411]) {
+		      if ((matcher -> keySeqs == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2411\n");
+		      else
+		        fprintf(stderr, "reached bug index 2411\n");
+		    }
+		    if ((!FIXREVERTER[2411] && (matcher -> keySeqs == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlSchemaVErrMemory(NULL,
 			    "reallocating an array of key-sequences",
 			    NULL);
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    /*
 		    * The array needs to be NULLed.
 		    * TODO: Use memset?
@@ -22871,11 +28442,26 @@ create_sequence:
 		keySeq = (xmlSchemaPSVIIDCKeyPtr *) xmlMalloc(
 		    matcher->aidc->def->nbFields *
 		    sizeof(xmlSchemaPSVIIDCKeyPtr));
-		if (keySeq == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2412]) {
+		  if ((keySeq == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2412\n");
+		  else
+		    fprintf(stderr, "reached bug index 2412\n");
+		}
+		if ((!FIXREVERTER[2412] && (keySeq == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaVErrMemory(NULL,
 			"allocating an IDC key-sequence", NULL);
 		    return(-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		memset(keySeq, 0, matcher->aidc->def->nbFields *
 		    sizeof(xmlSchemaPSVIIDCKeyPtr));
 		matcher->keySeqs[pos] = keySeq;
@@ -23176,8 +28762,23 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaIDCAugPtr aidc;
 
     idc = (xmlSchemaIDCPtr) elemDecl->idcs;
-    if (idc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2415]) {
+      if ((idc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2415\n");
+      else
+        fprintf(stderr, "reached bug index 2415\n");
+    }
+    if ((!FIXREVERTER[2415] && (idc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifdef DEBUG_IDC
     {
@@ -23218,12 +28819,27 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
 			break;
 		    aidc = aidc->next;
 		}
-		if (aidc == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2416]) {
+		  if ((aidc == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2416\n");
+		  else
+		    fprintf(stderr, "reached bug index 2416\n");
+		}
+		if ((!FIXREVERTER[2416] && (aidc == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaIDCRegisterMatchers",
 			"Could not find an augmented IDC item for an IDC "
 			"definition");
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		if ((aidc->keyrefDepth == -1) ||
 		    (vctxt->depth < aidc->keyrefDepth))
 		    aidc->keyrefDepth = vctxt->depth;
@@ -23238,11 +28854,26 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
 		break;
 	    aidc = aidc->next;
 	}
-	if (aidc == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2417]) {
+	  if ((aidc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2417\n");
+	  else
+	    fprintf(stderr, "reached bug index 2417\n");
+	}
+	if ((!FIXREVERTER[2417] && (aidc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    VERROR_INT("xmlSchemaIDCRegisterMatchers",
 		"Could not find an augmented IDC item for an IDC definition");
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Create an IDC matcher for every IDC definition.
 	*/
@@ -23256,11 +28887,26 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
 	} else {
 	    matcher = (xmlSchemaIDCMatcherPtr)
 		xmlMalloc(sizeof(xmlSchemaIDCMatcher));
-	    if (matcher == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2418]) {
+	      if ((matcher == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2418\n");
+	      else
+	        fprintf(stderr, "reached bug index 2418\n");
+	    }
+	    if ((!FIXREVERTER[2418] && (matcher == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaVErrMemory(vctxt,
 		    "allocating an IDC matcher", NULL);
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memset(matcher, 0, sizeof(xmlSchemaIDCMatcher));
 	}
 	if (last == NULL)
@@ -23437,8 +29083,23 @@ xmlSchemaIDCFillNodeTables(xmlSchemaValidCtxtPtr vctxt,
 			*/
 			if (bind->dupls == NULL) {
 			    bind->dupls = xmlSchemaItemListCreate();
-			    if (bind->dupls == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[2424]) {
+			      if ((bind -> dupls == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 2424\n");
+			      else
+			        fprintf(stderr, "reached bug index 2424\n");
+			    }
+			    if ((!FIXREVERTER[2424] && (bind -> dupls == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				goto internal_error;
+				#ifdef FRCOV
+				}
+				#endif
 			}
 			if (xmlSchemaItemListAdd(bind->dupls, bind->nodeTable[j]) == -1)
 			    goto internal_error;
@@ -23494,10 +29155,25 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
     int i, j, k, ret = 0, nbFields, oldNum, oldDupls;
 
     bind = vctxt->inode->idcTable;
-    if (bind == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2426]) {
+      if ((bind == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2426\n");
+      else
+        fprintf(stderr, "reached bug index 2426\n");
+    }
+    if ((!FIXREVERTER[2426] && (bind == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/* Fine, no table, no bubbles. */
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     parTable = &(vctxt->elemInfos[vctxt->depth -1]->idcTable);
     /*
@@ -23525,8 +29201,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 	    } while (aidc != NULL);
 	}
 
-	if (parTable != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2427]) {
+	  if ((parTable != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2427\n");
+	  else
+	    fprintf(stderr, "reached bug index 2427\n");
+	}
+	if ((!FIXREVERTER[2427] && (parTable != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    parBind = *parTable;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Search a matching parent binding for the
 	* IDC definition.
@@ -23557,8 +29248,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 
 	    for (i = 0; i < bind->nbNodes; i++) {
 		node = bind->nodeTable[i];
-		if (node == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2428]) {
+		  if ((node == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2428\n");
+		  else
+		    fprintf(stderr, "reached bug index 2428\n");
+		}
+		if ((!FIXREVERTER[2428] && (node == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    continue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		/*
 		* ...with every key-sequence of the parent node, already
 		* evaluated to be a duplicate key-sequence.
@@ -23593,10 +29299,25 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 			    break;
 			j++;
 		    }
-		    if (j != oldDupls) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2432]) {
+		      if ((j != oldDupls ) && !(0))
+		        fprintf(stderr, "triggered bug index 2432\n");
+		      else
+		        fprintf(stderr, "reached bug index 2432\n");
+		    }
+		    if ((!FIXREVERTER[2432] && (j != oldDupls ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			/* Duplicate found. Skip this entry. */
 			continue;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		}
 		/*
 		* ... and with every key-sequence of the parent node.
@@ -23654,8 +29375,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 			}
 			if (parBind->dupls == NULL) {
 			    parBind->dupls = xmlSchemaItemListCreate();
-			    if (parBind->dupls == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[2436]) {
+			      if ((parBind -> dupls == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 2436\n");
+			      else
+			        fprintf(stderr, "reached bug index 2436\n");
+			    }
+			    if ((!FIXREVERTER[2436] && (parBind -> dupls == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				goto internal_error;
+				#ifdef FRCOV
+				}
+				#endif
 			}
 			xmlSchemaItemListAdd(parBind->dupls, parNode);
 		    } else {
@@ -23666,22 +29402,52 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 			if (parBind->nodeTable == NULL) {
 			    parBind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 				xmlMalloc(10 * sizeof(xmlSchemaPSVIIDCNodePtr));
-			    if (parBind->nodeTable == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[2437]) {
+			      if ((parBind -> nodeTable == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 2437\n");
+			      else
+			        fprintf(stderr, "reached bug index 2437\n");
+			    }
+			    if ((!FIXREVERTER[2437] && (parBind -> nodeTable == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 				xmlSchemaVErrMemory(NULL,
 				    "allocating IDC list of node-table items", NULL);
 				goto internal_error;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 			    parBind->sizeNodes = 1;
 			} else if (parBind->nbNodes >= parBind->sizeNodes) {
 			    parBind->sizeNodes *= 2;
 			    parBind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 				xmlRealloc(parBind->nodeTable, parBind->sizeNodes *
 				sizeof(xmlSchemaPSVIIDCNodePtr));
-			    if (parBind->nodeTable == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[2438]) {
+			      if ((parBind -> nodeTable == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 2438\n");
+			      else
+			        fprintf(stderr, "reached bug index 2438\n");
+			    }
+			    if ((!FIXREVERTER[2438] && (parBind -> nodeTable == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 				xmlSchemaVErrMemory(NULL,
 				    "re-allocating IDC list of node-table items", NULL);
 				goto internal_error;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 			}
 			parNodes = parBind->nodeTable;
 			/*
@@ -23700,8 +29466,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 	    * copy all node-tables.
 	    */
 	    parBind = xmlSchemaIDCNewBinding(bind->definition);
-	    if (parBind == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2439]) {
+	      if ((parBind == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2439\n");
+	      else
+	        fprintf(stderr, "reached bug index 2439\n");
+	    }
+	    if ((!FIXREVERTER[2439] && (parBind == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto internal_error;
+		#ifdef FRCOV
+		}
+		#endif
 
 	    /*
 	    * TODO: Hmm, how to optimize the initial number of
@@ -23731,13 +29512,28 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 		    parBind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 			xmlMalloc(bind->nbNodes *
 			sizeof(xmlSchemaPSVIIDCNodePtr));
-		    if (parBind->nodeTable == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2440]) {
+		      if ((parBind -> nodeTable == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2440\n");
+		      else
+		        fprintf(stderr, "reached bug index 2440\n");
+		    }
+		    if ((!FIXREVERTER[2440] && (parBind -> nodeTable == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlSchemaVErrMemory(NULL,
 			    "allocating an array of IDC node-table "
 			    "items", NULL);
 			xmlSchemaIDCFreeBinding(parBind);
 			goto internal_error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    parBind->sizeNodes = bind->nbNodes;
 		    parBind->nbNodes = bind->nbNodes;
 		    memcpy(parBind->nodeTable, bind->nodeTable,
@@ -23912,21 +29708,51 @@ xmlSchemaGetFreshAttrInfo(xmlSchemaValidCtxtPtr vctxt)
 	vctxt->attrInfos = (xmlSchemaAttrInfoPtr *)
 	    xmlMalloc(sizeof(xmlSchemaAttrInfoPtr));
 	vctxt->sizeAttrInfos = 1;
-	if (vctxt->attrInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2442]) {
+	  if ((vctxt -> attrInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2442\n");
+	  else
+	    fprintf(stderr, "reached bug index 2442\n");
+	}
+	if ((!FIXREVERTER[2442] && (vctxt -> attrInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"allocating attribute info list", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (vctxt->sizeAttrInfos <= vctxt->nbAttrInfos) {
 	vctxt->sizeAttrInfos++;
 	vctxt->attrInfos = (xmlSchemaAttrInfoPtr *)
 	    xmlRealloc(vctxt->attrInfos,
 		vctxt->sizeAttrInfos * sizeof(xmlSchemaAttrInfoPtr));
-	if (vctxt->attrInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2443]) {
+	  if ((vctxt -> attrInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2443\n");
+	  else
+	    fprintf(stderr, "reached bug index 2443\n");
+	}
+	if ((!FIXREVERTER[2443] && (vctxt -> attrInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"re-allocating attribute info list", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
 	iattr = vctxt->attrInfos[vctxt->nbAttrInfos++];
 	if (iattr->localName != NULL) {
@@ -23942,10 +29768,25 @@ xmlSchemaGetFreshAttrInfo(xmlSchemaValidCtxtPtr vctxt)
     */
     iattr = (xmlSchemaAttrInfoPtr)
 	xmlMalloc(sizeof(xmlSchemaAttrInfo));
-    if (iattr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2444]) {
+      if ((iattr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2444\n");
+      else
+        fprintf(stderr, "reached bug index 2444\n");
+    }
+    if ((!FIXREVERTER[2444] && (iattr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaVErrMemory(vctxt, "creating new attribute info", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(iattr, 0, sizeof(xmlSchemaAttrInfo));
     iattr->nodeType = XML_ATTRIBUTE_NODE;
     vctxt->attrInfos[vctxt->nbAttrInfos++] = iattr;
@@ -23966,11 +29807,26 @@ xmlSchemaValidatorPushAttribute(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaAttrInfoPtr attr;
 
     attr = xmlSchemaGetFreshAttrInfo(vctxt);
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2445]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2445\n");
+      else
+        fprintf(stderr, "reached bug index 2445\n");
+    }
+    if ((!FIXREVERTER[2445] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaPushAttribute",
 	    "calling xmlSchemaGetFreshAttrInfo()");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     attr->node = attrNode;
     attr->nodeLine = nodeLine;
     attr->state = XML_SCHEMAS_ATTR_UNKNOWN;
@@ -24005,8 +29861,23 @@ xmlSchemaValidatorPushAttribute(xmlSchemaValidCtxtPtr vctxt,
     attr->value = value;
     if (ownedValue)
 	attr->flags |= XML_SCHEMA_NODE_INFO_FLAG_OWNED_VALUES;
-    if (attr->metaType != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2446]) {
+      if ((attr -> metaType != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2446\n");
+      else
+        fprintf(stderr, "reached bug index 2446\n");
+    }
+    if ((!FIXREVERTER[2446] && (attr -> metaType != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	attr->state = XML_SCHEMAS_ATTR_META;
+	#ifdef FRCOV
+	}
+	#endif
     return (0);
 }
 
@@ -24085,19 +29956,49 @@ xmlSchemaGetFreshElemInfo(xmlSchemaValidCtxtPtr vctxt)
 {
     xmlSchemaNodeInfoPtr info = NULL;
 
-    if (vctxt->depth > vctxt->sizeElemInfos) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2447]) {
+      if ((vctxt -> depth > vctxt -> sizeElemInfos ) && !(0))
+        fprintf(stderr, "triggered bug index 2447\n");
+      else
+        fprintf(stderr, "reached bug index 2447\n");
+    }
+    if ((!FIXREVERTER[2447] && (vctxt -> depth > vctxt -> sizeElemInfos ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaGetFreshElemInfo",
 	    "inconsistent depth encountered");
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (vctxt->elemInfos == NULL) {
 	vctxt->elemInfos = (xmlSchemaNodeInfoPtr *)
 	    xmlMalloc(10 * sizeof(xmlSchemaNodeInfoPtr));
-	if (vctxt->elemInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2448]) {
+	  if ((vctxt -> elemInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2448\n");
+	  else
+	    fprintf(stderr, "reached bug index 2448\n");
+	}
+	if ((!FIXREVERTER[2448] && (vctxt -> elemInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"allocating the element info array", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(vctxt->elemInfos, 0, 10 * sizeof(xmlSchemaNodeInfoPtr));
 	vctxt->sizeElemInfos = 10;
     } else if (vctxt->sizeElemInfos <= vctxt->depth) {
@@ -24107,11 +30008,26 @@ xmlSchemaGetFreshElemInfo(xmlSchemaValidCtxtPtr vctxt)
 	vctxt->elemInfos = (xmlSchemaNodeInfoPtr *)
 	    xmlRealloc(vctxt->elemInfos, vctxt->sizeElemInfos *
 	    sizeof(xmlSchemaNodeInfoPtr));
-	if (vctxt->elemInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2449]) {
+	  if ((vctxt -> elemInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2449\n");
+	  else
+	    fprintf(stderr, "reached bug index 2449\n");
+	}
+	if ((!FIXREVERTER[2449] && (vctxt -> elemInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"re-allocating the element info array", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* We need the new memory to be NULLed.
 	* TODO: Use memset instead?
@@ -24124,11 +30040,26 @@ xmlSchemaGetFreshElemInfo(xmlSchemaValidCtxtPtr vctxt)
     if (info == NULL) {
 	info = (xmlSchemaNodeInfoPtr)
 	    xmlMalloc(sizeof(xmlSchemaNodeInfo));
-	if (info == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2450]) {
+	  if ((info == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2450\n");
+	  else
+	    fprintf(stderr, "reached bug index 2450\n");
+	}
+	if ((!FIXREVERTER[2450] && (info == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt,
 		"allocating an element info", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	vctxt->elemInfos[vctxt->depth] = info;
     } else {
 	if (info->localName != NULL) {
@@ -24177,8 +30108,23 @@ xmlSchemaValidateFacets(xmlSchemaAbstractCtxtPtr actxt,
     * empty: until now, "pattern" and "enumeration" facets of the
     * *base types* need to be checked as well.
     */
-    if (type->facetSet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2451]) {
+      if ((type -> facetSet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2451\n");
+      else
+        fprintf(stderr, "reached bug index 2451\n");
+    }
+    if ((!FIXREVERTER[2451] && (type -> facetSet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto pattern_and_enum;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (! WXS_IS_ATOMIC(type)) {
 	if (WXS_IS_LIST(type))
@@ -24239,8 +30185,23 @@ xmlSchemaValidateFacets(xmlSchemaAbstractCtxtPtr actxt,
 		value, len, type, facetLink->facet, NULL, NULL, NULL);
 	    else
 		return (ret);
-	    if (error == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2452]) {
+	      if ((error == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2452\n");
+	      else
+	        fprintf(stderr, "reached bug index 2452\n");
+	    }
+	    if ((!FIXREVERTER[2452] && (error == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		error = ret;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	ret = 0;
     }
@@ -24275,8 +30236,23 @@ WXS_IS_LIST:
 		value, length, type, facetLink->facet, NULL, NULL, NULL);
 	    else
 		return (ret);
-	    if (error == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2453]) {
+	      if ((error == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2453\n");
+	      else
+	        fprintf(stderr, "reached bug index 2453\n");
+	    }
+	    if ((!FIXREVERTER[2453] && (error == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		error = ret;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	ret = 0;
     }
@@ -24301,14 +30277,44 @@ pattern_and_enum:
 		ret = xmlSchemaAreValuesEqual(facet->val, val);
 		if (ret == 1)
 		    break;
-		else if (ret < 0) {
+		else 
+		#ifdef FRCOV
+		{if (FIXREVERTER[2454]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2454\n");
+		  else
+		    fprintf(stderr, "reached bug index 2454\n");
+		}
+		if ((!FIXREVERTER[2454] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaValidateFacets",
 			"validating against an enumeration facet");
 		    return (-1);
 		}
-	    }
-	    if (ret != 0)
+		#ifdef FRCOV
+		}
+		#endif
+	    }
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2455]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2455\n");
+	      else
+	        fprintf(stderr, "reached bug index 2455\n");
+	    }
+	    if ((!FIXREVERTER[2455] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    /*
 	    * Break on the first set of enumerations. Any additional
 	    *  enumerations which might be existent on the ancestors
@@ -24327,8 +30333,23 @@ pattern_and_enum:
 		    value, 0, type, NULL, NULL, NULL, NULL);
 	    } else
 		return (ret);
-	    if (error == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2456]) {
+	      if ((error == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2456\n");
+	      else
+	        fprintf(stderr, "reached bug index 2456\n");
+	    }
+	    if ((!FIXREVERTER[2456] && (error == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		error = ret;
+		#ifdef FRCOV
+		}
+		#endif
 	}
     }
 
@@ -24372,8 +30393,23 @@ pattern_and_enum:
 			value, 0, type, facet, NULL, NULL, NULL);
 		} else
 		    return (ret);
-		if (error == 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2457]) {
+		  if ((error == 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2457\n");
+		  else
+		    fprintf(stderr, "reached bug index 2457\n");
+		}
+		if ((!FIXREVERTER[2457] && (error == 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    error = ret;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    }
 	    tmpType = tmpType->baseType;
@@ -24408,7 +30444,19 @@ xmlSchemaValidateQName(xmlSchemaValidCtxtPtr vctxt,
     xmlChar *local, *prefix = NULL;
 
     ret = xmlValidateQName(value, 1);
-    if (ret != 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2458]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2458\n");
+      else
+        fprintf(stderr, "reached bug index 2458\n");
+    }
+    if ((!FIXREVERTER[2458] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (ret == -1) {
 	    VERROR_INT("xmlSchemaValidateQName",
 		"calling xmlValidateQName()");
@@ -24416,13 +30464,31 @@ xmlSchemaValidateQName(xmlSchemaValidCtxtPtr vctxt,
 	}
 	return( XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * NOTE: xmlSplitQName2 will always return a duplicated
     * strings.
     */
     local = xmlSplitQName2(value, &prefix);
-    if (local == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2459]) {
+      if ((local == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2459\n");
+      else
+        fprintf(stderr, "reached bug index 2459\n");
+    }
+    if ((!FIXREVERTER[2459] && (local == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	local = xmlStrdup(value);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * OPTIMIZE TODO: Use flags for:
     *  - is there any namespace binding?
@@ -24515,8 +30581,23 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
     */
     if ((! valNeeded) && (type->flags & XML_SCHEMAS_TYPE_FACETSNEEDVALUE))
 	valNeeded = 1;
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2460]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2460\n");
+      else
+        fprintf(stderr, "reached bug index 2460\n");
+    }
+    if ((!FIXREVERTER[2460] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	value = BAD_CAST "";
+	#ifdef FRCOV
+	}
+	#endif
     if (WXS_IS_ANY_SIMPLE_TYPE(type) || WXS_IS_ATOMIC(type)) {
 	xmlSchemaTypePtr biType; /* The built-in type. */
 	/*
@@ -24536,11 +30617,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		(biType->type != XML_SCHEMA_TYPE_BASIC))
 		biType = biType->baseType;
 
-	    if (biType == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2461]) {
+	      if ((biType == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2461\n");
+	      else
+	        fprintf(stderr, "reached bug index 2461\n");
+	    }
+	    if ((!FIXREVERTER[2461] && (biType == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		    "could not get the built-in type");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	} else
 	    biType = type;
 	/*
@@ -24594,11 +30690,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 	    goto internal_error;
 	}
 	if (ret != 0) {
-	    if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2462]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2462\n");
+	      else
+	        fprintf(stderr, "reached bug index 2462\n");
+	    }
+	    if ((!FIXREVERTER[2462] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		    "validating against a built-in type");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (WXS_IS_LIST(type))
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 	    else
@@ -24612,11 +30723,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		(xmlSchemaValType) biType->builtInType, value, val,
 		0, fireErrors);
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2463]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2463\n");
+		  else
+		    fprintf(stderr, "reached bug index 2463\n");
+		}
+		if ((!FIXREVERTER[2463] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating facets of atomic simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		if (WXS_IS_LIST(type))
 		    ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 		else
@@ -24676,15 +30802,45 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		prevVal = curVal;
 		curVal = NULL;
 	    }
-	    if (ret != 0) {
-		if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2465]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2465\n");
+	      else
+	        fprintf(stderr, "reached bug index 2465\n");
+	    }
+	    if ((!FIXREVERTER[2465] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2464]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2464\n");
+		  else
+		    fprintf(stderr, "reached bug index 2464\n");
+		}
+		if ((!FIXREVERTER[2464] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating an item of list simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    cur = end;
 	} while (*cur != 0);
 	FREE_AND_NULL(tmpValue);
@@ -24696,11 +30852,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		XML_SCHEMAS_UNKNOWN, value, val,
 		len, fireErrors);
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2466]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2466\n");
+		  else
+		    fprintf(stderr, "reached bug index 2466\n");
+		}
+		if ((!FIXREVERTER[2466] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating facets of list simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 	    }
 	}
@@ -24731,11 +30902,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 	* {member type definitions}
 	*/
 	memberLink = xmlSchemaGetUnionSimpleTypeMemberTypes(type);
-	if (memberLink == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2467]) {
+	  if ((memberLink == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2467\n");
+	  else
+	    fprintf(stderr, "reached bug index 2467\n");
+	}
+	if ((!FIXREVERTER[2467] && (memberLink == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		"union simple type has no member types");
 	    goto internal_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Always normalize union type values, since we currently
 	* cannot store the whitespace information with the value
@@ -24749,16 +30935,46 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 	    else
 		ret = xmlSchemaVCheckCVCSimpleType(actxt, node,
 		    memberLink->type, value, NULL, 0, 1, 0);
-	    if (ret <= 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2468]) {
+	      if ((ret <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2468\n");
+	      else
+	        fprintf(stderr, "reached bug index 2468\n");
+	    }
+	    if ((!FIXREVERTER[2468] && (ret <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    memberLink = memberLink->next;
 	}
 	if (ret != 0) {
-	    if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2469]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2469\n");
+	      else
+	        fprintf(stderr, "reached bug index 2469\n");
+	    }
+	    if ((!FIXREVERTER[2469] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		    "validating members of union simple type");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3;
 	}
 	/*
@@ -24775,11 +30991,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		XML_SCHEMAS_UNKNOWN, value, val,
 		0, fireErrors);
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2470]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2470\n");
+		  else
+		    fprintf(stderr, "reached bug index 2470\n");
+		}
+		if ((!FIXREVERTER[2470] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating facets of union simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3;
 	    }
 	}
@@ -24813,8 +31044,23 @@ xmlSchemaVExpandQName(xmlSchemaValidCtxtPtr vctxt,
 {
     int ret = 0;
 
-    if ((nsName == NULL) || (localName == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2471]) {
+      if ((nsName == (void *) 0 || localName == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2471\n");
+      else
+        fprintf(stderr, "reached bug index 2471\n");
+    }
+    if ((!FIXREVERTER[2471] && (nsName == (void *) 0 || localName == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     *nsName = NULL;
     *localName = NULL;
 
@@ -24878,8 +31124,23 @@ xmlSchemaProcessXSIType(xmlSchemaValidCtxtPtr vctxt,
     *   (1.2.1.2.1) - (1.2.1.2.4)
     * Handle 'xsi:type'.
     */
-    if (localType == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2473]) {
+      if ((localType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2473\n");
+      else
+        fprintf(stderr, "reached bug index 2473\n");
+    }
+    if ((!FIXREVERTER[2473] && (localType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     *localType = NULL;
     if (iattr == NULL)
 	return (0);
@@ -24896,15 +31157,45 @@ xmlSchemaProcessXSIType(xmlSchemaValidCtxtPtr vctxt,
 	*/
 	ret = xmlSchemaVExpandQName(vctxt, iattr->value,
 	    &nsName, &local);
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2475]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2475\n");
+	  else
+	    fprintf(stderr, "reached bug index 2475\n");
+	}
+	if ((!FIXREVERTER[2475] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2474]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2474\n");
+	      else
+	        fprintf(stderr, "reached bug index 2474\n");
+	    }
+	    if ((!FIXREVERTER[2474] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateElementByDeclaration",
 		    "calling xmlSchemaQNameExpand() to validate the "
 		    "attribute 'xsi:type'");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* (cvc-elt) (3.3.4) : (4.2)
 	* (cvc-assess-elt) (1.2.1.2.3)
@@ -25003,11 +31294,26 @@ xmlSchemaValidateElemDecl(xmlSchemaValidCtxtPtr vctxt)
     /*
     * cvc-elt (3.3.4) : 1
     */
-    if (elemDecl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2476]) {
+      if ((elemDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2476\n");
+      else
+        fprintf(stderr, "reached bug index 2476\n");
+    }
+    if ((!FIXREVERTER[2476] && (elemDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR(XML_SCHEMAV_CVC_ELT_1, NULL,
 	    "No matching declaration available");
         return (vctxt->err);
     }
+    #ifdef FRCOV
+    }
+    #endif
     actualType = WXS_ELEM_TYPEDEF(elemDecl);
     /*
     * cvc-elt (3.3.4) : 2
@@ -25017,11 +31323,26 @@ xmlSchemaValidateElemDecl(xmlSchemaValidCtxtPtr vctxt)
 	    "The element declaration is abstract");
         return (vctxt->err);
     }
-    if (actualType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2477]) {
+      if ((actualType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2477\n");
+      else
+        fprintf(stderr, "reached bug index 2477\n");
+    }
+    if ((!FIXREVERTER[2477] && (actualType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR(XML_SCHEMAV_CVC_TYPE_1, NULL,
 	    "The type definition is absent");
 	return (XML_SCHEMAV_CVC_TYPE_1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (vctxt->nbAttrInfos != 0) {
 	int ret;
 	xmlSchemaAttrInfoPtr iattr;
@@ -25109,11 +31430,26 @@ xmlSchemaValidateElemDecl(xmlSchemaValidCtxtPtr vctxt)
     /*
     * No actual type definition.
     */
-    if (actualType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2479]) {
+      if ((actualType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2479\n");
+      else
+        fprintf(stderr, "reached bug index 2479\n");
+    }
+    if ((!FIXREVERTER[2479] && (actualType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR(XML_SCHEMAV_CVC_TYPE_1, NULL,
 	    "The type definition is absent");
 	return (XML_SCHEMAV_CVC_TYPE_1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Remember the actual type definition.
     */
@@ -25135,8 +31471,23 @@ xmlSchemaVAttributesSimple(xmlSchemaValidCtxtPtr vctxt)
     * whose local name is one of type, nil, schemaLocation or
     * noNamespaceSchemaLocation."
     */
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2480]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2480\n");
+      else
+        fprintf(stderr, "reached bug index 2480\n");
+    }
+    if ((!FIXREVERTER[2480] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	iattr = vctxt->attrInfos[i];
 	if (! iattr->metaType) {
@@ -25159,8 +31510,23 @@ xmlSchemaClearAttrInfos(xmlSchemaValidCtxtPtr vctxt)
     int i;
     xmlSchemaAttrInfoPtr attr;
 
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2481]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2481\n");
+      else
+        fprintf(stderr, "reached bug index 2481\n");
+    }
+    if ((!FIXREVERTER[2481] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	attr = vctxt->attrInfos[i];
 	if (attr->flags & XML_SCHEMA_NODE_INFO_FLAG_OWNED_NAMES) {
@@ -25291,12 +31657,27 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * item's [attributes] as per clause 3.1 above."
 	    */
 	    tmpiattr = xmlSchemaGetFreshAttrInfo(vctxt);
-	    if (tmpiattr == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2482]) {
+	      if ((tmpiattr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2482\n");
+	      else
+	        fprintf(stderr, "reached bug index 2482\n");
+	    }
+	    if ((!FIXREVERTER[2482] && (tmpiattr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT(
 		    "xmlSchemaVAttributesComplex",
 		    "calling xmlSchemaGetFreshAttrInfo()");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    tmpiattr->state = XML_SCHEMAS_ATTR_ERR_MISSING;
 	    tmpiattr->use = attrUse;
 	    tmpiattr->decl = attrDecl;
@@ -25307,12 +31688,27 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * Handle non-existent, optional, default/fixed attributes.
 	    */
 	    tmpiattr = xmlSchemaGetFreshAttrInfo(vctxt);
-	    if (tmpiattr == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2483]) {
+	      if ((tmpiattr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2483\n");
+	      else
+	        fprintf(stderr, "reached bug index 2483\n");
+	    }
+	    if ((!FIXREVERTER[2483] && (tmpiattr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT(
 		    "xmlSchemaVAttributesComplex",
 		    "calling xmlSchemaGetFreshAttrInfo()");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    tmpiattr->state = XML_SCHEMAS_ATTR_DEFAULT;
 	    tmpiattr->use = attrUse;
 	    tmpiattr->decl = attrDecl;
@@ -25322,8 +31718,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	}
     }
 
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2484]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2484\n");
+      else
+        fprintf(stderr, "reached bug index 2484\n");
+    }
+    if ((!FIXREVERTER[2484] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Validate against the wildcard.
     */
@@ -25338,8 +31749,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * SPEC (cvc-complex-type) (3)
 	    * Skip meta attributes.
 	    */
-	    if (iattr->state != XML_SCHEMAS_ATTR_UNKNOWN)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2485]) {
+	      if ((iattr -> state != 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2485\n");
+	      else
+	        fprintf(stderr, "reached bug index 2485\n");
+	    }
+	    if ((!FIXREVERTER[2485] && (iattr -> state != 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    /*
 	    * SPEC (cvc-complex-type)
 	    * (3.2.2) "The attribute information item must be `valid` with
@@ -25442,8 +31868,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	}
     }
 
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2487]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2487\n");
+      else
+        fprintf(stderr, "reached bug index 2487\n");
+    }
+    if ((!FIXREVERTER[2487] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Get the owner element; needed for creation of default attributes.
@@ -25470,10 +31911,25 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	/*
 	* VAL TODO: What to do if the type definition is missing?
 	*/
-	if (iattr->typeDef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2488]) {
+	  if ((iattr -> typeDef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2488\n");
+	  else
+	    fprintf(stderr, "reached bug index 2488\n");
+	}
+	if ((!FIXREVERTER[2488] && (iattr -> typeDef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    iattr->state = XML_SCHEMAS_ATTR_ERR_NO_TYPE;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	ACTIVATE_ATTRIBUTE(iattr);
 	fixed = 0;
@@ -25492,7 +31948,19 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    }
 	}
 
-	if (iattr->state == XML_SCHEMAS_ATTR_DEFAULT) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2492]) {
+	  if ((iattr -> state == 8 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2492\n");
+	  else
+	    fprintf(stderr, "reached bug index 2492\n");
+	}
+	if ((!FIXREVERTER[2492] && (iattr -> state == 8 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * Default/fixed attributes.
 	    * We need the value only if we need to resolve IDCs or
@@ -25510,18 +31978,48 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 		* IDCs will consume the precomputed default value,
 		* so we need to clone it.
 		*/
-		if (iattr->val == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2489]) {
+		  if ((iattr -> val == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2489\n");
+		  else
+		    fprintf(stderr, "reached bug index 2489\n");
+		}
+		if ((!FIXREVERTER[2489] && (iattr -> val == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaVAttributesComplex",
 			"default/fixed value on an attribute use was "
 			"not precomputed");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		iattr->val = xmlSchemaCopyValue(iattr->val);
-		if (iattr->val == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2490]) {
+		  if ((iattr -> val == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2490\n");
+		  else
+		    fprintf(stderr, "reached bug index 2490\n");
+		}
+		if ((!FIXREVERTER[2490] && (iattr -> val == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaVAttributesComplex",
 			"calling xmlSchemaCopyValue()");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 	    /*
 	    * PSVI: Add the default attribute to the current element.
@@ -25539,8 +32037,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 		*/
 		normValue = xmlSchemaNormalizeValue(iattr->typeDef,
 		    iattr->value);
-		if (normValue != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2491]) {
+		  if ((normValue != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2491\n");
+		  else
+		    fprintf(stderr, "reached bug index 2491\n");
+		}
+		if ((!FIXREVERTER[2491] && (normValue != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    value = BAD_CAST normValue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 
 		if (iattr->nsName == NULL) {
 		    if (xmlNewProp(defAttrOwnerElem,
@@ -25597,6 +32110,9 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    */
 	    goto eval_idcs;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Validate the value.
 	*/
@@ -25673,11 +32189,26 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * (4) "The item's *actual* value must match the *value* of
 	    * the {value constraint}, if it is present and fixed."
 	    */
-	    if (iattr->val == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2494]) {
+	      if ((iattr -> val == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2494\n");
+	      else
+	        fprintf(stderr, "reached bug index 2494\n");
+	    }
+	    if ((!FIXREVERTER[2494] && (iattr -> val == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/* VAL TODO: A value was not precomputed. */
 		TODO
 		goto eval_idcs;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if ((iattr->use != NULL) &&
 		(iattr->use->defValue != NULL)) {
 		if (iattr->use->defVal == NULL) {
@@ -25734,11 +32265,23 @@ eval_idcs:
     */
     for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	iattr = vctxt->attrInfos[i];
-	if ((iattr->state == XML_SCHEMAS_ATTR_META) ||
-	    (iattr->state == XML_SCHEMAS_ATTR_ASSESSED) ||
-	    (iattr->state == XML_SCHEMAS_ATTR_WILD_SKIP) ||
-	    (iattr->state == XML_SCHEMAS_ATTR_WILD_LAX_NO_DECL))
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2495]) {
+	  if ((iattr -> state == 17 || iattr -> state == 2 || iattr -> state == 13 || iattr -> state == 14 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2495\n");
+	  else
+	    fprintf(stderr, "reached bug index 2495\n");
+	}
+	if ((!FIXREVERTER[2495] && (iattr -> state == 17 || iattr -> state == 2 || iattr -> state == 13 || iattr -> state == 14 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ACTIVATE_ATTRIBUTE(iattr);
 	switch (iattr->state) {
 	    case XML_SCHEMAS_ATTR_ERR_MISSING: {
@@ -25813,7 +32356,19 @@ xmlSchemaValidateElemWildcard(xmlSchemaValidCtxtPtr vctxt,
 	return (-1);
     }
     *skip = 0;
-    if (wild->processContents == XML_SCHEMAS_ANY_SKIP) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2496]) {
+      if ((wild -> processContents == 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 2496\n");
+      else
+        fprintf(stderr, "reached bug index 2496\n");
+    }
+    if ((!FIXREVERTER[2496] && (wild -> processContents == 1 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* URGENT VAL TODO: Either we need to position the stream to the
 	* next sibling, or walk the whole subtree.
@@ -25821,6 +32376,9 @@ xmlSchemaValidateElemWildcard(xmlSchemaValidCtxtPtr vctxt,
 	*skip = 1;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     {
 	xmlSchemaElementPtr decl = NULL;
 
@@ -25831,13 +32389,28 @@ xmlSchemaValidateElemWildcard(xmlSchemaValidCtxtPtr vctxt,
 	    return (0);
 	}
     }
-    if (wild->processContents == XML_SCHEMAS_ANY_STRICT) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2497]) {
+      if ((wild -> processContents == 3 ) && !(0))
+        fprintf(stderr, "triggered bug index 2497\n");
+      else
+        fprintf(stderr, "reached bug index 2497\n");
+    }
+    if ((!FIXREVERTER[2497] && (wild -> processContents == 3 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/* VAL TODO: Change to proper error code. */
 	VERROR(XML_SCHEMAV_CVC_ELT_1, NULL, /* WXS_BASIC_CAST wild */
 	    "No matching global element declaration available, but "
 	    "demanded by the strict wildcard");
 	return (vctxt->err);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (vctxt->nbAttrInfos != 0) {
 	xmlSchemaAttrInfoPtr iattr;
 	/*
@@ -25975,11 +32548,26 @@ static int
 xmlSchemaValidatorPushElem(xmlSchemaValidCtxtPtr vctxt)
 {
     vctxt->inode = xmlSchemaGetFreshElemInfo(vctxt);
-    if (vctxt->inode == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2498]) {
+      if ((vctxt -> inode == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2498\n");
+      else
+        fprintf(stderr, "reached bug index 2498\n");
+    }
+    if ((!FIXREVERTER[2498] && (vctxt -> inode == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaValidatorPushElem",
 	    "calling xmlSchemaGetFreshElemInfo()");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     vctxt->nbAttrInfos = 0;
     return (0);
 }
@@ -26055,11 +32643,26 @@ xmlSchemaValidatorPopElem(xmlSchemaValidCtxtPtr vctxt)
 		    xmlRegNewExecCtxt(inode->typeDef->contModel,
 		    (xmlRegExecCallbacks) xmlSchemaVContentModelCallback,
 		    vctxt);
-		if (inode->regexCtxt == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2499]) {
+		  if ((inode -> regexCtxt == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2499\n");
+		  else
+		    fprintf(stderr, "reached bug index 2499\n");
+		}
+		if ((!FIXREVERTER[2499] && (inode -> regexCtxt == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaValidatorPopElem",
 			"failed to create a regex context");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 #ifdef DEBUG_AUTOMATA
 		xmlGenericError(xmlGenericErrorContext,
 		    "AUTOMATON create on '%s'\n", inode->localName);
@@ -26131,7 +32734,19 @@ character_content:
     /*
     * Check character content.
     */
-    if (inode->decl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2501]) {
+      if ((inode -> decl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2501\n");
+      else
+        fprintf(stderr, "reached bug index 2501\n");
+    }
+    if ((!FIXREVERTER[2501] && (inode -> decl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Speedup if no declaration exists.
 	*/
@@ -26143,13 +32758,31 @@ character_content:
 		inode, inode->typeDef->contentTypeDef,
 		inode->value);
 	}
-	if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2500]) {
+	  if ((ret < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2500\n");
+	  else
+	    fprintf(stderr, "reached bug index 2500\n");
+	}
+	if ((!FIXREVERTER[2500] && (ret < 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    VERROR_INT("xmlSchemaValidatorPopElem",
 		"calling xmlSchemaVCheckCVCSimpleType()");
 	    goto internal_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	goto end_elem;
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * cvc-elt (3.3.4) : 5
     * The appropriate case among the following must be true:
@@ -26180,14 +32813,44 @@ character_content:
 
 	    ret = xmlSchemaCheckCOSValidDefault(vctxt,
 		inode->decl->value, &(inode->val));
-	    if (ret != 0) {
-		if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2503]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2503\n");
+	      else
+	        fprintf(stderr, "reached bug index 2503\n");
+	    }
+	    if ((!FIXREVERTER[2503] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2502]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2502\n");
+		  else
+		    fprintf(stderr, "reached bug index 2502\n");
+		}
+		if ((!FIXREVERTER[2502] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaValidatorPopElem",
 			"calling xmlSchemaCheckCOSValidDefault()");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		goto end_elem;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Stop here, to avoid redundant validation of the value
 	    * (see following).
@@ -26210,14 +32873,44 @@ character_content:
 		inode, inode->typeDef->contentTypeDef,
 		inode->decl->value);
 	}
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2505]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2505\n");
+	  else
+	    fprintf(stderr, "reached bug index 2505\n");
+	}
+	if ((!FIXREVERTER[2505] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2504]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2504\n");
+	      else
+	        fprintf(stderr, "reached bug index 2504\n");
+	    }
+	    if ((!FIXREVERTER[2504] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidatorPopElem",
 		    "calling xmlSchemaVCheckCVCSimpleType()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto end_elem;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 default_psvi:
 	/*
@@ -26278,14 +32971,44 @@ default_psvi:
 	    ret = xmlSchemaVCheckINodeDataType(vctxt,
 		inode, inode->typeDef->contentTypeDef, inode->value);
 	}
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2507]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2507\n");
+	  else
+	    fprintf(stderr, "reached bug index 2507\n");
+	}
+	if ((!FIXREVERTER[2507] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2506]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2506\n");
+	      else
+	        fprintf(stderr, "reached bug index 2506\n");
+	    }
+	    if ((!FIXREVERTER[2506] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidatorPopElem",
 		    "calling xmlSchemaVCheckCVCSimpleType()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto end_elem;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* 5.2.2 If there is a fixed {value constraint} and clause 3.2 has
 	* not applied, all of the following must be true:
@@ -26368,12 +33091,42 @@ default_psvi:
     }
 
 end_elem:
-    if (vctxt->depth < 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2508]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2508\n");
+      else
+        fprintf(stderr, "reached bug index 2508\n");
+    }
+    if ((!FIXREVERTER[2508] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/* TODO: raise error? */
 	return (0);
     }
-    if (vctxt->depth == vctxt->skipDepth)
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2509]) {
+      if ((vctxt -> depth == vctxt -> skipDepth  ) && !(0))
+        fprintf(stderr, "triggered bug index 2509\n");
+      else
+        fprintf(stderr, "reached bug index 2509\n");
+    }
+    if ((!FIXREVERTER[2509] && (vctxt -> depth == vctxt -> skipDepth  ))
+    #else
+    if (0
+    #endif
+    )
 	vctxt->skipDepth = -1;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Evaluate the history of XPath state objects.
     */
@@ -26437,11 +33190,26 @@ end_elem:
     /*
     * Skip further processing if we are on the validation root.
     */
-    if (vctxt->depth == 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2510]) {
+      if ((vctxt -> depth == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2510\n");
+      else
+        fprintf(stderr, "reached bug index 2510\n");
+    }
+    if ((!FIXREVERTER[2510] && (vctxt -> depth == 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	vctxt->depth--;
 	vctxt->inode = NULL;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Reset the keyrefDepth if needed.
     */
@@ -26483,11 +33251,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
     xmlSchemaTypePtr ptype;
     int ret = 0;
 
-    if (vctxt->depth <= 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2511]) {
+      if ((vctxt -> depth <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2511\n");
+      else
+        fprintf(stderr, "reached bug index 2511\n");
+    }
+    if ((!FIXREVERTER[2511] && (vctxt -> depth <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaValidateChildElem",
 	    "not intended for the validation root");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     pielem = vctxt->elemInfos[vctxt->depth -1];
     if (pielem->flags & XML_SCHEMA_ELEM_INFO_EMPTY)
 	pielem->flags ^= XML_SCHEMA_ELEM_INFO_EMPTY;
@@ -26509,7 +33292,19 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 
     ptype = pielem->typeDef;
 
-    if (ptype->builtInType == XML_SCHEMAS_ANYTYPE) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2513]) {
+      if ((ptype -> builtInType == XML_SCHEMAS_ANYTYPE ) && !(0))
+        fprintf(stderr, "triggered bug index 2513\n");
+      else
+        fprintf(stderr, "reached bug index 2513\n");
+    }
+    if ((!FIXREVERTER[2513] && (ptype -> builtInType == XML_SCHEMAS_ANYTYPE ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Workaround for "anyType": we have currently no content model
 	* assigned for "anyType", so handle it explicitely.
@@ -26530,7 +33325,19 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 	    if (iattr != NULL) {
 		ret = xmlSchemaProcessXSIType(vctxt, iattr,
 		    &(vctxt->inode->typeDef), NULL);
-		if (ret != 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2512]) {
+		  if ((ret != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2512\n");
+		  else
+		    fprintf(stderr, "reached bug index 2512\n");
+		}
+		if ((!FIXREVERTER[2512] && (ret != 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    if (ret == -1) {
 			VERROR_INT("xmlSchemaValidateChildElem",
 			    "calling xmlSchemaProcessXSIType() to "
@@ -26539,6 +33346,9 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 		    }
 		    return (ret);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    } else {
 		 /*
 		 * Fallback to "anyType".
@@ -26556,6 +33366,9 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 	}
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     switch (ptype->contentType) {
 	case XML_SCHEMA_CONTENT_EMPTY:
@@ -26581,11 +33394,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 
 	    /* VAL TODO: Optimized "anyType" validation.*/
 
-	    if (ptype->contModel == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2514]) {
+	      if ((ptype -> contModel == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2514\n");
+	      else
+	        fprintf(stderr, "reached bug index 2514\n");
+	    }
+	    if ((!FIXREVERTER[2514] && (ptype -> contModel == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateChildElem",
 		    "type has elem content but no content model");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Safety belf for evaluation if the cont. model was already
 	    * examined to be invalid.
@@ -26604,11 +33432,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 		regexCtxt = xmlRegNewExecCtxt(ptype->contModel,
 		    (xmlRegExecCallbacks) xmlSchemaVContentModelCallback,
 		    vctxt);
-		if (regexCtxt == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2515]) {
+		  if ((regexCtxt == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2515\n");
+		  else
+		    fprintf(stderr, "reached bug index 2515\n");
+		}
+		if ((!FIXREVERTER[2515] && (regexCtxt == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaValidateChildElem",
 			"failed to create a regex context");
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		pielem->regexCtxt = regexCtxt;
 #ifdef DEBUG_AUTOMATA
 		xmlGenericError(xmlGenericErrorContext, "AUTOMATA create on '%s'\n",
@@ -26638,11 +33481,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 		"AUTOMATON push OK for '%s' on '%s'\n",
 		vctxt->inode->localName, pielem->localName);
 #endif
-	    if (vctxt->err == XML_SCHEMAV_INTERNAL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2516]) {
+	      if ((vctxt -> err == XML_SCHEMAV_INTERNAL ) && !(0))
+	        fprintf(stderr, "triggered bug index 2516\n");
+	      else
+	        fprintf(stderr, "reached bug index 2516\n");
+	    }
+	    if ((!FIXREVERTER[2516] && (vctxt -> err == XML_SCHEMAV_INTERNAL ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateChildElem",
 		    "calling xmlRegExecPushString2()");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (ret < 0) {
 		xmlRegExecErrInfo(regexCtxt, NULL, &nbval, &nbneg,
 		    &values[0], &terminal);
@@ -26812,8 +33670,23 @@ xmlSchemaVPushText(xmlSchemaValidCtxtPtr vctxt,
 		break;
 	}
     } else {
-	if (len < 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2517]) {
+	  if ((len < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2517\n");
+	  else
+	    fprintf(stderr, "reached bug index 2517\n");
+	}
+	if ((!FIXREVERTER[2517] && (len < 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    len = xmlStrlen(value);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Concat the value.
 	*/
@@ -26853,12 +33726,27 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
 	*   instantly stop the validation.
 	*/
 	ret = xmlSchemaAssembleByXSI(vctxt);
-	if (ret != 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2518]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2518\n");
+	  else
+	    fprintf(stderr, "reached bug index 2518\n");
+	}
+	if ((!FIXREVERTER[2518] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    if (ret == -1)
 		goto internal_error;
 	    vctxt->skipDepth = 0;
 	    return(ret);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         /*
          * Augment the IDC definitions for the main schema and all imported ones
          * NOTE: main schema is the first in the imported list
@@ -26871,16 +33759,61 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
 	* of the parent.
 	*/
 	ret = xmlSchemaValidateChildElem(vctxt);
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2520]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2520\n");
+	  else
+	    fprintf(stderr, "reached bug index 2520\n");
+	}
+	if ((!FIXREVERTER[2520] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2519]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2519\n");
+	      else
+	        fprintf(stderr, "reached bug index 2519\n");
+	    }
+	    if ((!FIXREVERTER[2519] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateElem",
 		    "calling xmlSchemaStreamValidateChildElement()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto exit;
 	}
-	if (vctxt->depth == vctxt->skipDepth)
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2521]) {
+	  if ((vctxt -> depth == vctxt -> skipDepth ) && !(0))
+	    fprintf(stderr, "triggered bug index 2521\n");
+	  else
+	    fprintf(stderr, "reached bug index 2521\n");
+	}
+	if ((!FIXREVERTER[2521] && (vctxt -> depth == vctxt -> skipDepth ))
+	#else
+	if (0
+	#endif
+	)
 	    goto exit;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((vctxt->inode->decl == NULL) &&
 	    (vctxt->inode->typeDef == NULL)) {
 	    VERROR_INT("xmlSchemaValidateElem",
@@ -26913,14 +33846,44 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
 	* Wildcards.
 	*/
 	ret = xmlSchemaValidateElemWildcard(vctxt, &skip);
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2523]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2523\n");
+	  else
+	    fprintf(stderr, "reached bug index 2523\n");
+	}
+	if ((!FIXREVERTER[2523] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2522]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2522\n");
+	      else
+	        fprintf(stderr, "reached bug index 2522\n");
+	    }
+	    if ((!FIXREVERTER[2522] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateElem",
 		    "calling xmlSchemaValidateElemWildcard()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (skip) {
 	    vctxt->skipDepth = vctxt->depth;
 	    goto exit;
@@ -26941,14 +33904,44 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
     * Validate against the declaration.
     */
     ret = xmlSchemaValidateElemDecl(vctxt);
-    if (ret != 0) {
-	if (ret < 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2525]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2525\n");
+      else
+        fprintf(stderr, "reached bug index 2525\n");
+    }
+    if ((!FIXREVERTER[2525] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2524]) {
+	  if ((ret < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2524\n");
+	  else
+	    fprintf(stderr, "reached bug index 2524\n");
+	}
+	if ((!FIXREVERTER[2524] && (ret < 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    VERROR_INT("xmlSchemaValidateElem",
 		"calling xmlSchemaValidateElemDecl()");
 	    goto internal_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	goto exit;
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Validate against the type definition.
     */
@@ -27011,8 +34004,23 @@ type_validation:
     ret = 0;
 
 exit:
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2526]) {
+      if ((ret != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2526\n");
+      else
+        fprintf(stderr, "reached bug index 2526\n");
+    }
+    if ((!FIXREVERTER[2526] && (ret != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	vctxt->skipDepth = vctxt->depth;
+	#ifdef FRCOV
+	}
+	#endif
     return (ret);
 internal_error:
     return (-1);
@@ -27227,8 +34235,23 @@ xmlSchemaSAXHandleText(void *ctx,
 {
     xmlSchemaValidCtxtPtr vctxt = (xmlSchemaValidCtxtPtr) ctx;
 
-    if (vctxt->depth < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2527]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2527\n");
+      else
+        fprintf(stderr, "reached bug index 2527\n");
+    }
+    if ((!FIXREVERTER[2527] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((vctxt->skipDepth != -1) && (vctxt->depth >= vctxt->skipDepth))
 	return;
     if (vctxt->inode->flags & XML_SCHEMA_ELEM_INFO_EMPTY)
@@ -27252,8 +34275,23 @@ xmlSchemaSAXHandleCDataSection(void *ctx,
 {
     xmlSchemaValidCtxtPtr vctxt = (xmlSchemaValidCtxtPtr) ctx;
 
-    if (vctxt->depth < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2528]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2528\n");
+      else
+        fprintf(stderr, "reached bug index 2528\n");
+    }
+    if ((!FIXREVERTER[2528] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((vctxt->skipDepth != -1) && (vctxt->depth >= vctxt->skipDepth))
 	return;
     if (vctxt->inode->flags & XML_SCHEMA_ELEM_INFO_EMPTY)
@@ -27273,8 +34311,23 @@ xmlSchemaSAXHandleReference(void *ctx ATTRIBUTE_UNUSED,
 {
     xmlSchemaValidCtxtPtr vctxt = (xmlSchemaValidCtxtPtr) ctx;
 
-    if (vctxt->depth < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2529]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2529\n");
+      else
+        fprintf(stderr, "reached bug index 2529\n");
+    }
+    if ((!FIXREVERTER[2529] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((vctxt->skipDepth != -1) && (vctxt->depth >= vctxt->skipDepth))
 	return;
     /* SAX VAL TODO: What to do here? */
@@ -27484,10 +34537,25 @@ xmlSchemaNewValidCtxt(xmlSchemaPtr schema)
     xmlSchemaValidCtxtPtr ret;
 
     ret = (xmlSchemaValidCtxtPtr) xmlMalloc(sizeof(xmlSchemaValidCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2535]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2535\n");
+      else
+        fprintf(stderr, "reached bug index 2535\n");
+    }
+    if ((!FIXREVERTER[2535] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaVErrMemory(NULL, "allocating validation context", NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaValidCtxt));
     ret->type = XML_SCHEMA_CTXT_VALIDATOR;
     ret->dict = xmlDictCreate();
@@ -27635,8 +34703,23 @@ xmlSchemaClearValidCtxt(xmlSchemaValidCtxtPtr vctxt)
 void
 xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr ctxt)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2539]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2539\n");
+      else
+        fprintf(stderr, "reached bug index 2539\n");
+    }
+    if ((!FIXREVERTER[2539] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->value != NULL)
         xmlSchemaFreeValue(ctxt->value);
     if (ctxt->pctxt != NULL)
@@ -27698,8 +34781,23 @@ xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr ctxt)
 
 	for (i = 0; i < ctxt->sizeElemInfos; i++) {
 	    ei = ctxt->elemInfos[i];
-	    if (ei == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2540]) {
+	      if ((ei == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2540\n");
+	      else
+	        fprintf(stderr, "reached bug index 2540\n");
+	    }
+	    if ((!FIXREVERTER[2540] && (ei == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    xmlSchemaClearElemInfo(ctxt, ei);
 	    xmlFree(ei);
 	}
@@ -27745,8 +34843,23 @@ xmlSchemaSetValidErrors(xmlSchemaValidCtxtPtr ctxt,
                         xmlSchemaValidityErrorFunc err,
                         xmlSchemaValidityWarningFunc warn, void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2542]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2542\n");
+      else
+        fprintf(stderr, "reached bug index 2542\n");
+    }
+    if ((!FIXREVERTER[2542] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->error = err;
     ctxt->warning = warn;
     ctxt->errCtxt = ctx;
@@ -27766,8 +34879,23 @@ void
 xmlSchemaSetValidStructuredErrors(xmlSchemaValidCtxtPtr ctxt,
 				  xmlStructuredErrorFunc serror, void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2543]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2543\n");
+      else
+        fprintf(stderr, "reached bug index 2543\n");
+    }
+    if ((!FIXREVERTER[2543] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 	ctxt->serror = serror;
     ctxt->error = NULL;
     ctxt->warning = NULL;
@@ -28446,8 +35574,23 @@ static void
 charactersSplit(void *ctx, const xmlChar *ch, int len)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2558]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2558\n");
+      else
+        fprintf(stderr, "reached bug index 2558\n");
+    }
+    if ((!FIXREVERTER[2558] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) && (ctxt->user_sax->characters != NULL))
 	ctxt->user_sax->characters(ctxt->user_data, ch, len);
     if (ctxt->ctxt != NULL)
@@ -28458,8 +35601,23 @@ static void
 ignorableWhitespaceSplit(void *ctx, const xmlChar *ch, int len)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2559]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2559\n");
+      else
+        fprintf(stderr, "reached bug index 2559\n");
+    }
+    if ((!FIXREVERTER[2559] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->ignorableWhitespace != NULL))
 	ctxt->user_sax->ignorableWhitespace(ctxt->user_data, ch, len);
@@ -28471,8 +35629,23 @@ static void
 cdataBlockSplit(void *ctx, const xmlChar *value, int len)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2560]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2560\n");
+      else
+        fprintf(stderr, "reached bug index 2560\n");
+    }
+    if ((!FIXREVERTER[2560] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->cdataBlock != NULL))
 	ctxt->user_sax->cdataBlock(ctxt->user_data, value, len);
@@ -28484,8 +35657,23 @@ static void
 referenceSplit(void *ctx, const xmlChar *name)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2561]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2561\n");
+      else
+        fprintf(stderr, "reached bug index 2561\n");
+    }
+    if ((!FIXREVERTER[2561] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt != NULL) && (ctxt->user_sax != NULL) &&
         (ctxt->user_sax->reference != NULL))
 	ctxt->user_sax->reference(ctxt->user_data, name);
@@ -28500,8 +35688,23 @@ startElementNsSplit(void *ctx, const xmlChar * localname,
 		    int nb_attributes, int nb_defaulted,
 		    const xmlChar ** attributes) {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2562]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2562\n");
+      else
+        fprintf(stderr, "reached bug index 2562\n");
+    }
+    if ((!FIXREVERTER[2562] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->startElementNs != NULL))
 	ctxt->user_sax->startElementNs(ctxt->user_data, localname, prefix,
@@ -28519,8 +35722,23 @@ static void
 endElementNsSplit(void *ctx, const xmlChar * localname,
 		    const xmlChar * prefix, const xmlChar * URI) {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2563]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2563\n");
+      else
+        fprintf(stderr, "reached bug index 2563\n");
+    }
+    if ((!FIXREVERTER[2563] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->endElementNs != NULL))
 	ctxt->user_sax->endElementNs(ctxt->user_data, localname, prefix, URI);
diff --git a/xmlschemastypes.c b/xmlschemastypes.c
index ff64f50a..be3fe580 100644
--- a/xmlschemastypes.c
+++ b/xmlschemastypes.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * schemastypes.c : implementation of the XML Schema Datatypes
  *             definition and validity checking
@@ -223,9 +227,24 @@ xmlSchemaNewValue(xmlSchemaValType type) {
     xmlSchemaValPtr value;
 
     value = (xmlSchemaValPtr) xmlMalloc(sizeof(xmlSchemaVal));
-    if (value == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2684]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2684\n");
+      else
+        fprintf(stderr, "reached bug index 2684\n");
+    }
+    if ((!FIXREVERTER[2684] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(value, 0, sizeof(xmlSchemaVal));
     value->type = type;
     return(value);
@@ -237,15 +256,45 @@ xmlSchemaNewMinLengthFacet(int value)
     xmlSchemaFacetPtr ret;
 
     ret = xmlSchemaNewFacet();
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2685]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2685\n");
+      else
+        fprintf(stderr, "reached bug index 2685\n");
+    }
+    if ((!FIXREVERTER[2685] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->type = XML_SCHEMA_FACET_MINLENGTH;
     ret->val = xmlSchemaNewValue(XML_SCHEMAS_NNINTEGER);
-    if (ret->val == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2686]) {
+      if ((ret -> val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2686\n");
+      else
+        fprintf(stderr, "reached bug index 2686\n");
+    }
+    if ((!FIXREVERTER[2686] && (ret -> val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->val->value.decimal.lo = value;
     return (ret);
 }
@@ -263,10 +312,25 @@ xmlSchemaInitBasicType(const char *name, xmlSchemaValType type,
     xmlSchemaTypePtr ret;
 
     ret = (xmlSchemaTypePtr) xmlMalloc(sizeof(xmlSchemaType));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2687]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2687\n");
+      else
+        fprintf(stderr, "reached bug index 2687\n");
+    }
+    if ((!FIXREVERTER[2687] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaTypeErrMemory(NULL, "could not initialize basic types");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaType));
     ret->name = (const xmlChar *)name;
     ret->targetNamespace = XML_SCHEMAS_NAMESPACE_NAME;
@@ -371,10 +435,25 @@ xmlSchemaAddParticle(void)
 
     ret = (xmlSchemaParticlePtr)
 	xmlMalloc(sizeof(xmlSchemaParticle));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2688]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2688\n");
+      else
+        fprintf(stderr, "reached bug index 2688\n");
+    }
+    if ((!FIXREVERTER[2688] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaTypeErrMemory(NULL, "allocating particle component");
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaParticle));
     ret->type = XML_SCHEMA_TYPE_PARTICLE;
     ret->minOccurs = 1;
@@ -413,32 +492,92 @@ xmlSchemaInitTypes(void)
 	xmlSchemaWildcardPtr wild;
 	/* First particle. */
 	particle = xmlSchemaAddParticle();
-	if (particle == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2690]) {
+	  if ((particle == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2690\n");
+	  else
+	    fprintf(stderr, "reached bug index 2690\n");
+	}
+	if ((!FIXREVERTER[2690] && (particle == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlSchemaTypeAnyTypeDef->subtypes = (xmlSchemaTypePtr) particle;
 	/* Sequence model group. */
 	sequence = (xmlSchemaModelGroupPtr)
 	    xmlMalloc(sizeof(xmlSchemaModelGroup));
-	if (sequence == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2691]) {
+	  if ((sequence == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2691\n");
+	  else
+	    fprintf(stderr, "reached bug index 2691\n");
+	}
+	if ((!FIXREVERTER[2691] && (sequence == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaTypeErrMemory(NULL, "allocating model group component");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(sequence, 0, sizeof(xmlSchemaModelGroup));
 	sequence->type = XML_SCHEMA_TYPE_SEQUENCE;
 	particle->children = (xmlSchemaTreeItemPtr) sequence;
 	/* Second particle. */
 	particle = xmlSchemaAddParticle();
-	if (particle == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2692]) {
+	  if ((particle == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2692\n");
+	  else
+	    fprintf(stderr, "reached bug index 2692\n");
+	}
+	if ((!FIXREVERTER[2692] && (particle == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	particle->minOccurs = 0;
 	particle->maxOccurs = UNBOUNDED;
 	sequence->children = (xmlSchemaTreeItemPtr) particle;
 	/* The wildcard */
 	wild = (xmlSchemaWildcardPtr) xmlMalloc(sizeof(xmlSchemaWildcard));
-	if (wild == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2693]) {
+	  if ((wild == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2693\n");
+	  else
+	    fprintf(stderr, "reached bug index 2693\n");
+	}
+	if ((!FIXREVERTER[2693] && (wild == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaTypeErrMemory(NULL, "allocating wildcard component");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(wild, 0, sizeof(xmlSchemaWildcard));
 	wild->type = XML_SCHEMA_TYPE_ANY;
 	wild->any = 1;
@@ -448,11 +587,26 @@ xmlSchemaInitTypes(void)
 	* Create the attribute wildcard.
 	*/
 	wild = (xmlSchemaWildcardPtr) xmlMalloc(sizeof(xmlSchemaWildcard));
-	if (wild == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2694]) {
+	  if ((wild == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2694\n");
+	  else
+	    fprintf(stderr, "reached bug index 2694\n");
+	}
+	if ((!FIXREVERTER[2694] && (wild == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaTypeErrMemory(NULL, "could not create an attribute "
 		"wildcard on anyType");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(wild, 0, sizeof(xmlSchemaWildcard));
 	wild->any = 1;
 	wild->processContents = XML_SCHEMAS_ANY_LAX;
@@ -659,8 +813,23 @@ xmlSchemaCleanupTypes(void) {
 int
 xmlSchemaIsBuiltInTypeFacet(xmlSchemaTypePtr type, int facetType)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2696]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2696\n");
+      else
+        fprintf(stderr, "reached bug index 2696\n");
+    }
+    if ((!FIXREVERTER[2696] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (type->type != XML_SCHEMA_TYPE_BASIC)
 	return (-1);
     switch (type->builtInType) {
@@ -850,8 +1019,23 @@ xmlSchemaGetBuiltInType(xmlSchemaValType type)
 int
 xmlSchemaValueAppend(xmlSchemaValPtr prev, xmlSchemaValPtr cur) {
 
-    if ((prev == NULL) || (cur == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2697]) {
+      if ((prev == (void *) 0 || cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2697\n");
+      else
+        fprintf(stderr, "reached bug index 2697\n");
+    }
+    if ((!FIXREVERTER[2697] && (prev == (void *) 0 || cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     prev->next = cur;
     return (0);
 }
@@ -868,8 +1052,23 @@ xmlSchemaValueAppend(xmlSchemaValPtr prev, xmlSchemaValPtr cur) {
 xmlSchemaValPtr
 xmlSchemaValueGetNext(xmlSchemaValPtr cur) {
 
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2698]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2698\n");
+      else
+        fprintf(stderr, "reached bug index 2698\n");
+    }
+    if ((!FIXREVERTER[2698] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return (cur->next);
 }
 
@@ -885,8 +1084,23 @@ xmlSchemaValueGetNext(xmlSchemaValPtr cur) {
 const xmlChar *
 xmlSchemaValueGetAsString(xmlSchemaValPtr val)
 {
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2699]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2699\n");
+      else
+        fprintf(stderr, "reached bug index 2699\n");
+    }
+    if ((!FIXREVERTER[2699] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     switch (val->type) {
 	case XML_SCHEMAS_STRING:
 	case XML_SCHEMAS_NORMSTRING:
@@ -971,8 +1185,23 @@ xmlSchemaNewNOTATIONValue(const xmlChar *name,
     xmlSchemaValPtr val;
 
     val = xmlSchemaNewValue(XML_SCHEMAS_NOTATION);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2701]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2701\n");
+      else
+        fprintf(stderr, "reached bug index 2701\n");
+    }
+    if ((!FIXREVERTER[2701] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     val->value.qname.name = (xmlChar *)name;
     if (ns != NULL)
@@ -997,8 +1226,23 @@ xmlSchemaNewQNameValue(const xmlChar *namespaceName,
     xmlSchemaValPtr val;
 
     val = xmlSchemaNewValue(XML_SCHEMAS_QNAME);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2702]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2702\n");
+      else
+        fprintf(stderr, "reached bug index 2702\n");
+    }
+    if ((!FIXREVERTER[2702] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     val->value.qname.name = (xmlChar *) localName;
     val->value.qname.uri = (xmlChar *) namespaceName;
@@ -1072,8 +1316,23 @@ xmlSchemaTypePtr
 xmlSchemaGetPredefinedType(const xmlChar *name, const xmlChar *ns) {
     if (xmlSchemaTypesInitialized == 0)
 	xmlSchemaInitTypes();
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2703]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2703\n");
+      else
+        fprintf(stderr, "reached bug index 2703\n");
+    }
+    if ((!FIXREVERTER[2703] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return((xmlSchemaTypePtr) xmlHashLookup2(xmlSchemaTypesBank, name, ns));
 }
 
@@ -1400,8 +1659,23 @@ _xmlSchemaParseTimeZone (xmlSchemaValDatePtr dt, const xmlChar **str) {
     const xmlChar *cur;
     int ret = 0;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2709]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2709\n");
+      else
+        fprintf(stderr, "reached bug index 2709\n");
+    }
+    if ((!FIXREVERTER[2709] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
     cur = *str;
 
     switch (*cur) {
@@ -1565,8 +1839,23 @@ xmlSchemaValidateDates (xmlSchemaValType type,
 	}							\
     }
 
-    if (dateTime == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2712]) {
+      if ((dateTime == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2712\n");
+      else
+        fprintf(stderr, "reached bug index 2712\n");
+    }
+    if ((!FIXREVERTER[2712] && (dateTime == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (collapse)
 	while IS_WSP_BLANK_CH(*cur) cur++;
@@ -1575,8 +1864,23 @@ xmlSchemaValidateDates (xmlSchemaValType type,
 	return 1;
 
     dt = xmlSchemaNewValue(XML_SCHEMAS_UNKNOWN);
-    if (dt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2713]) {
+      if ((dt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2713\n");
+      else
+        fprintf(stderr, "reached bug index 2713\n");
+    }
+    if ((!FIXREVERTER[2713] && (dt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     if ((cur[0] == '-') && (cur[1] == '-')) {
 	/*
@@ -1782,8 +2086,23 @@ xmlSchemaValidateDuration (xmlSchemaTypePtr type ATTRIBUTE_UNUSED,
     const xmlChar  desig[]  = {'Y', 'M', 'D', 'H', 'M', 'S'};
     const double   multi[]  = { 0.0, 0.0, 86400.0, 3600.0, 60.0, 1.0, 0.0};
 
-    if (duration == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2719]) {
+      if ((duration == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2719\n");
+      else
+        fprintf(stderr, "reached bug index 2719\n");
+    }
+    if ((!FIXREVERTER[2719] && (duration == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (collapse)
 	while IS_WSP_BLANK_CH(*cur) cur++;
@@ -1801,8 +2120,23 @@ xmlSchemaValidateDuration (xmlSchemaTypePtr type ATTRIBUTE_UNUSED,
 	return 1;
 
     dur = xmlSchemaNewValue(XML_SCHEMAS_DURATION);
-    if (dur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2720]) {
+      if ((dur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2720\n");
+      else
+        fprintf(stderr, "reached bug index 2720\n");
+    }
+    if ((!FIXREVERTER[2720] && (dur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     while (*cur != 0) {
 
@@ -1817,8 +2151,23 @@ xmlSchemaValidateDuration (xmlSchemaTypePtr type ATTRIBUTE_UNUSED,
                 cur++;
             } else
                 return 1;
-        } else if (seq == 3)
+        } else 
+        #ifdef FRCOV
+        {if (FIXREVERTER[2721]) {
+          if ((seq == 3 ) && !(0))
+            fprintf(stderr, "triggered bug index 2721\n");
+          else
+            fprintf(stderr, "reached bug index 2721\n");
+        }
+        if ((!FIXREVERTER[2721] && (seq == 3 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
 
         /* parse the number portion of the item */
         PARSE_NUM(num, cur, num_type);
@@ -1890,7 +2239,22 @@ static xmlChar *
 xmlSchemaStrip(const xmlChar *value) {
     const xmlChar *start = value, *end, *f;
 
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2722]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2722\n");
+      else
+        fprintf(stderr, "reached bug index 2722\n");
+    }
+    if ((!FIXREVERTER[2722] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while ((*start != 0) && (IS_BLANK_CH(*start))) start++;
     end = start;
     while (*end != 0) end++;
@@ -1915,8 +2279,23 @@ xmlSchemaWhiteSpaceReplace(const xmlChar *value) {
     const xmlChar *cur = value;
     xmlChar *ret = NULL, *mcur;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2723]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2723\n");
+      else
+        fprintf(stderr, "reached bug index 2723\n");
+    }
+    if ((!FIXREVERTER[2723] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     while ((*cur != 0) &&
 	(((*cur) != 0xd) && ((*cur) != 0x9) && ((*cur) != 0xa))) {
@@ -1949,7 +2328,22 @@ xmlSchemaCollapseString(const xmlChar *value) {
     xmlChar *g;
     int col = 0;
 
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2724]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2724\n");
+      else
+        fprintf(stderr, "reached bug index 2724\n");
+    }
+    if ((!FIXREVERTER[2724] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while ((*start != 0) && (IS_BLANK_CH(*start))) start++;
     end = start;
     while (*end != 0) {
@@ -1971,7 +2365,22 @@ xmlSchemaCollapseString(const xmlChar *value) {
 	return(xmlStrndup(start, end - start));
     }
     start = xmlStrdup(start);
-    if (start == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2725]) {
+      if ((start == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2725\n");
+      else
+        fprintf(stderr, "reached bug index 2725\n");
+    }
+    if ((!FIXREVERTER[2725] && (start == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     g = (xmlChar *) (start + col);
     end = g;
     while (*end != 0) {
@@ -2007,13 +2416,43 @@ xmlSchemaValAtomicListNode(xmlSchemaTypePtr type, const xmlChar *value,
     int nb_values = 0;
     int tmp = 0;
 
-    if (value == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2726]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2726\n");
+      else
+        fprintf(stderr, "reached bug index 2726\n");
+    }
+    if ((!FIXREVERTER[2726] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     val = xmlStrdup(value);
-    if (val == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2727]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2727\n");
+      else
+        fprintf(stderr, "reached bug index 2727\n");
+    }
+    if ((!FIXREVERTER[2727] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ret != NULL) {
         *ret = NULL;
     }
@@ -2033,10 +2472,25 @@ xmlSchemaValAtomicListNode(xmlSchemaTypePtr type, const xmlChar *value,
 	    while ((*cur != 0) && (!IS_BLANK_CH(*cur))) cur++;
 	}
     }
-    if (nb_values == 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2728]) {
+      if ((nb_values == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2728\n");
+      else
+        fprintf(stderr, "reached bug index 2728\n");
+    }
+    if ((!FIXREVERTER[2728] && (nb_values == 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(val);
 	return(nb_values);
     }
+    #ifdef FRCOV
+    }
+    #endif
     endval = cur;
     cur = val;
     while ((*cur == 0) && (cur != endval)) cur++;
@@ -2137,31 +2591,110 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 
     if (xmlSchemaTypesInitialized == 0)
         xmlSchemaInitTypes();
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2732]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2732\n");
+      else
+        fprintf(stderr, "reached bug index 2732\n");
+    }
+    if ((!FIXREVERTER[2732] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * validating a non existant text node is similar to validating
      * an empty one.
      */
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2733]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2733\n");
+      else
+        fprintf(stderr, "reached bug index 2733\n");
+    }
+    if ((!FIXREVERTER[2733] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         value = BAD_CAST "";
+        #ifdef FRCOV
+        }
+        #endif
 
     if (val != NULL)
         *val = NULL;
-    if ((flags == 0) && (value != NULL)) {
-
-        if ((type->builtInType != XML_SCHEMAS_STRING) &&
-	  (type->builtInType != XML_SCHEMAS_ANYTYPE) &&
-	  (type->builtInType != XML_SCHEMAS_ANYSIMPLETYPE)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2736]) {
+      fprintf(stderr, "reached bug index 2736\n");
+    }
+    if ((FIXREVERTER[2736] && (flags == 0 )) || (!FIXREVERTER[2736] && (flags == 0 && value != (void *) 0 ))
+    #else
+    if (flags == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(value != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2736\n");
+      #endif
+    
+
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2735]) {
+          fprintf(stderr, "reached bug index 2735\n");
+        }
+        if ((FIXREVERTER[2735] && (type -> builtInType != XML_SCHEMAS_STRING && type -> builtInType != XML_SCHEMAS_ANYTYPE )) || (!FIXREVERTER[2735] && (type -> builtInType != XML_SCHEMAS_STRING && type -> builtInType != XML_SCHEMAS_ANYTYPE && type -> builtInType != XML_SCHEMAS_ANYSIMPLETYPE ))
+        #else
+        if (type -> builtInType != XML_SCHEMAS_STRING && type -> builtInType != XML_SCHEMAS_ANYTYPE 
+        #endif
+        ) {
+	    
+	  #ifdef FRCOV
+	    if (!(type -> builtInType != XML_SCHEMAS_ANYSIMPLETYPE ))
+	      fprintf(stderr, "triggered bug index 2735\n");
+	    #endif
+	  
 	    if (type->builtInType == XML_SCHEMAS_NORMSTRING)
 		norm = xmlSchemaWhiteSpaceReplace(value);
             else
 		norm = xmlSchemaCollapseString(value);
-            if (norm != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2734]) {
+              if ((norm != (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2734\n");
+              else
+                fprintf(stderr, "reached bug index 2734\n");
+            }
+            if ((!FIXREVERTER[2734] && (norm != (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 value = norm;
+                #ifdef FRCOV
+                }
+                #endif
+        }
+        #ifdef FRCOV
         }
+        #endif
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     switch (type->builtInType) {
         case XML_SCHEMAS_UNKNOWN:
@@ -2210,8 +2743,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 			norm = xmlSchemaCollapseString(value);
 		    else if (ws == XML_SCHEMA_WHITESPACE_REPLACE)
 			norm = xmlSchemaWhiteSpaceReplace(value);
-		    if (norm != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2737]) {
+		      if ((norm != (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2737\n");
+		      else
+		        fprintf(stderr, "reached bug index 2737\n");
+		    }
+		    if ((!FIXREVERTER[2737] && (norm != (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			value = norm;
+			#ifdef FRCOV
+			}
+			#endif
 		}
 		v = xmlSchemaNewValue(XML_SCHEMAS_STRING);
 		if (v != NULL) {
@@ -2229,8 +2777,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 			    norm = xmlSchemaCollapseString(value);
 			else
 			    norm = xmlSchemaWhiteSpaceReplace(value);
-			if (norm != NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2738]) {
+			  if ((norm != (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 2738\n");
+			  else
+			    fprintf(stderr, "reached bug index 2738\n");
+			}
+			if ((!FIXREVERTER[2738] && (norm != (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    value = norm;
+			    #ifdef FRCOV
+			    }
+			    #endif
 		    }
 		} else {
 		    const xmlChar *cur = value;
@@ -2624,8 +3187,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
         case XML_SCHEMAS_LANGUAGE:
 	    if (normOnTheFly) {
 		norm = xmlSchemaCollapseString(value);
-		if (norm != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2739]) {
+		  if ((norm != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2739\n");
+		  else
+		    fprintf(stderr, "reached bug index 2739\n");
+		}
+		if ((!FIXREVERTER[2739] && (norm != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    value = norm;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
             if (xmlCheckLanguageID(value) == 1) {
                 if (val != NULL) {
@@ -2664,7 +3242,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
             goto done;
         case XML_SCHEMAS_NAME:
             ret = xmlValidateName(value, 1);
-            if ((ret == 0) && (val != NULL) && (value != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2740]) {
+              fprintf(stderr, "reached bug index 2740\n");
+            }
+            if ((FIXREVERTER[2740] && (ret == 0 && val != (void *) 0 )) || (!FIXREVERTER[2740] && (ret == 0 && val != (void *) 0 && value != (void *) 0 ))
+            #else
+            if (ret == 0 && val != (void *) 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(value != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 2740\n");
+              #endif
+            
 		v = xmlSchemaNewValue(XML_SCHEMAS_NAME);
 		if (v != NULL) {
 		     const xmlChar *start = value, *end;
@@ -2677,14 +3270,32 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 		    goto error;
 		}
             }
+            #ifdef FRCOV
+            }
+            #endif
             goto done;
         case XML_SCHEMAS_QNAME:{
                 const xmlChar *uri = NULL;
                 xmlChar *local = NULL;
 
                 ret = xmlValidateQName(value, 1);
-		if (ret != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2741]) {
+		  if ((ret != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2741\n");
+		  else
+		    fprintf(stderr, "reached bug index 2741\n");
+		}
+		if ((!FIXREVERTER[2741] && (ret != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto done;
+		    #ifdef FRCOV
+		    }
+		    #endif
                 if (node != NULL) {
                     xmlChar *prefix;
 		    xmlNsPtr ns;
@@ -2697,18 +3308,48 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 			    xmlFree(local);
 			goto return1;
 		    }
-		    if (ns != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2742]) {
+		      if ((ns != (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2742\n");
+		      else
+		        fprintf(stderr, "reached bug index 2742\n");
+		    }
+		    if ((!FIXREVERTER[2742] && (ns != (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			uri = ns->href;
+			#ifdef FRCOV
+			}
+			#endif
                     if (prefix != NULL)
                         xmlFree(prefix);
                 }
                 if (val != NULL) {
                     v = xmlSchemaNewValue(XML_SCHEMAS_QNAME);
-                    if (v == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2743]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2743\n");
+                      else
+                        fprintf(stderr, "reached bug index 2743\n");
+                    }
+                    if ((!FIXREVERTER[2743] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 			if (local != NULL)
 			    xmlFree(local);
 			goto error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    if (local != NULL)
 			v->value.qname.name = local;
 		    else
@@ -2723,7 +3364,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
             }
         case XML_SCHEMAS_NCNAME:
             ret = xmlValidateNCName(value, 1);
-            if ((ret == 0) && (val != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2744]) {
+              fprintf(stderr, "reached bug index 2744\n");
+            }
+            if ((FIXREVERTER[2744] && (ret == 0 )) || (!FIXREVERTER[2744] && (ret == 0 && val != (void *) 0 ))
+            #else
+            if (ret == 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(val != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 2744\n");
+              #endif
+            
                 v = xmlSchemaNewValue(XML_SCHEMAS_NCNAME);
                 if (v != NULL) {
                     v->value.str = xmlStrdup(value);
@@ -2732,10 +3388,28 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                     goto error;
                 }
             }
+            #ifdef FRCOV
+            }
+            #endif
             goto done;
         case XML_SCHEMAS_ID:
             ret = xmlValidateNCName(value, 1);
-            if ((ret == 0) && (val != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2745]) {
+              fprintf(stderr, "reached bug index 2745\n");
+            }
+            if ((FIXREVERTER[2745] && (ret == 0 )) || (!FIXREVERTER[2745] && (ret == 0 && val != (void *) 0 ))
+            #else
+            if (ret == 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(val != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 2745\n");
+              #endif
+            
                 v = xmlSchemaNewValue(XML_SCHEMAS_ID);
                 if (v != NULL) {
                     v->value.str = xmlStrdup(value);
@@ -2744,6 +3418,9 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                     goto error;
                 }
             }
+            #ifdef FRCOV
+            }
+            #endif
             if ((ret == 0) && (node != NULL) &&
                 (node->type == XML_ATTRIBUTE_NODE)) {
                 xmlAttrPtr attr = (xmlAttrPtr) node;
@@ -2771,13 +3448,46 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
             goto done;
         case XML_SCHEMAS_IDREF:
             ret = xmlValidateNCName(value, 1);
-            if ((ret == 0) && (val != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2747]) {
+              fprintf(stderr, "reached bug index 2747\n");
+            }
+            if ((FIXREVERTER[2747] && (ret == 0 )) || (!FIXREVERTER[2747] && (ret == 0 && val != (void *) 0 ))
+            #else
+            if (ret == 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(val != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 2747\n");
+              #endif
+            
 		v = xmlSchemaNewValue(XML_SCHEMAS_IDREF);
-		if (v == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2746]) {
+		  if ((v == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2746\n");
+		  else
+		    fprintf(stderr, "reached bug index 2746\n");
+		}
+		if ((!FIXREVERTER[2746] && (v == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		v->value.str = xmlStrdup(value);
 		*val = v;
             }
+            #ifdef FRCOV
+            }
+            #endif
             if ((ret == 0) && (node != NULL) &&
                 (node->type == XML_ATTRIBUTE_NODE)) {
                 xmlAttrPtr attr = (xmlAttrPtr) node;
@@ -2827,9 +3537,27 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                          XML_EXTERNAL_GENERAL_UNPARSED_ENTITY))
                         ret = 4;
                 }
-                if ((ret == 0) && (val != NULL)) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2748]) {
+                  fprintf(stderr, "reached bug index 2748\n");
+                }
+                if ((FIXREVERTER[2748] && (ret == 0 )) || (!FIXREVERTER[2748] && (ret == 0 && val != (void *) 0 ))
+                #else
+                if (ret == 0 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(val != (void *) 0 ))
+                    fprintf(stderr, "triggered bug index 2748\n");
+                  #endif
+                
                     TODO;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 if ((ret == 0) && (node != NULL) &&
                     (node->type == XML_ATTRIBUTE_NODE)) {
                     xmlAttrPtr attr = (xmlAttrPtr) node;
@@ -2839,8 +3567,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 goto done;
             }
         case XML_SCHEMAS_ENTITIES:
-            if ((node == NULL) || (node->doc == NULL))
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2749]) {
+              if ((node == (void *) 0 || node -> doc == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2749\n");
+              else
+                fprintf(stderr, "reached bug index 2749\n");
+            }
+            if ((!FIXREVERTER[2749] && (node == (void *) 0 || node -> doc == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto return3;
+                #ifdef FRCOV
+                }
+                #endif
             ret = xmlSchemaValAtomicListNode(xmlSchemaTypeEntityDef,
                                              value, val, node);
             if (ret <= 0)
@@ -2859,7 +3602,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 xmlChar *local = NULL;
 
                 ret = xmlValidateQName(value, 1);
-                if ((ret == 0) && (node != NULL)) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2751]) {
+                  fprintf(stderr, "reached bug index 2751\n");
+                }
+                if ((FIXREVERTER[2751] && (ret == 0 )) || (!FIXREVERTER[2751] && (ret == 0 && node != (void *) 0 ))
+                #else
+                if (ret == 0 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(node != (void *) 0 ))
+                    fprintf(stderr, "triggered bug index 2751\n");
+                  #endif
+                
                     xmlChar *prefix;
 
                     local = xmlSplitQName2(value, &prefix);
@@ -2869,14 +3627,32 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                         ns = xmlSearchNs(node->doc, node, prefix);
                         if (ns == NULL)
                             ret = 1;
-                        else if (val != NULL)
+                        else 
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[2750]) {
+                          if ((val != (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 2750\n");
+                          else
+                            fprintf(stderr, "reached bug index 2750\n");
+                        }
+                        if ((!FIXREVERTER[2750] && (val != (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             uri = xmlStrdup(ns->href);
+                            #ifdef FRCOV
+                            }
+                            #endif
                     }
                     if ((local != NULL) && ((val == NULL) || (ret != 0)))
                         xmlFree(local);
                     if (prefix != NULL)
                         xmlFree(prefix);
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 if ((node == NULL) || (node->doc == NULL))
                     ret = 3;
                 if (ret == 0) {
@@ -2886,7 +3662,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                     else
                         ret = 1;
                 }
-                if ((ret == 0) && (val != NULL)) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2752]) {
+                  fprintf(stderr, "reached bug index 2752\n");
+                }
+                if ((FIXREVERTER[2752] && (ret == 0 )) || (!FIXREVERTER[2752] && (ret == 0 && val != (void *) 0 ))
+                #else
+                if (ret == 0 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(val != (void *) 0 ))
+                    fprintf(stderr, "triggered bug index 2752\n");
+                  #endif
+                
                     v = xmlSchemaNewValue(XML_SCHEMAS_NOTATION);
                     if (v != NULL) {
                         if (local != NULL)
@@ -2905,6 +3696,9 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                         goto error;
                     }
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 goto done;
             }
         case XML_SCHEMAS_ANYURI:{
@@ -2913,8 +3707,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 		    xmlChar *tmpval, *cur;
 		    if (normOnTheFly) {
 			norm = xmlSchemaCollapseString(value);
-			if (norm != NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2753]) {
+			  if ((norm != (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 2753\n");
+			  else
+			    fprintf(stderr, "reached bug index 2753\n");
+			}
+			if ((!FIXREVERTER[2753] && (norm != (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    value = norm;
+			    #ifdef FRCOV
+			    }
+			    #endif
 		    }
 		    tmpval = xmlStrdup(value);
 		    for (cur = tmpval; *cur; ++cur) {
@@ -2927,15 +3736,45 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 		    }
                     uri = xmlParseURI((const char *) tmpval);
 		    xmlFree(tmpval);
-                    if (uri == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2754]) {
+                      if ((uri == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2754\n");
+                      else
+                        fprintf(stderr, "reached bug index 2754\n");
+                    }
+                    if ((!FIXREVERTER[2754] && (uri == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     xmlFreeURI(uri);
                 }
 
                 if (val != NULL) {
                     v = xmlSchemaNewValue(XML_SCHEMAS_ANYURI);
-                    if (v == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2755]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2755\n");
+                      else
+                        fprintf(stderr, "reached bug index 2755\n");
+                    }
+                    if ((!FIXREVERTER[2755] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     v->value.str = xmlStrdup(value);
                     *val = v;
                 }
@@ -2946,8 +3785,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 xmlChar *base;
                 int total, i = 0;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2756]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2756\n");
+                  else
+                    fprintf(stderr, "reached bug index 2756\n");
+                }
+                if ((!FIXREVERTER[2756] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
 		if (normOnTheFly)
 		    while IS_WSP_BLANK_CH(*cur) cur++;
@@ -2970,18 +3824,48 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 if (val != NULL) {
 
                     v = xmlSchemaNewValue(XML_SCHEMAS_HEXBINARY);
-                    if (v == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2757]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2757\n");
+                      else
+                        fprintf(stderr, "reached bug index 2757\n");
+                    }
+                    if ((!FIXREVERTER[2757] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
 		    /*
 		    * Copy only the normalized piece.
 		    * CRITICAL TODO: Check this.
 		    */
                     cur = xmlStrndup(start, i);
-                    if (cur == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2758]) {
+                      if ((cur == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2758\n");
+                      else
+                        fprintf(stderr, "reached bug index 2758\n");
+                    }
+                    if ((!FIXREVERTER[2758] && (cur == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 		        xmlSchemaTypeErrMemory(node, "allocating hexbin data");
                         xmlFree(v);
                         goto return1;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                     total = i / 2;      /* number of octets */
 
@@ -3018,8 +3902,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 xmlChar *base;
                 int total, i = 0, pad = 0;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2759]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2759\n");
+                  else
+                    fprintf(stderr, "reached bug index 2759\n");
+                }
+                if ((!FIXREVERTER[2759] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 for (; *cur; ++cur) {
                     int decc;
@@ -3100,16 +3999,46 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 
                 if (val != NULL) {
                     v = xmlSchemaNewValue(XML_SCHEMAS_BASE64BINARY);
-                    if (v == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2761]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2761\n");
+                      else
+                        fprintf(stderr, "reached bug index 2761\n");
+                    }
+                    if ((!FIXREVERTER[2761] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     base =
                         (xmlChar *) xmlMallocAtomic((i + pad + 1) *
                                                     sizeof(xmlChar));
-                    if (base == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2762]) {
+                      if ((base == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2762\n");
+                      else
+                        fprintf(stderr, "reached bug index 2762\n");
+                    }
+                    if ((!FIXREVERTER[2762] && (base == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 		        xmlSchemaTypeErrMemory(node, "allocating base64 data");
                         xmlFree(v);
                         goto return1;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     v->value.base64.str = base;
                     for (cur = value; *cur; ++cur)
                         if (_xmlSchemaBase64Decode(*cur) >= 0) {
@@ -3131,8 +4060,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 unsigned long lo, mi, hi;
                 int sign = 0;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2763]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2763\n");
+                  else
+                    fprintf(stderr, "reached bug index 2763\n");
+                }
+                if ((!FIXREVERTER[2763] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 		if (normOnTheFly)
 		    while IS_WSP_BLANK_CH(*cur) cur++;
                 if (*cur == '-') {
@@ -3141,8 +4085,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 } else if (*cur == '+')
                     cur++;
                 ret = xmlSchemaParseUInt(&cur, &lo, &mi, &hi);
-                if (ret < 0)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2764]) {
+                  if ((ret < 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2764\n");
+                  else
+                    fprintf(stderr, "reached bug index 2764\n");
+                }
+                if ((!FIXREVERTER[2764] && (ret < 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 		if (normOnTheFly)
 		    while IS_WSP_BLANK_CH(*cur) cur++;
                 if (*cur != 0)
@@ -3152,13 +4111,43 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                         ((hi != 0) || (mi != 0) || (lo != 0)))
                         goto return1;
                 } else if (type->builtInType == XML_SCHEMAS_PINTEGER) {
-                    if (sign == 1)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2765]) {
+                      if ((sign == 1 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2765\n");
+                      else
+                        fprintf(stderr, "reached bug index 2765\n");
+                    }
+                    if ((!FIXREVERTER[2765] && (sign == 1 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if ((hi == 0) && (mi == 0) && (lo == 0))
                         goto return1;
                 } else if (type->builtInType == XML_SCHEMAS_NINTEGER) {
-                    if (sign == 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2766]) {
+                      if ((sign == 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2766\n");
+                      else
+                        fprintf(stderr, "reached bug index 2766\n");
+                    }
+                    if ((!FIXREVERTER[2766] && (sign == 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if ((hi == 0) && (mi == 0) && (lo == 0))
                         goto return1;
                 } else if (type->builtInType == XML_SCHEMAS_NNINTEGER) {
@@ -3190,25 +4179,85 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 unsigned long lo, mi, hi;
                 int sign = 0;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2767]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2767\n");
+                  else
+                    fprintf(stderr, "reached bug index 2767\n");
+                }
+                if ((!FIXREVERTER[2767] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 if (*cur == '-') {
                     sign = 1;
                     cur++;
                 } else if (*cur == '+')
                     cur++;
                 ret = xmlSchemaParseUInt(&cur, &lo, &mi, &hi);
-                if (ret < 0)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2768]) {
+                  if ((ret < 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2768\n");
+                  else
+                    fprintf(stderr, "reached bug index 2768\n");
+                }
+                if ((!FIXREVERTER[2768] && (ret < 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 if (*cur != 0)
                     goto return1;
                 if (type->builtInType == XML_SCHEMAS_LONG) {
                     if (hi >= 922) {
-                        if (hi > 922)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[2769]) {
+                          if ((hi > 922 ) && !(0))
+                            fprintf(stderr, "triggered bug index 2769\n");
+                          else
+                            fprintf(stderr, "reached bug index 2769\n");
+                        }
+                        if ((!FIXREVERTER[2769] && (hi > 922 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             goto return1;
+                            #ifdef FRCOV
+                            }
+                            #endif
                         if (mi >= 33720368) {
-                            if (mi > 33720368)
+                            
+                            #ifdef FRCOV
+                            {if (FIXREVERTER[2770]) {
+                              if ((mi > 33720368 ) && !(0))
+                                fprintf(stderr, "triggered bug index 2770\n");
+                              else
+                                fprintf(stderr, "reached bug index 2770\n");
+                            }
+                            if ((!FIXREVERTER[2770] && (mi > 33720368 ))
+                            #else
+                            if (0
+                            #endif
+                            )
                                 goto return1;
+                                #ifdef FRCOV
+                                }
+                                #endif
                             if ((sign == 0) && (lo > 54775807))
                                 goto return1;
                             if ((sign == 1) && (lo > 54775808))
@@ -3216,26 +4265,86 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                         }
                     }
                 } else if (type->builtInType == XML_SCHEMAS_INT) {
-                    if (hi != 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2771]) {
+                      if ((hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2771\n");
+                      else
+                        fprintf(stderr, "reached bug index 2771\n");
+                    }
+                    if ((!FIXREVERTER[2771] && (hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if (mi >= 21) {
-                        if (mi > 21)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[2772]) {
+                          if ((mi > 21 ) && !(0))
+                            fprintf(stderr, "triggered bug index 2772\n");
+                          else
+                            fprintf(stderr, "reached bug index 2772\n");
+                        }
+                        if ((!FIXREVERTER[2772] && (mi > 21 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             goto return1;
+                            #ifdef FRCOV
+                            }
+                            #endif
                         if ((sign == 0) && (lo > 47483647))
                             goto return1;
                         if ((sign == 1) && (lo > 47483648))
                             goto return1;
                     }
                 } else if (type->builtInType == XML_SCHEMAS_SHORT) {
-                    if ((mi != 0) || (hi != 0))
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2773]) {
+                      if ((mi != 0 || hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2773\n");
+                      else
+                        fprintf(stderr, "reached bug index 2773\n");
+                    }
+                    if ((!FIXREVERTER[2773] && (mi != 0 || hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if ((sign == 1) && (lo > 32768))
                         goto return1;
                     if ((sign == 0) && (lo > 32767))
                         goto return1;
                 } else if (type->builtInType == XML_SCHEMAS_BYTE) {
-                    if ((mi != 0) || (hi != 0))
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2774]) {
+                      if ((mi != 0 || hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2774\n");
+                      else
+                        fprintf(stderr, "reached bug index 2774\n");
+                    }
+                    if ((!FIXREVERTER[2774] && (mi != 0 || hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if ((sign == 1) && (lo > 128))
                         goto return1;
                     if ((sign == 0) && (lo > 127))
@@ -3262,43 +4371,223 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 const xmlChar *cur = value;
                 unsigned long lo, mi, hi;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2775]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2775\n");
+                  else
+                    fprintf(stderr, "reached bug index 2775\n");
+                }
+                if ((!FIXREVERTER[2775] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 ret = xmlSchemaParseUInt(&cur, &lo, &mi, &hi);
-                if (ret < 0)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2776]) {
+                  if ((ret < 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2776\n");
+                  else
+                    fprintf(stderr, "reached bug index 2776\n");
+                }
+                if ((!FIXREVERTER[2776] && (ret < 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 if (*cur != 0)
                     goto return1;
                 if (type->builtInType == XML_SCHEMAS_ULONG) {
                     if (hi >= 1844) {
-                        if (hi > 1844)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[2777]) {
+                          if ((hi > 1844 ) && !(0))
+                            fprintf(stderr, "triggered bug index 2777\n");
+                          else
+                            fprintf(stderr, "reached bug index 2777\n");
+                        }
+                        if ((!FIXREVERTER[2777] && (hi > 1844 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             goto return1;
+                            #ifdef FRCOV
+                            }
+                            #endif
                         if (mi >= 67440737) {
-                            if (mi > 67440737)
+                            
+                            #ifdef FRCOV
+                            {if (FIXREVERTER[2778]) {
+                              if ((mi > 67440737 ) && !(0))
+                                fprintf(stderr, "triggered bug index 2778\n");
+                              else
+                                fprintf(stderr, "reached bug index 2778\n");
+                            }
+                            if ((!FIXREVERTER[2778] && (mi > 67440737 ))
+                            #else
+                            if (0
+                            #endif
+                            )
                                 goto return1;
-                            if (lo > 9551615)
+                                #ifdef FRCOV
+                                }
+                                #endif
+                            
+                            #ifdef FRCOV
+                            {if (FIXREVERTER[2779]) {
+                              if ((lo > 9551615 ) && !(0))
+                                fprintf(stderr, "triggered bug index 2779\n");
+                              else
+                                fprintf(stderr, "reached bug index 2779\n");
+                            }
+                            if ((!FIXREVERTER[2779] && (lo > 9551615 ))
+                            #else
+                            if (0
+                            #endif
+                            )
                                 goto return1;
+                                #ifdef FRCOV
+                                }
+                                #endif
                         }
                     }
                 } else if (type->builtInType == XML_SCHEMAS_UINT) {
-                    if (hi != 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2780]) {
+                      if ((hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2780\n");
+                      else
+                        fprintf(stderr, "reached bug index 2780\n");
+                    }
+                    if ((!FIXREVERTER[2780] && (hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if (mi >= 42) {
-                        if (mi > 42)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[2781]) {
+                          if ((mi > 42 ) && !(0))
+                            fprintf(stderr, "triggered bug index 2781\n");
+                          else
+                            fprintf(stderr, "reached bug index 2781\n");
+                        }
+                        if ((!FIXREVERTER[2781] && (mi > 42 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             goto return1;
-                        if (lo > 94967295)
+                            #ifdef FRCOV
+                            }
+                            #endif
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[2782]) {
+                          if ((lo > 94967295 ) && !(0))
+                            fprintf(stderr, "triggered bug index 2782\n");
+                          else
+                            fprintf(stderr, "reached bug index 2782\n");
+                        }
+                        if ((!FIXREVERTER[2782] && (lo > 94967295 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             goto return1;
+                            #ifdef FRCOV
+                            }
+                            #endif
                     }
                 } else if (type->builtInType == XML_SCHEMAS_USHORT) {
-                    if ((mi != 0) || (hi != 0))
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2783]) {
+                      if ((mi != 0 || hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2783\n");
+                      else
+                        fprintf(stderr, "reached bug index 2783\n");
+                    }
+                    if ((!FIXREVERTER[2783] && (mi != 0 || hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
-                    if (lo > 65535)
+                        #ifdef FRCOV
+                        }
+                        #endif
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2784]) {
+                      if ((lo > 65535 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2784\n");
+                      else
+                        fprintf(stderr, "reached bug index 2784\n");
+                    }
+                    if ((!FIXREVERTER[2784] && (lo > 65535 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                 } else if (type->builtInType == XML_SCHEMAS_UBYTE) {
-                    if ((mi != 0) || (hi != 0))
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2785]) {
+                      if ((mi != 0 || hi != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2785\n");
+                      else
+                        fprintf(stderr, "reached bug index 2785\n");
+                    }
+                    if ((!FIXREVERTER[2785] && (mi != 0 || hi != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
-                    if (lo > 255)
+                        #ifdef FRCOV
+                        }
+                        #endif
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2786]) {
+                      if ((lo > 255 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2786\n");
+                      else
+                        fprintf(stderr, "reached bug index 2786\n");
+                    }
+                    if ((!FIXREVERTER[2786] && (lo > 255 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                 }
                 if (val != NULL) {
                     v = xmlSchemaNewValue(type->builtInType);
@@ -3565,8 +4854,23 @@ xmlSchemaCompareDurations(xmlSchemaValPtr x, xmlSchemaValPtr y)
         { 0, 28, 59, 89, 120, 150, 181, 212, 242, 273, 303, 334, },
         { 0, 31, 62, 92, 123, 153, 184, 215, 245, 276, 306, 337} };
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2788]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2788\n");
+      else
+        fprintf(stderr, "reached bug index 2788\n");
+    }
+    if ((!FIXREVERTER[2788] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return -2;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* months */
     mon = x->value.dur.mon - y->value.dur.mon;
@@ -3655,8 +4959,23 @@ static xmlSchemaValPtr
 xmlSchemaDupVal (xmlSchemaValPtr v)
 {
     xmlSchemaValPtr ret = xmlSchemaNewValue(v->type);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2791]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2791\n");
+      else
+        fprintf(stderr, "reached bug index 2791\n");
+    }
+    if ((!FIXREVERTER[2791] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     memcpy(ret, v, sizeof(xmlSchemaVal));
     ret->next = NULL;
@@ -3758,35 +5077,110 @@ _xmlSchemaDateAdd (xmlSchemaValPtr dt, xmlSchemaValPtr dur)
     xmlSchemaValDatePtr r, d;
     xmlSchemaValDurationPtr u;
 
-    if ((dt == NULL) || (dur == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2792]) {
+      if ((dt == (void *) 0 || dur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2792\n");
+      else
+        fprintf(stderr, "reached bug index 2792\n");
+    }
+    if ((!FIXREVERTER[2792] && (dt == (void *) 0 || dur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = xmlSchemaNewValue(dt->type);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2793]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2793\n");
+      else
+        fprintf(stderr, "reached bug index 2793\n");
+    }
+    if ((!FIXREVERTER[2793] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* make a copy so we don't alter the original value */
     tmp = xmlSchemaDupVal(dt);
-    if (tmp == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2794]) {
+      if ((tmp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2794\n");
+      else
+        fprintf(stderr, "reached bug index 2794\n");
+    }
+    if ((!FIXREVERTER[2794] && (tmp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaFreeValue(ret);
         return NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     r = &(ret->value.date);
     d = &(tmp->value.date);
     u = &(dur->value.dur);
 
     /* normalization */
-    if (d->mon == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2795]) {
+      if ((d -> mon == 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2795\n");
+      else
+        fprintf(stderr, "reached bug index 2795\n");
+    }
+    if ((!FIXREVERTER[2795] && (d -> mon == 0  ))
+    #else
+    if (0
+    #endif
+    )
         d->mon = 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* normalize for time zone offset */
     u->sec -= (d->tzo * 60);
     d->tzo = 0;
 
     /* normalization */
-    if (d->day == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2796]) {
+      if ((d -> day == 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2796\n");
+      else
+        fprintf(stderr, "reached bug index 2796\n");
+    }
+    if ((!FIXREVERTER[2796] && (d -> day == 0  ))
+    #else
+    if (0
+    #endif
+    )
         d->day = 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* month */
     carry  = d->mon + u->mon;
@@ -3848,10 +5242,40 @@ _xmlSchemaDateAdd (xmlSchemaValPtr dt, xmlSchemaValPtr dur)
 	     * Coverity detected an overrun in daysInMonth
 	     * of size 12 at position 12 with index variable "((r)->mon - 1)"
 	     */
-	    if (tmon < 1)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2797]) {
+	      if ((tmon < 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2797\n");
+	      else
+	        fprintf(stderr, "reached bug index 2797\n");
+	    }
+	    if ((!FIXREVERTER[2797] && (tmon < 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        tmon = 1;
-	    if (tmon > 12)
+	        #ifdef FRCOV
+	        }
+	        #endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2798]) {
+	      if ((tmon > 12 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2798\n");
+	      else
+	        fprintf(stderr, "reached bug index 2798\n");
+	    }
+	    if ((!FIXREVERTER[2798] && (tmon > 12 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        tmon = 12;
+	        #ifdef FRCOV
+	        }
+	        #endif
             tempdays += MAX_DAYINMONTH(tyr, tmon);
             carry = -1;
         } else if (VALID_YEAR(r->year) && VALID_MONTH(r->mon) &&
@@ -3908,8 +5332,23 @@ xmlSchemaDateNormalize (xmlSchemaValPtr dt, double offset)
 {
     xmlSchemaValPtr dur, ret;
 
-    if (dt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2799]) {
+      if ((dt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2799\n");
+      else
+        fprintf(stderr, "reached bug index 2799\n");
+    }
+    if ((!FIXREVERTER[2799] && (dt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (((dt->type != XML_SCHEMAS_TIME) &&
          (dt->type != XML_SCHEMAS_DATETIME) &&
@@ -3917,14 +5356,44 @@ xmlSchemaDateNormalize (xmlSchemaValPtr dt, double offset)
         return xmlSchemaDupVal(dt);
 
     dur = xmlSchemaNewValue(XML_SCHEMAS_DURATION);
-    if (dur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2800]) {
+      if ((dur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2800\n");
+      else
+        fprintf(stderr, "reached bug index 2800\n");
+    }
+    if ((!FIXREVERTER[2800] && (dur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     dur->value.date.sec -= offset;
 
     ret = _xmlSchemaDateAdd(dt, dur);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2801]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2801\n");
+      else
+        fprintf(stderr, "reached bug index 2801\n");
+    }
+    if ((!FIXREVERTER[2801] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlSchemaFreeValue(dur);
 
@@ -3950,7 +5419,22 @@ _xmlSchemaDateCastYMToDays (const xmlSchemaValPtr dt)
     int mon;
 
     mon = dt->value.date.mon;
-    if (mon <= 0) mon = 1; /* normalization */
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2802]) {
+      if ((mon <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2802\n");
+      else
+        fprintf(stderr, "reached bug index 2802\n");
+    }
+    if ((!FIXREVERTER[2802] && (mon <= 0 ))
+    #else
+    if (0
+    #endif
+    ) mon = 1;
+    #ifdef FRCOV
+    }
+    #endif /* normalization */
 
     if (dt->value.date.year <= 0)
         ret = (dt->value.date.year * 365) +
@@ -3997,8 +5481,23 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
     xmlSchemaValPtr p1, p2, q1, q2;
     long p1d, p2d, q1d, q2d;
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2803]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2803\n");
+      else
+        fprintf(stderr, "reached bug index 2803\n");
+    }
+    if ((!FIXREVERTER[2803] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return -2;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (x->value.date.tz_flag) {
 
@@ -4038,8 +5537,23 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
 		    xmlSchemaFreeValue(p1);
 		    xmlSchemaFreeValue(q1);
 		    xmlSchemaFreeValue(q2);
-		    if (ret != 0)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2804]) {
+		      if ((ret != 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2804\n");
+		      else
+		        fprintf(stderr, "reached bug index 2804\n");
+		    }
+		    if ((!FIXREVERTER[2804] && (ret != 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        return(ret);
+		        #ifdef FRCOV
+		        }
+		        #endif
                 }
             } else {
 		xmlSchemaFreeValue(p1);
@@ -4084,8 +5598,23 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
 		xmlSchemaFreeValue(p1);
 		xmlSchemaFreeValue(q1);
 		xmlSchemaFreeValue(p2);
-		if (ret != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2805]) {
+		  if ((ret != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2805\n");
+		  else
+		    fprintf(stderr, "reached bug index 2805\n");
+		}
+		if ((!FIXREVERTER[2805] && (ret != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(ret);
+		    #ifdef FRCOV
+		    }
+		    #endif
             }
 	} else {
 	    xmlSchemaFreeValue(p1);
@@ -4567,10 +6096,40 @@ xmlSchemaCompareNormStrings(const xmlChar *x,
 	    while (IS_BLANK_CH(*y)) y++;
 	} else {
 	    tmp = *x++ - *y++;
-	    if (tmp < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2810]) {
+	      if ((tmp < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2810\n");
+	      else
+	        fprintf(stderr, "reached bug index 2810\n");
+	    }
+	    if ((!FIXREVERTER[2810] && (tmp < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
-	    if (tmp > 0)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2811]) {
+	      if ((tmp > 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2811\n");
+	      else
+	        fprintf(stderr, "reached bug index 2811\n");
+	    }
+	    if ((!FIXREVERTER[2811] && (tmp > 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(1);
+		#ifdef FRCOV
+		}
+		#endif
 	}
     }
     if (*x != 0) {
@@ -4600,8 +6159,23 @@ static int
 xmlSchemaCompareFloats(xmlSchemaValPtr x, xmlSchemaValPtr y) {
     double d1, d2;
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2812]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2812\n");
+      else
+        fprintf(stderr, "reached bug index 2812\n");
+    }
+    if ((!FIXREVERTER[2812] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-2);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Cast everything to doubles.
@@ -4701,8 +6275,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
         case XML_SCHEMAS_BYTE:
         case XML_SCHEMAS_UBYTE:
 	case XML_SCHEMAS_DECIMAL:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2813]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2813\n");
+	      else
+	        fprintf(stderr, "reached bug index 2813\n");
+	    }
+	    if ((!FIXREVERTER[2813] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
 	    if (ytype == xtype)
 		return(xmlSchemaCompareDecimals(x, y));
 	    if ((ytype == XML_SCHEMAS_DECIMAL) ||
@@ -4722,8 +6311,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 		return(xmlSchemaCompareDecimals(x, y));
 	    return(-2);
         case XML_SCHEMAS_DURATION:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2814]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2814\n");
+	      else
+	        fprintf(stderr, "reached bug index 2814\n");
+	    }
+	    if ((!FIXREVERTER[2814] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
 	    if (ytype == XML_SCHEMAS_DURATION)
                 return(xmlSchemaCompareDurations(x, y));
             return(-2);
@@ -4735,8 +6339,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
         case XML_SCHEMAS_GYEARMONTH:
         case XML_SCHEMAS_DATE:
         case XML_SCHEMAS_DATETIME:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2815]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2815\n");
+	      else
+	        fprintf(stderr, "reached bug index 2815\n");
+	    }
+	    if ((!FIXREVERTER[2815] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if ((ytype == XML_SCHEMAS_DATETIME)  ||
                 (ytype == XML_SCHEMAS_TIME)      ||
                 (ytype == XML_SCHEMAS_GDAY)      ||
@@ -4779,8 +6398,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	    */
 	    if (ytype == XML_SCHEMAS_QNAME) {
 		TODO
-		if (y == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2816]) {
+		  if ((y == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2816\n");
+		  else
+		    fprintf(stderr, "reached bug index 2816\n");
+		}
+		if ((!FIXREVERTER[2816] && (y == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(-2);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		return (-2);
 	    }
             if ((ytype == XML_SCHEMAS_ANYSIMPLETYPE) ||
@@ -4834,8 +6468,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	}
         case XML_SCHEMAS_QNAME:
 	case XML_SCHEMAS_NOTATION:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2817]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2817\n");
+	      else
+	        fprintf(stderr, "reached bug index 2817\n");
+	    }
+	    if ((!FIXREVERTER[2817] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if ((ytype == XML_SCHEMAS_QNAME) ||
 		(ytype == XML_SCHEMAS_NOTATION)) {
 		if ((xmlStrEqual(x->value.qname.name, y->value.qname.name)) &&
@@ -4846,15 +6495,45 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	    return (-2);
         case XML_SCHEMAS_FLOAT:
         case XML_SCHEMAS_DOUBLE:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2818]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2818\n");
+	      else
+	        fprintf(stderr, "reached bug index 2818\n");
+	    }
+	    if ((!FIXREVERTER[2818] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if ((ytype == XML_SCHEMAS_FLOAT) ||
                 (ytype == XML_SCHEMAS_DOUBLE))
                 return (xmlSchemaCompareFloats(x, y));
             return (-2);
         case XML_SCHEMAS_BOOLEAN:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2819]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2819\n");
+	      else
+	        fprintf(stderr, "reached bug index 2819\n");
+	    }
+	    if ((!FIXREVERTER[2819] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if (ytype == XML_SCHEMAS_BOOLEAN) {
 		if (x->value.b == y->value.b)
 		    return(0);
@@ -4864,8 +6543,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	    }
 	    return (-2);
         case XML_SCHEMAS_HEXBINARY:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2820]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2820\n");
+	      else
+	        fprintf(stderr, "reached bug index 2820\n");
+	    }
+	    if ((!FIXREVERTER[2820] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if (ytype == XML_SCHEMAS_HEXBINARY) {
 	        if (x->value.hex.total == y->value.hex.total) {
 		    int ret = xmlStrcmp(x->value.hex.str, y->value.hex.str);
@@ -4881,8 +6575,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
             }
             return (-2);
         case XML_SCHEMAS_BASE64BINARY:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2822]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2822\n");
+	      else
+	        fprintf(stderr, "reached bug index 2822\n");
+	    }
+	    if ((!FIXREVERTER[2822] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if (ytype == XML_SCHEMAS_BASE64BINARY) {
                 if (x->value.base64.total == y->value.base64.total) {
                     int ret = xmlStrcmp(x->value.base64.str,
@@ -4923,8 +6632,23 @@ int
 xmlSchemaCompareValues(xmlSchemaValPtr x, xmlSchemaValPtr y) {
     xmlSchemaWhitespaceValueType xws, yws;
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2823]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2823\n");
+      else
+        fprintf(stderr, "reached bug index 2823\n");
+    }
+    if ((!FIXREVERTER[2823] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-2);
+        #ifdef FRCOV
+        }
+        #endif
     if (x->type == XML_SCHEMAS_STRING)
 	xws = XML_SCHEMA_WHITESPACE_PRESERVE;
     else if (x->type == XML_SCHEMAS_NORMSTRING)
@@ -4961,8 +6685,23 @@ xmlSchemaCompareValuesWhtsp(xmlSchemaValPtr x,
 			    xmlSchemaValPtr y,
 			    xmlSchemaWhitespaceValueType yws)
 {
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2824]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2824\n");
+      else
+        fprintf(stderr, "reached bug index 2824\n");
+    }
+    if ((!FIXREVERTER[2824] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-2);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlSchemaCompareValuesInternal(x->type, x, NULL, xws, y->type,
 	y, NULL, yws));
 }
@@ -5006,8 +6745,23 @@ xmlSchemaNormLen(const xmlChar *value) {
     const xmlChar *utf;
     int ret = 0;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2825]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2825\n");
+      else
+        fprintf(stderr, "reached bug index 2825\n");
+    }
+    if ((!FIXREVERTER[2825] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     utf = value;
     while (IS_BLANK_CH(*utf)) utf++;
     while (*utf != 0) {
@@ -5053,8 +6807,23 @@ xmlSchemaGetFacetValueAsULong(xmlSchemaFacetPtr facet)
     /*
     * TODO: Check if this is a decimal.
     */
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2826]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2826\n");
+      else
+        fprintf(stderr, "reached bug index 2826\n");
+    }
+    if ((!FIXREVERTER[2826] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     return ((unsigned long) facet->val->value.decimal.lo);
 }
 
@@ -5076,8 +6845,23 @@ xmlSchemaValidateListSimpleTypeFacet(xmlSchemaFacetPtr facet,
 				     unsigned long actualLen,
 				     unsigned long *expectedLen)
 {
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2827]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2827\n");
+      else
+        fprintf(stderr, "reached bug index 2827\n");
+    }
+    if ((!FIXREVERTER[2827] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * TODO: Check if this will work with large numbers.
     * (compare value.decimal.mi and value.decimal.hi as well?).
@@ -5135,8 +6919,23 @@ xmlSchemaValidateLengthFacetInternal(xmlSchemaFacetPtr facet,
 {
     unsigned int len = 0;
 
-    if ((length == NULL) || (facet == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2828]) {
+      if ((length == (void *) 0 || facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2828\n");
+      else
+        fprintf(stderr, "reached bug index 2828\n");
+    }
+    if ((!FIXREVERTER[2828] && (length == (void *) 0 || facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     *length = 0;
     if ((facet->type != XML_SCHEMA_FACET_LENGTH) &&
 	(facet->type != XML_SCHEMA_FACET_MAXLENGTH) &&
@@ -5193,8 +6992,23 @@ xmlSchemaValidateLengthFacetInternal(xmlSchemaFacetPtr facet,
 		* FIXME: What exactly to do with anyURI?
 		*/
 	    case XML_SCHEMAS_ANYURI:
-		if (value != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2829]) {
+		  if ((value != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2829\n");
+		  else
+		    fprintf(stderr, "reached bug index 2829\n");
+		}
+		if ((!FIXREVERTER[2829] && (value != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    len = xmlSchemaNormLen(value);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_SCHEMAS_QNAME:
 	    case XML_SCHEMAS_NOTATION:
@@ -5304,8 +7118,23 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 {
     int ret;
 
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2831]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2831\n");
+      else
+        fprintf(stderr, "reached bug index 2831\n");
+    }
+    if ((!FIXREVERTER[2831] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     switch (facet->type) {
 	case XML_SCHEMA_FACET_PATTERN:
@@ -5313,13 +7142,58 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 	    * NOTE that for patterns, the @value needs to be the normalized
 	    * value, *not* the lexical initial value or the canonical value.
 	    */
-	    if (value == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2832]) {
+	      if ((value == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2832\n");
+	      else
+	        fprintf(stderr, "reached bug index 2832\n");
+	    }
+	    if ((!FIXREVERTER[2832] && (value == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
+		#ifdef FRCOV
+		}
+		#endif
 	    ret = xmlRegexpExec(facet->regexp, value);
-	    if (ret == 1)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2833]) {
+	      if ((ret == 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2833\n");
+	      else
+	        fprintf(stderr, "reached bug index 2833\n");
+	    }
+	    if ((!FIXREVERTER[2833] && (ret == 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
-	    if (ret == 0)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2834]) {
+	      if ((ret == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2834\n");
+	      else
+	        fprintf(stderr, "reached bug index 2834\n");
+	    }
+	    if ((!FIXREVERTER[2834] && (ret == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(XML_SCHEMAV_CVC_PATTERN_VALID);
+		#ifdef FRCOV
+		}
+		#endif
 	    return(ret);
 	case XML_SCHEMA_FACET_MAXEXCLUSIVE:
 	    ret = xmlSchemaCompareValues(val, facet->val);
@@ -5339,15 +7213,45 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 	    ret = xmlSchemaCompareValues(val, facet->val);
 	    if (ret == -2)
 		return(-1);
-	    if (ret == 1)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2835]) {
+	      if ((ret == 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2835\n");
+	      else
+	        fprintf(stderr, "reached bug index 2835\n");
+	    }
+	    if ((!FIXREVERTER[2835] && (ret == 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
+		#ifdef FRCOV
+		}
+		#endif
 	    return(XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID);
 	case XML_SCHEMA_FACET_MININCLUSIVE:
 	    ret = xmlSchemaCompareValues(val, facet->val);
 	    if (ret == -2)
 		return(-1);
-	    if ((ret == 1) || (ret == 0))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2836]) {
+	      if ((ret == 1 || ret == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2836\n");
+	      else
+	        fprintf(stderr, "reached bug index 2836\n");
+	    }
+	    if ((!FIXREVERTER[2836] && (ret == 1 || ret == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
+		#ifdef FRCOV
+		}
+		#endif
 	    return(XML_SCHEMAV_CVC_MININCLUSIVE_VALID);
 	case XML_SCHEMA_FACET_WHITESPACE:
 	    /* TODO whitespaces */
@@ -5373,8 +7277,23 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 		    value, ws);
 		if (ret == -2)
 		    return(-1);
-		if (ret == 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2837]) {
+		  if ((ret == 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2837\n");
+		  else
+		    fprintf(stderr, "reached bug index 2837\n");
+		}
+		if ((!FIXREVERTER[2837] && (ret == 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(0);
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	    return(XML_SCHEMAV_CVC_ENUMERATION_VALID);
 	case XML_SCHEMA_FACET_LENGTH:
@@ -5666,8 +7585,23 @@ xmlSchemaFormatFloat(double number, char buffer[], int buffersize)
 int
 xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 {
-    if ((retValue == NULL) || (val == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2839]) {
+      if ((retValue == (void *) 0 || val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2839\n");
+      else
+        fprintf(stderr, "reached bug index 2839\n");
+    }
+    if ((!FIXREVERTER[2839] && (retValue == (void *) 0 || val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     *retValue = NULL;
     switch (val->type) {
 	case XML_SCHEMAS_STRING:
@@ -5741,8 +7675,23 @@ xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 		if ((dec.frac == 0) || (dec.frac == dec.total))
 		    bufsize++;
 		buf = xmlMalloc(bufsize);
-		if (buf == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2840]) {
+		  if ((buf == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2840\n");
+		  else
+		    fprintf(stderr, "reached bug index 2840\n");
+		}
+		if ((!FIXREVERTER[2840] && (buf == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(-1);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		offs = buf;
 		if (dec.sign)
 		    *offs++ = '-';
@@ -5942,8 +7891,23 @@ xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 		    xmlSchemaValPtr norm;
 
 		    norm = xmlSchemaDateNormalize(val, 0);
-		    if (norm == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2841]) {
+		      if ((norm == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2841\n");
+		      else
+		        fprintf(stderr, "reached bug index 2841\n");
+		    }
+		    if ((!FIXREVERTER[2841] && (norm == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * TODO: Check if "%.14g" is portable.
 		    */
@@ -5971,8 +7935,23 @@ xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 		    xmlSchemaValPtr norm;
 
 		    norm = xmlSchemaDateNormalize(val, 0);
-		    if (norm == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2842]) {
+		      if ((norm == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2842\n");
+		      else
+		        fprintf(stderr, "reached bug index 2842\n");
+		    }
+		    if ((!FIXREVERTER[2842] && (norm == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * TODO: Append the canonical value of the
 		    * recoverable timezone and not "Z".
@@ -5999,8 +7978,23 @@ xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 		    xmlSchemaValPtr norm;
 
 		    norm = xmlSchemaDateNormalize(val, 0);
-		    if (norm == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2843]) {
+		      if ((norm == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2843\n");
+		      else
+		        fprintf(stderr, "reached bug index 2843\n");
+		    }
+		    if ((!FIXREVERTER[2843] && (norm == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * TODO: Check if "%.14g" is portable.
 		    */
@@ -6129,8 +8123,23 @@ xmlSchemaGetCanonValueWhtsp(xmlSchemaValPtr val,
 xmlSchemaValType
 xmlSchemaGetValType(xmlSchemaValPtr val)
 {
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2845]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2845\n");
+      else
+        fprintf(stderr, "reached bug index 2845\n");
+    }
+    if ((!FIXREVERTER[2845] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_SCHEMAS_UNKNOWN);
+        #ifdef FRCOV
+        }
+        #endif
     return (val->type);
 }
 
diff --git a/xmlstring.c b/xmlstring.c
index a37220d7..aa9374c5 100644
--- a/xmlstring.c
+++ b/xmlstring.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * string.c : an XML string utilities module
  *
@@ -41,12 +45,42 @@ xmlChar *
 xmlStrndup(const xmlChar *cur, int len) {
     xmlChar *ret;
 
-    if ((cur == NULL) || (len < 0)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2576]) {
+      if ((cur == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2576\n");
+      else
+        fprintf(stderr, "reached bug index 2576\n");
+    }
+    if ((!FIXREVERTER[2576] && (cur == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = (xmlChar *) xmlMallocAtomic((len + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2577]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2577\n");
+      else
+        fprintf(stderr, "reached bug index 2577\n");
+    }
+    if ((!FIXREVERTER[2577] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(NULL, NULL);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memcpy(ret, cur, len * sizeof(xmlChar));
     ret[len] = 0;
     return(ret);
@@ -86,12 +120,42 @@ xmlCharStrndup(const char *cur, int len) {
     int i;
     xmlChar *ret;
 
-    if ((cur == NULL) || (len < 0)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2579]) {
+      if ((cur == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2579\n");
+      else
+        fprintf(stderr, "reached bug index 2579\n");
+    }
+    if ((!FIXREVERTER[2579] && (cur == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = (xmlChar *) xmlMallocAtomic((len + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2580]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2580\n");
+      else
+        fprintf(stderr, "reached bug index 2580\n");
+    }
+    if ((!FIXREVERTER[2580] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(NULL, NULL);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     for (i = 0;i < len;i++) {
         ret[i] = (xmlChar) cur[i];
         if (ret[i] == 0) return(ret);
@@ -113,7 +177,22 @@ xmlChar *
 xmlCharStrdup(const char *cur) {
     const char *p = cur;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2581]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2581\n");
+      else
+        fprintf(stderr, "reached bug index 2581\n");
+    }
+    if ((!FIXREVERTER[2581] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while (*p != '\0') p++; /* non input consuming */
     return(xmlCharStrndup(cur, p - cur));
 }
@@ -133,8 +212,38 @@ xmlStrcmp(const xmlChar *str1, const xmlChar *str2) {
     register int tmp;
 
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2582]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2582\n");
+      else
+        fprintf(stderr, "reached bug index 2582\n");
+    }
+    if ((!FIXREVERTER[2582] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2583]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2583\n");
+      else
+        fprintf(stderr, "reached bug index 2583\n");
+    }
+    if ((!FIXREVERTER[2583] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
     do {
         tmp = *str1++ - *str2;
         if (tmp != 0) return(tmp);
@@ -156,8 +265,38 @@ xmlStrcmp(const xmlChar *str1, const xmlChar *str2) {
 int
 xmlStrEqual(const xmlChar *str1, const xmlChar *str2) {
     if (str1 == str2) return(1);
-    if (str1 == NULL) return(0);
-    if (str2 == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2585]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2585\n");
+      else
+        fprintf(stderr, "reached bug index 2585\n");
+    }
+    if ((!FIXREVERTER[2585] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2586]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2586\n");
+      else
+        fprintf(stderr, "reached bug index 2586\n");
+    }
+    if ((!FIXREVERTER[2586] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     do {
         if (*str1++ != *str2) return(0);
     } while (*str2++);
@@ -177,9 +316,54 @@ xmlStrEqual(const xmlChar *str1, const xmlChar *str2) {
 
 int
 xmlStrQEqual(const xmlChar *pref, const xmlChar *name, const xmlChar *str) {
-    if (pref == NULL) return(xmlStrEqual(name, str));
-    if (name == NULL) return(0);
-    if (str == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2587]) {
+      if ((pref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2587\n");
+      else
+        fprintf(stderr, "reached bug index 2587\n");
+    }
+    if ((!FIXREVERTER[2587] && (pref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(xmlStrEqual(name, str));
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2588]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2588\n");
+      else
+        fprintf(stderr, "reached bug index 2588\n");
+    }
+    if ((!FIXREVERTER[2588] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2589]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2589\n");
+      else
+        fprintf(stderr, "reached bug index 2589\n");
+    }
+    if ((!FIXREVERTER[2589] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     do {
         if (*pref++ != *str) return(0);
@@ -208,8 +392,38 @@ xmlStrncmp(const xmlChar *str1, const xmlChar *str2, int len) {
 
     if (len <= 0) return(0);
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2591]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2591\n");
+      else
+        fprintf(stderr, "reached bug index 2591\n");
+    }
+    if ((!FIXREVERTER[2591] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2592]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2592\n");
+      else
+        fprintf(stderr, "reached bug index 2592\n");
+    }
+    if ((!FIXREVERTER[2592] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef __GNUC__
     tmp = strncmp((const char *)str1, (const char *)str2, len);
     return tmp;
@@ -272,8 +486,38 @@ xmlStrcasecmp(const xmlChar *str1, const xmlChar *str2) {
     register int tmp;
 
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2593]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2593\n");
+      else
+        fprintf(stderr, "reached bug index 2593\n");
+    }
+    if ((!FIXREVERTER[2593] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2594]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2594\n");
+      else
+        fprintf(stderr, "reached bug index 2594\n");
+    }
+    if ((!FIXREVERTER[2594] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
     do {
         tmp = casemap[*str1++] - casemap[*str2];
         if (tmp != 0) return(tmp);
@@ -298,8 +542,38 @@ xmlStrncasecmp(const xmlChar *str1, const xmlChar *str2, int len) {
 
     if (len <= 0) return(0);
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2597]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2597\n");
+      else
+        fprintf(stderr, "reached bug index 2597\n");
+    }
+    if ((!FIXREVERTER[2597] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2598]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2598\n");
+      else
+        fprintf(stderr, "reached bug index 2598\n");
+    }
+    if ((!FIXREVERTER[2598] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
     do {
         tmp = casemap[*str1++] - casemap[*str2];
         if (tmp != 0 || --len == 0) return(tmp);
@@ -319,7 +593,22 @@ xmlStrncasecmp(const xmlChar *str1, const xmlChar *str2, int len) {
 
 const xmlChar *
 xmlStrchr(const xmlChar *str, xmlChar val) {
-    if (str == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2599]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2599\n");
+      else
+        fprintf(stderr, "reached bug index 2599\n");
+    }
+    if ((!FIXREVERTER[2599] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while (*str != 0) { /* non input consuming */
         if (*str == val) return((xmlChar *) str);
         str++;
@@ -341,8 +630,38 @@ const xmlChar *
 xmlStrstr(const xmlChar *str, const xmlChar *val) {
     int n;
 
-    if (str == NULL) return(NULL);
-    if (val == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2600]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2600\n");
+      else
+        fprintf(stderr, "reached bug index 2600\n");
+    }
+    if ((!FIXREVERTER[2600] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2601]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2601\n");
+      else
+        fprintf(stderr, "reached bug index 2601\n");
+    }
+    if ((!FIXREVERTER[2601] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     n = xmlStrlen(val);
 
     if (n == 0) return(str);
@@ -422,7 +741,22 @@ int
 xmlStrlen(const xmlChar *str) {
     int len = 0;
 
-    if (str == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2609]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2609\n");
+      else
+        fprintf(stderr, "reached bug index 2609\n");
+    }
+    if ((!FIXREVERTER[2609] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     while (*str != 0) { /* non input consuming */
         str++;
         len++;
@@ -449,19 +783,79 @@ xmlStrncat(xmlChar *cur, const xmlChar *add, int len) {
     int size;
     xmlChar *ret;
 
-    if ((add == NULL) || (len == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2610]) {
+      if ((add == (void *) 0 || len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2610\n");
+      else
+        fprintf(stderr, "reached bug index 2610\n");
+    }
+    if ((!FIXREVERTER[2610] && (add == (void *) 0 || len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(cur);
-    if (len < 0)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2611]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2611\n");
+      else
+        fprintf(stderr, "reached bug index 2611\n");
+    }
+    if ((!FIXREVERTER[2611] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (cur == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2612]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2612\n");
+      else
+        fprintf(stderr, "reached bug index 2612\n");
+    }
+    if ((!FIXREVERTER[2612] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrndup(add, len));
+        #ifdef FRCOV
+        }
+        #endif
 
     size = xmlStrlen(cur);
     ret = (xmlChar *) xmlRealloc(cur, (size + len + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2613]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2613\n");
+      else
+        fprintf(stderr, "reached bug index 2613\n");
+    }
+    if ((!FIXREVERTER[2613] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(NULL, NULL);
         return(cur);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memcpy(&ret[size], add, len * sizeof(xmlChar));
     ret[size + len] = 0;
     return(ret);
@@ -484,19 +878,79 @@ xmlStrncatNew(const xmlChar *str1, const xmlChar *str2, int len) {
     int size;
     xmlChar *ret;
 
-    if (len < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2614]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2614\n");
+      else
+        fprintf(stderr, "reached bug index 2614\n");
+    }
+    if ((!FIXREVERTER[2614] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
         len = xmlStrlen(str2);
-    if ((str2 == NULL) || (len == 0))
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2615]) {
+      if ((str2 == (void *) 0 || len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2615\n");
+      else
+        fprintf(stderr, "reached bug index 2615\n");
+    }
+    if ((!FIXREVERTER[2615] && (str2 == (void *) 0 || len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrdup(str1));
-    if (str1 == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2616]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2616\n");
+      else
+        fprintf(stderr, "reached bug index 2616\n");
+    }
+    if ((!FIXREVERTER[2616] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrndup(str2, len));
+        #ifdef FRCOV
+        }
+        #endif
 
     size = xmlStrlen(str1);
     ret = (xmlChar *) xmlMalloc((size + len + 1) * sizeof(xmlChar));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2617]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2617\n");
+      else
+        fprintf(stderr, "reached bug index 2617\n");
+    }
+    if ((!FIXREVERTER[2617] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(NULL, NULL);
         return(xmlStrndup(str1, size));
     }
+    #ifdef FRCOV
+    }
+    #endif
     memcpy(ret, str1, size * sizeof(xmlChar));
     memcpy(&ret[size], str2, len * sizeof(xmlChar));
     ret[size + len] = 0;
@@ -518,9 +972,39 @@ xmlChar *
 xmlStrcat(xmlChar *cur, const xmlChar *add) {
     const xmlChar *p = add;
 
-    if (add == NULL) return(cur);
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2618]) {
+      if ((add == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2618\n");
+      else
+        fprintf(stderr, "reached bug index 2618\n");
+    }
+    if ((!FIXREVERTER[2618] && (add == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(cur);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2619]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2619\n");
+      else
+        fprintf(stderr, "reached bug index 2619\n");
+    }
+    if ((!FIXREVERTER[2619] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrdup(add));
+        #ifdef FRCOV
+        }
+        #endif
 
     while (*p != 0) p++; /* non input consuming */
     return(xmlStrncat(cur, add, p - add));
@@ -542,9 +1026,24 @@ xmlStrPrintf(xmlChar *buf, int len, const xmlChar *msg, ...) {
     va_list args;
     int ret;
 
-    if((buf == NULL) || (msg == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2620]) {
+      if ((buf == (void *) 0 || msg == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2620\n");
+      else
+        fprintf(stderr, "reached bug index 2620\n");
+    }
+    if ((!FIXREVERTER[2620] && (buf == (void *) 0 || msg == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     va_start(args, msg);
     ret = vsnprintf((char *) buf, len, (const char *) msg, args);
@@ -658,8 +1157,23 @@ int
 xmlUTF8Strlen(const xmlChar *utf) {
     int ret = 0;
 
-    if (utf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2625]) {
+      if ((utf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2625\n");
+      else
+        fprintf(stderr, "reached bug index 2625\n");
+    }
+    if ((!FIXREVERTER[2625] && (utf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (*utf != 0) {
         if (utf[0] & 0x80) {
@@ -702,10 +1216,40 @@ int
 xmlGetUTF8Char(const unsigned char *utf, int *len) {
     unsigned int c;
 
-    if (utf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2626]) {
+      if ((utf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2626\n");
+      else
+        fprintf(stderr, "reached bug index 2626\n");
+    }
+    if ((!FIXREVERTER[2626] && (utf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
-    if (len == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2627]) {
+      if ((len == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2627\n");
+      else
+        fprintf(stderr, "reached bug index 2627\n");
+    }
+    if ((!FIXREVERTER[2627] && (len == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     if (*len < 1)
         goto error;
 
@@ -775,8 +1319,23 @@ xmlCheckUTF8(const unsigned char *utf)
     int ix;
     unsigned char c;
 
-    if (utf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2628]) {
+      if ((utf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2628\n");
+      else
+        fprintf(stderr, "reached bug index 2628\n");
+    }
+    if ((!FIXREVERTER[2628] && (utf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * utf is a string of 1, 2, 3 or 4 bytes.  The valid strings
      * are as follows (in "bit format"):
diff --git a/xmlunicode.c b/xmlunicode.c
index ce6e9a4f..ef555136 100644
--- a/xmlunicode.c
+++ b/xmlunicode.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xmlunicode.c: this module implements the Unicode character APIs
  *
@@ -947,7 +951,22 @@ static xmlIntFunc
     int low, high, mid, cmp;
     xmlUnicodeRange *sptr;
 
-    if ((tptr == NULL) || (tname == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5210]) {
+      if ((tptr == (void *) 0 || tname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5210\n");
+      else
+        fprintf(stderr, "reached bug index 5210\n");
+    }
+    if ((!FIXREVERTER[5210] && (tptr == (void *) 0 || tname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     low = 0;
     high = tptr->numentries - 1;
@@ -2644,8 +2663,23 @@ xmlUCSIsBlock(int code, const char *block) {
     xmlIntFunc *func;
 
     func = xmlUnicodeLookup(&xmlUnicodeBlockTbl, block);
-    if (func == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5211]) {
+      if ((func == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5211\n");
+      else
+        fprintf(stderr, "reached bug index 5211\n");
+    }
+    if ((!FIXREVERTER[5211] && (func == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     return (func(code));
 }
 
